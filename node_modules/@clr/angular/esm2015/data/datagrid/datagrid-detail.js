/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChild, HostListener } from '@angular/core';
import { DetailService } from './providers/detail.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrDatagridDetailHeader } from './datagrid-detail-header';
export class ClrDatagridDetail {
    constructor(detailService, commonStrings) {
        this.detailService = detailService;
        this.commonStrings = commonStrings;
    }
    closeCheck() {
        this.detailService.close();
    }
}
ClrDatagridDetail.decorators = [
    { type: Component, args: [{
                selector: 'clr-dg-detail',
                host: {
                    '[class.datagrid-detail-pane]': 'true',
                },
                // We put the *ngIf on the clrFocusTrap so it doesn't always exist on the page
                // have to test for presence of header for aria-describedby because it was causing unit tests to crash
                template: `
    <div
      [clrFocusTrap]="{ strict: false }"
      class="datagrid-detail-pane-content"
      *ngIf="detailService.isOpen"
      role="dialog"
      [id]="detailService.id"
      aria-modal="true"
      [attr.aria-describedby]="header ? header.titleId : ''"
    >
      <div class="clr-sr-only">{{ commonStrings.keys.detailPaneStart }}</div>
      <ng-content></ng-content>
      <div class="clr-sr-only">{{ commonStrings.keys.detailPaneEnd }}</div>
    </div>
  `
            },] }
];
ClrDatagridDetail.ctorParameters = () => [
    { type: DetailService },
    { type: ClrCommonStringsService }
];
ClrDatagridDetail.propDecorators = {
    header: [{ type: ContentChild, args: [ClrDatagridDetailHeader,] }],
    closeCheck: [{ type: HostListener, args: ['document:keyup.esc',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZGV0YWlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci9zcmMvZGF0YS9kYXRhZ3JpZC9kYXRhZ3JpZC1kZXRhaWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUF5Qm5FLE1BQU0sT0FBTyxpQkFBaUI7SUFHNUIsWUFBbUIsYUFBNEIsRUFBUyxhQUFzQztRQUEzRSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUFTLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtJQUFHLENBQUM7SUFHbEcsVUFBVTtRQUNSLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7O1lBL0JGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsSUFBSSxFQUFFO29CQUNKLDhCQUE4QixFQUFFLE1BQU07aUJBQ3ZDO2dCQUNELDhFQUE4RTtnQkFDOUUsc0dBQXNHO2dCQUN0RyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7O0dBY1Q7YUFDRjs7O1lBMUJRLGFBQWE7WUFDYix1QkFBdUI7OztxQkEyQjdCLFlBQVksU0FBQyx1QkFBdUI7eUJBSXBDLFlBQVksU0FBQyxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjIgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERldGFpbFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kZXRhaWwuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBDbHJEYXRhZ3JpZERldGFpbEhlYWRlciB9IGZyb20gJy4vZGF0YWdyaWQtZGV0YWlsLWhlYWRlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Nsci1kZy1kZXRhaWwnLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5kYXRhZ3JpZC1kZXRhaWwtcGFuZV0nOiAndHJ1ZScsXG4gIH0sXG4gIC8vIFdlIHB1dCB0aGUgKm5nSWYgb24gdGhlIGNsckZvY3VzVHJhcCBzbyBpdCBkb2Vzbid0IGFsd2F5cyBleGlzdCBvbiB0aGUgcGFnZVxuICAvLyBoYXZlIHRvIHRlc3QgZm9yIHByZXNlbmNlIG9mIGhlYWRlciBmb3IgYXJpYS1kZXNjcmliZWRieSBiZWNhdXNlIGl0IHdhcyBjYXVzaW5nIHVuaXQgdGVzdHMgdG8gY3Jhc2hcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2XG4gICAgICBbY2xyRm9jdXNUcmFwXT1cInsgc3RyaWN0OiBmYWxzZSB9XCJcbiAgICAgIGNsYXNzPVwiZGF0YWdyaWQtZGV0YWlsLXBhbmUtY29udGVudFwiXG4gICAgICAqbmdJZj1cImRldGFpbFNlcnZpY2UuaXNPcGVuXCJcbiAgICAgIHJvbGU9XCJkaWFsb2dcIlxuICAgICAgW2lkXT1cImRldGFpbFNlcnZpY2UuaWRcIlxuICAgICAgYXJpYS1tb2RhbD1cInRydWVcIlxuICAgICAgW2F0dHIuYXJpYS1kZXNjcmliZWRieV09XCJoZWFkZXIgPyBoZWFkZXIudGl0bGVJZCA6ICcnXCJcbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2xyLXNyLW9ubHlcIj57eyBjb21tb25TdHJpbmdzLmtleXMuZGV0YWlsUGFuZVN0YXJ0IH19PC9kaXY+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2xyLXNyLW9ubHlcIj57eyBjb21tb25TdHJpbmdzLmtleXMuZGV0YWlsUGFuZUVuZCB9fTwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxufSlcbmV4cG9ydCBjbGFzcyBDbHJEYXRhZ3JpZERldGFpbCB7XG4gIEBDb250ZW50Q2hpbGQoQ2xyRGF0YWdyaWREZXRhaWxIZWFkZXIpIHB1YmxpYyBoZWFkZXI6IENsckRhdGFncmlkRGV0YWlsSGVhZGVyO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkZXRhaWxTZXJ2aWNlOiBEZXRhaWxTZXJ2aWNlLCBwdWJsaWMgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5dXAuZXNjJylcbiAgY2xvc2VDaGVjaygpOiB2b2lkIHtcbiAgICB0aGlzLmRldGFpbFNlcnZpY2UuY2xvc2UoKTtcbiAgfVxufVxuIl19