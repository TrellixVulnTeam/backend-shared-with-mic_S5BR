/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { ALL_COLUMN_CHANGES } from '../enums/column-changes.enum';
export class ColumnsService {
    constructor() {
        this.columns = [];
        this._cache = [];
    }
    cache() {
        this._cache = this.columns.map(subject => {
            const value = Object.assign({}, subject.value);
            delete value.changes;
            return value;
        });
    }
    hasCache() {
        return !!this._cache.length;
    }
    resetToLastCache() {
        this._cache.forEach((state, index) => {
            // Just emit the exact value from the cache
            this.columns[index].next(Object.assign(Object.assign({}, state), { changes: ALL_COLUMN_CHANGES }));
        });
        this._cache = [];
    }
    get columnStates() {
        return this.columns.map(column => column.value);
    }
    get hasHideableColumns() {
        return this.columnStates.filter(state => state.hideable).length > 0;
    }
    // Helper method to emit a change to a column only when there is an actual diff to process for that column
    emitStateChangeAt(columnIndex, diff) {
        if (!this.columns[columnIndex]) {
            return;
        }
        this.emitStateChange(this.columns[columnIndex], diff);
    }
    emitStateChange(column, diff) {
        column.next(Object.assign(Object.assign({}, column.value), diff));
    }
}
ColumnsService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci9zcmMvZGF0YS9kYXRhZ3JpZC9wcm92aWRlcnMvY29sdW1ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBR2xFLE1BQU0sT0FBTyxjQUFjO0lBRDNCO1FBRUUsWUFBTyxHQUFtQyxFQUFFLENBQUM7UUFDckMsV0FBTSxHQUFrQixFQUFFLENBQUM7SUF5Q3JDLENBQUM7SUF2Q0MsS0FBSztRQUNILElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDdkMsTUFBTSxLQUFLLHFCQUFRLE9BQU8sQ0FBQyxLQUFLLENBQUUsQ0FBQztZQUNuQyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDckIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDOUIsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ25DLDJDQUEyQztZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksaUNBQU0sS0FBSyxLQUFFLE9BQU8sRUFBRSxrQkFBa0IsSUFBRyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQUksa0JBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsMEdBQTBHO0lBQzFHLGlCQUFpQixDQUFDLFdBQW1CLEVBQUUsSUFBcUI7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDOUIsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxlQUFlLENBQUMsTUFBb0MsRUFBRSxJQUFxQjtRQUN6RSxNQUFNLENBQUMsSUFBSSxpQ0FBTSxNQUFNLENBQUMsS0FBSyxHQUFLLElBQUksRUFBRyxDQUFDO0lBQzVDLENBQUM7OztZQTNDRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIyIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbHVtblN0YXRlRGlmZiwgQ29sdW1uU3RhdGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvbHVtbi1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQUxMX0NPTFVNTl9DSEFOR0VTIH0gZnJvbSAnLi4vZW51bXMvY29sdW1uLWNoYW5nZXMuZW51bSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2x1bW5zU2VydmljZSB7XG4gIGNvbHVtbnM6IEJlaGF2aW9yU3ViamVjdDxDb2x1bW5TdGF0ZT5bXSA9IFtdO1xuICBwcml2YXRlIF9jYWNoZTogQ29sdW1uU3RhdGVbXSA9IFtdO1xuXG4gIGNhY2hlKCkge1xuICAgIHRoaXMuX2NhY2hlID0gdGhpcy5jb2x1bW5zLm1hcChzdWJqZWN0ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0geyAuLi5zdWJqZWN0LnZhbHVlIH07XG4gICAgICBkZWxldGUgdmFsdWUuY2hhbmdlcztcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhc0NhY2hlKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2NhY2hlLmxlbmd0aDtcbiAgfVxuXG4gIHJlc2V0VG9MYXN0Q2FjaGUoKSB7XG4gICAgdGhpcy5fY2FjaGUuZm9yRWFjaCgoc3RhdGUsIGluZGV4KSA9PiB7XG4gICAgICAvLyBKdXN0IGVtaXQgdGhlIGV4YWN0IHZhbHVlIGZyb20gdGhlIGNhY2hlXG4gICAgICB0aGlzLmNvbHVtbnNbaW5kZXhdLm5leHQoeyAuLi5zdGF0ZSwgY2hhbmdlczogQUxMX0NPTFVNTl9DSEFOR0VTIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuX2NhY2hlID0gW107XG4gIH1cblxuICBnZXQgY29sdW1uU3RhdGVzKCk6IENvbHVtblN0YXRlW10ge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbnMubWFwKGNvbHVtbiA9PiBjb2x1bW4udmFsdWUpO1xuICB9XG5cbiAgZ2V0IGhhc0hpZGVhYmxlQ29sdW1ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5TdGF0ZXMuZmlsdGVyKHN0YXRlID0+IHN0YXRlLmhpZGVhYmxlKS5sZW5ndGggPiAwO1xuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZCB0byBlbWl0IGEgY2hhbmdlIHRvIGEgY29sdW1uIG9ubHkgd2hlbiB0aGVyZSBpcyBhbiBhY3R1YWwgZGlmZiB0byBwcm9jZXNzIGZvciB0aGF0IGNvbHVtblxuICBlbWl0U3RhdGVDaGFuZ2VBdChjb2x1bW5JbmRleDogbnVtYmVyLCBkaWZmOiBDb2x1bW5TdGF0ZURpZmYpIHtcbiAgICBpZiAoIXRoaXMuY29sdW1uc1tjb2x1bW5JbmRleF0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbWl0U3RhdGVDaGFuZ2UodGhpcy5jb2x1bW5zW2NvbHVtbkluZGV4XSwgZGlmZik7XG4gIH1cblxuICBlbWl0U3RhdGVDaGFuZ2UoY29sdW1uOiBCZWhhdmlvclN1YmplY3Q8Q29sdW1uU3RhdGU+LCBkaWZmOiBDb2x1bW5TdGF0ZURpZmYpIHtcbiAgICBjb2x1bW4ubmV4dCh7IC4uLmNvbHVtbi52YWx1ZSwgLi4uZGlmZiB9KTtcbiAgfVxufVxuIl19