"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBus = void 0;
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const request_context_1 = require("../api/common/request-context");
const constants_1 = require("../common/constants");
const transaction_subscriber_1 = require("../connection/transaction-subscriber");
let EventBus = class EventBus {
    constructor(transactionSubscriber) {
        this.transactionSubscriber = transactionSubscriber;
        this.eventStream = new rxjs_1.Subject();
        this.destroy$ = new rxjs_1.Subject();
    }
    publish(event) {
        this.eventStream.next(event);
    }
    ofType(type) {
        return this.eventStream.asObservable().pipe(operators_1.takeUntil(this.destroy$), operators_1.filter(e => e.constructor === type), operators_1.mergeMap(event => this.awaitActiveTransactions(event)));
    }
    onModuleDestroy() {
        this.destroy$.next();
    }
    async awaitActiveTransactions(event) {
        const ctx = Object.values(event).find(value => value instanceof request_context_1.RequestContext);
        if (!ctx) {
            return event;
        }
        const transactionManager = ctx[constants_1.TRANSACTION_MANAGER_KEY];
        if (!(transactionManager === null || transactionManager === void 0 ? void 0 : transactionManager.queryRunner)) {
            return event;
        }
        return this.transactionSubscriber.awaitRelease(transactionManager.queryRunner).then(() => event);
    }
};
EventBus = __decorate([
    common_1.Injectable(),
    __metadata("design:paramtypes", [transaction_subscriber_1.TransactionSubscriber])
], EventBus);
exports.EventBus = EventBus;
//# sourceMappingURL=event-bus.js.map