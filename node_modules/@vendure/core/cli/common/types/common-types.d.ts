import { LogicalOperator } from '@vendure/common/lib/generated-types';
import { Type } from '@vendure/common/lib/shared-types';
import { VendureEntity } from '../../entity/base/base.entity';
import { Channel } from '../../entity/channel/channel.entity';
import { Tag } from '../../entity/tag/tag.entity';
import { LocaleString } from './locale-types';
export interface ChannelAware {
    channels: Channel[];
}
export interface SoftDeletable {
    deletedAt: Date | null;
}
export interface Orderable {
    position: number;
}
export interface Taggable {
    tags: Tag[];
}
export declare type ReadOnlyRequired<T> = {
    +readonly [K in keyof T]-?: T[K];
};
export declare type UnwrappedArray<T extends any[]> = T[number];
export interface ListQueryOptions<T extends VendureEntity> {
    take?: number | null;
    skip?: number | null;
    sort?: NullOptionals<SortParameter<T>> | null;
    filter?: NullOptionals<FilterParameter<T>> | null;
    filterOperator?: LogicalOperator;
}
export declare type NullOptionals<T> = {
    [K in keyof T]: undefined extends T[K] ? NullOptionals<T[K]> | null : NullOptionals<T[K]>;
};
export declare type SortOrder = 'ASC' | 'DESC';
export declare type PrimitiveFields<T extends VendureEntity> = {
    [K in keyof T]: T[K] extends LocaleString | number | string | boolean | Date ? K : never;
}[keyof T];
export declare type SortParameter<T extends VendureEntity> = {
    [K in PrimitiveFields<T>]?: SortOrder;
};
export declare type CustomFieldSortParameter = {
    [customField: string]: SortOrder;
};
export declare type FilterParameter<T extends VendureEntity> = {
    [K in PrimitiveFields<T>]?: T[K] extends string | LocaleString ? StringOperators : T[K] extends number ? NumberOperators : T[K] extends boolean ? BooleanOperators : T[K] extends Date ? DateOperators : StringOperators;
};
export interface StringOperators {
    eq?: string;
    notEq?: string;
    contains?: string;
    notContains?: string;
    in?: string[];
    notIn?: string[];
    regex?: string;
}
export interface BooleanOperators {
    eq?: boolean;
}
export interface NumberRange {
    start: number;
    end: number;
}
export interface NumberOperators {
    eq?: number;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    between?: NumberRange;
}
export interface DateRange {
    start: Date;
    end: Date;
}
export interface DateOperators {
    eq?: Date;
    before?: Date;
    after?: Date;
    between?: DateRange;
}
export interface ListOperators {
    inList?: string | number | boolean | Date;
}
export declare type PaymentMetadata = {
    [prop: string]: any;
} & {
    public?: any;
};
export declare type PriceCalculationResult = {
    price: number;
    priceIncludesTax: boolean;
};
export declare type MiddlewareHandler = Type<any> | Function;
export interface Middleware {
    handler: MiddlewareHandler;
    route: string;
    beforeListen?: boolean;
}
