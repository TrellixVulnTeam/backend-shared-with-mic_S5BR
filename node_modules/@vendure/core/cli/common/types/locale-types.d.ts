import { LanguageCode } from '@vendure/common/lib/generated-types';
import { CustomFieldsObject, ID } from '@vendure/common/lib/shared-types';
import { VendureEntity } from '../../entity/base/base.entity';
import { TranslatableRelationsKeys } from '../../service/helpers/utils/translate-entity';
import { UnwrappedArray } from './common-types';
export declare type LocaleString = string & {
    _opaqueType: 'LocaleString';
};
export declare type TranslatableKeys<T, U = Omit<T, 'translations'>> = {
    [K in keyof U]: U[K] extends LocaleString ? K : never;
}[keyof U];
export declare type NonTranslateableKeys<T> = {
    [K in keyof T]: T[K] extends LocaleString ? never : K;
}[keyof T];
export interface Translatable {
    translations: Array<Translation<VendureEntity>>;
}
export declare type TranslationCustomFields<T> = {
    [K in keyof T]: K extends 'customFields' ? K : never;
}[keyof T];
export declare type Translation<T> = {
    id: ID;
    languageCode: LanguageCode;
    base: T;
} & {
    [K in TranslatableKeys<T>]: string;
} & {
    [K in TranslationCustomFields<T>]: CustomFieldsObject;
};
export declare type TranslationInput<T> = {
    [K in TranslatableKeys<T>]?: string | null;
} & {
    id?: ID | null;
    languageCode: LanguageCode;
};
export interface TranslatedInput<T> {
    translations?: Array<TranslationInput<T>> | null;
}
export declare type Translated<T> = T & {
    languageCode: LanguageCode;
} & {
    [K in TranslatableRelationsKeys<T>]: T[K] extends any[] ? Array<Translated<UnwrappedArray<T[K]>>> : Translated<T[K]>;
};
