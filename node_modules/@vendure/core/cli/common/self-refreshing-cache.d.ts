export interface SelfRefreshingCache<V, RefreshArgs extends any[] = []> {
    value(): Promise<V>;
    memoize<Args extends any[], R>(args: Args, refreshArgs: RefreshArgs, fn: (value: V, ...args: Args) => R): Promise<R>;
    refresh(...args: RefreshArgs): Promise<V>;
}
export interface SelfRefreshingCacheConfig<V, RefreshArgs extends any[]> {
    name: string;
    ttl: number;
    refresh: {
        fn: (...args: RefreshArgs) => Promise<V>;
        defaultArgs: RefreshArgs;
    };
    getTimeFn?: () => number;
}
export declare function createSelfRefreshingCache<V, RefreshArgs extends any[]>(config: SelfRefreshingCacheConfig<V, RefreshArgs>): Promise<SelfRefreshingCache<V, RefreshArgs>>;
