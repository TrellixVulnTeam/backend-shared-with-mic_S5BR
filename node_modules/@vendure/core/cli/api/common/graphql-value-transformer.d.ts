import { DocumentNode, GraphQLNamedType, GraphQLSchema, OperationDefinitionNode } from 'graphql';
export declare type TypeTree = {
    operation: TypeTreeNode;
    fragments: {
        [name: string]: TypeTreeNode;
    };
};
export declare type TypeTreeNode = {
    type: GraphQLNamedType | undefined;
    parent: TypeTreeNode | TypeTree;
    isList: boolean;
    fragmentRefs: string[];
    children: {
        [name: string]: TypeTreeNode;
    };
};
export declare class GraphqlValueTransformer {
    private schema;
    private outputCache;
    private inputCache;
    constructor(schema: GraphQLSchema);
    transformValues(typeTree: TypeTree, data: Record<string, any>, visitorFn: (value: any, type: GraphQLNamedType) => any): void;
    getOutputTypeTree(document: DocumentNode): TypeTree;
    getInputTypeTree(definition: OperationDefinitionNode): TypeTree;
    private getChildrenTreeNodes;
    private isList;
    private getTypeNodeByPath;
    private traverse;
    private isTypeTree;
}
