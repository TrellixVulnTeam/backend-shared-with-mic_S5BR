import { LanguageCode, Permission } from '@vendure/common/lib/generated-types';
import { ID, JsonCompatible } from '@vendure/common/lib/shared-types';
import { Request } from 'express';
import { TFunction } from 'i18next';
import { CachedSession } from '../../config/session-cache/session-cache-strategy';
import { Channel } from '../../entity/channel/channel.entity';
import { ApiType } from './get-api-type';
export declare type SerializedRequestContext = {
    _req?: any;
    _session: JsonCompatible<Required<CachedSession>>;
    _apiType: ApiType;
    _channel: JsonCompatible<Channel>;
    _languageCode: LanguageCode;
    _isAuthorized: boolean;
    _authorizedAsOwnerOnly: boolean;
};
export declare class RequestContext {
    private readonly _languageCode;
    private readonly _channel;
    private readonly _session?;
    private readonly _isAuthorized;
    private readonly _authorizedAsOwnerOnly;
    private readonly _translationFn;
    private readonly _apiType;
    private readonly _req?;
    constructor(options: {
        req?: Request;
        apiType: ApiType;
        channel: Channel;
        session?: CachedSession;
        languageCode?: LanguageCode;
        isAuthorized: boolean;
        authorizedAsOwnerOnly: boolean;
        translationFn?: TFunction;
    });
    static empty(): RequestContext;
    static deserialize(ctxObject: SerializedRequestContext): RequestContext;
    userHasPermissions(permissions: Permission[]): boolean;
    serialize(): SerializedRequestContext;
    copy(): RequestContext;
    get req(): Request | undefined;
    get apiType(): ApiType;
    get channel(): Channel;
    get channelId(): ID;
    get languageCode(): LanguageCode;
    get session(): CachedSession | undefined;
    get activeUserId(): ID | undefined;
    get isAuthorized(): boolean;
    get authorizedAsOwnerOnly(): boolean;
    translate(key: string, variables?: {
        [k: string]: any;
    }): string;
    private arraysIntersect;
    private shallowCloneRequestObject;
}
