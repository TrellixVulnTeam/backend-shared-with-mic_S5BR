"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthGuard = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const generated_types_1 = require("@vendure/common/lib/generated-types");
const constants_1 = require("../../common/constants");
const errors_1 = require("../../common/error/errors");
const config_service_1 = require("../../config/config.service");
const vendure_logger_1 = require("../../config/logger/vendure-logger");
const customer_entity_1 = require("../../entity/customer/customer.entity");
const request_context_service_1 = require("../../service/helpers/request-context/request-context.service");
const channel_service_1 = require("../../service/services/channel.service");
const customer_service_1 = require("../../service/services/customer.service");
const session_service_1 = require("../../service/services/session.service");
const extract_session_token_1 = require("../common/extract-session-token");
const parse_context_1 = require("../common/parse-context");
const set_session_token_1 = require("../common/set-session-token");
const allow_decorator_1 = require("../decorators/allow.decorator");
let AuthGuard = class AuthGuard {
    constructor(reflector, configService, requestContextService, sessionService, customerService, channelService) {
        this.reflector = reflector;
        this.configService = configService;
        this.requestContextService = requestContextService;
        this.sessionService = sessionService;
        this.customerService = customerService;
        this.channelService = channelService;
    }
    async canActivate(context) {
        const { req, res, info } = parse_context_1.parseContext(context);
        const isFieldResolver = this.isFieldResolver(info);
        const permissions = this.reflector.get(allow_decorator_1.PERMISSIONS_METADATA_KEY, context.getHandler());
        if (isFieldResolver && !permissions) {
            return true;
        }
        const authDisabled = this.configService.authOptions.disableAuth;
        const isPublic = !!permissions && permissions.includes(generated_types_1.Permission.Public);
        const hasOwnerPermission = !!permissions && permissions.includes(generated_types_1.Permission.Owner);
        let requestContext;
        if (isFieldResolver) {
            requestContext = req[constants_1.REQUEST_CONTEXT_KEY];
        }
        else {
            const session = await this.getSession(req, res, hasOwnerPermission);
            requestContext = await this.requestContextService.fromRequest(req, info, permissions, session);
            const requestContextShouldBeReinitialized = await this.setActiveChannel(requestContext, session);
            if (requestContextShouldBeReinitialized) {
                requestContext = await this.requestContextService.fromRequest(req, info, permissions, session);
            }
            req[constants_1.REQUEST_CONTEXT_KEY] = requestContext;
        }
        if (authDisabled || !permissions || isPublic) {
            return true;
        }
        else {
            const canActivate = requestContext.userHasPermissions(permissions) || requestContext.authorizedAsOwnerOnly;
            if (!canActivate) {
                throw new errors_1.ForbiddenError(vendure_logger_1.LogLevel.Verbose);
            }
            else {
                return canActivate;
            }
        }
    }
    async setActiveChannel(requestContext, session) {
        if (!session) {
            return false;
        }
        const activeChannelShouldBeSet = !session.activeChannelId || session.activeChannelId !== requestContext.channelId;
        if (activeChannelShouldBeSet) {
            await this.sessionService.setActiveChannel(session, requestContext.channel);
            if (requestContext.activeUserId) {
                const customer = await this.customerService.findOneByUserId(requestContext, requestContext.activeUserId, false);
                if (customer) {
                    try {
                        await this.channelService.assignToChannels(requestContext, customer_entity_1.Customer, customer.id, [
                            requestContext.channelId,
                        ]);
                    }
                    catch (e) {
                        const isDuplicateError = e.code === 'ER_DUP_ENTRY' ||
                            e.code === '23505';
                        if (isDuplicateError) {
                        }
                        else {
                            throw e;
                        }
                    }
                }
            }
            return true;
        }
        return false;
    }
    async getSession(req, res, hasOwnerPermission) {
        const sessionToken = extract_session_token_1.extractSessionToken(req, this.configService.authOptions.tokenMethod);
        let serializedSession;
        if (sessionToken) {
            serializedSession = await this.sessionService.getSessionFromToken(sessionToken);
            if (serializedSession) {
                return serializedSession;
            }
            set_session_token_1.setSessionToken({
                req,
                res,
                authOptions: this.configService.authOptions,
                rememberMe: false,
                sessionToken: '',
            });
        }
        if (hasOwnerPermission && !serializedSession) {
            serializedSession = await this.sessionService.createAnonymousSession();
            set_session_token_1.setSessionToken({
                sessionToken: serializedSession.token,
                rememberMe: true,
                authOptions: this.configService.authOptions,
                req,
                res,
            });
        }
        return serializedSession;
    }
    isFieldResolver(info) {
        var _a;
        if (!info) {
            return false;
        }
        const parentType = (_a = info === null || info === void 0 ? void 0 : info.parentType) === null || _a === void 0 ? void 0 : _a.name;
        return parentType !== 'Query' && parentType !== 'Mutation';
    }
};
AuthGuard = __decorate([
    common_1.Injectable(),
    __metadata("design:paramtypes", [core_1.Reflector,
        config_service_1.ConfigService,
        request_context_service_1.RequestContextService,
        session_service_1.SessionService,
        customer_service_1.CustomerService,
        channel_service_1.ChannelService])
], AuthGuard);
exports.AuthGuard = AuthGuard;
//# sourceMappingURL=auth-guard.js.map