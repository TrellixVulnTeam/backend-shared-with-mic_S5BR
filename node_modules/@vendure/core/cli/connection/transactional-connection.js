"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionalConnection = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const request_context_1 = require("../api/common/request-context");
const constants_1 = require("../common/constants");
const errors_1 = require("../common/error/errors");
const transaction_wrapper_1 = require("./transaction-wrapper");
let TransactionalConnection = class TransactionalConnection {
    constructor(connection, transactionWrapper) {
        this.connection = connection;
        this.transactionWrapper = transactionWrapper;
    }
    get rawConnection() {
        return this.connection;
    }
    getRepository(ctxOrTarget, maybeTarget) {
        var _a;
        if (ctxOrTarget instanceof request_context_1.RequestContext) {
            const transactionManager = this.getTransactionManager(ctxOrTarget);
            if (transactionManager && maybeTarget && !((_a = transactionManager.queryRunner) === null || _a === void 0 ? void 0 : _a.isReleased)) {
                return transactionManager.getRepository(maybeTarget);
            }
            else {
                return typeorm_2.getRepository(maybeTarget);
            }
        }
        else {
            return typeorm_2.getRepository(ctxOrTarget !== null && ctxOrTarget !== void 0 ? ctxOrTarget : maybeTarget);
        }
    }
    async withTransaction(ctxOrWork, maybeWork) {
        let ctx;
        let work;
        if (ctxOrWork instanceof request_context_1.RequestContext) {
            ctx = ctxOrWork;
            work = maybeWork;
        }
        else {
            ctx = request_context_1.RequestContext.empty();
            work = ctxOrWork;
        }
        return this.transactionWrapper.executeInTransaction(ctx, () => work(ctx), 'auto', this.rawConnection);
    }
    async startTransaction(ctx) {
        var _a;
        const transactionManager = this.getTransactionManager(ctx);
        if (((_a = transactionManager === null || transactionManager === void 0 ? void 0 : transactionManager.queryRunner) === null || _a === void 0 ? void 0 : _a.isTransactionActive) === false) {
            await transactionManager.queryRunner.startTransaction();
        }
    }
    async commitOpenTransaction(ctx) {
        var _a;
        const transactionManager = this.getTransactionManager(ctx);
        if ((_a = transactionManager === null || transactionManager === void 0 ? void 0 : transactionManager.queryRunner) === null || _a === void 0 ? void 0 : _a.isTransactionActive) {
            await transactionManager.queryRunner.commitTransaction();
        }
    }
    async rollBackTransaction(ctx) {
        var _a;
        const transactionManager = this.getTransactionManager(ctx);
        if ((_a = transactionManager === null || transactionManager === void 0 ? void 0 : transactionManager.queryRunner) === null || _a === void 0 ? void 0 : _a.isTransactionActive) {
            await transactionManager.queryRunner.rollbackTransaction();
        }
    }
    async getEntityOrThrow(ctx, entityType, id, options = {}) {
        const { retries, retryDelay } = options;
        if (retries == null || retries <= 0) {
            return this.getEntityOrThrowInternal(ctx, entityType, id, options);
        }
        else {
            let err;
            const retriesInt = Math.ceil(retries);
            const delay = Math.ceil(Math.max(retryDelay || 25, 1));
            for (let attempt = 0; attempt < retriesInt; attempt++) {
                try {
                    const result = await this.getEntityOrThrowInternal(ctx, entityType, id, options);
                    return result;
                }
                catch (e) {
                    err = e;
                    if (attempt < retriesInt - 1) {
                        await new Promise(resolve => setTimeout(resolve, delay));
                    }
                }
            }
            throw err;
        }
    }
    async getEntityOrThrowInternal(ctx, entityType, id, options = {}) {
        let entity;
        if (options.channelId != null) {
            const { channelId } = options, optionsWithoutChannelId = __rest(options, ["channelId"]);
            entity = await this.findOneInChannel(ctx, entityType, id, options.channelId, optionsWithoutChannelId);
        }
        else {
            entity = await this.getRepository(ctx, entityType).findOne(id, options);
        }
        if (!entity ||
            (entity.hasOwnProperty('deletedAt') &&
                entity.deletedAt !== null &&
                options.includeSoftDeleted !== true)) {
            throw new errors_1.EntityNotFoundError(entityType.name, id);
        }
        return entity;
    }
    findOneInChannel(ctx, entity, id, channelId, options = {}) {
        const qb = this.getRepository(ctx, entity).createQueryBuilder('entity');
        typeorm_2.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, options);
        if (options.loadEagerRelations !== false) {
            typeorm_2.FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);
        }
        return qb
            .leftJoin('entity.channels', 'channel')
            .andWhere('entity.id = :id', { id })
            .andWhere('channel.id = :channelId', { channelId })
            .getOne();
    }
    findByIdsInChannel(ctx, entity, ids, channelId, options) {
        if (ids.length === 0) {
            return Promise.resolve([]);
        }
        const qb = this.getRepository(ctx, entity).createQueryBuilder('entity');
        typeorm_2.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, options);
        if (options.loadEagerRelations !== false) {
            typeorm_2.FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);
        }
        return qb
            .leftJoin('entity.channels', 'channel')
            .andWhere('entity.id IN (:...ids)', { ids })
            .andWhere('channel.id = :channelId', { channelId })
            .getMany();
    }
    getTransactionManager(ctx) {
        return ctx[constants_1.TRANSACTION_MANAGER_KEY];
    }
};
TransactionalConnection = __decorate([
    common_1.Injectable(),
    __param(0, typeorm_1.InjectConnection()),
    __metadata("design:paramtypes", [typeorm_2.Connection,
        transaction_wrapper_1.TransactionWrapper])
], TransactionalConnection);
exports.TransactionalConnection = TransactionalConnection;
//# sourceMappingURL=transactional-connection.js.map