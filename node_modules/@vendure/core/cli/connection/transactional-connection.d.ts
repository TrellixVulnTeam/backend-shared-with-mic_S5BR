import { ID, Type } from '@vendure/common/lib/shared-types';
import { Connection, EntitySchema, FindOneOptions, ObjectType, Repository } from 'typeorm';
import { RequestContext } from '../api/common/request-context';
import { ChannelAware } from '../common/types/common-types';
import { VendureEntity } from '../entity/base/base.entity';
import { TransactionWrapper } from './transaction-wrapper';
import { GetEntityOrThrowOptions } from './types';
export declare class TransactionalConnection {
    private connection;
    private transactionWrapper;
    constructor(connection: Connection, transactionWrapper: TransactionWrapper);
    get rawConnection(): Connection;
    getRepository<Entity>(target: ObjectType<Entity> | EntitySchema<Entity> | string): Repository<Entity>;
    getRepository<Entity>(ctx: RequestContext | undefined, target: ObjectType<Entity> | EntitySchema<Entity> | string): Repository<Entity>;
    withTransaction<T>(work: (ctx: RequestContext) => Promise<T>): Promise<T>;
    withTransaction<T>(ctx: RequestContext, work: (ctx: RequestContext) => Promise<T>): Promise<T>;
    startTransaction(ctx: RequestContext): Promise<void>;
    commitOpenTransaction(ctx: RequestContext): Promise<void>;
    rollBackTransaction(ctx: RequestContext): Promise<void>;
    getEntityOrThrow<T extends VendureEntity>(ctx: RequestContext, entityType: Type<T>, id: ID, options?: GetEntityOrThrowOptions<T>): Promise<T>;
    private getEntityOrThrowInternal;
    findOneInChannel<T extends ChannelAware & VendureEntity>(ctx: RequestContext, entity: Type<T>, id: ID, channelId: ID, options?: FindOneOptions): Promise<T | undefined>;
    findByIdsInChannel<T extends ChannelAware | VendureEntity>(ctx: RequestContext, entity: Type<T>, ids: ID[], channelId: ID, options: FindOneOptions): Promise<T[]>;
    private getTransactionManager;
}
