import { Connection, EntitySubscriberInterface } from 'typeorm';
import { EntityManager } from 'typeorm/entity-manager/EntityManager';
import { QueryRunner } from 'typeorm/query-runner/QueryRunner';
import { TransactionCommitEvent } from 'typeorm/subscriber/event/TransactionCommitEvent';
import { TransactionRollbackEvent } from 'typeorm/subscriber/event/TransactionRollbackEvent';
export interface TransactionSubscriberEvent {
    connection: Connection;
    queryRunner: QueryRunner;
    manager: EntityManager;
}
export declare class TransactionSubscriber implements EntitySubscriberInterface {
    private connection;
    private commit$;
    private rollback$;
    constructor(connection: Connection);
    afterTransactionCommit(event: TransactionCommitEvent): void;
    afterTransactionRollback(event: TransactionRollbackEvent): void;
    awaitRelease(queryRunner: QueryRunner): Promise<QueryRunner>;
}
