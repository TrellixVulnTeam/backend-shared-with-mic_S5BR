import { JobState } from '@vendure/common/lib/generated-types';
import { JobConfig, JobData } from './types';
export declare type JobEventType = 'progress';
export declare type JobEventListener<T extends JobData<T>> = (job: Job<T>) => void;
export declare class Job<T extends JobData<T> = any> {
    readonly id: number | string | null;
    readonly queueName: string;
    readonly retries: number;
    readonly createdAt: Date;
    private readonly _data;
    private _state;
    private _progress;
    private _result?;
    private _error?;
    private _attempts;
    private _startedAt?;
    private _settledAt?;
    private readonly eventListeners;
    get name(): string;
    get data(): T;
    get state(): JobState;
    get progress(): number;
    get result(): any;
    get error(): any;
    get isSettled(): boolean;
    get startedAt(): Date | undefined;
    get settledAt(): Date | undefined;
    get duration(): number;
    get attempts(): number;
    constructor(config: JobConfig<T>);
    start(): void;
    setProgress(percent: number): void;
    complete(result?: any): void;
    fail(err?: any): void;
    cancel(): void;
    defer(): void;
    on(eventType: JobEventType, listener: JobEventListener<T>): void;
    off(eventType: JobEventType, listener: JobEventListener<T>): void;
    private fireEvent;
    private ensureDataIsSerializable;
}
