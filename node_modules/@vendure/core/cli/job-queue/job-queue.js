"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobQueue = void 0;
const vendure_logger_1 = require("../config/logger/vendure-logger");
const job_1 = require("./job");
const subscribable_job_1 = require("./subscribable-job");
class JobQueue {
    constructor(options, jobQueueStrategy, jobBufferService) {
        this.options = options;
        this.jobQueueStrategy = jobQueueStrategy;
        this.jobBufferService = jobBufferService;
        this.running = false;
    }
    get name() {
        return this.options.name;
    }
    get started() {
        return this.running;
    }
    async start() {
        if (this.running) {
            return;
        }
        this.running = true;
        await this.jobQueueStrategy.start(this.options.name, this.options.process);
    }
    async stop() {
        if (!this.running) {
            return;
        }
        this.running = false;
        return this.jobQueueStrategy.stop(this.options.name, this.options.process);
    }
    async add(data, options) {
        var _a;
        const job = new job_1.Job({
            data,
            queueName: this.options.name,
            retries: (_a = options === null || options === void 0 ? void 0 : options.retries) !== null && _a !== void 0 ? _a : 0,
        });
        const isBuffered = await this.jobBufferService.add(job);
        if (!isBuffered) {
            try {
                const addedJob = await this.jobQueueStrategy.add(job);
                return new subscribable_job_1.SubscribableJob(addedJob, this.jobQueueStrategy);
            }
            catch (err) {
                vendure_logger_1.Logger.error(`Could not add Job to "${this.name}" queue`, undefined, err.stack);
                return new subscribable_job_1.SubscribableJob(job, this.jobQueueStrategy);
            }
        }
        else {
            const bufferedJob = new job_1.Job(Object.assign(Object.assign({}, job), { data: job.data, id: 'buffered' }));
            return new subscribable_job_1.SubscribableJob(bufferedJob, this.jobQueueStrategy);
        }
    }
}
exports.JobQueue = JobQueue;
//# sourceMappingURL=job-queue.js.map