import { ID } from '@vendure/common/lib/shared-types';
import { InjectableJobQueueStrategy } from './injectable-job-queue-strategy';
import { Job } from './job';
import { JobData } from './types';
export declare type BackoffStrategy = (queueName: string, attemptsMade: number, job: Job) => number;
export interface PollingJobQueueStrategyConfig {
    concurrency?: number;
    pollInterval?: number | ((queueName: string) => number);
    setRetries?: (queueName: string, job: Job) => number;
    backoffStrategy?: BackoffStrategy;
}
export declare abstract class PollingJobQueueStrategy extends InjectableJobQueueStrategy {
    concurrency: number;
    pollInterval: number | ((queueName: string) => number);
    setRetries: (queueName: string, job: Job) => number;
    backOffStrategy?: BackoffStrategy;
    private activeQueues;
    constructor(config?: PollingJobQueueStrategyConfig);
    constructor(concurrency?: number, pollInterval?: number);
    start<Data extends JobData<Data> = {}>(queueName: string, process: (job: Job<Data>) => Promise<any>): Promise<void>;
    stop<Data extends JobData<Data> = {}>(queueName: string, process: (job: Job<Data>) => Promise<any>): Promise<void>;
    cancelJob(jobId: ID): Promise<Job | undefined>;
    abstract next(queueName: string): Promise<Job | undefined>;
    abstract update(job: Job): Promise<void>;
    abstract findOne(id: ID): Promise<Job | undefined>;
}
