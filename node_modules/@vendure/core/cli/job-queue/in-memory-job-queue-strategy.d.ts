import { JobListOptions } from '@vendure/common/lib/generated-types';
import { ID, PaginatedList } from '@vendure/common/lib/shared-types';
import { Injector } from '../common';
import { InspectableJobQueueStrategy } from '../config/job-queue/inspectable-job-queue-strategy';
import { Job } from './job';
import { PollingJobQueueStrategy } from './polling-job-queue-strategy';
import { JobData } from './types';
export declare class InMemoryJobQueueStrategy extends PollingJobQueueStrategy implements InspectableJobQueueStrategy {
    protected jobs: Map<ID, Job<any>>;
    protected unsettledJobs: {
        [queueName: string]: Array<{
            job: Job;
            updatedAt: Date;
        }>;
    };
    private timer;
    private evictJobsAfterMs;
    private processContext;
    private processContextChecked;
    init(injector: Injector): void;
    destroy(): void;
    add<Data extends JobData<Data> = {}>(job: Job<Data>): Promise<Job<Data>>;
    findOne(id: ID): Promise<Job | undefined>;
    findMany(options?: JobListOptions): Promise<PaginatedList<Job>>;
    findManyById(ids: ID[]): Promise<Job[]>;
    next(queueName: string, waitingJobs?: Job[]): Promise<Job | undefined>;
    update(job: Job): Promise<void>;
    removeSettledJobs(queueNames?: string[], olderThan?: Date): Promise<number>;
    private applySort;
    private applyFilters;
    private applyPagination;
    private evictSettledJobs;
    private checkProcessContext;
}
