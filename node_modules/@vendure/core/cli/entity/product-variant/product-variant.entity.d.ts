import { CurrencyCode, GlobalFlag } from '@vendure/common/lib/generated-types';
import { DeepPartial, ID } from '@vendure/common/lib/shared-types';
import { ChannelAware, SoftDeletable } from '../../common/types/common-types';
import { LocaleString, Translatable, Translation } from '../../common/types/locale-types';
import { HasCustomFields } from '../../config/custom-field/custom-field-types';
import { Asset } from '../asset/asset.entity';
import { VendureEntity } from '../base/base.entity';
import { Channel } from '../channel/channel.entity';
import { Collection } from '../collection/collection.entity';
import { CustomProductVariantFields } from '../custom-entity-fields';
import { FacetValue } from '../facet-value/facet-value.entity';
import { ProductOption } from '../product-option/product-option.entity';
import { Product } from '../product/product.entity';
import { StockMovement } from '../stock-movement/stock-movement.entity';
import { TaxCategory } from '../tax-category/tax-category.entity';
import { TaxRate } from '../tax-rate/tax-rate.entity';
import { ProductVariantAsset } from './product-variant-asset.entity';
import { ProductVariantPrice } from './product-variant-price.entity';
export declare class ProductVariant extends VendureEntity implements Translatable, HasCustomFields, SoftDeletable, ChannelAware {
    constructor(input?: DeepPartial<ProductVariant>);
    deletedAt: Date | null;
    name: LocaleString;
    enabled: boolean;
    sku: string;
    listPrice: number;
    listPriceIncludesTax: boolean;
    currencyCode: CurrencyCode;
    get price(): number;
    get priceWithTax(): number;
    taxRateApplied: TaxRate;
    featuredAsset: Asset;
    assets: ProductVariantAsset[];
    taxCategory: TaxCategory;
    productVariantPrices: ProductVariantPrice[];
    translations: Array<Translation<ProductVariant>>;
    product: Product;
    productId: ID;
    stockOnHand: number;
    stockAllocated: number;
    outOfStockThreshold: number;
    useGlobalOutOfStockThreshold: boolean;
    trackInventory: GlobalFlag;
    stockMovements: StockMovement[];
    options: ProductOption[];
    facetValues: FacetValue[];
    customFields: CustomProductVariantFields;
    collections: Collection[];
    channels: Channel[];
}
