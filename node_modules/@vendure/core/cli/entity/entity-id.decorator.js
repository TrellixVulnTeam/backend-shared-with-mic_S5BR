"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrimaryGeneratedIdColumn = exports.getIdColumnsFor = exports.EntityId = exports.PrimaryGeneratedId = void 0;
const idColumnRegistry = new Map();
let primaryGeneratedColumn;
function PrimaryGeneratedId() {
    return (entity, propertyName) => {
        primaryGeneratedColumn = {
            entity,
            name: propertyName,
        };
    };
}
exports.PrimaryGeneratedId = PrimaryGeneratedId;
function EntityId(options) {
    return (entity, propertyName) => {
        const idColumns = idColumnRegistry.get(entity);
        const entry = { name: propertyName, entity, options };
        if (idColumns) {
            idColumns.push(entry);
        }
        else {
            idColumnRegistry.set(entity, [entry]);
        }
    };
}
exports.EntityId = EntityId;
function getIdColumnsFor(entityType) {
    const match = Array.from(idColumnRegistry.entries()).find(([entity, columns]) => entity.constructor === entityType);
    return match ? match[1] : [];
}
exports.getIdColumnsFor = getIdColumnsFor;
function getPrimaryGeneratedIdColumn() {
    if (!primaryGeneratedColumn) {
        throw new Error(`primaryGeneratedColumn is undefined. The base VendureEntity must have the @PrimaryGeneratedId() decorator set on its id property.`);
    }
    return primaryGeneratedColumn;
}
exports.getPrimaryGeneratedIdColumn = getPrimaryGeneratedIdColumn;
//# sourceMappingURL=entity-id.decorator.js.map