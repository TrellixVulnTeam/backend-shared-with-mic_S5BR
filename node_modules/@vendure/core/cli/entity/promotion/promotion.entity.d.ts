import { Adjustment, AdjustmentType, ConfigurableOperation } from '@vendure/common/lib/generated-types';
import { DeepPartial } from '@vendure/common/lib/shared-types';
import { RequestContext } from '../../api/common/request-context';
import { AdjustmentSource } from '../../common/types/adjustment-source';
import { ChannelAware, SoftDeletable } from '../../common/types/common-types';
import { HasCustomFields } from '../../config/custom-field/custom-field-types';
import { PromotionAction } from '../../config/promotion/promotion-action';
import { PromotionCondition, PromotionConditionState } from '../../config/promotion/promotion-condition';
import { Channel } from '../channel/channel.entity';
import { CustomPromotionFields } from '../custom-entity-fields';
import { OrderItem } from '../order-item/order-item.entity';
import { OrderLine } from '../order-line/order-line.entity';
import { Order } from '../order/order.entity';
import { ShippingLine } from '../shipping-line/shipping-line.entity';
export interface ApplyOrderItemActionArgs {
    orderItem: OrderItem;
    orderLine: OrderLine;
}
export interface ApplyOrderActionArgs {
    order: Order;
}
export interface ApplyShippingActionArgs {
    shippingLine: ShippingLine;
    order: Order;
}
export interface PromotionState {
    [code: string]: PromotionConditionState;
}
export declare type PromotionTestResult = boolean | PromotionState;
export declare class Promotion extends AdjustmentSource implements ChannelAware, SoftDeletable, HasCustomFields {
    type: AdjustmentType;
    private readonly allConditions;
    private readonly allActions;
    constructor(input?: DeepPartial<Promotion> & {
        promotionConditions?: Array<PromotionCondition<any>>;
        promotionActions?: Array<PromotionAction<any>>;
    });
    deletedAt: Date | null;
    startsAt: Date | null;
    endsAt: Date | null;
    couponCode: string;
    perCustomerUsageLimit: number;
    name: string;
    enabled: boolean;
    channels: Channel[];
    customFields: CustomPromotionFields;
    conditions: ConfigurableOperation[];
    actions: ConfigurableOperation[];
    priorityScore: number;
    apply(ctx: RequestContext, args: ApplyOrderActionArgs | ApplyOrderItemActionArgs | ApplyShippingActionArgs, state?: PromotionState): Promise<Adjustment | undefined>;
    test(ctx: RequestContext, order: Order): Promise<PromotionTestResult>;
    private isShippingAction;
    private isOrderArg;
    private isOrderItemArg;
    private isShippingArg;
}
