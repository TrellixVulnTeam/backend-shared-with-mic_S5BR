"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemorySessionCacheStrategy = void 0;
class InMemorySessionCacheStrategy {
    constructor(cacheSize) {
        this.cache = new Map();
        this.cacheSize = 1000;
        if (cacheSize != null) {
            if (cacheSize < 1) {
                throw new Error(`cacheSize must be a positive integer`);
            }
            this.cacheSize = Math.round(cacheSize);
        }
    }
    delete(sessionToken) {
        this.cache.delete(sessionToken);
    }
    get(sessionToken) {
        const item = this.cache.get(sessionToken);
        if (item) {
            this.cache.delete(sessionToken);
            this.cache.set(sessionToken, item);
        }
        return item;
    }
    set(session) {
        this.cache.set(session.token, session);
        if (this.cache.has(session.token)) {
            this.cache.delete(session.token);
        }
        else if (this.cache.size === this.cacheSize) {
            this.cache.delete(this.first());
        }
        this.cache.set(session.token, session);
    }
    clear() {
        this.cache.clear();
    }
    first() {
        return this.cache.keys().next().value;
    }
}
exports.InMemorySessionCacheStrategy = InMemorySessionCacheStrategy;
//# sourceMappingURL=in-memory-session-cache-strategy.js.map