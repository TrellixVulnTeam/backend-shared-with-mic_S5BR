import { ConfigArg } from '@vendure/common/lib/generated-types';
import { RequestContext } from '../../api/common/request-context';
import { ConfigArgs, ConfigArgValues, ConfigurableOperationDef, ConfigurableOperationDefOptions } from '../../common/configurable-operation';
import { OnTransitionStartFn } from '../../common/finite-state-machine/types';
import { Fulfillment } from '../../entity/fulfillment/fulfillment.entity';
import { OrderItem } from '../../entity/order-item/order-item.entity';
import { Order } from '../../entity/order/order.entity';
import { FulfillmentState, FulfillmentTransitionData } from '../../service/helpers/fulfillment-state-machine/fulfillment-state';
export declare type CreateFulfillmentResult = Partial<Pick<Fulfillment, 'trackingCode' | 'method' | 'customFields'>>;
export declare type CreateFulfillmentFn<T extends ConfigArgs> = (ctx: RequestContext, orders: Order[], orderItems: OrderItem[], args: ConfigArgValues<T>) => CreateFulfillmentResult | Promise<CreateFulfillmentResult>;
export interface FulfillmentHandlerConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {
    createFulfillment: CreateFulfillmentFn<T>;
    onFulfillmentTransition?: OnTransitionStartFn<FulfillmentState, FulfillmentTransitionData>;
}
export declare class FulfillmentHandler<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {
    private readonly createFulfillmentFn;
    private readonly onFulfillmentTransitionFn;
    constructor(config: FulfillmentHandlerConfig<T>);
    createFulfillment(ctx: RequestContext, orders: Order[], orderItems: OrderItem[], args: ConfigArg[]): Partial<Fulfillment> | Promise<Partial<Fulfillment>>;
    onFulfillmentTransition(fromState: FulfillmentState, toState: FulfillmentState, data: FulfillmentTransitionData): string | boolean | void | Promise<string | boolean | void> | import("rxjs").Observable<string | boolean | void>;
}
