import { DynamicModule, Type } from '@nestjs/common';
import { CorsOptions } from '@nestjs/common/interfaces/external/cors-options.interface';
import { LanguageCode } from '@vendure/common/lib/generated-types';
import { PluginDefinition } from 'apollo-server-core';
import { ValidationContext } from 'graphql';
import { ConnectionOptions } from 'typeorm';
import { Middleware } from '../common';
import { PermissionDefinition } from '../common/permission-definition';
import { JobBufferStorageStrategy } from '../job-queue/job-buffer/job-buffer-storage-strategy';
import { AssetNamingStrategy } from './asset-naming-strategy/asset-naming-strategy';
import { AssetPreviewStrategy } from './asset-preview-strategy/asset-preview-strategy';
import { AssetStorageStrategy } from './asset-storage-strategy/asset-storage-strategy';
import { AuthenticationStrategy } from './auth/authentication-strategy';
import { PasswordHashingStrategy } from './auth/password-hashing-strategy';
import { PasswordValidationStrategy } from './auth/password-validation-strategy';
import { CollectionFilter } from './catalog/collection-filter';
import { ProductVariantPriceCalculationStrategy } from './catalog/product-variant-price-calculation-strategy';
import { StockDisplayStrategy } from './catalog/stock-display-strategy';
import { CustomFields } from './custom-field/custom-field-types';
import { EntityIdStrategy } from './entity-id-strategy/entity-id-strategy';
import { CustomFulfillmentProcess } from './fulfillment/custom-fulfillment-process';
import { FulfillmentHandler } from './fulfillment/fulfillment-handler';
import { JobQueueStrategy } from './job-queue/job-queue-strategy';
import { VendureLogger } from './logger/vendure-logger';
import { ChangedPriceHandlingStrategy } from './order/changed-price-handling-strategy';
import { CustomOrderProcess } from './order/custom-order-process';
import { OrderByCodeAccessStrategy } from './order/order-by-code-access-strategy';
import { OrderCodeStrategy } from './order/order-code-strategy';
import { OrderItemPriceCalculationStrategy } from './order/order-item-price-calculation-strategy';
import { OrderMergeStrategy } from './order/order-merge-strategy';
import { OrderPlacedStrategy } from './order/order-placed-strategy';
import { StockAllocationStrategy } from './order/stock-allocation-strategy';
import { CustomPaymentProcess } from './payment/custom-payment-process';
import { PaymentMethodEligibilityChecker } from './payment/payment-method-eligibility-checker';
import { PaymentMethodHandler } from './payment/payment-method-handler';
import { PromotionAction } from './promotion/promotion-action';
import { PromotionCondition } from './promotion/promotion-condition';
import { SessionCacheStrategy } from './session-cache/session-cache-strategy';
import { ShippingCalculator } from './shipping-method/shipping-calculator';
import { ShippingEligibilityChecker } from './shipping-method/shipping-eligibility-checker';
import { TaxLineCalculationStrategy } from './tax/tax-line-calculation-strategy';
import { TaxZoneStrategy } from './tax/tax-zone-strategy';
export interface ApiOptions {
    hostname?: string;
    port: number;
    adminApiPath?: string;
    shopApiPath?: string;
    adminApiPlayground?: boolean | any;
    shopApiPlayground?: boolean | any;
    adminApiDebug?: boolean;
    shopApiDebug?: boolean;
    shopListQueryLimit?: number;
    adminListQueryLimit?: number;
    adminApiValidationRules?: Array<(context: ValidationContext) => any>;
    shopApiValidationRules?: Array<(context: ValidationContext) => any>;
    channelTokenKey?: string;
    cors?: boolean | CorsOptions;
    middleware?: Middleware[];
    apolloServerPlugins?: PluginDefinition[];
}
export interface CookieOptions {
    name?: string;
    secret?: string;
    path?: string;
    domain?: string;
    sameSite?: 'strict' | 'lax' | 'none' | boolean;
    secure?: boolean;
    secureProxy?: boolean;
    httpOnly?: boolean;
    signed?: boolean;
    overwrite?: boolean;
}
export interface AuthOptions {
    disableAuth?: boolean;
    tokenMethod?: 'cookie' | 'bearer' | ReadonlyArray<'cookie' | 'bearer'>;
    cookieOptions?: CookieOptions;
    authTokenHeaderKey?: string;
    sessionDuration?: string | number;
    sessionCacheStrategy?: SessionCacheStrategy;
    sessionCacheTTL?: number;
    requireVerification?: boolean;
    verificationTokenDuration?: string | number;
    superadminCredentials?: SuperadminCredentials;
    shopAuthenticationStrategy?: AuthenticationStrategy[];
    adminAuthenticationStrategy?: AuthenticationStrategy[];
    customPermissions?: PermissionDefinition[];
    passwordHashingStrategy?: PasswordHashingStrategy;
    passwordValidationStrategy?: PasswordValidationStrategy;
}
export interface OrderOptions {
    orderItemsLimit?: number;
    orderLineItemsLimit?: number;
    orderItemPriceCalculationStrategy?: OrderItemPriceCalculationStrategy;
    process?: Array<CustomOrderProcess<any>>;
    stockAllocationStrategy?: StockAllocationStrategy;
    mergeStrategy?: OrderMergeStrategy;
    checkoutMergeStrategy?: OrderMergeStrategy;
    orderCodeStrategy?: OrderCodeStrategy;
    orderByCodeAccessStrategy?: OrderByCodeAccessStrategy;
    changedPriceHandlingStrategy?: ChangedPriceHandlingStrategy;
    orderPlacedStrategy?: OrderPlacedStrategy;
}
export interface AssetOptions {
    assetNamingStrategy?: AssetNamingStrategy;
    assetStorageStrategy?: AssetStorageStrategy;
    assetPreviewStrategy?: AssetPreviewStrategy;
    permittedFileTypes?: string[];
    uploadMaxFileSize?: number;
}
export interface CatalogOptions {
    collectionFilters?: Array<CollectionFilter<any>>;
    productVariantPriceCalculationStrategy?: ProductVariantPriceCalculationStrategy;
    stockDisplayStrategy?: StockDisplayStrategy;
}
export interface PromotionOptions {
    promotionConditions?: Array<PromotionCondition<any>>;
    promotionActions?: Array<PromotionAction<any>>;
}
export interface ShippingOptions {
    shippingEligibilityCheckers?: Array<ShippingEligibilityChecker<any>>;
    shippingCalculators?: Array<ShippingCalculator<any>>;
    customFulfillmentProcess?: Array<CustomFulfillmentProcess<any>>;
    fulfillmentHandlers?: Array<FulfillmentHandler<any>>;
}
export interface SuperadminCredentials {
    identifier: string;
    password: string;
}
export interface PaymentOptions {
    paymentMethodHandlers: PaymentMethodHandler[];
    paymentMethodEligibilityCheckers?: PaymentMethodEligibilityChecker[];
    customPaymentProcess?: Array<CustomPaymentProcess<any>>;
}
export interface TaxOptions {
    taxZoneStrategy?: TaxZoneStrategy;
    taxLineCalculationStrategy?: TaxLineCalculationStrategy;
}
export interface ImportExportOptions {
    importAssetsDir?: string;
}
export interface JobQueueOptions {
    jobQueueStrategy?: JobQueueStrategy;
    jobBufferStorageStrategy?: JobBufferStorageStrategy;
    activeQueues?: string[];
    enableWorkerHealthCheck?: boolean;
    prefix?: string;
}
export interface EntityOptions {
    entityIdStrategy?: EntityIdStrategy<any>;
    channelCacheTtl?: number;
    zoneCacheTtl?: number;
}
export interface VendureConfig {
    apiOptions: ApiOptions;
    assetOptions?: AssetOptions;
    authOptions: AuthOptions;
    catalogOptions?: CatalogOptions;
    customFields?: CustomFields;
    dbConnectionOptions: ConnectionOptions;
    defaultChannelToken?: string | null;
    defaultLanguageCode?: LanguageCode;
    entityIdStrategy?: EntityIdStrategy<any>;
    entityOptions?: EntityOptions;
    importExportOptions?: ImportExportOptions;
    orderOptions?: OrderOptions;
    paymentOptions: PaymentOptions;
    plugins?: Array<DynamicModule | Type<any>>;
    promotionOptions?: PromotionOptions;
    shippingOptions?: ShippingOptions;
    logger?: VendureLogger;
    taxOptions?: TaxOptions;
    jobQueueOptions?: JobQueueOptions;
}
export interface RuntimeVendureConfig extends Required<VendureConfig> {
    apiOptions: Required<ApiOptions>;
    assetOptions: Required<AssetOptions>;
    authOptions: Required<AuthOptions>;
    catalogOptions: Required<CatalogOptions>;
    customFields: Required<CustomFields>;
    entityOptions: Required<Omit<EntityOptions, 'entityIdStrategy'>> & EntityOptions;
    importExportOptions: Required<ImportExportOptions>;
    jobQueueOptions: Required<JobQueueOptions>;
    orderOptions: Required<OrderOptions>;
    promotionOptions: Required<PromotionOptions>;
    shippingOptions: Required<ShippingOptions>;
    taxOptions: Required<TaxOptions>;
}
declare type DeepPartialSimple<T> = {
    [P in keyof T]?: null | (T[P] extends Array<infer U> ? Array<DeepPartialSimple<U>> : T[P] extends ReadonlyArray<infer X> ? ReadonlyArray<DeepPartialSimple<X>> : T[P] extends Type<any> ? T[P] : DeepPartialSimple<T[P]>);
};
export declare type PartialVendureConfig = DeepPartialSimple<VendureConfig>;
export {};
