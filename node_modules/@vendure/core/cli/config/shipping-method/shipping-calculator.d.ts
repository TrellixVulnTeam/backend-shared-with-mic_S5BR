import { ConfigArg } from '@vendure/common/lib/generated-types';
import { RequestContext } from '../../api/common/request-context';
import { ConfigArgs, ConfigArgValues, ConfigurableOperationDef, ConfigurableOperationDefOptions } from '../../common/configurable-operation';
import { Order } from '../../entity/order/order.entity';
export interface ShippingCalculatorConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {
    calculate: CalculateShippingFn<T>;
}
export declare class ShippingCalculator<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {
    private readonly calculateFn;
    constructor(config: ShippingCalculatorConfig<T>);
    calculate(ctx: RequestContext, order: Order, args: ConfigArg[]): CalculateShippingFnResult;
}
export interface ShippingCalculationResult {
    price: number;
    priceIncludesTax: boolean;
    taxRate: number;
    metadata?: Record<string, any>;
}
export declare type CalculateShippingFnResult = ShippingCalculationResult | Promise<ShippingCalculationResult | undefined> | undefined;
export declare type CalculateShippingFn<T extends ConfigArgs> = (ctx: RequestContext, order: Order, args: ConfigArgValues<T>) => CalculateShippingFnResult;
