import { ConfigArg } from '@vendure/common/lib/generated-types';
import { RequestContext } from '../../api/common/request-context';
import { ConfigArgs, ConfigArgValues, ConfigurableOperationDef, ConfigurableOperationDefOptions } from '../../common/configurable-operation';
import { Order } from '../../entity/order/order.entity';
export declare type PromotionConditionState = Record<string, unknown>;
export declare type CheckPromotionConditionResult = boolean | PromotionConditionState;
export declare type CheckPromotionConditionFn<T extends ConfigArgs, R extends CheckPromotionConditionResult> = (ctx: RequestContext, order: Order, args: ConfigArgValues<T>) => R | Promise<R>;
export interface PromotionConditionConfig<T extends ConfigArgs, C extends string, R extends CheckPromotionConditionResult> extends ConfigurableOperationDefOptions<T> {
    code: C;
    check: CheckPromotionConditionFn<T, R>;
    priorityValue?: number;
}
export declare class PromotionCondition<T extends ConfigArgs = ConfigArgs, C extends string = string, R extends CheckPromotionConditionResult = any> extends ConfigurableOperationDef<T> {
    readonly priorityValue: number;
    private readonly checkFn;
    get code(): C;
    constructor(config: PromotionConditionConfig<T, C, R>);
    check(ctx: RequestContext, order: Order, args: ConfigArg[]): Promise<R>;
}
