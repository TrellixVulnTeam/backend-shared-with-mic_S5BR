import { RequestContext } from '../../../api/common/request-context';
import { RequestContextCacheService } from '../../../cache/request-context-cache.service';
import { ConfigService } from '../../../config/config.service';
import { OrderItem, OrderLine } from '../../../entity';
import { Order } from '../../../entity/order/order.entity';
import { Promotion } from '../../../entity/promotion/promotion.entity';
import { ShippingMethodService } from '../../services/shipping-method.service';
import { TaxRateService } from '../../services/tax-rate.service';
import { ZoneService } from '../../services/zone.service';
import { ShippingCalculator } from '../shipping-calculator/shipping-calculator';
export declare class OrderCalculator {
    private configService;
    private zoneService;
    private taxRateService;
    private shippingMethodService;
    private shippingCalculator;
    private requestContextCache;
    constructor(configService: ConfigService, zoneService: ZoneService, taxRateService: TaxRateService, shippingMethodService: ShippingMethodService, shippingCalculator: ShippingCalculator, requestContextCache: RequestContextCacheService);
    applyPriceAdjustments(ctx: RequestContext, order: Order, promotions: Promotion[], updatedOrderLines?: OrderLine[], options?: {
        recalculateShipping?: boolean;
    }): Promise<OrderItem[]>;
    private applyTaxes;
    private applyTaxesToOrderLine;
    private createTaxRateGetter;
    private applyPromotions;
    private applyOrderItemPromotions;
    private orderLineHasInapplicablePromotions;
    private applyOrderPromotions;
    private applyShippingPromotions;
    private applyShipping;
    calculateOrderTotals(order: Order): void;
}
