import { LanguageCode, Permission } from '@vendure/common/lib/generated-types';
import { ID } from '@vendure/common/lib/shared-types';
import { Request } from 'express';
import { GraphQLResolveInfo } from 'graphql';
import { ApiType } from '../../../api/common/get-api-type';
import { RequestContext } from '../../../api/common/request-context';
import { ConfigService } from '../../../config/config.service';
import { CachedSession } from '../../../config/session-cache/session-cache-strategy';
import { Channel } from '../../../entity/channel/channel.entity';
import { User } from '../../../entity/index';
import { ChannelService } from '../../services/channel.service';
export declare class RequestContextService {
    private channelService;
    private configService;
    constructor(channelService: ChannelService, configService: ConfigService);
    create(config: {
        req?: Request;
        apiType: ApiType;
        channelOrToken?: Channel | string;
        languageCode?: LanguageCode;
        user?: User;
        activeOrderId?: ID;
    }): Promise<RequestContext>;
    fromRequest(req: Request, info?: GraphQLResolveInfo, requiredPermissions?: Permission[], session?: CachedSession): Promise<RequestContext>;
    private getChannelToken;
    private getLanguageCode;
    private userHasRequiredPermissionsOnChannel;
    private arraysIntersect;
}
