import { DeepPartial } from '@vendure/common/lib/shared-types';
import { RequestContext } from '../../../api/common/request-context';
import { Translatable, Translation, TranslationInput } from '../../../common/types/locale-types';
import { TransactionalConnection } from '../../../connection/transactional-connection';
export declare type TranslationContructor<T> = new (input?: DeepPartial<TranslationInput<T>> | DeepPartial<Translation<T>>) => Translation<T>;
export interface TranslationDiff<T> {
    toUpdate: Array<Translation<T>>;
    toAdd: Array<Translation<T>>;
}
export declare class TranslationDiffer<Entity extends Translatable> {
    private translationCtor;
    private connection;
    constructor(translationCtor: TranslationContructor<Entity>, connection: TransactionalConnection);
    diff(existing: Array<Translation<Entity>>, updated?: Array<TranslationInput<Entity>> | null): TranslationDiff<Entity>;
    applyDiff(ctx: RequestContext, entity: Entity, { toUpdate, toAdd }: TranslationDiff<Entity>): Promise<Entity>;
    private translationInputsToEntities;
}
