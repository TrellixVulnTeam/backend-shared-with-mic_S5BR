import { CreateRoleInput, DeletionResponse, Permission, UpdateRoleInput } from '@vendure/common/lib/generated-types';
import { ID, PaginatedList } from '@vendure/common/lib/shared-types';
import { RequestContext } from '../../api/common/request-context';
import { ListQueryOptions } from '../../common/types/common-types';
import { ConfigService } from '../../config/config.service';
import { TransactionalConnection } from '../../connection/transactional-connection';
import { Channel } from '../../entity/channel/channel.entity';
import { Role } from '../../entity/role/role.entity';
import { EventBus } from '../../event-bus';
import { ListQueryBuilder } from '../helpers/list-query-builder/list-query-builder';
import { ChannelService } from './channel.service';
export declare class RoleService {
    private connection;
    private channelService;
    private listQueryBuilder;
    private configService;
    private eventBus;
    constructor(connection: TransactionalConnection, channelService: ChannelService, listQueryBuilder: ListQueryBuilder, configService: ConfigService, eventBus: EventBus);
    initRoles(): Promise<void>;
    findAll(ctx: RequestContext, options?: ListQueryOptions<Role>): Promise<PaginatedList<Role>>;
    findOne(ctx: RequestContext, roleId: ID): Promise<Role | undefined>;
    getChannelsForRole(ctx: RequestContext, roleId: ID): Promise<Channel[]>;
    getSuperAdminRole(): Promise<Role>;
    getCustomerRole(): Promise<Role>;
    getAllPermissions(): string[];
    userHasPermissionOnChannel(ctx: RequestContext, channelId: ID, permission: Permission): Promise<boolean>;
    create(ctx: RequestContext, input: CreateRoleInput): Promise<Role>;
    update(ctx: RequestContext, input: UpdateRoleInput): Promise<Role>;
    delete(ctx: RequestContext, id: ID): Promise<DeletionResponse>;
    assignRoleToChannel(ctx: RequestContext, roleId: ID, channelId: ID): Promise<void>;
    private getPermittedChannels;
    private checkPermissionsAreValid;
    private getRoleByCode;
    private ensureSuperAdminRoleExists;
    private ensureCustomerRoleExists;
    private ensureRolesHaveValidPermissions;
    private createRoleForChannels;
    private getAllAssignablePermissions;
}
