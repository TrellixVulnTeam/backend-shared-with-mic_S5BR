{"version":3,"file":"collection-detail.component.d.ts","sources":["collection-detail.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Asset, BaseDetailComponent, Collection, ConfigurableOperation, ConfigurableOperationDefinition, CustomFieldConfig, DataService, LanguageCode, ModalService, NotificationService, Permission, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\r\nexport declare class CollectionDetailComponent extends BaseDetailComponent<Collection.Fragment> implements OnInit, OnDestroy {\r\n    private changeDetector;\r\n    protected dataService: DataService;\r\n    private formBuilder;\r\n    private notificationService;\r\n    private modalService;\r\n    customFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    assetChanges: {\r\n        assets?: Asset[];\r\n        featuredAsset?: Asset;\r\n    };\r\n    filters: ConfigurableOperation[];\r\n    allFilters: ConfigurableOperationDefinition[];\r\n    readonly updatePermission: Permission[];\r\n    contentsComponent: CollectionContentsComponent;\r\n    constructor(router: Router, route: ActivatedRoute, serverConfigService: ServerConfigService, changeDetector: ChangeDetectorRef, dataService: DataService, formBuilder: FormBuilder, notificationService: NotificationService, modalService: ModalService);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    getFilterDefinition(filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined;\r\n    assetsChanged(): boolean;\r\n    /**\r\n     * If creating a new Collection, automatically generate the slug based on the collection name.\r\n     */\r\n    updateSlug(nameValue: string): void;\r\n    addFilter(collectionFilter: ConfigurableOperation): void;\r\n    removeFilter(collectionFilter: ConfigurableOperation): void;\r\n    create(): void;\r\n    save(): void;\r\n    canDeactivate(): boolean;\r\n    /**\r\n     * Sets the values of the form on changes to the category or current language.\r\n     */\r\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode): void;\r\n    /**\r\n     * Given a category and the value of the form, this method creates an updated copy of the category which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedCollection;\r\n    /**\r\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\r\n     */\r\n    private mapOperationsToInputs;\r\n}\r\n"]}