{"version":3,"file":"order-detail.component.d.ts","sources":["order-detail.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseDetailComponent, CustomFieldConfig, DataService, GetOrderHistory, HistoryEntry, ModalService, NotificationService, Order, OrderDetail, OrderDetailFragment, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nexport declare class OrderDetailComponent extends BaseDetailComponent<OrderDetail.Fragment> implements OnInit, OnDestroy {\r\n    private changeDetector;\r\n    protected dataService: DataService;\r\n    private notificationService;\r\n    private modalService;\r\n    private orderTransitionService;\r\n    detailForm: FormGroup;\r\n    history$: Observable<GetOrderHistory.Items[] | undefined>;\r\n    nextStates$: Observable<string[]>;\r\n    fetchHistory: Subject<void>;\r\n    customFields: CustomFieldConfig[];\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    private readonly defaultStates;\r\n    constructor(router: Router, route: ActivatedRoute, serverConfigService: ServerConfigService, changeDetector: ChangeDetectorRef, dataService: DataService, notificationService: NotificationService, modalService: ModalService, orderTransitionService: OrderTransitionService);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    openStateDiagram(): void;\r\n    transitionToState(state: string): void;\r\n    manuallyTransitionToState(order: OrderDetailFragment): void;\r\n    transitionToModifying(): void;\r\n    updateCustomFields(customFieldsValue: any): void;\r\n    getOrderAddressLines(orderAddress?: {\r\n        [key: string]: string;\r\n    }): string[];\r\n    settlePayment(payment: OrderDetail.Payments): void;\r\n    transitionPaymentState({ payment, state }: {\r\n        payment: OrderDetail.Payments;\r\n        state: string;\r\n    }): void;\r\n    canAddFulfillment(order: OrderDetail.Fragment): boolean;\r\n    hasUnsettledModifications(order: OrderDetailFragment): boolean;\r\n    getOutstandingModificationAmount(order: OrderDetailFragment): number;\r\n    outstandingPaymentAmount(order: OrderDetailFragment): number;\r\n    addManualPayment(order: OrderDetailFragment): void;\r\n    fulfillOrder(): void;\r\n    transitionFulfillment(id: string, state: string): void;\r\n    cancelOrRefund(order: OrderDetail.Fragment): void;\r\n    settleRefund(refund: OrderDetail.Refunds): void;\r\n    addNote(event: {\r\n        note: string;\r\n        isPublic: boolean;\r\n    }): void;\r\n    updateNote(entry: HistoryEntry): void;\r\n    deleteNote(entry: HistoryEntry): import(\"rxjs\").Subscription;\r\n    orderHasSettledPayments(order: OrderDetail.Fragment): boolean;\r\n    private cancelOrder;\r\n    private refundOrder;\r\n    private refetchOrder;\r\n    protected setFormValues(entity: Order.Fragment): void;\r\n}\r\n"]}