import { NetworkStatus } from '@apollo/client/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { merge, Subject } from 'rxjs';
import { distinctUntilChanged, filter, finalize, map, skip, take, takeUntil, tap } from 'rxjs/operators';
import { GET_USER_STATUS } from './definitions/client-definitions';
/**
 * @description
 * This class wraps the Apollo Angular QueryRef object and exposes some getters
 * for convenience.
 *
 * @docsCategory providers
 * @docsPage DataService
 */
export class QueryResult {
    constructor(queryRef, apollo) {
        this.queryRef = queryRef;
        this.apollo = apollo;
        this.completed$ = new Subject();
        this.valueChanges = queryRef.valueChanges;
    }
    /**
     * @description
     * Re-fetch this query whenever the active Channel changes.
     */
    refetchOnChannelChange() {
        const userStatus$ = this.apollo.watchQuery({
            query: GET_USER_STATUS,
        }).valueChanges;
        const activeChannelId$ = userStatus$.pipe(map(data => data.data.userStatus.activeChannelId), filter(notNullOrUndefined), distinctUntilChanged(), skip(1), takeUntil(this.completed$));
        const loggedOut$ = userStatus$.pipe(map(data => data.data.userStatus.isLoggedIn), distinctUntilChanged(), skip(1), filter(isLoggedIn => !isLoggedIn), takeUntil(this.completed$));
        this.valueChanges = merge(activeChannelId$, this.queryRef.valueChanges).pipe(tap(val => {
            if (typeof val === 'string') {
                new Promise(resolve => setTimeout(resolve, 50)).then(() => this.queryRef.refetch());
            }
        }), filter(val => typeof val !== 'string'), takeUntil(loggedOut$), takeUntil(this.completed$));
        this.queryRef.valueChanges = this.valueChanges;
        return this;
    }
    /**
     * @description
     * Returns an Observable which emits a single result and then completes.
     */
    get single$() {
        return this.valueChanges.pipe(filter(result => result.networkStatus === NetworkStatus.ready), take(1), map(result => result.data), finalize(() => {
            this.completed$.next();
            this.completed$.complete();
        }));
    }
    /**
     * @description
     * Returns an Observable which emits until unsubscribed.
     */
    get stream$() {
        return this.valueChanges.pipe(filter(result => result.networkStatus === NetworkStatus.ready), map(result => result.data), finalize(() => {
            this.completed$.next();
            this.completed$.complete();
        }));
    }
    get ref() {
        return this.queryRef;
    }
    /**
     * @description
     * Returns a single-result Observable after applying the map function.
     */
    mapSingle(mapFn) {
        return this.single$.pipe(map(mapFn));
    }
    /**
     * @description
     * Returns a multiple-result Observable after applying the map function.
     */
    mapStream(mapFn) {
        return this.stream$.pipe(map(mapFn));
    }
}
//# sourceMappingURL=data:application/json;base64,