import { gql } from 'apollo-angular';
export const REQUEST_STARTED = gql `
    mutation RequestStarted {
        requestStarted @client
    }
`;
export const REQUEST_COMPLETED = gql `
    mutation RequestCompleted {
        requestCompleted @client
    }
`;
export const USER_STATUS_FRAGMENT = gql `
    fragment UserStatus on UserStatus {
        username
        isLoggedIn
        loginTime
        activeChannelId
        permissions
        channels {
            id
            code
            token
            permissions
        }
    }
`;
export const SET_AS_LOGGED_IN = gql `
    mutation SetAsLoggedIn($input: UserStatusInput!) {
        setAsLoggedIn(input: $input) @client {
            ...UserStatus
        }
    }
    ${USER_STATUS_FRAGMENT}
`;
export const SET_AS_LOGGED_OUT = gql `
    mutation SetAsLoggedOut {
        setAsLoggedOut @client {
            ...UserStatus
        }
    }
    ${USER_STATUS_FRAGMENT}
`;
export const SET_UI_LANGUAGE_AND_LOCALE = gql `
    mutation SetUiLanguage($languageCode: LanguageCode!, $locale: String) {
        setUiLanguage(languageCode: $languageCode) @client
        setUiLocale(locale: $locale) @client
    }
`;
export const SET_UI_LOCALE = gql `
    mutation SetUiLocale($locale: String) {
        setUiLocale(locale: $locale) @client
    }
`;
export const SET_DISPLAY_UI_EXTENSION_POINTS = gql `
    mutation SetDisplayUiExtensionPoints($display: Boolean!) {
        setDisplayUiExtensionPoints(display: $display) @client
    }
`;
export const SET_CONTENT_LANGUAGE = gql `
    mutation SetContentLanguage($languageCode: LanguageCode!) {
        setContentLanguage(languageCode: $languageCode) @client
    }
`;
export const SET_UI_THEME = gql `
    mutation SetUiTheme($theme: String!) {
        setUiTheme(theme: $theme) @client
    }
`;
export const GET_NEWTORK_STATUS = gql `
    query GetNetworkStatus {
        networkStatus @client {
            inFlightRequests
        }
    }
`;
export const GET_USER_STATUS = gql `
    query GetUserStatus {
        userStatus @client {
            ...UserStatus
        }
    }
    ${USER_STATUS_FRAGMENT}
`;
export const GET_UI_STATE = gql `
    query GetUiState {
        uiState @client {
            language
            locale
            contentLanguage
            theme
            displayUiExtensionPoints
        }
    }
`;
export const GET_CLIENT_STATE = gql `
    query GetClientState {
        networkStatus @client {
            inFlightRequests
        }
        userStatus @client {
            ...UserStatus
        }
        uiState @client {
            language
            locale
            contentLanguage
            theme
            displayUiExtensionPoints
        }
    }
    ${USER_STATUS_FRAGMENT}
`;
export const SET_ACTIVE_CHANNEL = gql `
    mutation SetActiveChannel($channelId: ID!) {
        setActiveChannel(channelId: $channelId) @client {
            ...UserStatus
        }
    }
    ${USER_STATUS_FRAGMENT}
`;
export const UPDATE_USER_CHANNELS = gql `
    mutation UpdateUserChannels($channels: [CurrentUserChannelInput!]!) {
        updateUserChannels(channels: $channels) @client {
            ...UserStatus
        }
    }
    ${USER_STATUS_FRAGMENT}
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LWRlZmluaXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9kYXRhL2RlZmluaXRpb25zL2NsaWVudC1kZWZpbml0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQTs7OztDQUlqQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFBOzs7O0NBSW5DLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Ozs7Ozs7O0NBY3RDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU03QixvQkFBb0I7Q0FDekIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQTs7Ozs7O01BTTlCLG9CQUFvQjtDQUN6QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsR0FBRyxDQUFBOzs7OztDQUs1QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQTs7OztDQUkvQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQUcsR0FBRyxDQUFBOzs7O0NBSWpELENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUE7Ozs7Q0FJdEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUE7Ozs7Q0FJOUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQTs7Ozs7O0NBTXBDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNNUIsb0JBQW9CO0NBQ3pCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7O0NBVTlCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7TUFnQjdCLG9CQUFvQjtDQUN6QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNL0Isb0JBQW9CO0NBQ3pCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU1qQyxvQkFBb0I7Q0FDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdxbCB9IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcclxuXHJcbmV4cG9ydCBjb25zdCBSRVFVRVNUX1NUQVJURUQgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBSZXF1ZXN0U3RhcnRlZCB7XHJcbiAgICAgICAgcmVxdWVzdFN0YXJ0ZWQgQGNsaWVudFxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFUVVFU1RfQ09NUExFVEVEID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gUmVxdWVzdENvbXBsZXRlZCB7XHJcbiAgICAgICAgcmVxdWVzdENvbXBsZXRlZCBAY2xpZW50XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVVNFUl9TVEFUVVNfRlJBR01FTlQgPSBncWxgXHJcbiAgICBmcmFnbWVudCBVc2VyU3RhdHVzIG9uIFVzZXJTdGF0dXMge1xyXG4gICAgICAgIHVzZXJuYW1lXHJcbiAgICAgICAgaXNMb2dnZWRJblxyXG4gICAgICAgIGxvZ2luVGltZVxyXG4gICAgICAgIGFjdGl2ZUNoYW5uZWxJZFxyXG4gICAgICAgIHBlcm1pc3Npb25zXHJcbiAgICAgICAgY2hhbm5lbHMge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBjb2RlXHJcbiAgICAgICAgICAgIHRva2VuXHJcbiAgICAgICAgICAgIHBlcm1pc3Npb25zXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVF9BU19MT0dHRURfSU4gPSBncWxgXHJcbiAgICBtdXRhdGlvbiBTZXRBc0xvZ2dlZEluKCRpbnB1dDogVXNlclN0YXR1c0lucHV0ISkge1xyXG4gICAgICAgIHNldEFzTG9nZ2VkSW4oaW5wdXQ6ICRpbnB1dCkgQGNsaWVudCB7XHJcbiAgICAgICAgICAgIC4uLlVzZXJTdGF0dXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke1VTRVJfU1RBVFVTX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVF9BU19MT0dHRURfT1VUID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gU2V0QXNMb2dnZWRPdXQge1xyXG4gICAgICAgIHNldEFzTG9nZ2VkT3V0IEBjbGllbnQge1xyXG4gICAgICAgICAgICAuLi5Vc2VyU3RhdHVzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtVU0VSX1NUQVRVU19GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTRVRfVUlfTEFOR1VBR0VfQU5EX0xPQ0FMRSA9IGdxbGBcclxuICAgIG11dGF0aW9uIFNldFVpTGFuZ3VhZ2UoJGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlISwgJGxvY2FsZTogU3RyaW5nKSB7XHJcbiAgICAgICAgc2V0VWlMYW5ndWFnZShsYW5ndWFnZUNvZGU6ICRsYW5ndWFnZUNvZGUpIEBjbGllbnRcclxuICAgICAgICBzZXRVaUxvY2FsZShsb2NhbGU6ICRsb2NhbGUpIEBjbGllbnRcclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTRVRfVUlfTE9DQUxFID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gU2V0VWlMb2NhbGUoJGxvY2FsZTogU3RyaW5nKSB7XHJcbiAgICAgICAgc2V0VWlMb2NhbGUobG9jYWxlOiAkbG9jYWxlKSBAY2xpZW50XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgU0VUX0RJU1BMQVlfVUlfRVhURU5TSU9OX1BPSU5UUyA9IGdxbGBcclxuICAgIG11dGF0aW9uIFNldERpc3BsYXlVaUV4dGVuc2lvblBvaW50cygkZGlzcGxheTogQm9vbGVhbiEpIHtcclxuICAgICAgICBzZXREaXNwbGF5VWlFeHRlbnNpb25Qb2ludHMoZGlzcGxheTogJGRpc3BsYXkpIEBjbGllbnRcclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTRVRfQ09OVEVOVF9MQU5HVUFHRSA9IGdxbGBcclxuICAgIG11dGF0aW9uIFNldENvbnRlbnRMYW5ndWFnZSgkbGFuZ3VhZ2VDb2RlOiBMYW5ndWFnZUNvZGUhKSB7XHJcbiAgICAgICAgc2V0Q29udGVudExhbmd1YWdlKGxhbmd1YWdlQ29kZTogJGxhbmd1YWdlQ29kZSkgQGNsaWVudFxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVF9VSV9USEVNRSA9IGdxbGBcclxuICAgIG11dGF0aW9uIFNldFVpVGhlbWUoJHRoZW1lOiBTdHJpbmchKSB7XHJcbiAgICAgICAgc2V0VWlUaGVtZSh0aGVtZTogJHRoZW1lKSBAY2xpZW50XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgR0VUX05FV1RPUktfU1RBVFVTID0gZ3FsYFxyXG4gICAgcXVlcnkgR2V0TmV0d29ya1N0YXR1cyB7XHJcbiAgICAgICAgbmV0d29ya1N0YXR1cyBAY2xpZW50IHtcclxuICAgICAgICAgICAgaW5GbGlnaHRSZXF1ZXN0c1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfVVNFUl9TVEFUVVMgPSBncWxgXHJcbiAgICBxdWVyeSBHZXRVc2VyU3RhdHVzIHtcclxuICAgICAgICB1c2VyU3RhdHVzIEBjbGllbnQge1xyXG4gICAgICAgICAgICAuLi5Vc2VyU3RhdHVzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtVU0VSX1NUQVRVU19GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfVUlfU1RBVEUgPSBncWxgXHJcbiAgICBxdWVyeSBHZXRVaVN0YXRlIHtcclxuICAgICAgICB1aVN0YXRlIEBjbGllbnQge1xyXG4gICAgICAgICAgICBsYW5ndWFnZVxyXG4gICAgICAgICAgICBsb2NhbGVcclxuICAgICAgICAgICAgY29udGVudExhbmd1YWdlXHJcbiAgICAgICAgICAgIHRoZW1lXHJcbiAgICAgICAgICAgIGRpc3BsYXlVaUV4dGVuc2lvblBvaW50c1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfQ0xJRU5UX1NUQVRFID0gZ3FsYFxyXG4gICAgcXVlcnkgR2V0Q2xpZW50U3RhdGUge1xyXG4gICAgICAgIG5ldHdvcmtTdGF0dXMgQGNsaWVudCB7XHJcbiAgICAgICAgICAgIGluRmxpZ2h0UmVxdWVzdHNcclxuICAgICAgICB9XHJcbiAgICAgICAgdXNlclN0YXR1cyBAY2xpZW50IHtcclxuICAgICAgICAgICAgLi4uVXNlclN0YXR1c1xyXG4gICAgICAgIH1cclxuICAgICAgICB1aVN0YXRlIEBjbGllbnQge1xyXG4gICAgICAgICAgICBsYW5ndWFnZVxyXG4gICAgICAgICAgICBsb2NhbGVcclxuICAgICAgICAgICAgY29udGVudExhbmd1YWdlXHJcbiAgICAgICAgICAgIHRoZW1lXHJcbiAgICAgICAgICAgIGRpc3BsYXlVaUV4dGVuc2lvblBvaW50c1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7VVNFUl9TVEFUVVNfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgU0VUX0FDVElWRV9DSEFOTkVMID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gU2V0QWN0aXZlQ2hhbm5lbCgkY2hhbm5lbElkOiBJRCEpIHtcclxuICAgICAgICBzZXRBY3RpdmVDaGFubmVsKGNoYW5uZWxJZDogJGNoYW5uZWxJZCkgQGNsaWVudCB7XHJcbiAgICAgICAgICAgIC4uLlVzZXJTdGF0dXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke1VTRVJfU1RBVFVTX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVQREFURV9VU0VSX0NIQU5ORUxTID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gVXBkYXRlVXNlckNoYW5uZWxzKCRjaGFubmVsczogW0N1cnJlbnRVc2VyQ2hhbm5lbElucHV0IV0hKSB7XHJcbiAgICAgICAgdXBkYXRlVXNlckNoYW5uZWxzKGNoYW5uZWxzOiAkY2hhbm5lbHMpIEBjbGllbnQge1xyXG4gICAgICAgICAgICAuLi5Vc2VyU3RhdHVzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtVU0VSX1NUQVRVU19GUkFHTUVOVH1cclxuYDtcclxuIl19