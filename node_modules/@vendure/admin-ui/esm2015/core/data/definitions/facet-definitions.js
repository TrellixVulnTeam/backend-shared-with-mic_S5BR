import { gql } from 'apollo-angular';
export const FACET_VALUE_FRAGMENT = gql `
    fragment FacetValue on FacetValue {
        id
        createdAt
        updatedAt
        languageCode
        code
        name
        translations {
            id
            languageCode
            name
        }
        facet {
            id
            createdAt
            updatedAt
            name
        }
    }
`;
export const FACET_WITH_VALUES_FRAGMENT = gql `
    fragment FacetWithValues on Facet {
        id
        createdAt
        updatedAt
        languageCode
        isPrivate
        code
        name
        translations {
            id
            languageCode
            name
        }
        values {
            ...FacetValue
        }
    }
    ${FACET_VALUE_FRAGMENT}
`;
export const CREATE_FACET = gql `
    mutation CreateFacet($input: CreateFacetInput!) {
        createFacet(input: $input) {
            ...FacetWithValues
        }
    }
    ${FACET_WITH_VALUES_FRAGMENT}
`;
export const UPDATE_FACET = gql `
    mutation UpdateFacet($input: UpdateFacetInput!) {
        updateFacet(input: $input) {
            ...FacetWithValues
        }
    }
    ${FACET_WITH_VALUES_FRAGMENT}
`;
export const DELETE_FACET = gql `
    mutation DeleteFacet($id: ID!, $force: Boolean) {
        deleteFacet(id: $id, force: $force) {
            result
            message
        }
    }
`;
export const CREATE_FACET_VALUES = gql `
    mutation CreateFacetValues($input: [CreateFacetValueInput!]!) {
        createFacetValues(input: $input) {
            ...FacetValue
        }
    }
    ${FACET_VALUE_FRAGMENT}
`;
export const UPDATE_FACET_VALUES = gql `
    mutation UpdateFacetValues($input: [UpdateFacetValueInput!]!) {
        updateFacetValues(input: $input) {
            ...FacetValue
        }
    }
    ${FACET_VALUE_FRAGMENT}
`;
export const DELETE_FACET_VALUES = gql `
    mutation DeleteFacetValues($ids: [ID!]!, $force: Boolean) {
        deleteFacetValues(ids: $ids, force: $force) {
            result
            message
        }
    }
`;
export const GET_FACET_LIST = gql `
    query GetFacetList($options: FacetListOptions) {
        facets(options: $options) {
            items {
                ...FacetWithValues
            }
            totalItems
        }
    }
    ${FACET_WITH_VALUES_FRAGMENT}
`;
export const GET_FACET_WITH_VALUES = gql `
    query GetFacetWithValues($id: ID!) {
        facet(id: $id) {
            ...FacetWithValues
        }
    }
    ${FACET_WITH_VALUES_FRAGMENT}
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQtZGVmaW5pdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvZGVmaW5pdGlvbnMvZmFjZXQtZGVmaW5pdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FvQnRDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQWtCdkMsb0JBQW9CO0NBQ3pCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNekIsMEJBQTBCO0NBQy9CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNekIsMEJBQTBCO0NBQy9CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBTzlCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU1oQyxvQkFBb0I7Q0FDekIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEdBQUcsQ0FBQTs7Ozs7O01BTWhDLG9CQUFvQjtDQUN6QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBT3JDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7TUFTM0IsMEJBQTBCO0NBQy9CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU1sQywwQkFBMEI7Q0FDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdxbCB9IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcclxuXHJcbmV4cG9ydCBjb25zdCBGQUNFVF9WQUxVRV9GUkFHTUVOVCA9IGdxbGBcclxuICAgIGZyYWdtZW50IEZhY2V0VmFsdWUgb24gRmFjZXRWYWx1ZSB7XHJcbiAgICAgICAgaWRcclxuICAgICAgICBjcmVhdGVkQXRcclxuICAgICAgICB1cGRhdGVkQXRcclxuICAgICAgICBsYW5ndWFnZUNvZGVcclxuICAgICAgICBjb2RlXHJcbiAgICAgICAgbmFtZVxyXG4gICAgICAgIHRyYW5zbGF0aW9ucyB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGxhbmd1YWdlQ29kZVxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZhY2V0IHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgY3JlYXRlZEF0XHJcbiAgICAgICAgICAgIHVwZGF0ZWRBdFxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEZBQ0VUX1dJVEhfVkFMVUVTX0ZSQUdNRU5UID0gZ3FsYFxyXG4gICAgZnJhZ21lbnQgRmFjZXRXaXRoVmFsdWVzIG9uIEZhY2V0IHtcclxuICAgICAgICBpZFxyXG4gICAgICAgIGNyZWF0ZWRBdFxyXG4gICAgICAgIHVwZGF0ZWRBdFxyXG4gICAgICAgIGxhbmd1YWdlQ29kZVxyXG4gICAgICAgIGlzUHJpdmF0ZVxyXG4gICAgICAgIGNvZGVcclxuICAgICAgICBuYW1lXHJcbiAgICAgICAgdHJhbnNsYXRpb25zIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlXHJcbiAgICAgICAgICAgIG5hbWVcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsdWVzIHtcclxuICAgICAgICAgICAgLi4uRmFjZXRWYWx1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7RkFDRVRfVkFMVUVfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQ1JFQVRFX0ZBQ0VUID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQ3JlYXRlRmFjZXQoJGlucHV0OiBDcmVhdGVGYWNldElucHV0ISkge1xyXG4gICAgICAgIGNyZWF0ZUZhY2V0KGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uRmFjZXRXaXRoVmFsdWVzXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtGQUNFVF9XSVRIX1ZBTFVFU19GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBVUERBVEVfRkFDRVQgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBVcGRhdGVGYWNldCgkaW5wdXQ6IFVwZGF0ZUZhY2V0SW5wdXQhKSB7XHJcbiAgICAgICAgdXBkYXRlRmFjZXQoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICAuLi5GYWNldFdpdGhWYWx1ZXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0ZBQ0VUX1dJVEhfVkFMVUVTX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFTEVURV9GQUNFVCA9IGdxbGBcclxuICAgIG11dGF0aW9uIERlbGV0ZUZhY2V0KCRpZDogSUQhLCAkZm9yY2U6IEJvb2xlYW4pIHtcclxuICAgICAgICBkZWxldGVGYWNldChpZDogJGlkLCBmb3JjZTogJGZvcmNlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFxyXG4gICAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IENSRUFURV9GQUNFVF9WQUxVRVMgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBDcmVhdGVGYWNldFZhbHVlcygkaW5wdXQ6IFtDcmVhdGVGYWNldFZhbHVlSW5wdXQhXSEpIHtcclxuICAgICAgICBjcmVhdGVGYWNldFZhbHVlcyhpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLkZhY2V0VmFsdWVcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0ZBQ0VUX1ZBTFVFX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVQREFURV9GQUNFVF9WQUxVRVMgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBVcGRhdGVGYWNldFZhbHVlcygkaW5wdXQ6IFtVcGRhdGVGYWNldFZhbHVlSW5wdXQhXSEpIHtcclxuICAgICAgICB1cGRhdGVGYWNldFZhbHVlcyhpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLkZhY2V0VmFsdWVcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0ZBQ0VUX1ZBTFVFX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFTEVURV9GQUNFVF9WQUxVRVMgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBEZWxldGVGYWNldFZhbHVlcygkaWRzOiBbSUQhXSEsICRmb3JjZTogQm9vbGVhbikge1xyXG4gICAgICAgIGRlbGV0ZUZhY2V0VmFsdWVzKGlkczogJGlkcywgZm9yY2U6ICRmb3JjZSkge1xyXG4gICAgICAgICAgICByZXN1bHRcclxuICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfRkFDRVRfTElTVCA9IGdxbGBcclxuICAgIHF1ZXJ5IEdldEZhY2V0TGlzdCgkb3B0aW9uczogRmFjZXRMaXN0T3B0aW9ucykge1xyXG4gICAgICAgIGZhY2V0cyhvcHRpb25zOiAkb3B0aW9ucykge1xyXG4gICAgICAgICAgICBpdGVtcyB7XHJcbiAgICAgICAgICAgICAgICAuLi5GYWNldFdpdGhWYWx1ZXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b3RhbEl0ZW1zXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtGQUNFVF9XSVRIX1ZBTFVFU19GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfRkFDRVRfV0lUSF9WQUxVRVMgPSBncWxgXHJcbiAgICBxdWVyeSBHZXRGYWNldFdpdGhWYWx1ZXMoJGlkOiBJRCEpIHtcclxuICAgICAgICBmYWNldChpZDogJGlkKSB7XHJcbiAgICAgICAgICAgIC4uLkZhY2V0V2l0aFZhbHVlc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7RkFDRVRfV0lUSF9WQUxVRVNfRlJBR01FTlR9XHJcbmA7XHJcbiJdfQ==