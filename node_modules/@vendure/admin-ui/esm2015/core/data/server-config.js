import { Injectable, Injector } from '@angular/core';
import { GET_GLOBAL_SETTINGS, GET_SERVER_CONFIG } from './definitions/settings-definitions';
import { BaseDataService } from './providers/base-data.service';
export function initializeServerConfigService(serverConfigService) {
    return serverConfigService.init();
}
/**
 * A service which fetches the config from the server upon initialization, and then provides that config
 * to the components which require it.
 */
export class ServerConfigService {
    constructor(injector) {
        this.injector = injector;
        this._serverConfig = {};
    }
    get baseDataService() {
        return this.injector.get(BaseDataService);
    }
    /**
     * Fetches the ServerConfig. Should be run as part of the app bootstrap process by attaching
     * to the Angular APP_INITIALIZER token.
     */
    init() {
        return () => this.getServerConfig();
    }
    /**
     * Fetch the ServerConfig. Should be run on app init (in case user is already logged in) and on successful login.
     */
    getServerConfig() {
        return this.baseDataService
            .query(GET_SERVER_CONFIG)
            .single$.toPromise()
            .then(result => {
            this._serverConfig = result.globalSettings.serverConfig;
        }, err => {
            // Let the error fall through to be caught by the http interceptor.
        });
    }
    getAvailableLanguages() {
        return this.baseDataService
            .query(GET_GLOBAL_SETTINGS, {}, 'cache-first')
            .mapSingle(res => res.globalSettings.availableLanguages);
    }
    /**
     * When any of the GlobalSettings are modified, this method should be called to update the Apollo cache.
     */
    refreshGlobalSettings() {
        return this.baseDataService.query(GET_GLOBAL_SETTINGS, {}, 'network-only')
            .single$;
    }
    /**
     * Retrieves the custom field configs for the given entity type.
     */
    getCustomFieldsFor(type) {
        return this.serverConfig.customFieldConfig[type] || [];
    }
    getOrderProcessStates() {
        return this.serverConfig.orderProcess;
    }
    getPermittedAssetTypes() {
        return this.serverConfig.permittedAssetTypes;
    }
    getPermissionDefinitions() {
        return this.serverConfig.permissions;
    }
    get serverConfig() {
        return this._serverConfig;
    }
}
ServerConfigService.decorators = [
    { type: Injectable }
];
ServerConfigService.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9zZXJ2ZXItY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBWXJELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzVGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVoRSxNQUFNLFVBQVUsNkJBQTZCLENBQUMsbUJBQXdDO0lBQ2xGLE9BQU8sbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdEMsQ0FBQztBQUVEOzs7R0FHRztBQUVILE1BQU0sT0FBTyxtQkFBbUI7SUFPNUIsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQU45QixrQkFBYSxHQUFpQixFQUFTLENBQUM7SUFNUCxDQUFDO0lBSjFDLElBQVksZUFBZTtRQUN2QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFrQixlQUFlLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBSUQ7OztPQUdHO0lBQ0gsSUFBSTtRQUNBLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWU7UUFDWCxPQUFPLElBQUksQ0FBQyxlQUFlO2FBQ3RCLEtBQUssQ0FBd0IsaUJBQWlCLENBQUM7YUFDL0MsT0FBTyxDQUFDLFNBQVMsRUFBRTthQUNuQixJQUFJLENBQ0QsTUFBTSxDQUFDLEVBQUU7WUFDTCxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1FBQzVELENBQUMsRUFDRCxHQUFHLENBQUMsRUFBRTtZQUNGLG1FQUFtRTtRQUN2RSxDQUFDLENBQ0osQ0FBQztJQUNWLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsT0FBTyxJQUFJLENBQUMsZUFBZTthQUN0QixLQUFLLENBQTBCLG1CQUFtQixFQUFFLEVBQUUsRUFBRSxhQUFhLENBQUM7YUFDdEUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7T0FFRztJQUNILHFCQUFxQjtRQUNqQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUEwQixtQkFBbUIsRUFBRSxFQUFFLEVBQUUsY0FBYyxDQUFDO2FBQzlGLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxrQkFBa0IsQ0FBQyxJQUErQztRQUM5RCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNELENBQUM7SUFFRCxxQkFBcUI7UUFDakIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztJQUMxQyxDQUFDO0lBRUQsc0JBQXNCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQztJQUNqRCxDQUFDO0lBRUQsd0JBQXdCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDOzs7WUF0RUosVUFBVTs7O1lBdkJVLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIEN1c3RvbUZpZWxkQ29uZmlnLFxyXG4gICAgQ3VzdG9tRmllbGRzLFxyXG4gICAgR2V0R2xvYmFsU2V0dGluZ3MsXHJcbiAgICBHZXRTZXJ2ZXJDb25maWcsXHJcbiAgICBPcmRlclByb2Nlc3NTdGF0ZSxcclxuICAgIFBlcm1pc3Npb25EZWZpbml0aW9uLFxyXG4gICAgU2VydmVyQ29uZmlnLFxyXG59IGZyb20gJy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5cclxuaW1wb3J0IHsgR0VUX0dMT0JBTF9TRVRUSU5HUywgR0VUX1NFUlZFUl9DT05GSUcgfSBmcm9tICcuL2RlZmluaXRpb25zL3NldHRpbmdzLWRlZmluaXRpb25zJztcclxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvYmFzZS1kYXRhLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVTZXJ2ZXJDb25maWdTZXJ2aWNlKHNlcnZlckNvbmZpZ1NlcnZpY2U6IFNlcnZlckNvbmZpZ1NlcnZpY2UpOiAoKSA9PiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIHNlcnZlckNvbmZpZ1NlcnZpY2UuaW5pdCgpO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzZXJ2aWNlIHdoaWNoIGZldGNoZXMgdGhlIGNvbmZpZyBmcm9tIHRoZSBzZXJ2ZXIgdXBvbiBpbml0aWFsaXphdGlvbiwgYW5kIHRoZW4gcHJvdmlkZXMgdGhhdCBjb25maWdcclxuICogdG8gdGhlIGNvbXBvbmVudHMgd2hpY2ggcmVxdWlyZSBpdC5cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNlcnZlckNvbmZpZ1NlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBfc2VydmVyQ29uZmlnOiBTZXJ2ZXJDb25maWcgPSB7fSBhcyBhbnk7XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgYmFzZURhdGFTZXJ2aWNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluamVjdG9yLmdldDxCYXNlRGF0YVNlcnZpY2U+KEJhc2VEYXRhU2VydmljZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBTZXJ2ZXJDb25maWcuIFNob3VsZCBiZSBydW4gYXMgcGFydCBvZiB0aGUgYXBwIGJvb3RzdHJhcCBwcm9jZXNzIGJ5IGF0dGFjaGluZ1xyXG4gICAgICogdG8gdGhlIEFuZ3VsYXIgQVBQX0lOSVRJQUxJWkVSIHRva2VuLlxyXG4gICAgICovXHJcbiAgICBpbml0KCk6ICgpID0+IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHRoaXMuZ2V0U2VydmVyQ29uZmlnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCB0aGUgU2VydmVyQ29uZmlnLiBTaG91bGQgYmUgcnVuIG9uIGFwcCBpbml0IChpbiBjYXNlIHVzZXIgaXMgYWxyZWFkeSBsb2dnZWQgaW4pIGFuZCBvbiBzdWNjZXNzZnVsIGxvZ2luLlxyXG4gICAgICovXHJcbiAgICBnZXRTZXJ2ZXJDb25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlXHJcbiAgICAgICAgICAgIC5xdWVyeTxHZXRTZXJ2ZXJDb25maWcuUXVlcnk+KEdFVF9TRVJWRVJfQ09ORklHKVxyXG4gICAgICAgICAgICAuc2luZ2xlJC50b1Byb21pc2UoKVxyXG4gICAgICAgICAgICAudGhlbihcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VydmVyQ29uZmlnID0gcmVzdWx0Lmdsb2JhbFNldHRpbmdzLnNlcnZlckNvbmZpZztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIExldCB0aGUgZXJyb3IgZmFsbCB0aHJvdWdoIHRvIGJlIGNhdWdodCBieSB0aGUgaHR0cCBpbnRlcmNlcHRvci5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXZhaWxhYmxlTGFuZ3VhZ2VzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZVxyXG4gICAgICAgICAgICAucXVlcnk8R2V0R2xvYmFsU2V0dGluZ3MuUXVlcnk+KEdFVF9HTE9CQUxfU0VUVElOR1MsIHt9LCAnY2FjaGUtZmlyc3QnKVxyXG4gICAgICAgICAgICAubWFwU2luZ2xlKHJlcyA9PiByZXMuZ2xvYmFsU2V0dGluZ3MuYXZhaWxhYmxlTGFuZ3VhZ2VzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYW55IG9mIHRoZSBHbG9iYWxTZXR0aW5ncyBhcmUgbW9kaWZpZWQsIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgdG8gdXBkYXRlIHRoZSBBcG9sbG8gY2FjaGUuXHJcbiAgICAgKi9cclxuICAgIHJlZnJlc2hHbG9iYWxTZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0R2xvYmFsU2V0dGluZ3MuUXVlcnk+KEdFVF9HTE9CQUxfU0VUVElOR1MsIHt9LCAnbmV0d29yay1vbmx5JylcclxuICAgICAgICAgICAgLnNpbmdsZSQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIGN1c3RvbSBmaWVsZCBjb25maWdzIGZvciB0aGUgZ2l2ZW4gZW50aXR5IHR5cGUuXHJcbiAgICAgKi9cclxuICAgIGdldEN1c3RvbUZpZWxkc0Zvcih0eXBlOiBFeGNsdWRlPGtleW9mIEN1c3RvbUZpZWxkcywgJ19fdHlwZW5hbWUnPik6IEN1c3RvbUZpZWxkQ29uZmlnW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZlckNvbmZpZy5jdXN0b21GaWVsZENvbmZpZ1t0eXBlXSB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRPcmRlclByb2Nlc3NTdGF0ZXMoKTogT3JkZXJQcm9jZXNzU3RhdGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmVyQ29uZmlnLm9yZGVyUHJvY2VzcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQZXJtaXR0ZWRBc3NldFR5cGVzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXJDb25maWcucGVybWl0dGVkQXNzZXRUeXBlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQZXJtaXNzaW9uRGVmaW5pdGlvbnMoKTogUGVybWlzc2lvbkRlZmluaXRpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmVyQ29uZmlnLnBlcm1pc3Npb25zO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzZXJ2ZXJDb25maWcoKTogU2VydmVyQ29uZmlnIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmVyQ29uZmlnO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==