import { CREATE_ADMINISTRATOR, CREATE_ROLE, DELETE_ADMINISTRATOR, DELETE_ROLE, GET_ACTIVE_ADMINISTRATOR, GET_ADMINISTRATOR, GET_ADMINISTRATORS, GET_ROLE, GET_ROLES, UPDATE_ACTIVE_ADMINISTRATOR, UPDATE_ADMINISTRATOR, UPDATE_ROLE, } from '../definitions/administrator-definitions';
export class AdministratorDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getAdministrators(take = 10, skip = 0) {
        return this.baseDataService.query(GET_ADMINISTRATORS, {
            options: {
                take,
                skip,
            },
        });
    }
    getActiveAdministrator() {
        return this.baseDataService.query(GET_ACTIVE_ADMINISTRATOR, {});
    }
    getAdministrator(id) {
        return this.baseDataService.query(GET_ADMINISTRATOR, {
            id,
        });
    }
    createAdministrator(input) {
        return this.baseDataService.mutate(CREATE_ADMINISTRATOR, { input });
    }
    updateAdministrator(input) {
        return this.baseDataService.mutate(UPDATE_ADMINISTRATOR, { input });
    }
    updateActiveAdministrator(input) {
        return this.baseDataService.mutate(UPDATE_ACTIVE_ADMINISTRATOR, { input });
    }
    deleteAdministrator(id) {
        return this.baseDataService.mutate(DELETE_ADMINISTRATOR, { id });
    }
    getRoles(take = 10, skip = 0) {
        return this.baseDataService.query(GET_ROLES, {
            options: {
                take,
                skip,
            },
        });
    }
    getRole(id) {
        return this.baseDataService.query(GET_ROLE, { id });
    }
    createRole(input) {
        return this.baseDataService.mutate(CREATE_ROLE, { input });
    }
    updateRole(input) {
        return this.baseDataService.mutate(UPDATE_ROLE, { input });
    }
    deleteRole(id) {
        return this.baseDataService.mutate(DELETE_ROLE, { id });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW5pc3RyYXRvci1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvcHJvdmlkZXJzL2FkbWluaXN0cmF0b3ItZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFCQSxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLFdBQVcsRUFDWCxvQkFBb0IsRUFDcEIsV0FBVyxFQUNYLHdCQUF3QixFQUN4QixpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ2xCLFFBQVEsRUFDUixTQUFTLEVBQ1QsMkJBQTJCLEVBQzNCLG9CQUFvQixFQUNwQixXQUFXLEdBQ2QsTUFBTSwwQ0FBMEMsQ0FBQztBQUlsRCxNQUFNLE9BQU8sd0JBQXdCO0lBQ2pDLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7SUFFeEQsaUJBQWlCLENBQUMsT0FBZSxFQUFFLEVBQUUsT0FBZSxDQUFDO1FBQ2pELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLGtCQUFrQixFQUNsQjtZQUNJLE9BQU8sRUFBRTtnQkFDTCxJQUFJO2dCQUNKLElBQUk7YUFDUDtTQUNKLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxzQkFBc0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBK0Isd0JBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEcsQ0FBQztJQUVELGdCQUFnQixDQUFDLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FDN0IsaUJBQWlCLEVBQ2pCO1lBQ0ksRUFBRTtTQUNMLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUErQjtRQUMvQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixvQkFBb0IsRUFDcEIsRUFBRSxLQUFLLEVBQUUsQ0FDWixDQUFDO0lBQ04sQ0FBQztJQUVELG1CQUFtQixDQUFDLEtBQStCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLG9CQUFvQixFQUNwQixFQUFFLEtBQUssRUFBRSxDQUNaLENBQUM7SUFDTixDQUFDO0lBRUQseUJBQXlCLENBQUMsS0FBcUM7UUFDM0QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FHaEMsMkJBQTJCLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxFQUFVO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLG9CQUFvQixFQUNwQixFQUFFLEVBQUUsRUFBRSxDQUNULENBQUM7SUFDTixDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQWUsRUFBRSxFQUFFLE9BQWUsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFxQyxTQUFTLEVBQUU7WUFDN0UsT0FBTyxFQUFFO2dCQUNMLElBQUk7Z0JBQ0osSUFBSTthQUNQO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUFVO1FBQ2QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBbUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQXNCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQTRDLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFzQjtRQUM3QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUE0QyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUFFRCxVQUFVLENBQUMsRUFBVTtRQUNqQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUE0QyxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZldGNoUG9saWN5IH0gZnJvbSAnQGFwb2xsby9jbGllbnQnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENyZWF0ZUFkbWluaXN0cmF0b3IsXHJcbiAgICBDcmVhdGVBZG1pbmlzdHJhdG9ySW5wdXQsXHJcbiAgICBDcmVhdGVSb2xlLFxyXG4gICAgQ3JlYXRlUm9sZUlucHV0LFxyXG4gICAgRGVsZXRlQWRtaW5pc3RyYXRvcixcclxuICAgIERlbGV0ZVJvbGUsXHJcbiAgICBHZXRBY3RpdmVBZG1pbmlzdHJhdG9yLFxyXG4gICAgR2V0QWRtaW5pc3RyYXRvcixcclxuICAgIEdldEFkbWluaXN0cmF0b3JzLFxyXG4gICAgR2V0Um9sZSxcclxuICAgIEdldFJvbGVzLFxyXG4gICAgVXBkYXRlQWN0aXZlQWRtaW5pc3RyYXRvcixcclxuICAgIFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3JJbnB1dCxcclxuICAgIFVwZGF0ZUFkbWluaXN0cmF0b3IsXHJcbiAgICBVcGRhdGVBZG1pbmlzdHJhdG9ySW5wdXQsXHJcbiAgICBVcGRhdGVSb2xlLFxyXG4gICAgVXBkYXRlUm9sZUlucHV0LFxyXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gICAgQ1JFQVRFX0FETUlOSVNUUkFUT1IsXHJcbiAgICBDUkVBVEVfUk9MRSxcclxuICAgIERFTEVURV9BRE1JTklTVFJBVE9SLFxyXG4gICAgREVMRVRFX1JPTEUsXHJcbiAgICBHRVRfQUNUSVZFX0FETUlOSVNUUkFUT1IsXHJcbiAgICBHRVRfQURNSU5JU1RSQVRPUixcclxuICAgIEdFVF9BRE1JTklTVFJBVE9SUyxcclxuICAgIEdFVF9ST0xFLFxyXG4gICAgR0VUX1JPTEVTLFxyXG4gICAgVVBEQVRFX0FDVElWRV9BRE1JTklTVFJBVE9SLFxyXG4gICAgVVBEQVRFX0FETUlOSVNUUkFUT1IsXHJcbiAgICBVUERBVEVfUk9MRSxcclxufSBmcm9tICcuLi9kZWZpbml0aW9ucy9hZG1pbmlzdHJhdG9yLWRlZmluaXRpb25zJztcclxuXHJcbmltcG9ydCB7IEJhc2VEYXRhU2VydmljZSB9IGZyb20gJy4vYmFzZS1kYXRhLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFkbWluaXN0cmF0b3JEYXRhU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VEYXRhU2VydmljZTogQmFzZURhdGFTZXJ2aWNlKSB7fVxyXG5cclxuICAgIGdldEFkbWluaXN0cmF0b3JzKHRha2U6IG51bWJlciA9IDEwLCBza2lwOiBudW1iZXIgPSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldEFkbWluaXN0cmF0b3JzLlF1ZXJ5LCBHZXRBZG1pbmlzdHJhdG9ycy5WYXJpYWJsZXM+KFxyXG4gICAgICAgICAgICBHRVRfQURNSU5JU1RSQVRPUlMsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB0YWtlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNraXAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWN0aXZlQWRtaW5pc3RyYXRvcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0QWN0aXZlQWRtaW5pc3RyYXRvci5RdWVyeT4oR0VUX0FDVElWRV9BRE1JTklTVFJBVE9SLCB7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWRtaW5pc3RyYXRvcihpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldEFkbWluaXN0cmF0b3IuUXVlcnksIEdldEFkbWluaXN0cmF0b3IuVmFyaWFibGVzPihcclxuICAgICAgICAgICAgR0VUX0FETUlOSVNUUkFUT1IsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQWRtaW5pc3RyYXRvcihpbnB1dDogQ3JlYXRlQWRtaW5pc3RyYXRvcklucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxDcmVhdGVBZG1pbmlzdHJhdG9yLk11dGF0aW9uLCBDcmVhdGVBZG1pbmlzdHJhdG9yLlZhcmlhYmxlcz4oXHJcbiAgICAgICAgICAgIENSRUFURV9BRE1JTklTVFJBVE9SLFxyXG4gICAgICAgICAgICB7IGlucHV0IH0sXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVBZG1pbmlzdHJhdG9yKGlucHV0OiBVcGRhdGVBZG1pbmlzdHJhdG9ySW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFVwZGF0ZUFkbWluaXN0cmF0b3IuTXV0YXRpb24sIFVwZGF0ZUFkbWluaXN0cmF0b3IuVmFyaWFibGVzPihcclxuICAgICAgICAgICAgVVBEQVRFX0FETUlOSVNUUkFUT1IsXHJcbiAgICAgICAgICAgIHsgaW5wdXQgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3IoaW5wdXQ6IFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3JJbnB1dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XHJcbiAgICAgICAgICAgIFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3IuTXV0YXRpb24sXHJcbiAgICAgICAgICAgIFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3IuVmFyaWFibGVzXHJcbiAgICAgICAgPihVUERBVEVfQUNUSVZFX0FETUlOSVNUUkFUT1IsIHsgaW5wdXQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlQWRtaW5pc3RyYXRvcihpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxEZWxldGVBZG1pbmlzdHJhdG9yLk11dGF0aW9uLCBEZWxldGVBZG1pbmlzdHJhdG9yLlZhcmlhYmxlcz4oXHJcbiAgICAgICAgICAgIERFTEVURV9BRE1JTklTVFJBVE9SLFxyXG4gICAgICAgICAgICB7IGlkIH0sXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSb2xlcyh0YWtlOiBudW1iZXIgPSAxMCwgc2tpcDogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRSb2xlcy5RdWVyeSwgR2V0Um9sZXMuVmFyaWFibGVzPihHRVRfUk9MRVMsIHtcclxuICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgdGFrZSxcclxuICAgICAgICAgICAgICAgIHNraXAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Um9sZShpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFJvbGUuUXVlcnksIEdldFJvbGUuVmFyaWFibGVzPihHRVRfUk9MRSwgeyBpZCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVSb2xlKGlucHV0OiBDcmVhdGVSb2xlSW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZVJvbGUuTXV0YXRpb24sIENyZWF0ZVJvbGUuVmFyaWFibGVzPihDUkVBVEVfUk9MRSwgeyBpbnB1dCB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVSb2xlKGlucHV0OiBVcGRhdGVSb2xlSW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFVwZGF0ZVJvbGUuTXV0YXRpb24sIFVwZGF0ZVJvbGUuVmFyaWFibGVzPihVUERBVEVfUk9MRSwgeyBpbnB1dCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVSb2xlKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPERlbGV0ZVJvbGUuTXV0YXRpb24sIERlbGV0ZVJvbGUuVmFyaWFibGVzPihERUxFVEVfUk9MRSwgeyBpZCB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=