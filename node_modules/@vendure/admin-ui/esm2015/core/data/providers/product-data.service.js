import { pick } from '@vendure/common/lib/pick';
import { SortOrder, } from '../../common/generated-types';
import { ADD_OPTION_GROUP_TO_PRODUCT, ADD_OPTION_TO_GROUP, ASSIGN_PRODUCTS_TO_CHANNEL, ASSIGN_VARIANTS_TO_CHANNEL, CREATE_ASSETS, CREATE_PRODUCT, CREATE_PRODUCT_OPTION_GROUP, CREATE_PRODUCT_VARIANTS, CREATE_TAG, DELETE_ASSETS, DELETE_PRODUCT, DELETE_PRODUCT_VARIANT, DELETE_TAG, GET_ASSET, GET_ASSET_LIST, GET_PRODUCT_LIST, GET_PRODUCT_OPTION_GROUP, GET_PRODUCT_OPTION_GROUPS, GET_PRODUCT_SIMPLE, GET_PRODUCT_VARIANT, GET_PRODUCT_VARIANT_LIST, GET_PRODUCT_VARIANT_LIST_SIMPLE, GET_PRODUCT_VARIANT_OPTIONS, GET_PRODUCT_WITH_VARIANTS, GET_TAG, GET_TAG_LIST, PRODUCT_SELECTOR_SEARCH, REMOVE_OPTION_GROUP_FROM_PRODUCT, REMOVE_PRODUCTS_FROM_CHANNEL, REMOVE_VARIANTS_FROM_CHANNEL, SEARCH_PRODUCTS, UPDATE_ASSET, UPDATE_PRODUCT, UPDATE_PRODUCT_OPTION, UPDATE_PRODUCT_OPTION_GROUP, UPDATE_PRODUCT_VARIANTS, UPDATE_TAG, } from '../definitions/product-definitions';
import { GET_PENDING_SEARCH_INDEX_UPDATES, REINDEX, RUN_PENDING_SEARCH_INDEX_UPDATES, } from '../definitions/settings-definitions';
export class ProductDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    searchProducts(term, take = 10, skip = 0) {
        return this.baseDataService.query(SEARCH_PRODUCTS, {
            input: {
                term,
                take,
                skip,
                groupByProduct: true,
            },
        });
    }
    productSelectorSearch(term, take) {
        return this.baseDataService.query(PRODUCT_SELECTOR_SEARCH, {
            take,
            term,
        });
    }
    reindex() {
        return this.baseDataService.mutate(REINDEX);
    }
    getPendingSearchIndexUpdates() {
        return this.baseDataService.query(GET_PENDING_SEARCH_INDEX_UPDATES);
    }
    runPendingSearchIndexUpdates() {
        return this.baseDataService.mutate(RUN_PENDING_SEARCH_INDEX_UPDATES);
    }
    getProducts(options) {
        return this.baseDataService.query(GET_PRODUCT_LIST, {
            options,
        });
    }
    getProduct(id, variantListOptions) {
        return this.baseDataService.query(GET_PRODUCT_WITH_VARIANTS, {
            id,
            variantListOptions,
        });
    }
    getProductSimple(id) {
        return this.baseDataService.query(GET_PRODUCT_SIMPLE, {
            id,
        });
    }
    getProductVariantsSimple(options, productId) {
        return this.baseDataService.query(GET_PRODUCT_VARIANT_LIST_SIMPLE, { options, productId });
    }
    getProductVariants(options, productId) {
        return this.baseDataService.query(GET_PRODUCT_VARIANT_LIST, { options, productId });
    }
    getProductVariant(id) {
        return this.baseDataService.query(GET_PRODUCT_VARIANT, { id });
    }
    getProductVariantsOptions(id) {
        return this.baseDataService.query(GET_PRODUCT_VARIANT_OPTIONS, {
            id,
        });
    }
    getProductOptionGroup(id) {
        return this.baseDataService.query(GET_PRODUCT_OPTION_GROUP, {
            id,
        });
    }
    createProduct(product) {
        const input = {
            input: pick(product, [
                'enabled',
                'translations',
                'customFields',
                'assetIds',
                'featuredAssetId',
                'facetValueIds',
            ]),
        };
        return this.baseDataService.mutate(CREATE_PRODUCT, input);
    }
    updateProduct(product) {
        const input = {
            input: pick(product, [
                'id',
                'enabled',
                'translations',
                'customFields',
                'assetIds',
                'featuredAssetId',
                'facetValueIds',
            ]),
        };
        return this.baseDataService.mutate(UPDATE_PRODUCT, input);
    }
    deleteProduct(id) {
        return this.baseDataService.mutate(DELETE_PRODUCT, {
            id,
        });
    }
    createProductVariants(input) {
        return this.baseDataService.mutate(CREATE_PRODUCT_VARIANTS, {
            input,
        });
    }
    updateProductVariants(variants) {
        const input = {
            input: variants.map(pick([
                'id',
                'enabled',
                'translations',
                'sku',
                'price',
                'taxCategoryId',
                'facetValueIds',
                'featuredAssetId',
                'assetIds',
                'trackInventory',
                'outOfStockThreshold',
                'useGlobalOutOfStockThreshold',
                'stockOnHand',
                'customFields',
            ])),
        };
        return this.baseDataService.mutate(UPDATE_PRODUCT_VARIANTS, input);
    }
    deleteProductVariant(id) {
        return this.baseDataService.mutate(DELETE_PRODUCT_VARIANT, {
            id,
        });
    }
    createProductOptionGroups(productOptionGroup) {
        const input = {
            input: productOptionGroup,
        };
        return this.baseDataService.mutate(CREATE_PRODUCT_OPTION_GROUP, input);
    }
    addOptionGroupToProduct(variables) {
        return this.baseDataService.mutate(ADD_OPTION_GROUP_TO_PRODUCT, variables);
    }
    addOptionToGroup(input) {
        return this.baseDataService.mutate(ADD_OPTION_TO_GROUP, { input });
    }
    removeOptionGroupFromProduct(variables) {
        return this.baseDataService.mutate(REMOVE_OPTION_GROUP_FROM_PRODUCT, variables);
    }
    updateProductOption(input) {
        return this.baseDataService.mutate(UPDATE_PRODUCT_OPTION, {
            input: pick(input, ['id', 'code', 'translations', 'customFields']),
        });
    }
    updateProductOptionGroup(input) {
        return this.baseDataService.mutate(UPDATE_PRODUCT_OPTION_GROUP, {
            input: pick(input, ['id', 'code', 'translations', 'customFields']),
        });
    }
    getProductOptionGroups(filterTerm) {
        return this.baseDataService.query(GET_PRODUCT_OPTION_GROUPS, {
            filterTerm,
        });
    }
    getAssetList(take = 10, skip = 0) {
        return this.baseDataService.query(GET_ASSET_LIST, {
            options: {
                skip,
                take,
                sort: {
                    createdAt: SortOrder.DESC,
                },
            },
        });
    }
    getAsset(id) {
        return this.baseDataService.query(GET_ASSET, {
            id,
        });
    }
    createAssets(files) {
        return this.baseDataService.mutate(CREATE_ASSETS, {
            input: files.map(file => ({ file })),
        });
    }
    updateAsset(input) {
        return this.baseDataService.mutate(UPDATE_ASSET, {
            input,
        });
    }
    deleteAssets(ids, force) {
        return this.baseDataService.mutate(DELETE_ASSETS, {
            input: {
                assetIds: ids,
                force,
            },
        });
    }
    assignProductsToChannel(input) {
        return this.baseDataService.mutate(ASSIGN_PRODUCTS_TO_CHANNEL, {
            input,
        });
    }
    removeProductsFromChannel(input) {
        return this.baseDataService.mutate(REMOVE_PRODUCTS_FROM_CHANNEL, {
            input,
        });
    }
    assignVariantsToChannel(input) {
        return this.baseDataService.mutate(ASSIGN_VARIANTS_TO_CHANNEL, {
            input,
        });
    }
    removeVariantsFromChannel(input) {
        return this.baseDataService.mutate(REMOVE_VARIANTS_FROM_CHANNEL, {
            input,
        });
    }
    getTag(id) {
        return this.baseDataService.query(GET_TAG, { id });
    }
    getTagList(options) {
        return this.baseDataService.query(GET_TAG_LIST, { options });
    }
    createTag(input) {
        return this.baseDataService.mutate(CREATE_TAG, { input });
    }
    updateTag(input) {
        return this.baseDataService.mutate(UPDATE_TAG, { input });
    }
    deleteTag(id) {
        return this.baseDataService.mutate(DELETE_TAG, { id });
    }
}
//# sourceMappingURL=data:application/json;base64,