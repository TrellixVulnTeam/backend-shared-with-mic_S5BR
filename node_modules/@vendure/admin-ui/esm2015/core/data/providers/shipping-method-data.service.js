import { pick } from '@vendure/common/lib/pick';
import { CREATE_SHIPPING_METHOD, DELETE_SHIPPING_METHOD, GET_SHIPPING_METHOD, GET_SHIPPING_METHOD_LIST, GET_SHIPPING_METHOD_OPERATIONS, TEST_ELIGIBLE_SHIPPING_METHODS, TEST_SHIPPING_METHOD, UPDATE_SHIPPING_METHOD, } from '../definitions/shipping-definitions';
export class ShippingMethodDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getShippingMethods(take = 10, skip = 0) {
        return this.baseDataService.query(GET_SHIPPING_METHOD_LIST, {
            options: {
                take,
                skip,
            },
        });
    }
    getShippingMethod(id) {
        return this.baseDataService.query(GET_SHIPPING_METHOD, {
            id,
        });
    }
    getShippingMethodOperations() {
        return this.baseDataService.query(GET_SHIPPING_METHOD_OPERATIONS);
    }
    createShippingMethod(input) {
        const variables = {
            input: pick(input, [
                'code',
                'checker',
                'calculator',
                'fulfillmentHandler',
                'customFields',
                'translations',
            ]),
        };
        return this.baseDataService.mutate(CREATE_SHIPPING_METHOD, variables);
    }
    updateShippingMethod(input) {
        const variables = {
            input: pick(input, [
                'id',
                'code',
                'checker',
                'calculator',
                'fulfillmentHandler',
                'customFields',
                'translations',
            ]),
        };
        return this.baseDataService.mutate(UPDATE_SHIPPING_METHOD, variables);
    }
    deleteShippingMethod(id) {
        return this.baseDataService.mutate(DELETE_SHIPPING_METHOD, {
            id,
        });
    }
    testShippingMethod(input) {
        return this.baseDataService.query(TEST_SHIPPING_METHOD, {
            input,
        });
    }
    testEligibleShippingMethods(input) {
        return this.baseDataService.query(TEST_ELIGIBLE_SHIPPING_METHODS, {
            input,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hpcHBpbmctbWV0aG9kLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvc2hpcHBpbmctbWV0aG9kLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFnQmhELE9BQU8sRUFDSCxzQkFBc0IsRUFDdEIsc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQix3QkFBd0IsRUFDeEIsOEJBQThCLEVBQzlCLDhCQUE4QixFQUM5QixvQkFBb0IsRUFDcEIsc0JBQXNCLEdBQ3pCLE1BQU0scUNBQXFDLENBQUM7QUFJN0MsTUFBTSxPQUFPLHlCQUF5QjtJQUNsQyxZQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFBRyxDQUFDO0lBRXhELGtCQUFrQixDQUFDLE9BQWUsRUFBRSxFQUFFLE9BQWUsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUM3Qix3QkFBd0IsRUFDeEI7WUFDSSxPQUFPLEVBQUU7Z0JBQ0wsSUFBSTtnQkFDSixJQUFJO2FBQ1A7U0FDSixDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsaUJBQWlCLENBQUMsRUFBVTtRQUN4QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUM3QixtQkFBbUIsRUFDbkI7WUFDSSxFQUFFO1NBQ0wsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELDJCQUEyQjtRQUN2QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFvQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxLQUFnQztRQUNqRCxNQUFNLFNBQVMsR0FBbUM7WUFDOUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2YsTUFBTTtnQkFDTixTQUFTO2dCQUNULFlBQVk7Z0JBQ1osb0JBQW9CO2dCQUNwQixjQUFjO2dCQUNkLGNBQWM7YUFDakIsQ0FBQztTQUNMLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixzQkFBc0IsRUFDdEIsU0FBUyxDQUNaLENBQUM7SUFDTixDQUFDO0lBRUQsb0JBQW9CLENBQUMsS0FBZ0M7UUFDakQsTUFBTSxTQUFTLEdBQW1DO1lBQzlDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNmLElBQUk7Z0JBQ0osTUFBTTtnQkFDTixTQUFTO2dCQUNULFlBQVk7Z0JBQ1osb0JBQW9CO2dCQUNwQixjQUFjO2dCQUNkLGNBQWM7YUFDakIsQ0FBQztTQUNMLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixzQkFBc0IsRUFDdEIsU0FBUyxDQUNaLENBQUM7SUFDTixDQUFDO0lBRUQsb0JBQW9CLENBQUMsRUFBVTtRQUMzQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixzQkFBc0IsRUFDdEI7WUFDSSxFQUFFO1NBQ0wsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQThCO1FBQzdDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLG9CQUFvQixFQUNwQjtZQUNJLEtBQUs7U0FDUixDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsMkJBQTJCLENBQUMsS0FBdUM7UUFDL0QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FHL0IsOEJBQThCLEVBQUU7WUFDOUIsS0FBSztTQUNSLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBpY2sgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3BpY2snO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENyZWF0ZVNoaXBwaW5nTWV0aG9kLFxyXG4gICAgQ3JlYXRlU2hpcHBpbmdNZXRob2RJbnB1dCxcclxuICAgIERlbGV0ZVNoaXBwaW5nTWV0aG9kLFxyXG4gICAgR2V0U2hpcHBpbmdNZXRob2QsXHJcbiAgICBHZXRTaGlwcGluZ01ldGhvZExpc3QsXHJcbiAgICBHZXRTaGlwcGluZ01ldGhvZE9wZXJhdGlvbnMsXHJcbiAgICBUZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHMsXHJcbiAgICBUZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHNJbnB1dCxcclxuICAgIFRlc3RTaGlwcGluZ01ldGhvZCxcclxuICAgIFRlc3RTaGlwcGluZ01ldGhvZElucHV0LFxyXG4gICAgVXBkYXRlU2hpcHBpbmdNZXRob2QsXHJcbiAgICBVcGRhdGVTaGlwcGluZ01ldGhvZElucHV0LFxyXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gICAgQ1JFQVRFX1NISVBQSU5HX01FVEhPRCxcclxuICAgIERFTEVURV9TSElQUElOR19NRVRIT0QsXHJcbiAgICBHRVRfU0hJUFBJTkdfTUVUSE9ELFxyXG4gICAgR0VUX1NISVBQSU5HX01FVEhPRF9MSVNULFxyXG4gICAgR0VUX1NISVBQSU5HX01FVEhPRF9PUEVSQVRJT05TLFxyXG4gICAgVEVTVF9FTElHSUJMRV9TSElQUElOR19NRVRIT0RTLFxyXG4gICAgVEVTVF9TSElQUElOR19NRVRIT0QsXHJcbiAgICBVUERBVEVfU0hJUFBJTkdfTUVUSE9ELFxyXG59IGZyb20gJy4uL2RlZmluaXRpb25zL3NoaXBwaW5nLWRlZmluaXRpb25zJztcclxuXHJcbmltcG9ydCB7IEJhc2VEYXRhU2VydmljZSB9IGZyb20gJy4vYmFzZS1kYXRhLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNoaXBwaW5nTWV0aG9kRGF0YVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBiYXNlRGF0YVNlcnZpY2U6IEJhc2VEYXRhU2VydmljZSkge31cclxuXHJcbiAgICBnZXRTaGlwcGluZ01ldGhvZHModGFrZTogbnVtYmVyID0gMTAsIHNraXA6IG51bWJlciA9IDApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0U2hpcHBpbmdNZXRob2RMaXN0LlF1ZXJ5LCBHZXRTaGlwcGluZ01ldGhvZExpc3QuVmFyaWFibGVzPihcclxuICAgICAgICAgICAgR0VUX1NISVBQSU5HX01FVEhPRF9MSVNULFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZSxcclxuICAgICAgICAgICAgICAgICAgICBza2lwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNoaXBwaW5nTWV0aG9kKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0U2hpcHBpbmdNZXRob2QuUXVlcnksIEdldFNoaXBwaW5nTWV0aG9kLlZhcmlhYmxlcz4oXHJcbiAgICAgICAgICAgIEdFVF9TSElQUElOR19NRVRIT0QsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2hpcHBpbmdNZXRob2RPcGVyYXRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRTaGlwcGluZ01ldGhvZE9wZXJhdGlvbnMuUXVlcnk+KEdFVF9TSElQUElOR19NRVRIT0RfT1BFUkFUSU9OUyk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2hpcHBpbmdNZXRob2QoaW5wdXQ6IENyZWF0ZVNoaXBwaW5nTWV0aG9kSW5wdXQpIHtcclxuICAgICAgICBjb25zdCB2YXJpYWJsZXM6IENyZWF0ZVNoaXBwaW5nTWV0aG9kLlZhcmlhYmxlcyA9IHtcclxuICAgICAgICAgICAgaW5wdXQ6IHBpY2soaW5wdXQsIFtcclxuICAgICAgICAgICAgICAgICdjb2RlJyxcclxuICAgICAgICAgICAgICAgICdjaGVja2VyJyxcclxuICAgICAgICAgICAgICAgICdjYWxjdWxhdG9yJyxcclxuICAgICAgICAgICAgICAgICdmdWxmaWxsbWVudEhhbmRsZXInLFxyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbUZpZWxkcycsXHJcbiAgICAgICAgICAgICAgICAndHJhbnNsYXRpb25zJyxcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZVNoaXBwaW5nTWV0aG9kLk11dGF0aW9uLCBDcmVhdGVTaGlwcGluZ01ldGhvZC5WYXJpYWJsZXM+KFxyXG4gICAgICAgICAgICBDUkVBVEVfU0hJUFBJTkdfTUVUSE9ELFxyXG4gICAgICAgICAgICB2YXJpYWJsZXMsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTaGlwcGluZ01ldGhvZChpbnB1dDogVXBkYXRlU2hpcHBpbmdNZXRob2RJbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHZhcmlhYmxlczogVXBkYXRlU2hpcHBpbmdNZXRob2QuVmFyaWFibGVzID0ge1xyXG4gICAgICAgICAgICBpbnB1dDogcGljayhpbnB1dCwgW1xyXG4gICAgICAgICAgICAgICAgJ2lkJyxcclxuICAgICAgICAgICAgICAgICdjb2RlJyxcclxuICAgICAgICAgICAgICAgICdjaGVja2VyJyxcclxuICAgICAgICAgICAgICAgICdjYWxjdWxhdG9yJyxcclxuICAgICAgICAgICAgICAgICdmdWxmaWxsbWVudEhhbmRsZXInLFxyXG4gICAgICAgICAgICAgICAgJ2N1c3RvbUZpZWxkcycsXHJcbiAgICAgICAgICAgICAgICAndHJhbnNsYXRpb25zJyxcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFVwZGF0ZVNoaXBwaW5nTWV0aG9kLk11dGF0aW9uLCBVcGRhdGVTaGlwcGluZ01ldGhvZC5WYXJpYWJsZXM+KFxyXG4gICAgICAgICAgICBVUERBVEVfU0hJUFBJTkdfTUVUSE9ELFxyXG4gICAgICAgICAgICB2YXJpYWJsZXMsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVTaGlwcGluZ01ldGhvZChpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxEZWxldGVTaGlwcGluZ01ldGhvZC5NdXRhdGlvbiwgRGVsZXRlU2hpcHBpbmdNZXRob2QuVmFyaWFibGVzPihcclxuICAgICAgICAgICAgREVMRVRFX1NISVBQSU5HX01FVEhPRCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0ZXN0U2hpcHBpbmdNZXRob2QoaW5wdXQ6IFRlc3RTaGlwcGluZ01ldGhvZElucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PFRlc3RTaGlwcGluZ01ldGhvZC5RdWVyeSwgVGVzdFNoaXBwaW5nTWV0aG9kLlZhcmlhYmxlcz4oXHJcbiAgICAgICAgICAgIFRFU1RfU0hJUFBJTkdfTUVUSE9ELFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHRlc3RFbGlnaWJsZVNoaXBwaW5nTWV0aG9kcyhpbnB1dDogVGVzdEVsaWdpYmxlU2hpcHBpbmdNZXRob2RzSW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8XHJcbiAgICAgICAgICAgIFRlc3RFbGlnaWJsZVNoaXBwaW5nTWV0aG9kcy5RdWVyeSxcclxuICAgICAgICAgICAgVGVzdEVsaWdpYmxlU2hpcHBpbmdNZXRob2RzLlZhcmlhYmxlc1xyXG4gICAgICAgID4oVEVTVF9FTElHSUJMRV9TSElQUElOR19NRVRIT0RTLCB7XHJcbiAgICAgICAgICAgIGlucHV0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==