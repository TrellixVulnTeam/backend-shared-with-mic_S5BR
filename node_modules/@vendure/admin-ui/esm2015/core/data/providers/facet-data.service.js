import { pick } from '@vendure/common/lib/pick';
import { CREATE_FACET, CREATE_FACET_VALUES, DELETE_FACET, DELETE_FACET_VALUES, GET_FACET_LIST, GET_FACET_WITH_VALUES, UPDATE_FACET, UPDATE_FACET_VALUES, } from '../definitions/facet-definitions';
export class FacetDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getFacets(take = 10, skip = 0) {
        return this.baseDataService.query(GET_FACET_LIST, {
            options: {
                take,
                skip,
            },
        });
    }
    getAllFacets() {
        return this.baseDataService.query(GET_FACET_LIST, {});
    }
    getFacet(id) {
        return this.baseDataService.query(GET_FACET_WITH_VALUES, {
            id,
        });
    }
    createFacet(facet) {
        const input = {
            input: pick(facet, ['code', 'isPrivate', 'translations', 'values', 'customFields']),
        };
        return this.baseDataService.mutate(CREATE_FACET, input);
    }
    updateFacet(facet) {
        const input = {
            input: pick(facet, ['id', 'code', 'isPrivate', 'translations', 'customFields']),
        };
        return this.baseDataService.mutate(UPDATE_FACET, input);
    }
    deleteFacet(id, force) {
        return this.baseDataService.mutate(DELETE_FACET, {
            id,
            force,
        });
    }
    createFacetValues(facetValues) {
        const input = {
            input: facetValues.map(pick(['facetId', 'code', 'translations', 'customFields'])),
        };
        return this.baseDataService.mutate(CREATE_FACET_VALUES, input);
    }
    updateFacetValues(facetValues) {
        const input = {
            input: facetValues.map(pick(['id', 'code', 'translations', 'customFields'])),
        };
        return this.baseDataService.mutate(UPDATE_FACET_VALUES, input);
    }
    deleteFacetValues(ids, force) {
        return this.baseDataService.mutate(DELETE_FACET_VALUES, {
            ids,
            force,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9kYXRhL3Byb3ZpZGVycy9mYWNldC1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBZ0JoRCxPQUFPLEVBQ0gsWUFBWSxFQUNaLG1CQUFtQixFQUNuQixZQUFZLEVBQ1osbUJBQW1CLEVBQ25CLGNBQWMsRUFDZCxxQkFBcUIsRUFDckIsWUFBWSxFQUNaLG1CQUFtQixHQUN0QixNQUFNLGtDQUFrQyxDQUFDO0FBSTFDLE1BQU0sT0FBTyxnQkFBZ0I7SUFDekIsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQUcsQ0FBQztJQUV4RCxTQUFTLENBQUMsT0FBZSxFQUFFLEVBQUUsT0FBZSxDQUFDO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQTZDLGNBQWMsRUFBRTtZQUMxRixPQUFPLEVBQUU7Z0JBQ0wsSUFBSTtnQkFDSixJQUFJO2FBQ1A7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQTZDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBRUQsUUFBUSxDQUFDLEVBQVU7UUFDZixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUM3QixxQkFBcUIsRUFDckI7WUFDSSxFQUFFO1NBQ0wsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUF1QjtRQUMvQixNQUFNLEtBQUssR0FBMEI7WUFDakMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7U0FDdEYsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQThDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQXVCO1FBQy9CLE1BQU0sS0FBSyxHQUEwQjtZQUNqQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztTQUNsRixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBOEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3pHLENBQUM7SUFFRCxXQUFXLENBQUMsRUFBVSxFQUFFLEtBQWM7UUFDbEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBOEMsWUFBWSxFQUFFO1lBQzFGLEVBQUU7WUFDRixLQUFLO1NBQ1IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGlCQUFpQixDQUFDLFdBQW9DO1FBQ2xELE1BQU0sS0FBSyxHQUFnQztZQUN2QyxLQUFLLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO1NBQ3BGLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixtQkFBbUIsRUFDbkIsS0FBSyxDQUNSLENBQUM7SUFDTixDQUFDO0lBRUQsaUJBQWlCLENBQUMsV0FBb0M7UUFDbEQsTUFBTSxLQUFLLEdBQWdDO1lBQ3ZDLEtBQUssRUFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7U0FDL0UsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLG1CQUFtQixFQUNuQixLQUFLLENBQ1IsQ0FBQztJQUNOLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxHQUFhLEVBQUUsS0FBYztRQUMzQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixtQkFBbUIsRUFDbkI7WUFDSSxHQUFHO1lBQ0gsS0FBSztTQUNSLENBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBpY2sgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3BpY2snO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENyZWF0ZUZhY2V0LFxyXG4gICAgQ3JlYXRlRmFjZXRJbnB1dCxcclxuICAgIENyZWF0ZUZhY2V0VmFsdWVJbnB1dCxcclxuICAgIENyZWF0ZUZhY2V0VmFsdWVzLFxyXG4gICAgRGVsZXRlRmFjZXQsXHJcbiAgICBEZWxldGVGYWNldFZhbHVlcyxcclxuICAgIEdldEZhY2V0TGlzdCxcclxuICAgIEdldEZhY2V0V2l0aFZhbHVlcyxcclxuICAgIFVwZGF0ZUZhY2V0LFxyXG4gICAgVXBkYXRlRmFjZXRJbnB1dCxcclxuICAgIFVwZGF0ZUZhY2V0VmFsdWVJbnB1dCxcclxuICAgIFVwZGF0ZUZhY2V0VmFsdWVzLFxyXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gICAgQ1JFQVRFX0ZBQ0VULFxyXG4gICAgQ1JFQVRFX0ZBQ0VUX1ZBTFVFUyxcclxuICAgIERFTEVURV9GQUNFVCxcclxuICAgIERFTEVURV9GQUNFVF9WQUxVRVMsXHJcbiAgICBHRVRfRkFDRVRfTElTVCxcclxuICAgIEdFVF9GQUNFVF9XSVRIX1ZBTFVFUyxcclxuICAgIFVQREFURV9GQUNFVCxcclxuICAgIFVQREFURV9GQUNFVF9WQUxVRVMsXHJcbn0gZnJvbSAnLi4vZGVmaW5pdGlvbnMvZmFjZXQtZGVmaW5pdGlvbnMnO1xyXG5cclxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmFjZXREYXRhU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VEYXRhU2VydmljZTogQmFzZURhdGFTZXJ2aWNlKSB7fVxyXG5cclxuICAgIGdldEZhY2V0cyh0YWtlOiBudW1iZXIgPSAxMCwgc2tpcDogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRGYWNldExpc3QuUXVlcnksIEdldEZhY2V0TGlzdC5WYXJpYWJsZXM+KEdFVF9GQUNFVF9MSVNULCB7XHJcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHRha2UsXHJcbiAgICAgICAgICAgICAgICBza2lwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFsbEZhY2V0cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0RmFjZXRMaXN0LlF1ZXJ5LCBHZXRGYWNldExpc3QuVmFyaWFibGVzPihHRVRfRkFDRVRfTElTVCwge30pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZhY2V0KGlkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0RmFjZXRXaXRoVmFsdWVzLlF1ZXJ5LCBHZXRGYWNldFdpdGhWYWx1ZXMuVmFyaWFibGVzPihcclxuICAgICAgICAgICAgR0VUX0ZBQ0VUX1dJVEhfVkFMVUVTLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUZhY2V0KGZhY2V0OiBDcmVhdGVGYWNldElucHV0KSB7XHJcbiAgICAgICAgY29uc3QgaW5wdXQ6IENyZWF0ZUZhY2V0LlZhcmlhYmxlcyA9IHtcclxuICAgICAgICAgICAgaW5wdXQ6IHBpY2soZmFjZXQsIFsnY29kZScsICdpc1ByaXZhdGUnLCAndHJhbnNsYXRpb25zJywgJ3ZhbHVlcycsICdjdXN0b21GaWVsZHMnXSksXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZUZhY2V0Lk11dGF0aW9uLCBDcmVhdGVGYWNldC5WYXJpYWJsZXM+KENSRUFURV9GQUNFVCwgaW5wdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUZhY2V0KGZhY2V0OiBVcGRhdGVGYWNldElucHV0KSB7XHJcbiAgICAgICAgY29uc3QgaW5wdXQ6IFVwZGF0ZUZhY2V0LlZhcmlhYmxlcyA9IHtcclxuICAgICAgICAgICAgaW5wdXQ6IHBpY2soZmFjZXQsIFsnaWQnLCAnY29kZScsICdpc1ByaXZhdGUnLCAndHJhbnNsYXRpb25zJywgJ2N1c3RvbUZpZWxkcyddKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8VXBkYXRlRmFjZXQuTXV0YXRpb24sIFVwZGF0ZUZhY2V0LlZhcmlhYmxlcz4oVVBEQVRFX0ZBQ0VULCBpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlRmFjZXQoaWQ6IHN0cmluZywgZm9yY2U6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPERlbGV0ZUZhY2V0Lk11dGF0aW9uLCBEZWxldGVGYWNldC5WYXJpYWJsZXM+KERFTEVURV9GQUNFVCwge1xyXG4gICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgZm9yY2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlRmFjZXRWYWx1ZXMoZmFjZXRWYWx1ZXM6IENyZWF0ZUZhY2V0VmFsdWVJbnB1dFtdKSB7XHJcbiAgICAgICAgY29uc3QgaW5wdXQ6IENyZWF0ZUZhY2V0VmFsdWVzLlZhcmlhYmxlcyA9IHtcclxuICAgICAgICAgICAgaW5wdXQ6IGZhY2V0VmFsdWVzLm1hcChwaWNrKFsnZmFjZXRJZCcsICdjb2RlJywgJ3RyYW5zbGF0aW9ucycsICdjdXN0b21GaWVsZHMnXSkpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxDcmVhdGVGYWNldFZhbHVlcy5NdXRhdGlvbiwgQ3JlYXRlRmFjZXRWYWx1ZXMuVmFyaWFibGVzPihcclxuICAgICAgICAgICAgQ1JFQVRFX0ZBQ0VUX1ZBTFVFUyxcclxuICAgICAgICAgICAgaW5wdXQsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVGYWNldFZhbHVlcyhmYWNldFZhbHVlczogVXBkYXRlRmFjZXRWYWx1ZUlucHV0W10pIHtcclxuICAgICAgICBjb25zdCBpbnB1dDogVXBkYXRlRmFjZXRWYWx1ZXMuVmFyaWFibGVzID0ge1xyXG4gICAgICAgICAgICBpbnB1dDogZmFjZXRWYWx1ZXMubWFwKHBpY2soWydpZCcsICdjb2RlJywgJ3RyYW5zbGF0aW9ucycsICdjdXN0b21GaWVsZHMnXSkpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxVcGRhdGVGYWNldFZhbHVlcy5NdXRhdGlvbiwgVXBkYXRlRmFjZXRWYWx1ZXMuVmFyaWFibGVzPihcclxuICAgICAgICAgICAgVVBEQVRFX0ZBQ0VUX1ZBTFVFUyxcclxuICAgICAgICAgICAgaW5wdXQsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVGYWNldFZhbHVlcyhpZHM6IHN0cmluZ1tdLCBmb3JjZTogYm9vbGVhbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8RGVsZXRlRmFjZXRWYWx1ZXMuTXV0YXRpb24sIERlbGV0ZUZhY2V0VmFsdWVzLlZhcmlhYmxlcz4oXHJcbiAgICAgICAgICAgIERFTEVURV9GQUNFVF9WQUxVRVMsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkcyxcclxuICAgICAgICAgICAgICAgIGZvcmNlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIl19