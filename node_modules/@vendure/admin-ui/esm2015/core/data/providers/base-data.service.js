import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { simpleDeepClone } from '@vendure/common/lib/simple-deep-clone';
import { Apollo } from 'apollo-angular';
import { map } from 'rxjs/operators';
import { LocalStorageService } from '../../providers/local-storage/local-storage.service';
import { QueryResult } from '../query-result';
import { ServerConfigService } from '../server-config';
import { addCustomFields } from '../utils/add-custom-fields';
import { isEntityCreateOrUpdateMutation, removeReadonlyCustomFields, } from '../utils/remove-readonly-custom-fields';
import { transformRelationCustomFieldInputs } from '../utils/transform-relation-custom-field-inputs';
export class BaseDataService {
    constructor(apollo, httpClient, localStorageService, serverConfigService) {
        this.apollo = apollo;
        this.httpClient = httpClient;
        this.localStorageService = localStorageService;
        this.serverConfigService = serverConfigService;
    }
    get customFields() {
        return this.serverConfigService.serverConfig.customFieldConfig || {};
    }
    /**
     * Performs a GraphQL watch query
     */
    query(query, variables, fetchPolicy = 'cache-and-network') {
        const withCustomFields = addCustomFields(query, this.customFields);
        const queryRef = this.apollo.watchQuery({
            query: withCustomFields,
            variables,
            fetchPolicy,
        });
        const queryResult = new QueryResult(queryRef, this.apollo);
        return queryResult;
    }
    /**
     * Performs a GraphQL mutation
     */
    mutate(mutation, variables, update) {
        const withCustomFields = addCustomFields(mutation, this.customFields);
        const withoutReadonlyFields = this.prepareCustomFields(mutation, variables);
        return this.apollo
            .mutate({
            mutation: withCustomFields,
            variables: withoutReadonlyFields,
            update,
        })
            .pipe(map(result => result.data));
    }
    prepareCustomFields(mutation, variables) {
        const entity = isEntityCreateOrUpdateMutation(mutation);
        if (entity) {
            const customFieldConfig = this.customFields[entity];
            if (variables && customFieldConfig) {
                let variablesClone = simpleDeepClone(variables);
                variablesClone = removeReadonlyCustomFields(variablesClone, customFieldConfig);
                variablesClone = transformRelationCustomFieldInputs(variablesClone, customFieldConfig);
                return variablesClone;
            }
        }
        return variables;
    }
}
BaseDataService.decorators = [
    { type: Injectable }
];
BaseDataService.ctorParameters = () => [
    { type: Apollo },
    { type: HttpClient },
    { type: LocalStorageService },
    { type: ServerConfigService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvcHJvdmlkZXJzL2Jhc2UtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHeEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUNILDhCQUE4QixFQUM5QiwwQkFBMEIsR0FDN0IsTUFBTSx3Q0FBd0MsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUdyRyxNQUFNLE9BQU8sZUFBZTtJQUN4QixZQUNZLE1BQWMsRUFDZCxVQUFzQixFQUN0QixtQkFBd0MsRUFDeEMsbUJBQXdDO1FBSHhDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUNqRCxDQUFDO0lBRUosSUFBWSxZQUFZO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUM7SUFDekUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUNELEtBQW1CLEVBQ25CLFNBQWEsRUFDYixjQUFxQyxtQkFBbUI7UUFFeEQsTUFBTSxnQkFBZ0IsR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNuRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBTztZQUMxQyxLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLFNBQVM7WUFDVCxXQUFXO1NBQ2QsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQVMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRSxPQUFPLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQ0YsUUFBc0IsRUFDdEIsU0FBYSxFQUNiLE1BQTZCO1FBRTdCLE1BQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdEUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTVFLE9BQU8sSUFBSSxDQUFDLE1BQU07YUFDYixNQUFNLENBQU87WUFDVixRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRSxxQkFBcUI7WUFDaEMsTUFBTTtTQUNULENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQVMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVPLG1CQUFtQixDQUFJLFFBQXNCLEVBQUUsU0FBWTtRQUMvRCxNQUFNLE1BQU0sR0FBRyw4QkFBOEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4RCxJQUFJLE1BQU0sRUFBRTtZQUNSLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRCxJQUFJLFNBQVMsSUFBSSxpQkFBaUIsRUFBRTtnQkFDaEMsSUFBSSxjQUFjLEdBQUcsZUFBZSxDQUFDLFNBQWdCLENBQUMsQ0FBQztnQkFDdkQsY0FBYyxHQUFHLDBCQUEwQixDQUFDLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUMvRSxjQUFjLEdBQUcsa0NBQWtDLENBQUMsY0FBYyxFQUFFLGlCQUFpQixDQUFDLENBQUM7Z0JBQ3ZGLE9BQU8sY0FBYyxDQUFDO2FBQ3pCO1NBQ0o7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDOzs7WUEvREosVUFBVTs7O1lBaEJGLE1BQU07WUFKTixVQUFVO1lBVVYsbUJBQW1CO1lBRW5CLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YVByb3h5LCBNdXRhdGlvblVwZGF0ZXJGbiwgV2F0Y2hRdWVyeUZldGNoUG9saWN5IH0gZnJvbSAnQGFwb2xsby9jbGllbnQvY29yZSc7XHJcbmltcG9ydCB7IHNpbXBsZURlZXBDbG9uZSB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2ltcGxlLWRlZXAtY2xvbmUnO1xyXG5pbXBvcnQgeyBBcG9sbG8gfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XHJcbmltcG9ydCB7IERvY3VtZW50Tm9kZSB9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvYXN0JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBDdXN0b21GaWVsZHMgfSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuaW1wb3J0IHsgTG9jYWxTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycy9sb2NhbC1zdG9yYWdlL2xvY2FsLXN0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IFF1ZXJ5UmVzdWx0IH0gZnJvbSAnLi4vcXVlcnktcmVzdWx0JztcclxuaW1wb3J0IHsgU2VydmVyQ29uZmlnU2VydmljZSB9IGZyb20gJy4uL3NlcnZlci1jb25maWcnO1xyXG5pbXBvcnQgeyBhZGRDdXN0b21GaWVsZHMgfSBmcm9tICcuLi91dGlscy9hZGQtY3VzdG9tLWZpZWxkcyc7XHJcbmltcG9ydCB7XHJcbiAgICBpc0VudGl0eUNyZWF0ZU9yVXBkYXRlTXV0YXRpb24sXHJcbiAgICByZW1vdmVSZWFkb25seUN1c3RvbUZpZWxkcyxcclxufSBmcm9tICcuLi91dGlscy9yZW1vdmUtcmVhZG9ubHktY3VzdG9tLWZpZWxkcyc7XHJcbmltcG9ydCB7IHRyYW5zZm9ybVJlbGF0aW9uQ3VzdG9tRmllbGRJbnB1dHMgfSBmcm9tICcuLi91dGlscy90cmFuc2Zvcm0tcmVsYXRpb24tY3VzdG9tLWZpZWxkLWlucHV0cyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCYXNlRGF0YVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBhcG9sbG86IEFwb2xsbyxcclxuICAgICAgICBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXHJcbiAgICAgICAgcHJpdmF0ZSBsb2NhbFN0b3JhZ2VTZXJ2aWNlOiBMb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgc2VydmVyQ29uZmlnU2VydmljZTogU2VydmVyQ29uZmlnU2VydmljZSxcclxuICAgICkge31cclxuXHJcbiAgICBwcml2YXRlIGdldCBjdXN0b21GaWVsZHMoKTogQ3VzdG9tRmllbGRzIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXJDb25maWdTZXJ2aWNlLnNlcnZlckNvbmZpZy5jdXN0b21GaWVsZENvbmZpZyB8fCB7fTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGEgR3JhcGhRTCB3YXRjaCBxdWVyeVxyXG4gICAgICovXHJcbiAgICBxdWVyeTxULCBWID0gUmVjb3JkPHN0cmluZywgYW55Pj4oXHJcbiAgICAgICAgcXVlcnk6IERvY3VtZW50Tm9kZSxcclxuICAgICAgICB2YXJpYWJsZXM/OiBWLFxyXG4gICAgICAgIGZldGNoUG9saWN5OiBXYXRjaFF1ZXJ5RmV0Y2hQb2xpY3kgPSAnY2FjaGUtYW5kLW5ldHdvcmsnLFxyXG4gICAgKTogUXVlcnlSZXN1bHQ8VCwgVj4ge1xyXG4gICAgICAgIGNvbnN0IHdpdGhDdXN0b21GaWVsZHMgPSBhZGRDdXN0b21GaWVsZHMocXVlcnksIHRoaXMuY3VzdG9tRmllbGRzKTtcclxuICAgICAgICBjb25zdCBxdWVyeVJlZiA9IHRoaXMuYXBvbGxvLndhdGNoUXVlcnk8VCwgVj4oe1xyXG4gICAgICAgICAgICBxdWVyeTogd2l0aEN1c3RvbUZpZWxkcyxcclxuICAgICAgICAgICAgdmFyaWFibGVzLFxyXG4gICAgICAgICAgICBmZXRjaFBvbGljeSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBxdWVyeVJlc3VsdCA9IG5ldyBRdWVyeVJlc3VsdDxULCBhbnk+KHF1ZXJ5UmVmLCB0aGlzLmFwb2xsbyk7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5UmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgYSBHcmFwaFFMIG11dGF0aW9uXHJcbiAgICAgKi9cclxuICAgIG11dGF0ZTxULCBWID0gUmVjb3JkPHN0cmluZywgYW55Pj4oXHJcbiAgICAgICAgbXV0YXRpb246IERvY3VtZW50Tm9kZSxcclxuICAgICAgICB2YXJpYWJsZXM/OiBWLFxyXG4gICAgICAgIHVwZGF0ZT86IE11dGF0aW9uVXBkYXRlckZuPFQ+LFxyXG4gICAgKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICAgICAgY29uc3Qgd2l0aEN1c3RvbUZpZWxkcyA9IGFkZEN1c3RvbUZpZWxkcyhtdXRhdGlvbiwgdGhpcy5jdXN0b21GaWVsZHMpO1xyXG4gICAgICAgIGNvbnN0IHdpdGhvdXRSZWFkb25seUZpZWxkcyA9IHRoaXMucHJlcGFyZUN1c3RvbUZpZWxkcyhtdXRhdGlvbiwgdmFyaWFibGVzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBvbGxvXHJcbiAgICAgICAgICAgIC5tdXRhdGU8VCwgVj4oe1xyXG4gICAgICAgICAgICAgICAgbXV0YXRpb246IHdpdGhDdXN0b21GaWVsZHMsXHJcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHdpdGhvdXRSZWFkb25seUZpZWxkcyxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnBpcGUobWFwKHJlc3VsdCA9PiByZXN1bHQuZGF0YSBhcyBUKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwcmVwYXJlQ3VzdG9tRmllbGRzPFY+KG11dGF0aW9uOiBEb2N1bWVudE5vZGUsIHZhcmlhYmxlczogVik6IFYge1xyXG4gICAgICAgIGNvbnN0IGVudGl0eSA9IGlzRW50aXR5Q3JlYXRlT3JVcGRhdGVNdXRhdGlvbihtdXRhdGlvbik7XHJcbiAgICAgICAgaWYgKGVudGl0eSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXN0b21GaWVsZENvbmZpZyA9IHRoaXMuY3VzdG9tRmllbGRzW2VudGl0eV07XHJcbiAgICAgICAgICAgIGlmICh2YXJpYWJsZXMgJiYgY3VzdG9tRmllbGRDb25maWcpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YXJpYWJsZXNDbG9uZSA9IHNpbXBsZURlZXBDbG9uZSh2YXJpYWJsZXMgYXMgYW55KTtcclxuICAgICAgICAgICAgICAgIHZhcmlhYmxlc0Nsb25lID0gcmVtb3ZlUmVhZG9ubHlDdXN0b21GaWVsZHModmFyaWFibGVzQ2xvbmUsIGN1c3RvbUZpZWxkQ29uZmlnKTtcclxuICAgICAgICAgICAgICAgIHZhcmlhYmxlc0Nsb25lID0gdHJhbnNmb3JtUmVsYXRpb25DdXN0b21GaWVsZElucHV0cyh2YXJpYWJsZXNDbG9uZSwgY3VzdG9tRmllbGRDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhcmlhYmxlc0Nsb25lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YXJpYWJsZXM7XHJcbiAgICB9XHJcbn1cclxuIl19