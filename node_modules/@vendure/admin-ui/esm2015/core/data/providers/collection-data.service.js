import { pick } from '@vendure/common/lib/pick';
import { from } from 'rxjs';
import { bufferCount, concatMap } from 'rxjs/operators';
import { CREATE_COLLECTION, DELETE_COLLECTION, GET_COLLECTION, GET_COLLECTION_CONTENTS, GET_COLLECTION_FILTERS, GET_COLLECTION_LIST, MOVE_COLLECTION, UPDATE_COLLECTION, } from '../definitions/collection-definitions';
export class CollectionDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getCollectionFilters() {
        return this.baseDataService.query(GET_COLLECTION_FILTERS);
    }
    getCollections(take = 10, skip = 0) {
        return this.baseDataService.query(GET_COLLECTION_LIST, {
            options: {
                take,
                skip,
            },
        });
    }
    getCollection(id) {
        return this.baseDataService.query(GET_COLLECTION, {
            id,
        });
    }
    createCollection(input) {
        return this.baseDataService.mutate(CREATE_COLLECTION, {
            input: pick(input, [
                'translations',
                'parentId',
                'assetIds',
                'featuredAssetId',
                'filters',
                'customFields',
            ]),
        });
    }
    updateCollection(input) {
        return this.baseDataService.mutate(UPDATE_COLLECTION, {
            input: pick(input, [
                'id',
                'isPrivate',
                'translations',
                'assetIds',
                'featuredAssetId',
                'filters',
                'customFields',
            ]),
        });
    }
    moveCollection(inputs) {
        return from(inputs).pipe(concatMap(input => this.baseDataService.mutate(MOVE_COLLECTION, { input })), bufferCount(inputs.length));
    }
    deleteCollection(id) {
        return this.baseDataService.mutate(DELETE_COLLECTION, {
            id,
        });
    }
    getCollectionContents(id, take = 10, skip = 0, filterTerm) {
        const filter = filterTerm
            ? { name: { contains: filterTerm } }
            : undefined;
        return this.baseDataService.query(GET_COLLECTION_CONTENTS, {
            id,
            options: {
                skip,
                take,
                filter,
            },
        });
    }
}
//# sourceMappingURL=data:application/json;base64,