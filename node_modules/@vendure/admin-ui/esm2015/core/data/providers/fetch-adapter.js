import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
/**
 * An adapter that allows the Angular HttpClient to be used as a replacement for the global `fetch` function.
 * This is used to supply a custom fetch function to the apollo-upload-client whilst also allowing the
 * use of Angular's http infrastructure such as interceptors.
 */
export class FetchAdapter {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.fetch = (input, init) => {
            const url = typeof input === 'string' ? input : input.url;
            const method = typeof input === 'string' ? (init.method ? init.method : 'GET') : input.method;
            return this.httpClient
                .request(method, url, {
                body: init.body,
                headers: init.headers,
                observe: 'response',
                responseType: 'json',
                withCredentials: true,
            })
                .toPromise()
                .then(result => {
                return new Response(JSON.stringify(result.body), {
                    status: result.status,
                    statusText: result.statusText,
                });
            });
        };
    }
}
FetchAdapter.decorators = [
    { type: Injectable }
];
FetchAdapter.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2gtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvZmV0Y2gtYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQzs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLFlBQVk7SUFDckIsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUUxQyxVQUFLLEdBQUcsQ0FBQyxLQUF1QixFQUFFLElBQWlCLEVBQXFCLEVBQUU7WUFDdEUsTUFBTSxHQUFHLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDMUQsTUFBTSxNQUFNLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBRTlGLE9BQU8sSUFBSSxDQUFDLFVBQVU7aUJBQ2pCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUNsQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFjO2dCQUM1QixPQUFPLEVBQUUsVUFBVTtnQkFDbkIsWUFBWSxFQUFFLE1BQU07Z0JBQ3BCLGVBQWUsRUFBRSxJQUFJO2FBQ3hCLENBQUM7aUJBQ0QsU0FBUyxFQUFFO2lCQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDWCxPQUFPLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUM3QyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07b0JBQ3JCLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTtpQkFDaEMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUM7SUFyQjJDLENBQUM7OztZQUZqRCxVQUFVOzs7WUFSRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEFuIGFkYXB0ZXIgdGhhdCBhbGxvd3MgdGhlIEFuZ3VsYXIgSHR0cENsaWVudCB0byBiZSB1c2VkIGFzIGEgcmVwbGFjZW1lbnQgZm9yIHRoZSBnbG9iYWwgYGZldGNoYCBmdW5jdGlvbi5cclxuICogVGhpcyBpcyB1c2VkIHRvIHN1cHBseSBhIGN1c3RvbSBmZXRjaCBmdW5jdGlvbiB0byB0aGUgYXBvbGxvLXVwbG9hZC1jbGllbnQgd2hpbHN0IGFsc28gYWxsb3dpbmcgdGhlXHJcbiAqIHVzZSBvZiBBbmd1bGFyJ3MgaHR0cCBpbmZyYXN0cnVjdHVyZSBzdWNoIGFzIGludGVyY2VwdG9ycy5cclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZldGNoQWRhcHRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XHJcblxyXG4gICAgZmV0Y2ggPSAoaW5wdXQ6IFJlcXVlc3QgfCBzdHJpbmcsIGluaXQ6IFJlcXVlc3RJbml0KTogUHJvbWlzZTxSZXNwb25zZT4gPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgPyBpbnB1dCA6IGlucHV0LnVybDtcclxuICAgICAgICBjb25zdCBtZXRob2QgPSB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnID8gKGluaXQubWV0aG9kID8gaW5pdC5tZXRob2QgOiAnR0VUJykgOiBpbnB1dC5tZXRob2Q7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnRcclxuICAgICAgICAgICAgLnJlcXVlc3QobWV0aG9kLCB1cmwsIHtcclxuICAgICAgICAgICAgICAgIGJvZHk6IGluaXQuYm9keSxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGluaXQuaGVhZGVycyBhcyBhbnksXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnLFxyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50b1Byb21pc2UoKVxyXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShyZXN1bHQuYm9keSksIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3VsdC5zdGF0dXMsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVzdWx0LnN0YXR1c1RleHQsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbiJdfQ==