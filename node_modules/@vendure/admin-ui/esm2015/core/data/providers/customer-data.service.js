import { ADD_CUSTOMERS_TO_GROUP, ADD_NOTE_TO_CUSTOMER, CREATE_CUSTOMER, CREATE_CUSTOMER_ADDRESS, CREATE_CUSTOMER_GROUP, DELETE_CUSTOMER, DELETE_CUSTOMER_ADDRESS, DELETE_CUSTOMER_GROUP, DELETE_CUSTOMER_NOTE, GET_CUSTOMER, GET_CUSTOMER_GROUPS, GET_CUSTOMER_GROUP_WITH_CUSTOMERS, GET_CUSTOMER_HISTORY, GET_CUSTOMER_LIST, REMOVE_CUSTOMERS_FROM_GROUP, UPDATE_CUSTOMER, UPDATE_CUSTOMER_ADDRESS, UPDATE_CUSTOMER_GROUP, UPDATE_CUSTOMER_NOTE, } from '../definitions/customer-definitions';
export class CustomerDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getCustomerList(take = 10, skip = 0, filterTerm) {
        const filter = filterTerm
            ? {
                filter: {
                    emailAddress: {
                        contains: filterTerm,
                    },
                },
            }
            : {};
        return this.baseDataService.query(GET_CUSTOMER_LIST, {
            options: Object.assign({ take,
                skip }, filter),
        });
    }
    getCustomer(id, orderListOptions) {
        return this.baseDataService.query(GET_CUSTOMER, {
            id,
            orderListOptions,
        });
    }
    createCustomer(input, password) {
        return this.baseDataService.mutate(CREATE_CUSTOMER, {
            input,
            password,
        });
    }
    updateCustomer(input) {
        return this.baseDataService.mutate(UPDATE_CUSTOMER, {
            input,
        });
    }
    deleteCustomer(id) {
        return this.baseDataService.mutate(DELETE_CUSTOMER, { id });
    }
    createCustomerAddress(customerId, input) {
        return this.baseDataService.mutate(CREATE_CUSTOMER_ADDRESS, {
            customerId,
            input,
        });
    }
    updateCustomerAddress(input) {
        return this.baseDataService.mutate(UPDATE_CUSTOMER_ADDRESS, {
            input,
        });
    }
    deleteCustomerAddress(id) {
        return this.baseDataService.mutate(DELETE_CUSTOMER_ADDRESS, { id });
    }
    createCustomerGroup(input) {
        return this.baseDataService.mutate(CREATE_CUSTOMER_GROUP, {
            input,
        });
    }
    updateCustomerGroup(input) {
        return this.baseDataService.mutate(UPDATE_CUSTOMER_GROUP, {
            input,
        });
    }
    deleteCustomerGroup(id) {
        return this.baseDataService.mutate(DELETE_CUSTOMER_GROUP, { id });
    }
    getCustomerGroupList(options) {
        return this.baseDataService.query(GET_CUSTOMER_GROUPS, {
            options,
        });
    }
    getCustomerGroupWithCustomers(id, options) {
        return this.baseDataService.query(GET_CUSTOMER_GROUP_WITH_CUSTOMERS, {
            id,
            options,
        });
    }
    addCustomersToGroup(groupId, customerIds) {
        return this.baseDataService.mutate(ADD_CUSTOMERS_TO_GROUP, {
            groupId,
            customerIds,
        });
    }
    removeCustomersFromGroup(groupId, customerIds) {
        return this.baseDataService.mutate(REMOVE_CUSTOMERS_FROM_GROUP, {
            groupId,
            customerIds,
        });
    }
    getCustomerHistory(id, options) {
        return this.baseDataService.query(GET_CUSTOMER_HISTORY, {
            id,
            options,
        });
    }
    addNoteToCustomer(customerId, note) {
        return this.baseDataService.mutate(ADD_NOTE_TO_CUSTOMER, {
            input: {
                note,
                isPublic: false,
                id: customerId,
            },
        });
    }
    updateCustomerNote(input) {
        return this.baseDataService.mutate(UPDATE_CUSTOMER_NOTE, {
            input,
        });
    }
    deleteCustomerNote(id) {
        return this.baseDataService.mutate(DELETE_CUSTOMER_NOTE, {
            id,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,