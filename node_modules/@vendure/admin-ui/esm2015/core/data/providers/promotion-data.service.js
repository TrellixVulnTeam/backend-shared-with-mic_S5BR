import { CREATE_PROMOTION, DELETE_PROMOTION, GET_ADJUSTMENT_OPERATIONS, GET_PROMOTION, GET_PROMOTION_LIST, UPDATE_PROMOTION, } from '../definitions/promotion-definitions';
export class PromotionDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getPromotions(take = 10, skip = 0, filter) {
        return this.baseDataService.query(GET_PROMOTION_LIST, {
            options: {
                take,
                skip,
                filter,
            },
        });
    }
    getPromotion(id) {
        return this.baseDataService.query(GET_PROMOTION, {
            id,
        });
    }
    getPromotionActionsAndConditions() {
        return this.baseDataService.query(GET_ADJUSTMENT_OPERATIONS);
    }
    createPromotion(input) {
        return this.baseDataService.mutate(CREATE_PROMOTION, {
            input,
        });
    }
    updatePromotion(input) {
        return this.baseDataService.mutate(UPDATE_PROMOTION, {
            input,
        });
    }
    deletePromotion(id) {
        return this.baseDataService.mutate(DELETE_PROMOTION, { id });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbW90aW9uLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvcHJvbW90aW9uLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxPQUFPLEVBQ0gsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQix5QkFBeUIsRUFDekIsYUFBYSxFQUNiLGtCQUFrQixFQUNsQixnQkFBZ0IsR0FDbkIsTUFBTSxzQ0FBc0MsQ0FBQztBQUk5QyxNQUFNLE9BQU8sb0JBQW9CO0lBQzdCLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7SUFFeEQsYUFBYSxDQUFDLE9BQWUsRUFBRSxFQUFFLE9BQWUsQ0FBQyxFQUFFLE1BQWlDO1FBQ2hGLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLGtCQUFrQixFQUNsQjtZQUNJLE9BQU8sRUFBRTtnQkFDTCxJQUFJO2dCQUNKLElBQUk7Z0JBQ0osTUFBTTthQUNUO1NBQ0osQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELFlBQVksQ0FBQyxFQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQTZDLGFBQWEsRUFBRTtZQUN6RixFQUFFO1NBQ0wsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGdDQUFnQztRQUM1QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFnQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBMkI7UUFDdkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsZ0JBQWdCLEVBQ2hCO1lBQ0ksS0FBSztTQUNSLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBMkI7UUFDdkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsZ0JBQWdCLEVBQ2hCO1lBQ0ksS0FBSztTQUNSLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxlQUFlLENBQUMsRUFBVTtRQUN0QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixnQkFBZ0IsRUFDaEIsRUFBRSxFQUFFLEVBQUUsQ0FDVCxDQUFDO0lBQ04sQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENyZWF0ZVByb21vdGlvbixcclxuICAgIENyZWF0ZVByb21vdGlvbklucHV0LFxyXG4gICAgRGVsZXRlUHJvbW90aW9uLFxyXG4gICAgR2V0QWRqdXN0bWVudE9wZXJhdGlvbnMsXHJcbiAgICBHZXRQcm9tb3Rpb24sXHJcbiAgICBHZXRQcm9tb3Rpb25MaXN0LFxyXG4gICAgUHJvbW90aW9uRmlsdGVyUGFyYW1ldGVyLFxyXG4gICAgVXBkYXRlUHJvbW90aW9uLFxyXG4gICAgVXBkYXRlUHJvbW90aW9uSW5wdXQsXHJcbn0gZnJvbSAnLi4vLi4vY29tbW9uL2dlbmVyYXRlZC10eXBlcyc7XHJcbmltcG9ydCB7XHJcbiAgICBDUkVBVEVfUFJPTU9USU9OLFxyXG4gICAgREVMRVRFX1BST01PVElPTixcclxuICAgIEdFVF9BREpVU1RNRU5UX09QRVJBVElPTlMsXHJcbiAgICBHRVRfUFJPTU9USU9OLFxyXG4gICAgR0VUX1BST01PVElPTl9MSVNULFxyXG4gICAgVVBEQVRFX1BST01PVElPTixcclxufSBmcm9tICcuLi9kZWZpbml0aW9ucy9wcm9tb3Rpb24tZGVmaW5pdGlvbnMnO1xyXG5cclxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvbW90aW9uRGF0YVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBiYXNlRGF0YVNlcnZpY2U6IEJhc2VEYXRhU2VydmljZSkge31cclxuXHJcbiAgICBnZXRQcm9tb3Rpb25zKHRha2U6IG51bWJlciA9IDEwLCBza2lwOiBudW1iZXIgPSAwLCBmaWx0ZXI/OiBQcm9tb3Rpb25GaWx0ZXJQYXJhbWV0ZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0UHJvbW90aW9uTGlzdC5RdWVyeSwgR2V0UHJvbW90aW9uTGlzdC5WYXJpYWJsZXM+KFxyXG4gICAgICAgICAgICBHRVRfUFJPTU9USU9OX0xJU1QsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB0YWtlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNraXAsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb21vdGlvbihpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFByb21vdGlvbi5RdWVyeSwgR2V0UHJvbW90aW9uLlZhcmlhYmxlcz4oR0VUX1BST01PVElPTiwge1xyXG4gICAgICAgICAgICBpZCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9tb3Rpb25BY3Rpb25zQW5kQ29uZGl0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0QWRqdXN0bWVudE9wZXJhdGlvbnMuUXVlcnk+KEdFVF9BREpVU1RNRU5UX09QRVJBVElPTlMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVByb21vdGlvbihpbnB1dDogQ3JlYXRlUHJvbW90aW9uSW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZVByb21vdGlvbi5NdXRhdGlvbiwgQ3JlYXRlUHJvbW90aW9uLlZhcmlhYmxlcz4oXHJcbiAgICAgICAgICAgIENSRUFURV9QUk9NT1RJT04sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUHJvbW90aW9uKGlucHV0OiBVcGRhdGVQcm9tb3Rpb25JbnB1dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8VXBkYXRlUHJvbW90aW9uLk11dGF0aW9uLCBVcGRhdGVQcm9tb3Rpb24uVmFyaWFibGVzPihcclxuICAgICAgICAgICAgVVBEQVRFX1BST01PVElPTixcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVQcm9tb3Rpb24oaWQ6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8RGVsZXRlUHJvbW90aW9uLk11dGF0aW9uLCBEZWxldGVQcm9tb3Rpb24uVmFyaWFibGVzPihcclxuICAgICAgICAgICAgREVMRVRFX1BST01PVElPTixcclxuICAgICAgICAgICAgeyBpZCB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIl19