import { Kind, } from 'graphql';
/**
 * Given a GraphQL AST (DocumentNode), this function looks for fragment definitions and adds and configured
 * custom fields to those fragments.
 */
export function addCustomFields(documentNode, customFields) {
    const fragmentDefs = documentNode.definitions.filter(isFragmentDefinition);
    for (const fragmentDef of fragmentDefs) {
        let entityType = fragmentDef.typeCondition.name.value;
        if (entityType === 'OrderAddress') {
            // OrderAddress is a special case of the Address entity, and shares its custom fields
            // so we treat it as an alias
            entityType = 'Address';
        }
        const customFieldsForType = customFields[entityType];
        if (customFieldsForType && customFieldsForType.length) {
            fragmentDef.selectionSet.selections.push({
                name: {
                    kind: Kind.NAME,
                    value: 'customFields',
                },
                kind: Kind.FIELD,
                selectionSet: {
                    kind: Kind.SELECTION_SET,
                    selections: customFieldsForType.map(customField => {
                        return Object.assign({ kind: Kind.FIELD, name: {
                                kind: Kind.NAME,
                                value: customField.name,
                            } }, (customField.type === 'relation'
                            ? {
                                selectionSet: {
                                    kind: Kind.SELECTION_SET,
                                    selections: customField.scalarFields.map(f => ({
                                        kind: Kind.FIELD,
                                        name: { kind: Kind.NAME, value: f },
                                    })),
                                },
                            }
                            : {}));
                    }),
                },
            });
            const localeStrings = customFieldsForType.filter(field => field.type === 'localeString');
            const translationsField = fragmentDef.selectionSet.selections
                .filter(isFieldNode)
                .find(field => field.name.value === 'translations');
            if (localeStrings.length && translationsField && translationsField.selectionSet) {
                translationsField.selectionSet.selections.push({
                    name: {
                        kind: Kind.NAME,
                        value: 'customFields',
                    },
                    kind: Kind.FIELD,
                    selectionSet: {
                        kind: Kind.SELECTION_SET,
                        selections: localeStrings.map(customField => {
                            return {
                                kind: Kind.FIELD,
                                name: {
                                    kind: Kind.NAME,
                                    value: customField.name,
                                },
                            };
                        }),
                    },
                });
            }
        }
    }
    return documentNode;
}
function isFragmentDefinition(value) {
    return value.kind === Kind.FRAGMENT_DEFINITION;
}
function isFieldNode(value) {
    return value.kind === Kind.FIELD;
}
//# sourceMappingURL=data:application/json;base64,