import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewChild, } from '@angular/core';
import { CodeJar } from 'codejar';
export function jsonValidator() {
    return (control) => {
        const error = { jsonInvalid: true };
        try {
            JSON.parse(control.value);
        }
        catch (e) {
            control.setErrors(error);
            return error;
        }
        control.setErrors(null);
        return null;
    };
}
/**
 * @description
 * A JSON editor input with syntax highlighting and error detection. Works well
 * with `text` type fields.
 *
 * @docsCategory custom-input-components
 * @docsPage default-inputs
 */
export class JsonEditorFormInputComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.isValid = true;
    }
    get height() {
        var _a;
        return ((_a = this.config.ui) === null || _a === void 0 ? void 0 : _a.height) || this.config.height;
    }
    ngOnInit() {
        this.formControl.addValidators(jsonValidator());
    }
    ngAfterViewInit() {
        let lastVal = '';
        const highlight = (editor) => {
            var _a;
            const code = (_a = editor.textContent) !== null && _a !== void 0 ? _a : '';
            if (code === lastVal) {
                return;
            }
            lastVal = code;
            this.errorMessage = this.getJsonError(code);
            this.changeDetector.markForCheck();
            editor.innerHTML = this.syntaxHighlight(code, this.getErrorPos(this.errorMessage));
        };
        this.jar = CodeJar(this.editorElementRef.nativeElement, highlight);
        this.jar.onUpdate(value => {
            this.formControl.setValue(value);
            this.formControl.markAsDirty();
            this.isValid = this.formControl.valid;
        });
        this.jar.updateCode(this.formControl.value);
        if (this.readonly) {
            this.editorElementRef.nativeElement.contentEditable = 'false';
        }
    }
    getJsonError(json) {
        try {
            JSON.parse(json);
        }
        catch (e) {
            return e.message;
        }
        return;
    }
    getErrorPos(errorMessage) {
        if (!errorMessage) {
            return;
        }
        const matches = errorMessage.match(/at position (\d+)/);
        const pos = matches === null || matches === void 0 ? void 0 : matches[1];
        return pos != null ? +pos : undefined;
    }
    syntaxHighlight(json, errorPos) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        let hasMarkedError = false;
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, (match, ...args) => {
            let cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                }
                else {
                    cls = 'string';
                }
            }
            else if (/true|false/.test(match)) {
                cls = 'boolean';
            }
            else if (/null/.test(match)) {
                cls = 'null';
            }
            let errorClass = '';
            if (errorPos && !hasMarkedError) {
                const length = args[0].length;
                const offset = args[4];
                if (errorPos <= length + offset) {
                    errorClass = 'je-error';
                    hasMarkedError = true;
                }
            }
            return '<span class="je-' + cls + ' ' + errorClass + '">' + match + '</span>';
        });
    }
}
JsonEditorFormInputComponent.id = 'json-editor-form-input';
JsonEditorFormInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-json-editor-form-input',
                template: "<div #editor class=\"json-editor\" [class.invalid]=\"!isValid\" [style.height]=\"height || '300px'\"></div>\r\n<div class=\"error-message\">\r\n    <span *ngIf=\"errorMessage\">{{ errorMessage }}</span>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".json-editor{min-height:6rem;background-color:var(--color-json-editor-background-color);color:var(--color-json-editor-text);border:1px solid var(--color-component-border-200);border-radius:3px;padding:6px;-moz-tab-size:4;tab-size:4;font-family:\"Source Code Pro\",\"Lucida Console\",Monaco,monospace;font-size:14px;font-weight:400;height:340px;letter-spacing:normal;line-height:20px;resize:both;text-align:initial;min-width:200px}.json-editor:focus{border-color:var(--color-primary-500)}.json-editor.invalid{border-color:var(--clr-forms-invalid-color)}.json-editor ::ng-deep .je-string{color:var(--color-json-editor-string)}.json-editor ::ng-deep .je-number{color:var(--color-json-editor-number)}.json-editor ::ng-deep .je-boolean{color:var(--color-json-editor-boolean)}.json-editor ::ng-deep .je-null{color:var(--color-json-editor-null)}.json-editor ::ng-deep .je-key{color:var(--color-json-editor-key)}.json-editor ::ng-deep .je-error{-webkit-text-decoration-line:underline;text-decoration-line:underline;-webkit-text-decoration-style:wavy;text-decoration-style:wavy;-webkit-text-decoration-color:var(--color-json-editor-error);text-decoration-color:var(--color-json-editor-error)}.error-message{min-height:1rem;color:var(--color-json-editor-error)}\n"]
            },] }
];
JsonEditorFormInputComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
JsonEditorFormInputComponent.propDecorators = {
    editorElementRef: [{ type: ViewChild, args: ['editor',] }]
};
//# sourceMappingURL=data:application/json;base64,