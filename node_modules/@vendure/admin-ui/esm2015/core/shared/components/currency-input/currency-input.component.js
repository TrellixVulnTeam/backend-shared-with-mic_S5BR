import { ChangeDetectorRef, Component, EventEmitter, Input, Output, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { DataService } from '../../../data/providers/data.service';
/**
 * @description
 * A form input control which displays currency in decimal format, whilst working
 * with the integer cent value in the background.
 *
 * @example
 * ```HTML
 * <vdr-currency-input
 *     [(ngModel)]="entityPrice"
 *     [currencyCode]="currencyCode"
 * ></vdr-currency-input>
 * ```
 *
 * @docsCategory components
 */
export class CurrencyInputComponent {
    constructor(dataService, changeDetectorRef) {
        this.dataService = dataService;
        this.changeDetectorRef = changeDetectorRef;
        this.disabled = false;
        this.readonly = false;
        this.currencyCode = '';
        this.valueChange = new EventEmitter();
        this.hasFractionPart = true;
        this.currencyCode$ = new BehaviorSubject('');
    }
    ngOnInit() {
        const languageCode$ = this.dataService.client.uiState().mapStream(data => data.uiState.language);
        const shouldPrefix$ = combineLatest(languageCode$, this.currencyCode$).pipe(map(([languageCode, currencyCode]) => {
            var _a, _b;
            if (!currencyCode) {
                return '';
            }
            const locale = languageCode.replace(/_/g, '-');
            const parts = new Intl.NumberFormat(locale, {
                style: 'currency',
                currency: currencyCode,
                currencyDisplay: 'symbol',
            }).formatToParts();
            const NaNString = (_b = (_a = parts.find(p => p.type === 'nan')) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 'NaN';
            const localised = new Intl.NumberFormat(locale, {
                style: 'currency',
                currency: currencyCode,
                currencyDisplay: 'symbol',
            }).format(undefined);
            return localised.indexOf(NaNString) > 0;
        }));
        this.prefix$ = shouldPrefix$.pipe(map(shouldPrefix => (shouldPrefix ? this.currencyCode : '')));
        this.suffix$ = shouldPrefix$.pipe(map(shouldPrefix => (shouldPrefix ? '' : this.currencyCode)));
        this.subscription = combineLatest(languageCode$, this.currencyCode$).subscribe(([languageCode, currencyCode]) => {
            if (!currencyCode) {
                return '';
            }
            const locale = languageCode.replace(/_/g, '-');
            const parts = new Intl.NumberFormat(locale, {
                style: 'currency',
                currency: currencyCode,
                currencyDisplay: 'symbol',
            }).formatToParts(123.45);
            this.hasFractionPart = !!parts.find(p => p.type === 'fraction');
            this._inputValue = this.toNumericString(this._inputValue);
        });
    }
    ngOnChanges(changes) {
        if ('value' in changes) {
            this.writeValue(changes['value'].currentValue);
        }
        if ('currencyCode' in changes) {
            this.currencyCode$.next(this.currencyCode);
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onInput(value) {
        const integerValue = Math.round(+value * 100);
        if (typeof this.onChange === 'function') {
            this.onChange(integerValue);
        }
        this.valueChange.emit(integerValue);
        const delta = Math.abs(Number(this._inputValue) - Number(value));
        if (0.009 < delta && delta < 0.011) {
            this._inputValue = this.toNumericString(value);
        }
        else {
            this._inputValue = value;
        }
    }
    onFocus() {
        if (typeof this.onTouch === 'function') {
            this.onTouch();
        }
    }
    writeValue(value) {
        const numericValue = +value;
        if (!Number.isNaN(numericValue)) {
            this._inputValue = this.toNumericString(Math.floor(value) / 100);
        }
    }
    toNumericString(value) {
        return this.hasFractionPart ? Number(value).toFixed(2) : Number(value).toFixed(0);
    }
}
CurrencyInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-currency-input',
                template: "<vdr-affixed-input\r\n    [prefix]=\"prefix$ | async | localeCurrencyName: 'symbol'\"\r\n    [suffix]=\"suffix$ | async | localeCurrencyName: 'symbol'\"\r\n>\r\n    <input\r\n        type=\"number\"\r\n        [step]=\"hasFractionPart ? 0.01 : 1\"\r\n        [value]=\"_inputValue\"\r\n        [disabled]=\"disabled\"\r\n        [readonly]=\"readonly\"\r\n        (input)=\"onInput($event.target.value)\"\r\n        (focus)=\"onFocus()\"\r\n    />\r\n</vdr-affixed-input>\r\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: CurrencyInputComponent,
                        multi: true,
                    },
                ],
                styles: [":host{padding:0;border:none}input{max-width:96px}input[readonly]{background-color:transparent}\n"]
            },] }
];
CurrencyInputComponent.ctorParameters = () => [
    { type: DataService },
    { type: ChangeDetectorRef }
];
CurrencyInputComponent.propDecorators = {
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    value: [{ type: Input }],
    currencyCode: [{ type: Input }],
    valueChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,