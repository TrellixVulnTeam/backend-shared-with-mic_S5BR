import { ChangeDetectionStrategy, Component, ViewChild, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ActivatedRoute } from '@angular/router';
import { ExtensionHostService } from './extension-host.service';
/**
 * This component uses an iframe to embed an external url into the Admin UI, and uses the PostMessage
 * protocol to allow cross-frame communication between the two frames.
 */
export class ExtensionHostComponent {
    constructor(route, sanitizer, extensionHostService) {
        this.route = route;
        this.sanitizer = sanitizer;
        this.extensionHostService = extensionHostService;
        this.openInIframe = true;
        this.extensionWindowIsOpen = false;
    }
    ngOnInit() {
        const { data } = this.route.snapshot;
        if (!this.isExtensionHostConfig(data.extensionHostConfig)) {
            throw new Error(`Expected an ExtensionHostConfig object, got ${JSON.stringify(data.extensionHostConfig)}`);
        }
        this.config = data.extensionHostConfig;
        this.openInIframe = !this.config.openInNewTab;
        this.extensionUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.config.extensionUrl || 'about:blank');
    }
    ngAfterViewInit() {
        if (this.openInIframe) {
            const extensionWindow = this.extensionFrame.nativeElement.contentWindow;
            if (extensionWindow) {
                this.extensionHostService.init(extensionWindow, this.route.snapshot);
            }
        }
    }
    ngOnDestroy() {
        if (this.extensionWindow) {
            this.extensionWindow.close();
        }
    }
    launchExtensionWindow() {
        const extensionWindow = window.open(this.config.extensionUrl);
        if (!extensionWindow) {
            return;
        }
        this.extensionHostService.init(extensionWindow, this.route.snapshot);
        this.extensionWindowIsOpen = true;
        this.extensionWindow = extensionWindow;
        let timer;
        function pollWindowState(extwindow, onClosed) {
            if (extwindow.closed) {
                window.clearTimeout(timer);
                onClosed();
            }
            else {
                timer = window.setTimeout(() => pollWindowState(extwindow, onClosed), 250);
            }
        }
        pollWindowState(extensionWindow, () => {
            this.extensionWindowIsOpen = false;
            this.extensionHostService.destroy();
        });
    }
    isExtensionHostConfig(input) {
        return input.hasOwnProperty('extensionUrl');
    }
}
ExtensionHostComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-extension-host',
                template: "<ng-template [ngIf]=\"openInIframe\" [ngIfElse]=\"launchExtension\">\r\n    <iframe [src]=\"extensionUrl\" #extensionFrame></iframe>\r\n</ng-template>\r\n<ng-template #launchExtension>\r\n    <div class=\"launch-button\" [class.launched]=\"extensionWindowIsOpen\">\r\n        <div>\r\n            <button\r\n                class=\"btn btn-lg btn-primary\"\r\n                [disabled]=\"extensionWindowIsOpen\"\r\n                (click)=\"launchExtensionWindow()\"\r\n            >\r\n                <clr-icon shape=\"pop-out\"></clr-icon>\r\n                {{ 'common.launch-extension' | translate }}\r\n            </button>\r\n            <h3 class=\"window-hint\" [class.visible]=\"extensionWindowIsOpen\">\r\n                {{ 'common.extension-running-in-separate-window' | translate }}\r\n            </h3>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.Default,
                providers: [ExtensionHostService],
                styles: ["iframe{position:absolute;left:0;top:0;bottom:0;right:0;width:100%;height:100%;border:none}.launch-button{position:absolute;left:0;top:0;bottom:0;right:0;width:100%;height:100%;border:none;padding:24px;display:flex;align-items:center;justify-content:center;transition:background-color .3s;text-align:center}.launch-button.launched{background-color:var(--color-component-bg-300)}.window-hint{visibility:hidden;opacity:0;transition:visibility .3s 0,opacity .3s}.window-hint.visible{visibility:visible;opacity:1;transition:visibility 0,opacity .3s}\n"]
            },] }
];
ExtensionHostComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: DomSanitizer },
    { type: ExtensionHostService }
];
ExtensionHostComponent.propDecorators = {
    extensionFrame: [{ type: ViewChild, args: ['extensionFrame',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLWhvc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy9leHRlbnNpb24taG9zdC9leHRlbnNpb24taG9zdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVILHVCQUF1QixFQUN2QixTQUFTLEVBSVQsU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQW1CLE1BQU0sMkJBQTJCLENBQUM7QUFDMUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR2pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhFOzs7R0FHRztBQVFILE1BQU0sT0FBTyxzQkFBc0I7SUFRL0IsWUFDWSxLQUFxQixFQUNyQixTQUF1QixFQUN2QixvQkFBMEM7UUFGMUMsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUN2Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBVHRELGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLDBCQUFxQixHQUFHLEtBQUssQ0FBQztJQVMzQixDQUFDO0lBRUosUUFBUTtRQUNKLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQ1gsK0NBQStDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FDNUYsQ0FBQztTQUNMO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQzlDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FDN0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksYUFBYSxDQUM1QyxDQUFDO0lBQ04sQ0FBQztJQUVELGVBQWU7UUFDWCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1lBQ3hFLElBQUksZUFBZSxFQUFFO2dCQUNqQixJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3hFO1NBQ0o7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQztJQUVELHFCQUFxQjtRQUNqQixNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNsQixPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFFdkMsSUFBSSxLQUFhLENBQUM7UUFDbEIsU0FBUyxlQUFlLENBQUMsU0FBaUIsRUFBRSxRQUFvQjtZQUM1RCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xCLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzNCLFFBQVEsRUFBRSxDQUFDO2FBQ2Q7aUJBQU07Z0JBQ0gsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUM5RTtRQUNMLENBQUM7UUFFRCxlQUFlLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtZQUNsQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO1lBQ25DLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxxQkFBcUIsQ0FBQyxLQUFVO1FBQ3BDLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7WUE3RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLHEzQkFBOEM7Z0JBRTlDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxPQUFPO2dCQUNoRCxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzs7YUFDcEM7OztZQWZRLGNBQWM7WUFEZCxZQUFZO1lBSVosb0JBQW9COzs7NkJBbUJ4QixTQUFTLFNBQUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEFmdGVyVmlld0luaXQsXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIENvbXBvbmVudCxcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBPbkRlc3Ryb3ksXHJcbiAgICBPbkluaXQsXHJcbiAgICBWaWV3Q2hpbGQsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVJlc291cmNlVXJsIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbmltcG9ydCB7IEV4dGVuc2lvbkhvc3RDb25maWcgfSBmcm9tICcuL2V4dGVuc2lvbi1ob3N0LWNvbmZpZyc7XHJcbmltcG9ydCB7IEV4dGVuc2lvbkhvc3RTZXJ2aWNlIH0gZnJvbSAnLi9leHRlbnNpb24taG9zdC5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNvbXBvbmVudCB1c2VzIGFuIGlmcmFtZSB0byBlbWJlZCBhbiBleHRlcm5hbCB1cmwgaW50byB0aGUgQWRtaW4gVUksIGFuZCB1c2VzIHRoZSBQb3N0TWVzc2FnZVxyXG4gKiBwcm90b2NvbCB0byBhbGxvdyBjcm9zcy1mcmFtZSBjb21tdW5pY2F0aW9uIGJldHdlZW4gdGhlIHR3byBmcmFtZXMuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLWV4dGVuc2lvbi1ob3N0JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9leHRlbnNpb24taG9zdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9leHRlbnNpb24taG9zdC5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5EZWZhdWx0LFxyXG4gICAgcHJvdmlkZXJzOiBbRXh0ZW5zaW9uSG9zdFNlcnZpY2VdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRXh0ZW5zaW9uSG9zdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICAgIGV4dGVuc2lvblVybDogU2FmZVJlc291cmNlVXJsO1xyXG4gICAgb3BlbkluSWZyYW1lID0gdHJ1ZTtcclxuICAgIGV4dGVuc2lvbldpbmRvd0lzT3BlbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBjb25maWc6IEV4dGVuc2lvbkhvc3RDb25maWc7XHJcbiAgICBwcml2YXRlIGV4dGVuc2lvbldpbmRvdz86IFdpbmRvdztcclxuICAgIEBWaWV3Q2hpbGQoJ2V4dGVuc2lvbkZyYW1lJykgcHJpdmF0ZSBleHRlbnNpb25GcmFtZTogRWxlbWVudFJlZjxIVE1MSUZyYW1lRWxlbWVudD47XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICAgICAgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcclxuICAgICAgICBwcml2YXRlIGV4dGVuc2lvbkhvc3RTZXJ2aWNlOiBFeHRlbnNpb25Ib3N0U2VydmljZSxcclxuICAgICkge31cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXMucm91dGUuc25hcHNob3Q7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRXh0ZW5zaW9uSG9zdENvbmZpZyhkYXRhLmV4dGVuc2lvbkhvc3RDb25maWcpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICAgIGBFeHBlY3RlZCBhbiBFeHRlbnNpb25Ib3N0Q29uZmlnIG9iamVjdCwgZ290ICR7SlNPTi5zdHJpbmdpZnkoZGF0YS5leHRlbnNpb25Ib3N0Q29uZmlnKX1gLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGRhdGEuZXh0ZW5zaW9uSG9zdENvbmZpZztcclxuICAgICAgICB0aGlzLm9wZW5JbklmcmFtZSA9ICF0aGlzLmNvbmZpZy5vcGVuSW5OZXdUYWI7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25VcmwgPSB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmV4dGVuc2lvblVybCB8fCAnYWJvdXQ6YmxhbmsnLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wZW5JbklmcmFtZSkge1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbnNpb25XaW5kb3cgPSB0aGlzLmV4dGVuc2lvbkZyYW1lLm5hdGl2ZUVsZW1lbnQuY29udGVudFdpbmRvdztcclxuICAgICAgICAgICAgaWYgKGV4dGVuc2lvbldpbmRvdykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHRlbnNpb25Ib3N0U2VydmljZS5pbml0KGV4dGVuc2lvbldpbmRvdywgdGhpcy5yb3V0ZS5zbmFwc2hvdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZXh0ZW5zaW9uV2luZG93KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uV2luZG93LmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxhdW5jaEV4dGVuc2lvbldpbmRvdygpIHtcclxuICAgICAgICBjb25zdCBleHRlbnNpb25XaW5kb3cgPSB3aW5kb3cub3Blbih0aGlzLmNvbmZpZy5leHRlbnNpb25VcmwpO1xyXG4gICAgICAgIGlmICghZXh0ZW5zaW9uV2luZG93KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25Ib3N0U2VydmljZS5pbml0KGV4dGVuc2lvbldpbmRvdywgdGhpcy5yb3V0ZS5zbmFwc2hvdCk7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25XaW5kb3dJc09wZW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uV2luZG93ID0gZXh0ZW5zaW9uV2luZG93O1xyXG5cclxuICAgICAgICBsZXQgdGltZXI6IG51bWJlcjtcclxuICAgICAgICBmdW5jdGlvbiBwb2xsV2luZG93U3RhdGUoZXh0d2luZG93OiBXaW5kb3csIG9uQ2xvc2VkOiAoKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgICAgIGlmIChleHR3aW5kb3cuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuICAgICAgICAgICAgICAgIG9uQ2xvc2VkKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHBvbGxXaW5kb3dTdGF0ZShleHR3aW5kb3csIG9uQ2xvc2VkKSwgMjUwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcG9sbFdpbmRvd1N0YXRlKGV4dGVuc2lvbldpbmRvdywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmV4dGVuc2lvbldpbmRvd0lzT3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmV4dGVuc2lvbkhvc3RTZXJ2aWNlLmRlc3Ryb3koKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzRXh0ZW5zaW9uSG9zdENvbmZpZyhpbnB1dDogYW55KTogaW5wdXQgaXMgRXh0ZW5zaW9uSG9zdENvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIGlucHV0Lmhhc093blByb3BlcnR5KCdleHRlbnNpb25VcmwnKTtcclxuICAgIH1cclxufVxyXG4iXX0=