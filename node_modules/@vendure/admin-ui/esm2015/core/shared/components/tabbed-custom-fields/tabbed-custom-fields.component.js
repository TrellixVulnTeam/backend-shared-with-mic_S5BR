import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
export class TabbedCustomFieldsComponent {
    constructor() {
        this.readonly = false;
        this.compact = false;
        this.showLabel = true;
        this.defaultTabName = '__default_tab__';
    }
    ngOnInit() {
        this.tabbedCustomFields = this.groupByTabs(this.customFields);
    }
    customFieldIsSet(name) {
        var _a;
        return !!((_a = this.customFieldsFormGroup) === null || _a === void 0 ? void 0 : _a.get(name));
    }
    groupByTabs(customFieldConfigs) {
        var _a, _b, _c;
        const tabMap = new Map();
        for (const field of customFieldConfigs) {
            const tabName = (_b = (_a = field.ui) === null || _a === void 0 ? void 0 : _a.tab) !== null && _b !== void 0 ? _b : this.defaultTabName;
            if (tabMap.has(tabName)) {
                (_c = tabMap.get(tabName)) === null || _c === void 0 ? void 0 : _c.push(field);
            }
            else {
                tabMap.set(tabName, [field]);
            }
        }
        return Array.from(tabMap.entries())
            .sort((a, b) => (a[0] === this.defaultTabName ? -1 : 1))
            .map(([tabName, customFields]) => ({ tabName, customFields }));
    }
}
TabbedCustomFieldsComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-tabbed-custom-fields',
                template: "<ng-container *ngIf=\"1 < tabbedCustomFields.length; else singleGroup\">\r\n    <clr-tabs>\r\n        <clr-tab *ngFor=\"let group of tabbedCustomFields\">\r\n            <button clrTabLink>\r\n                {{\r\n                group.tabName === defaultTabName\r\n                    ? ('common.general' | translate)\r\n                    : (group.tabName | translate)\r\n                }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive>\r\n                <div class=\"mt4\">\r\n                    <ng-container *ngFor=\"let customField of group.customFields\">\r\n                        <vdr-custom-field-control\r\n                            *ngIf=\"customFieldIsSet(customField.name)\"\r\n                            [entityName]=\"entityName\"\r\n                            [customFieldsFormGroup]=\"customFieldsFormGroup\"\r\n                            [customField]=\"customField\"\r\n                            [readonly]=\"readonly\"\r\n                            [compact]=\"compact\"\r\n                            [showLabel]=\"showLabel\"\r\n                        ></vdr-custom-field-control>\r\n                    </ng-container>\r\n                </div>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n    </clr-tabs>\r\n</ng-container>\r\n<ng-template #singleGroup>\r\n    <ng-container *ngFor=\"let customField of tabbedCustomFields[0]?.customFields\">\r\n        <vdr-custom-field-control\r\n            *ngIf=\"customFieldIsSet(customField.name)\"\r\n            [entityName]=\"entityName\"\r\n            [customFieldsFormGroup]=\"customFieldsFormGroup\"\r\n            [customField]=\"customField\"\r\n            [readonly]=\"readonly\"\r\n            [compact]=\"compact\"\r\n            [showLabel]=\"showLabel\"\r\n        ></vdr-custom-field-control>\r\n    </ng-container>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            },] }
];
TabbedCustomFieldsComponent.propDecorators = {
    entityName: [{ type: Input }],
    customFields: [{ type: Input }],
    customFieldsFormGroup: [{ type: Input }],
    readonly: [{ type: Input }],
    compact: [{ type: Input }],
    showLabel: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiYmVkLWN1c3RvbS1maWVsZHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy90YWJiZWQtY3VzdG9tLWZpZWxkcy90YWJiZWQtY3VzdG9tLWZpZWxkcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFjbEYsTUFBTSxPQUFPLDJCQUEyQjtJQU54QztRQVVhLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLG1CQUFjLEdBQUcsaUJBQWlCLENBQUM7SUF5QmhELENBQUM7SUF0QkcsUUFBUTtRQUNKLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsSUFBWTs7UUFDekIsT0FBTyxDQUFDLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxxQkFBcUIsMENBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUM7SUFDbkQsQ0FBQztJQUVPLFdBQVcsQ0FBQyxrQkFBdUM7O1FBQ3ZELE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUErQixDQUFDO1FBQ3RELEtBQUssTUFBTSxLQUFLLElBQUksa0JBQWtCLEVBQUU7WUFDcEMsTUFBTSxPQUFPLEdBQUcsTUFBQSxNQUFBLEtBQUssQ0FBQyxFQUFFLDBDQUFFLEdBQUcsbUNBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNyRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3JCLE1BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsMENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BDO2lCQUFNO2dCQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNoQztTQUNKO1FBQ0QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUM5QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7OztZQXJDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsMjFEQUFvRDtnQkFFcEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2xEOzs7eUJBRUksS0FBSzsyQkFDTCxLQUFLO29DQUNMLEtBQUs7dUJBQ0wsS0FBSztzQkFDTCxLQUFLO3dCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgQ3VzdG9tRmllbGRDb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuaW1wb3J0IHsgQ3VzdG9tRmllbGRFbnRpdHlOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL2N1c3RvbS1maWVsZC1jb21wb25lbnQvY3VzdG9tLWZpZWxkLWNvbXBvbmVudC5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCB0eXBlIEdyb3VwZWRDdXN0b21GaWVsZHMgPSBBcnJheTx7IHRhYk5hbWU6IHN0cmluZzsgY3VzdG9tRmllbGRzOiBDdXN0b21GaWVsZENvbmZpZ1tdIH0+O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Zkci10YWJiZWQtY3VzdG9tLWZpZWxkcycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGFiYmVkLWN1c3RvbS1maWVsZHMuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vdGFiYmVkLWN1c3RvbS1maWVsZHMuY29tcG9uZW50LnNjc3MnXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFiYmVkQ3VzdG9tRmllbGRzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBJbnB1dCgpIGVudGl0eU5hbWU6IEN1c3RvbUZpZWxkRW50aXR5TmFtZTtcclxuICAgIEBJbnB1dCgpIGN1c3RvbUZpZWxkczogQ3VzdG9tRmllbGRDb25maWdbXTtcclxuICAgIEBJbnB1dCgpIGN1c3RvbUZpZWxkc0Zvcm1Hcm91cDogQWJzdHJhY3RDb250cm9sO1xyXG4gICAgQElucHV0KCkgcmVhZG9ubHkgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGNvbXBhY3QgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIHNob3dMYWJlbCA9IHRydWU7XHJcbiAgICByZWFkb25seSBkZWZhdWx0VGFiTmFtZSA9ICdfX2RlZmF1bHRfdGFiX18nO1xyXG4gICAgdGFiYmVkQ3VzdG9tRmllbGRzOiBHcm91cGVkQ3VzdG9tRmllbGRzO1xyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGFiYmVkQ3VzdG9tRmllbGRzID0gdGhpcy5ncm91cEJ5VGFicyh0aGlzLmN1c3RvbUZpZWxkcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY3VzdG9tRmllbGRJc1NldChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLmN1c3RvbUZpZWxkc0Zvcm1Hcm91cD8uZ2V0KG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ3JvdXBCeVRhYnMoY3VzdG9tRmllbGRDb25maWdzOiBDdXN0b21GaWVsZENvbmZpZ1tdKTogR3JvdXBlZEN1c3RvbUZpZWxkcyB7XHJcbiAgICAgICAgY29uc3QgdGFiTWFwID0gbmV3IE1hcDxzdHJpbmcsIEN1c3RvbUZpZWxkQ29uZmlnW10+KCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBjdXN0b21GaWVsZENvbmZpZ3MpIHtcclxuICAgICAgICAgICAgY29uc3QgdGFiTmFtZSA9IGZpZWxkLnVpPy50YWIgPz8gdGhpcy5kZWZhdWx0VGFiTmFtZTtcclxuICAgICAgICAgICAgaWYgKHRhYk1hcC5oYXModGFiTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRhYk1hcC5nZXQodGFiTmFtZSk/LnB1c2goZmllbGQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGFiTWFwLnNldCh0YWJOYW1lLCBbZmllbGRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0YWJNYXAuZW50cmllcygpKVxyXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gKGFbMF0gPT09IHRoaXMuZGVmYXVsdFRhYk5hbWUgPyAtMSA6IDEpKVxyXG4gICAgICAgICAgICAubWFwKChbdGFiTmFtZSwgY3VzdG9tRmllbGRzXSkgPT4gKHsgdGFiTmFtZSwgY3VzdG9tRmllbGRzIH0pKTtcclxuICAgIH1cclxufVxyXG4iXX0=