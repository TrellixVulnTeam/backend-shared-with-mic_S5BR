import { Injectable } from '@angular/core';
import dayjs from 'dayjs';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { dayOfWeekIndex } from './constants';
export class DatetimePickerService {
    constructor() {
        this.selectedDatetime$ = new BehaviorSubject(null);
        this.viewingDatetime$ = new BehaviorSubject(dayjs());
        this.min = null;
        this.max = null;
        this.jumping = false;
        this.selected$ = this.selectedDatetime$.pipe(map(value => value && value.toDate()));
        this.viewing$ = this.viewingDatetime$.pipe(map(value => value.toDate()));
        this.weekStartDayIndex = dayOfWeekIndex['mon'];
        this.calendarView$ = combineLatest(this.viewingDatetime$, this.selectedDatetime$).pipe(map(([viewing, selected]) => this.generateCalendarView(viewing, selected)));
    }
    setWeekStartingDay(weekStartDay) {
        this.weekStartDayIndex = dayOfWeekIndex[weekStartDay];
    }
    setMin(min) {
        if (typeof min === 'string') {
            this.min = dayjs(min);
        }
    }
    setMax(max) {
        if (typeof max === 'string') {
            this.max = dayjs(max);
        }
    }
    selectDatetime(date) {
        let viewingValue;
        let selectedValue = null;
        if (date == null || date === '') {
            viewingValue = dayjs();
        }
        else {
            viewingValue = dayjs(date);
            selectedValue = dayjs(date);
        }
        this.selectedDatetime$.next(selectedValue);
        this.viewingDatetime$.next(viewingValue);
    }
    selectHour(hourOfDay) {
        const current = this.selectedDatetime$.value || dayjs();
        const next = current.hour(hourOfDay);
        this.selectedDatetime$.next(next);
        this.viewingDatetime$.next(next);
    }
    selectMinute(minutePastHour) {
        const current = this.selectedDatetime$.value || dayjs();
        const next = current.minute(minutePastHour);
        this.selectedDatetime$.next(next);
        this.viewingDatetime$.next(next);
    }
    viewNextMonth() {
        this.jumping = false;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.add(1, 'month'));
    }
    viewPrevMonth() {
        this.jumping = false;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.subtract(1, 'month'));
    }
    viewToday() {
        this.jumping = false;
        this.viewingDatetime$.next(dayjs());
    }
    viewJumpDown() {
        this.jumping = true;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.add(1, 'week'));
    }
    viewJumpUp() {
        this.jumping = true;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.subtract(1, 'week'));
    }
    viewJumpRight() {
        this.jumping = true;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.add(1, 'day'));
    }
    viewJumpLeft() {
        this.jumping = true;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.subtract(1, 'day'));
    }
    selectToday() {
        this.jumping = false;
        this.selectDatetime(dayjs());
    }
    selectViewed() {
        this.jumping = false;
        this.selectDatetime(this.viewingDatetime$.value);
    }
    viewMonth(month) {
        this.jumping = false;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.month(month - 1));
    }
    viewYear(year) {
        this.jumping = false;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.year(year));
    }
    generateCalendarView(viewing, selected) {
        if (!viewing.isValid() || (selected && !selected.isValid())) {
            return [];
        }
        const start = viewing.startOf('month');
        const end = viewing.endOf('month');
        const today = dayjs();
        const daysInMonth = viewing.daysInMonth();
        const selectedDayOfMonth = selected && selected.get('date');
        const startDayOfWeek = start.day();
        const startIndex = (7 + (startDayOfWeek - this.weekStartDayIndex)) % 7;
        const calendarView = [];
        let week = [];
        // Add the days at the tail of the previous month
        if (0 < startIndex) {
            const prevMonth = viewing.subtract(1, 'month');
            const daysInPrevMonth = prevMonth.daysInMonth();
            const prevIsCurrentMonth = prevMonth.isSame(today, 'month');
            for (let i = daysInPrevMonth - startIndex + 1; i <= daysInPrevMonth; i++) {
                const thisDay = viewing.subtract(1, 'month').date(i);
                week.push({
                    dayOfMonth: i,
                    selected: false,
                    inCurrentMonth: false,
                    isToday: prevIsCurrentMonth && today.get('date') === i,
                    isViewing: false,
                    disabled: !this.isInBounds(thisDay),
                    select: () => {
                        this.selectDatetime(thisDay);
                    },
                });
            }
        }
        // Add this month's days
        const isCurrentMonth = viewing.isSame(today, 'month');
        for (let i = 1; i <= daysInMonth; i++) {
            if ((i + startIndex - 1) % 7 === 0) {
                calendarView.push(week);
                week = [];
            }
            const thisDay = start.add(i - 1, 'day');
            const isViewingThisMonth = !!selected && selected.isSame(viewing, 'month') && selected.isSame(viewing, 'year');
            week.push({
                dayOfMonth: i,
                selected: i === selectedDayOfMonth && isViewingThisMonth,
                inCurrentMonth: true,
                isToday: isCurrentMonth && today.get('date') === i,
                isViewing: this.jumping && viewing.date() === i,
                disabled: !this.isInBounds(thisDay),
                select: () => {
                    this.selectDatetime(thisDay);
                },
            });
        }
        // Add the days at the start of the next month
        const emptyCellsEnd = 7 - ((startIndex + daysInMonth) % 7);
        if (emptyCellsEnd !== 7) {
            const nextMonth = viewing.add(1, 'month');
            const nextIsCurrentMonth = nextMonth.isSame(today, 'month');
            for (let i = 1; i <= emptyCellsEnd; i++) {
                const thisDay = end.add(i, 'day');
                week.push({
                    dayOfMonth: i,
                    selected: false,
                    inCurrentMonth: false,
                    isToday: nextIsCurrentMonth && today.get('date') === i,
                    isViewing: false,
                    disabled: !this.isInBounds(thisDay),
                    select: () => {
                        this.selectDatetime(thisDay);
                    },
                });
            }
        }
        calendarView.push(week);
        return calendarView;
    }
    isInBounds(date) {
        if (this.min && this.min.isAfter(date)) {
            return false;
        }
        if (this.max && this.max.isBefore(date)) {
            return false;
        }
        return true;
    }
}
DatetimePickerService.decorators = [
    { type: Injectable }
];
DatetimePickerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUtcGlja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2RhdGV0aW1lLXBpY2tlci9kYXRldGltZS1waWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUk3QyxNQUFNLE9BQU8scUJBQXFCO0lBVzlCO1FBUFEsc0JBQWlCLEdBQUcsSUFBSSxlQUFlLENBQXFCLElBQUksQ0FBQyxDQUFDO1FBQ2xFLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFjLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFN0QsUUFBRyxHQUF1QixJQUFJLENBQUM7UUFDL0IsUUFBRyxHQUF1QixJQUFJLENBQUM7UUFDL0IsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUdwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGNB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QUFFLEdBQUcsRUFBRTt3QkFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNqQyxDQUFDO2lCQUNKLENBQUMsQ0FBQzthQUNOO1NBQ0o7UUFDRCxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFFTyxVQUFVLENBQUMsSUFBaUI7UUFDaEMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7O1lBN05KLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBkYXlPZldlZWtJbmRleCB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3LCBEYXlDZWxsLCBEYXlPZldlZWsgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERhdGV0aW1lUGlja2VyU2VydmljZSB7XHJcbiAgICBjYWxlbmRhclZpZXckOiBPYnNlcnZhYmxlPENhbGVuZGFyVmlldz47XHJcbiAgICBzZWxlY3RlZCQ6IE9ic2VydmFibGU8RGF0ZSB8IG51bGw+O1xyXG4gICAgdmlld2luZyQ6IE9ic2VydmFibGU8RGF0ZT47XHJcbiAgICBwcml2YXRlIHNlbGVjdGVkRGF0ZXRpbWUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxkYXlqcy5EYXlqcyB8IG51bGw+KG51bGwpO1xyXG4gICAgcHJpdmF0ZSB2aWV3aW5nRGF0ZXRpbWUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxkYXlqcy5EYXlqcz4oZGF5anMoKSk7XHJcbiAgICBwcml2YXRlIHdlZWtTdGFydERheUluZGV4OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIG1pbjogZGF5anMuRGF5anMgfCBudWxsID0gbnVsbDtcclxuICAgIHByaXZhdGUgbWF4OiBkYXlqcy5EYXlqcyB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBqdW1waW5nID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZCQgPSB0aGlzLnNlbGVjdGVkRGF0ZXRpbWUkLnBpcGUobWFwKHZhbHVlID0+IHZhbHVlICYmIHZhbHVlLnRvRGF0ZSgpKSk7XHJcbiAgICAgICAgdGhpcy52aWV3aW5nJCA9IHRoaXMudmlld2luZ0RhdGV0aW1lJC5waXBlKG1hcCh2YWx1ZSA9PiB2YWx1ZS50b0RhdGUoKSkpO1xyXG4gICAgICAgIHRoaXMud2Vla1N0YXJ0RGF5SW5kZXggPSBkYXlPZldlZWtJbmRleFsnbW9uJ107XHJcbiAgICAgICAgdGhpcy5jYWxlbmRhclZpZXckID0gY29tYmluZUxhdGVzdCh0aGlzLnZpZXdpbmdEYXRldGltZSQsIHRoaXMuc2VsZWN0ZWREYXRldGltZSQpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoW3ZpZXdpbmcsIHNlbGVjdGVkXSkgPT4gdGhpcy5nZW5lcmF0ZUNhbGVuZGFyVmlldyh2aWV3aW5nLCBzZWxlY3RlZCkpLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0V2Vla1N0YXJ0aW5nRGF5KHdlZWtTdGFydERheTogRGF5T2ZXZWVrKSB7XHJcbiAgICAgICAgdGhpcy53ZWVrU3RhcnREYXlJbmRleCA9IGRheU9mV2Vla0luZGV4W3dlZWtTdGFydERheV07XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TWluKG1pbj86IHN0cmluZyB8IG51bGwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG1pbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5taW4gPSBkYXlqcyhtaW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRNYXgobWF4Pzogc3RyaW5nIHwgbnVsbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWF4ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLm1heCA9IGRheWpzKG1heCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdERhdGV0aW1lKGRhdGU6IERhdGUgfCBzdHJpbmcgfCBkYXlqcy5EYXlqcyB8IG51bGwpIHtcclxuICAgICAgICBsZXQgdmlld2luZ1ZhbHVlOiBkYXlqcy5EYXlqcztcclxuICAgICAgICBsZXQgc2VsZWN0ZWRWYWx1ZTogZGF5anMuRGF5anMgfCBudWxsID0gbnVsbDtcclxuICAgICAgICBpZiAoZGF0ZSA9PSBudWxsIHx8IGRhdGUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHZpZXdpbmdWYWx1ZSA9IGRheWpzKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmlld2luZ1ZhbHVlID0gZGF5anMoZGF0ZSk7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUgPSBkYXlqcyhkYXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWREYXRldGltZSQubmV4dChzZWxlY3RlZFZhbHVlKTtcclxuICAgICAgICB0aGlzLnZpZXdpbmdEYXRldGltZSQubmV4dCh2aWV3aW5nVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdEhvdXIoaG91ck9mRGF5OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5zZWxlY3RlZERhdGV0aW1lJC52YWx1ZSB8fCBkYXlqcygpO1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBjdXJyZW50LmhvdXIoaG91ck9mRGF5KTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXRpbWUkLm5leHQobmV4dCk7XHJcbiAgICAgICAgdGhpcy52aWV3aW5nRGF0ZXRpbWUkLm5leHQobmV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0TWludXRlKG1pbnV0ZVBhc3RIb3VyOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5zZWxlY3RlZERhdGV0aW1lJC52YWx1ZSB8fCBkYXlqcygpO1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBjdXJyZW50Lm1pbnV0ZShtaW51dGVQYXN0SG91cik7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGV0aW1lJC5uZXh0KG5leHQpO1xyXG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KG5leHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHZpZXdOZXh0TW9udGgoKSB7XHJcbiAgICAgICAgdGhpcy5qdW1waW5nID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMudmlld2luZ0RhdGV0aW1lJC52YWx1ZTtcclxuICAgICAgICB0aGlzLnZpZXdpbmdEYXRldGltZSQubmV4dChjdXJyZW50LmFkZCgxLCAnbW9udGgnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmlld1ByZXZNb250aCgpIHtcclxuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy52aWV3aW5nRGF0ZXRpbWUkLnZhbHVlO1xyXG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KGN1cnJlbnQuc3VidHJhY3QoMSwgJ21vbnRoJykpO1xyXG4gICAgfVxyXG5cclxuICAgIHZpZXdUb2RheSgpIHtcclxuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnZpZXdpbmdEYXRldGltZSQubmV4dChkYXlqcygpKTtcclxuICAgIH1cclxuXHJcbiAgICB2aWV3SnVtcERvd24oKSB7XHJcbiAgICAgICAgdGhpcy5qdW1waW5nID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy52aWV3aW5nRGF0ZXRpbWUkLnZhbHVlO1xyXG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KGN1cnJlbnQuYWRkKDEsICd3ZWVrJykpO1xyXG4gICAgfVxyXG5cclxuICAgIHZpZXdKdW1wVXAoKSB7XHJcbiAgICAgICAgdGhpcy5qdW1waW5nID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy52aWV3aW5nRGF0ZXRpbWUkLnZhbHVlO1xyXG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KGN1cnJlbnQuc3VidHJhY3QoMSwgJ3dlZWsnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmlld0p1bXBSaWdodCgpIHtcclxuICAgICAgICB0aGlzLmp1bXBpbmcgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLnZpZXdpbmdEYXRldGltZSQudmFsdWU7XHJcbiAgICAgICAgdGhpcy52aWV3aW5nRGF0ZXRpbWUkLm5leHQoY3VycmVudC5hZGQoMSwgJ2RheScpKTtcclxuICAgIH1cclxuXHJcbiAgICB2aWV3SnVtcExlZnQoKSB7XHJcbiAgICAgICAgdGhpcy5qdW1waW5nID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy52aWV3aW5nRGF0ZXRpbWUkLnZhbHVlO1xyXG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KGN1cnJlbnQuc3VidHJhY3QoMSwgJ2RheScpKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RUb2RheSgpIHtcclxuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNlbGVjdERhdGV0aW1lKGRheWpzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdFZpZXdlZCgpIHtcclxuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNlbGVjdERhdGV0aW1lKHRoaXMudmlld2luZ0RhdGV0aW1lJC52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmlld01vbnRoKG1vbnRoOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy52aWV3aW5nRGF0ZXRpbWUkLnZhbHVlO1xyXG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KGN1cnJlbnQubW9udGgobW9udGggLSAxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmlld1llYXIoeWVhcjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5qdW1waW5nID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMudmlld2luZ0RhdGV0aW1lJC52YWx1ZTtcclxuICAgICAgICB0aGlzLnZpZXdpbmdEYXRldGltZSQubmV4dChjdXJyZW50LnllYXIoeWVhcikpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVDYWxlbmRhclZpZXcodmlld2luZzogZGF5anMuRGF5anMsIHNlbGVjdGVkOiBkYXlqcy5EYXlqcyB8IG51bGwpOiBDYWxlbmRhclZpZXcge1xyXG4gICAgICAgIGlmICghdmlld2luZy5pc1ZhbGlkKCkgfHwgKHNlbGVjdGVkICYmICFzZWxlY3RlZC5pc1ZhbGlkKCkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSB2aWV3aW5nLnN0YXJ0T2YoJ21vbnRoJyk7XHJcbiAgICAgICAgY29uc3QgZW5kID0gdmlld2luZy5lbmRPZignbW9udGgnKTtcclxuICAgICAgICBjb25zdCB0b2RheSA9IGRheWpzKCk7XHJcbiAgICAgICAgY29uc3QgZGF5c0luTW9udGggPSB2aWV3aW5nLmRheXNJbk1vbnRoKCk7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWREYXlPZk1vbnRoID0gc2VsZWN0ZWQgJiYgc2VsZWN0ZWQuZ2V0KCdkYXRlJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF5T2ZXZWVrID0gc3RhcnQuZGF5KCk7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9ICg3ICsgKHN0YXJ0RGF5T2ZXZWVrIC0gdGhpcy53ZWVrU3RhcnREYXlJbmRleCkpICUgNztcclxuXHJcbiAgICAgICAgY29uc3QgY2FsZW5kYXJWaWV3OiBDYWxlbmRhclZpZXcgPSBbXTtcclxuICAgICAgICBsZXQgd2VlazogRGF5Q2VsbFtdID0gW107XHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGUgZGF5cyBhdCB0aGUgdGFpbCBvZiB0aGUgcHJldmlvdXMgbW9udGhcclxuICAgICAgICBpZiAoMCA8IHN0YXJ0SW5kZXgpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJldk1vbnRoID0gdmlld2luZy5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcclxuICAgICAgICAgICAgY29uc3QgZGF5c0luUHJldk1vbnRoID0gcHJldk1vbnRoLmRheXNJbk1vbnRoKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXZJc0N1cnJlbnRNb250aCA9IHByZXZNb250aC5pc1NhbWUodG9kYXksICdtb250aCcpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZGF5c0luUHJldk1vbnRoIC0gc3RhcnRJbmRleCArIDE7IGkgPD0gZGF5c0luUHJldk1vbnRoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRoaXNEYXkgPSB2aWV3aW5nLnN1YnRyYWN0KDEsICdtb250aCcpLmRhdGUoaSk7XHJcbiAgICAgICAgICAgICAgICB3ZWVrLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGRheU9mTW9udGg6IGksXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGluQ3VycmVudE1vbnRoOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBpc1RvZGF5OiBwcmV2SXNDdXJyZW50TW9udGggJiYgdG9kYXkuZ2V0KCdkYXRlJykgPT09IGksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNWaWV3aW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIXRoaXMuaXNJbkJvdW5kcyh0aGlzRGF5KSxcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRldGltZSh0aGlzRGF5KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGlzIG1vbnRoJ3MgZGF5c1xyXG4gICAgICAgIGNvbnN0IGlzQ3VycmVudE1vbnRoID0gdmlld2luZy5pc1NhbWUodG9kYXksICdtb250aCcpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGRheXNJbk1vbnRoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKChpICsgc3RhcnRJbmRleCAtIDEpICUgNyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY2FsZW5kYXJWaWV3LnB1c2god2Vlayk7XHJcbiAgICAgICAgICAgICAgICB3ZWVrID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdGhpc0RheSA9IHN0YXJ0LmFkZChpIC0gMSwgJ2RheScpO1xyXG4gICAgICAgICAgICBjb25zdCBpc1ZpZXdpbmdUaGlzTW9udGggPVxyXG4gICAgICAgICAgICAgICAgISFzZWxlY3RlZCAmJiBzZWxlY3RlZC5pc1NhbWUodmlld2luZywgJ21vbnRoJykgJiYgc2VsZWN0ZWQuaXNTYW1lKHZpZXdpbmcsICd5ZWFyJyk7XHJcbiAgICAgICAgICAgIHdlZWsucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBkYXlPZk1vbnRoOiBpLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGkgPT09IHNlbGVjdGVkRGF5T2ZNb250aCAmJiBpc1ZpZXdpbmdUaGlzTW9udGgsXHJcbiAgICAgICAgICAgICAgICBpbkN1cnJlbnRNb250aDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGlzVG9kYXk6IGlzQ3VycmVudE1vbnRoICYmIHRvZGF5LmdldCgnZGF0ZScpID09PSBpLFxyXG4gICAgICAgICAgICAgICAgaXNWaWV3aW5nOiB0aGlzLmp1bXBpbmcgJiYgdmlld2luZy5kYXRlKCkgPT09IGksXHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogIXRoaXMuaXNJbkJvdW5kcyh0aGlzRGF5KSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZXRpbWUodGhpc0RheSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGUgZGF5cyBhdCB0aGUgc3RhcnQgb2YgdGhlIG5leHQgbW9udGhcclxuICAgICAgICBjb25zdCBlbXB0eUNlbGxzRW5kID0gNyAtICgoc3RhcnRJbmRleCArIGRheXNJbk1vbnRoKSAlIDcpO1xyXG4gICAgICAgIGlmIChlbXB0eUNlbGxzRW5kICE9PSA3KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRNb250aCA9IHZpZXdpbmcuYWRkKDEsICdtb250aCcpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0SXNDdXJyZW50TW9udGggPSBuZXh0TW9udGguaXNTYW1lKHRvZGF5LCAnbW9udGgnKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGVtcHR5Q2VsbHNFbmQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc0RheSA9IGVuZC5hZGQoaSwgJ2RheScpO1xyXG4gICAgICAgICAgICAgICAgd2Vlay5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBkYXlPZk1vbnRoOiBpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBpbkN1cnJlbnRNb250aDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNUb2RheTogbmV4dElzQ3VycmVudE1vbnRoICYmIHRvZGF5LmdldCgnZGF0ZScpID09PSBpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmlld2luZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLmlzSW5Cb3VuZHModGhpc0RheSksXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZXRpbWUodGhpc0RheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGVuZGFyVmlldy5wdXNoKHdlZWspO1xyXG4gICAgICAgIHJldHVybiBjYWxlbmRhclZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0luQm91bmRzKGRhdGU6IGRheWpzLkRheWpzKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMubWluICYmIHRoaXMubWluLmlzQWZ0ZXIoZGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tYXggJiYgdGhpcy5tYXguaXNCZWZvcmUoZGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iXX0=