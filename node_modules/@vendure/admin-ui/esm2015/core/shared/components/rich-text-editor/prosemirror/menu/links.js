import { icons, MenuItem } from 'prosemirror-menu';
import { TextSelection } from 'prosemirror-state';
import { LinkDialogComponent } from '../../link-dialog/link-dialog.component';
import { markActive } from './menu-common';
function selectionIsWithinLink(state, anchor, head) {
    const { doc } = state;
    const headLink = doc
        .resolve(head)
        .marks()
        .find(m => m.type.name === 'link');
    const anchorLink = doc
        .resolve(anchor)
        .marks()
        .find(m => m.type.name === 'link');
    if (headLink && anchorLink && headLink.eq(anchorLink)) {
        return true;
    }
    return false;
}
export function linkItem(linkMark, modalService) {
    return new MenuItem({
        title: 'Add or remove link',
        icon: icons.link,
        class: '',
        css: '',
        active(state) {
            return markActive(state, linkMark);
        },
        enable(state) {
            const { selection } = state;
            return !selection.empty || selectionIsWithinLink(state, selection.anchor, selection.head);
        },
        run(state, dispatch, view) {
            let attrs;
            const { selection, doc } = state;
            if (selection instanceof TextSelection &&
                selectionIsWithinLink(state, selection.anchor + 1, selection.head - 1)) {
                const mark = doc
                    .resolve(selection.anchor + 1)
                    .marks()
                    .find(m => m.type.name === 'link');
                if (mark) {
                    attrs = mark.attrs;
                }
            }
            modalService
                .fromComponent(LinkDialogComponent, {
                closable: true,
                locals: {
                    existing: attrs,
                },
            })
                .subscribe(result => {
                let tr = state.tr;
                if (result) {
                    const { $from, $to } = selection.ranges[0];
                    tr = tr.removeMark($from.pos, $to.pos, linkMark);
                    if (result.href !== '') {
                        tr = tr.addMark($from.pos, $to.pos, linkMark.create(result));
                    }
                }
                dispatch(tr.scrollIntoView());
                view.focus();
            });
            return true;
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlua3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3JpY2gtdGV4dC1lZGl0b3IvcHJvc2VtaXJyb3IvbWVudS9saW5rcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRW5ELE9BQU8sRUFBZSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUcvRCxPQUFPLEVBQWEsbUJBQW1CLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUV6RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLFNBQVMscUJBQXFCLENBQUMsS0FBa0IsRUFBRSxNQUFjLEVBQUUsSUFBWTtJQUMzRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLE1BQU0sUUFBUSxHQUFHLEdBQUc7U0FDZixPQUFPLENBQUMsSUFBSSxDQUFDO1NBQ2IsS0FBSyxFQUFFO1NBQ1AsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7SUFDdkMsTUFBTSxVQUFVLEdBQUcsR0FBRztTQUNqQixPQUFPLENBQUMsTUFBTSxDQUFDO1NBQ2YsS0FBSyxFQUFFO1NBQ1AsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7SUFDdkMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDbkQsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLFFBQWtCLEVBQUUsWUFBMEI7SUFDbkUsT0FBTyxJQUFJLFFBQVEsQ0FBQztRQUNoQixLQUFLLEVBQUUsb0JBQW9CO1FBQzNCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixLQUFLLEVBQUUsRUFBRTtRQUNULEdBQUcsRUFBRSxFQUFFO1FBQ1AsTUFBTSxDQUFDLEtBQUs7WUFDUixPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLO1lBQ1IsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQztZQUM1QixPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUYsQ0FBQztRQUNELEdBQUcsQ0FBQyxLQUFrQixFQUFFLFFBQVEsRUFBRSxJQUFJO1lBQ2xDLElBQUksS0FBNEIsQ0FBQztZQUNqQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztZQUNqQyxJQUNJLFNBQVMsWUFBWSxhQUFhO2dCQUNsQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFDeEU7Z0JBQ0UsTUFBTSxJQUFJLEdBQUcsR0FBRztxQkFDWCxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7cUJBQzdCLEtBQUssRUFBRTtxQkFDUCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxJQUFJLEVBQUU7b0JBQ04sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFrQixDQUFDO2lCQUNuQzthQUNKO1lBQ0QsWUFBWTtpQkFDUCxhQUFhLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ2hDLFFBQVEsRUFBRSxJQUFJO2dCQUNkLE1BQU0sRUFBRTtvQkFDSixRQUFRLEVBQUUsS0FBSztpQkFDbEI7YUFDSixDQUFDO2lCQUNELFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDaEIsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDbEIsSUFBSSxNQUFNLEVBQUU7b0JBQ1IsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQyxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQ2pELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUU7d0JBQ3BCLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQ2hFO2lCQUNKO2dCQUNELFFBQVEsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUNKLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b2dnbGVNYXJrIH0gZnJvbSAncHJvc2VtaXJyb3ItY29tbWFuZHMnO1xyXG5pbXBvcnQgeyBpY29ucywgTWVudUl0ZW0gfSBmcm9tICdwcm9zZW1pcnJvci1tZW51JztcclxuaW1wb3J0IHsgTWFya1R5cGUgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XHJcbmltcG9ydCB7IEVkaXRvclN0YXRlLCBUZXh0U2VsZWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xyXG5cclxuaW1wb3J0IHsgTW9kYWxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vcHJvdmlkZXJzL21vZGFsL21vZGFsLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMaW5rQXR0cnMsIExpbmtEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saW5rLWRpYWxvZy9saW5rLWRpYWxvZy5jb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgbWFya0FjdGl2ZSB9IGZyb20gJy4vbWVudS1jb21tb24nO1xyXG5cclxuZnVuY3Rpb24gc2VsZWN0aW9uSXNXaXRoaW5MaW5rKHN0YXRlOiBFZGl0b3JTdGF0ZSwgYW5jaG9yOiBudW1iZXIsIGhlYWQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgeyBkb2MgfSA9IHN0YXRlO1xyXG4gICAgY29uc3QgaGVhZExpbmsgPSBkb2NcclxuICAgICAgICAucmVzb2x2ZShoZWFkKVxyXG4gICAgICAgIC5tYXJrcygpXHJcbiAgICAgICAgLmZpbmQobSA9PiBtLnR5cGUubmFtZSA9PT0gJ2xpbmsnKTtcclxuICAgIGNvbnN0IGFuY2hvckxpbmsgPSBkb2NcclxuICAgICAgICAucmVzb2x2ZShhbmNob3IpXHJcbiAgICAgICAgLm1hcmtzKClcclxuICAgICAgICAuZmluZChtID0+IG0udHlwZS5uYW1lID09PSAnbGluaycpO1xyXG4gICAgaWYgKGhlYWRMaW5rICYmIGFuY2hvckxpbmsgJiYgaGVhZExpbmsuZXEoYW5jaG9yTGluaykpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxpbmtJdGVtKGxpbmtNYXJrOiBNYXJrVHlwZSwgbW9kYWxTZXJ2aWNlOiBNb2RhbFNlcnZpY2UpIHtcclxuICAgIHJldHVybiBuZXcgTWVudUl0ZW0oe1xyXG4gICAgICAgIHRpdGxlOiAnQWRkIG9yIHJlbW92ZSBsaW5rJyxcclxuICAgICAgICBpY29uOiBpY29ucy5saW5rLFxyXG4gICAgICAgIGNsYXNzOiAnJyxcclxuICAgICAgICBjc3M6ICcnLFxyXG4gICAgICAgIGFjdGl2ZShzdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWFya0FjdGl2ZShzdGF0ZSwgbGlua01hcmspO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW5hYmxlKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSBzdGF0ZTtcclxuICAgICAgICAgICAgcmV0dXJuICFzZWxlY3Rpb24uZW1wdHkgfHwgc2VsZWN0aW9uSXNXaXRoaW5MaW5rKHN0YXRlLCBzZWxlY3Rpb24uYW5jaG9yLCBzZWxlY3Rpb24uaGVhZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBydW4oc3RhdGU6IEVkaXRvclN0YXRlLCBkaXNwYXRjaCwgdmlldykge1xyXG4gICAgICAgICAgICBsZXQgYXR0cnM6IExpbmtBdHRycyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgY29uc3QgeyBzZWxlY3Rpb24sIGRvYyB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24gJiZcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbklzV2l0aGluTGluayhzdGF0ZSwgc2VsZWN0aW9uLmFuY2hvciArIDEsIHNlbGVjdGlvbi5oZWFkIC0gMSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrID0gZG9jXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlc29sdmUoc2VsZWN0aW9uLmFuY2hvciArIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcmtzKClcclxuICAgICAgICAgICAgICAgICAgICAuZmluZChtID0+IG0udHlwZS5uYW1lID09PSAnbGluaycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hcmspIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRycyA9IG1hcmsuYXR0cnMgYXMgTGlua0F0dHJzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1vZGFsU2VydmljZVxyXG4gICAgICAgICAgICAgICAgLmZyb21Db21wb25lbnQoTGlua0RpYWxvZ0NvbXBvbmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb3NhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2Fsczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZzogYXR0cnMsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyID0gc3RhdGUudHI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7ICRmcm9tLCAkdG8gfSA9IHNlbGVjdGlvbi5yYW5nZXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyID0gdHIucmVtb3ZlTWFyaygkZnJvbS5wb3MsICR0by5wb3MsIGxpbmtNYXJrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5ocmVmICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHIgPSB0ci5hZGRNYXJrKCRmcm9tLnBvcywgJHRvLnBvcywgbGlua01hcmsuY3JlYXRlKHJlc3VsdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuIl19