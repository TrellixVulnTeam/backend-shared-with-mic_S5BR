import { Component, Input, ViewChild, ViewContainerRef, } from '@angular/core';
import { DataService } from '../../../data/providers/data.service';
import { CustomFieldComponentService, } from '../../../providers/custom-field-component/custom-field-component.service';
/**
 * This component renders the appropriate type of form input control based
 * on the "type" property of the provided CustomFieldConfig.
 */
export class CustomFieldControlComponent {
    constructor(dataService, customFieldComponentService) {
        this.dataService = dataService;
        this.customFieldComponentService = customFieldComponentService;
        this.compact = false;
        this.showLabel = true;
        this.readonly = false;
        this.hasCustomControl = false;
    }
    getFieldDefinition() {
        const config = Object.assign({}, this.customField);
        const id = this.customFieldComponentService.customFieldComponentExists(this.entityName, this.customField.name);
        if (id) {
            config.ui = { component: id };
        }
        switch (config.__typename) {
            case 'IntCustomFieldConfig':
                return Object.assign(Object.assign({}, config), { min: config.intMin, max: config.intMax, step: config.intStep });
            case 'FloatCustomFieldConfig':
                return Object.assign(Object.assign({}, config), { min: config.floatMin, max: config.floatMax, step: config.floatStep });
            case 'DateTimeCustomFieldConfig':
                return Object.assign(Object.assign({}, config), { min: config.datetimeMin, max: config.datetimeMax, step: config.datetimeStep });
            default:
                return Object.assign({}, config);
        }
    }
}
CustomFieldControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-custom-field-control',
                template: "<div class=\"clr-form-control\" *ngIf=\"compact\">\r\n    <label for=\"basic\" class=\"clr-control-label\">{{ customField | customFieldLabel }}</label>\r\n    <div class=\"clr-control-container\">\r\n        <div class=\"clr-input-wrapper\">\r\n            <ng-container *ngTemplateOutlet=\"inputs\"></ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n<vdr-form-field [label]=\"customField | customFieldLabel\" [for]=\"customField.name\" *ngIf=\"!compact\">\r\n    <ng-container *ngTemplateOutlet=\"inputs\"></ng-container>\r\n</vdr-form-field>\r\n\r\n<ng-template #inputs>\r\n    <ng-container [formGroup]=\"formGroup\">\r\n        <vdr-dynamic-form-input\r\n            [formControlName]=\"customField.name\"\r\n            [readonly]=\"readonly || customField.readonly\"\r\n            [control]=\"formGroup.get(customField.name)\"\r\n            [def]=\"getFieldDefinition()\"\r\n        >\r\n        </vdr-dynamic-form-input>\r\n    </ng-container>\r\n</ng-template>\r\n",
                styles: [":host{display:block;width:100%}:host .toggle-switch{margin-top:0;margin-bottom:0}\n"]
            },] }
];
CustomFieldControlComponent.ctorParameters = () => [
    { type: DataService },
    { type: CustomFieldComponentService }
];
CustomFieldControlComponent.propDecorators = {
    entityName: [{ type: Input }],
    formGroup: [{ type: Input, args: ['customFieldsFormGroup',] }],
    customField: [{ type: Input }],
    compact: [{ type: Input }],
    showLabel: [{ type: Input }],
    readonly: [{ type: Input }],
    customComponentPlaceholder: [{ type: ViewChild, args: ['customComponentPlaceholder', { read: ViewContainerRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWZpZWxkLWNvbnRyb2wuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvY29tcG9uZW50cy9jdXN0b20tZmllbGQtY29udHJvbC9jdXN0b20tZmllbGQtY29udHJvbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVILFNBQVMsRUFFVCxLQUFLLEVBRUwsU0FBUyxFQUNULGdCQUFnQixHQUNuQixNQUFNLGVBQWUsQ0FBQztBQUt2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDbkUsT0FBTyxFQUNILDJCQUEyQixHQUc5QixNQUFNLDBFQUEwRSxDQUFDO0FBRWxGOzs7R0FHRztBQU1ILE1BQU0sT0FBTywyQkFBMkI7SUFZcEMsWUFDWSxXQUF3QixFQUN4QiwyQkFBd0Q7UUFEeEQsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtRQVYzRCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUMxQixxQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFRdEIsQ0FBQztJQUVKLGtCQUFrQjtRQUNkLE1BQU0sTUFBTSxxQkFDTCxJQUFJLENBQUMsV0FBVyxDQUN0QixDQUFDO1FBQ0YsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLDBCQUEwQixDQUNsRSxJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUN4QixDQUFDO1FBQ0YsSUFBSSxFQUFFLEVBQUU7WUFDSixNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDO1NBQ2pDO1FBQ0QsUUFBUSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ3ZCLEtBQUssc0JBQXNCO2dCQUN2Qix1Q0FDTyxNQUFNLEtBQ1QsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQ2xCLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUNsQixJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sSUFDdEI7WUFDTixLQUFLLHdCQUF3QjtnQkFDekIsdUNBQ08sTUFBTSxLQUNULEdBQUcsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUNwQixHQUFHLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFDcEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTLElBQ3hCO1lBQ04sS0FBSywyQkFBMkI7Z0JBQzVCLHVDQUNPLE1BQU0sS0FDVCxHQUFHLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFDdkIsR0FBRyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQ3ZCLElBQUksRUFBRSxNQUFNLENBQUMsWUFBWSxJQUMzQjtZQUNOO2dCQUNJLHlCQUNPLE1BQU0sRUFDWDtTQUNUO0lBQ0wsQ0FBQzs7O1lBNURKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMEJBQTBCO2dCQUNwQyxvK0JBQW9EOzthQUV2RDs7O1lBZlEsV0FBVztZQUVoQiwyQkFBMkI7Ozt5QkFlMUIsS0FBSzt3QkFDTCxLQUFLLFNBQUMsdUJBQXVCOzBCQUM3QixLQUFLO3NCQUNMLEtBQUs7d0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3lDQUVMLFNBQVMsU0FBQyw0QkFBNEIsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBBZnRlclZpZXdJbml0LFxyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgQ29tcG9uZW50RmFjdG9yeSxcclxuICAgIElucHV0LFxyXG4gICAgT25Jbml0LFxyXG4gICAgVmlld0NoaWxkLFxyXG4gICAgVmlld0NvbnRhaW5lclJlZixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7IElucHV0Q29tcG9uZW50Q29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NvbXBvbmVudC1yZWdpc3RyeS10eXBlcyc7XHJcbmltcG9ydCB7IEN1c3RvbUZpZWxkQ29uZmlnLCBDdXN0b21GaWVsZHNGcmFnbWVudCB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5pbXBvcnQgeyBEYXRhU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2RhdGEvcHJvdmlkZXJzL2RhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7XHJcbiAgICBDdXN0b21GaWVsZENvbXBvbmVudFNlcnZpY2UsXHJcbiAgICBDdXN0b21GaWVsZENvbnRyb2wsXHJcbiAgICBDdXN0b21GaWVsZEVudGl0eU5hbWUsXHJcbn0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL2N1c3RvbS1maWVsZC1jb21wb25lbnQvY3VzdG9tLWZpZWxkLWNvbXBvbmVudC5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNvbXBvbmVudCByZW5kZXJzIHRoZSBhcHByb3ByaWF0ZSB0eXBlIG9mIGZvcm0gaW5wdXQgY29udHJvbCBiYXNlZFxyXG4gKiBvbiB0aGUgXCJ0eXBlXCIgcHJvcGVydHkgb2YgdGhlIHByb3ZpZGVkIEN1c3RvbUZpZWxkQ29uZmlnLlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Zkci1jdXN0b20tZmllbGQtY29udHJvbCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vY3VzdG9tLWZpZWxkLWNvbnRyb2wuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vY3VzdG9tLWZpZWxkLWNvbnRyb2wuY29tcG9uZW50LnNjc3MnXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEN1c3RvbUZpZWxkQ29udHJvbENvbXBvbmVudCB7XHJcbiAgICBASW5wdXQoKSBlbnRpdHlOYW1lOiBDdXN0b21GaWVsZEVudGl0eU5hbWU7XHJcbiAgICBASW5wdXQoJ2N1c3RvbUZpZWxkc0Zvcm1Hcm91cCcpIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xyXG4gICAgQElucHV0KCkgY3VzdG9tRmllbGQ6IEN1c3RvbUZpZWxkc0ZyYWdtZW50O1xyXG4gICAgQElucHV0KCkgY29tcGFjdCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgc2hvd0xhYmVsID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgpIHJlYWRvbmx5ID0gZmFsc2U7XHJcbiAgICBoYXNDdXN0b21Db250cm9sID0gZmFsc2U7XHJcbiAgICBAVmlld0NoaWxkKCdjdXN0b21Db21wb25lbnRQbGFjZWhvbGRlcicsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KVxyXG4gICAgcHJpdmF0ZSBjdXN0b21Db21wb25lbnRQbGFjZWhvbGRlcjogVmlld0NvbnRhaW5lclJlZjtcclxuICAgIHByaXZhdGUgY3VzdG9tQ29tcG9uZW50RmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxDdXN0b21GaWVsZENvbnRyb2w+IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY3VzdG9tRmllbGRDb21wb25lbnRTZXJ2aWNlOiBDdXN0b21GaWVsZENvbXBvbmVudFNlcnZpY2UsXHJcbiAgICApIHt9XHJcblxyXG4gICAgZ2V0RmllbGREZWZpbml0aW9uKCk6IEN1c3RvbUZpZWxkQ29uZmlnICYgeyB1aT86IElucHV0Q29tcG9uZW50Q29uZmlnIH0ge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZzogQ3VzdG9tRmllbGRzRnJhZ21lbnQgJiB7IHVpPzogSW5wdXRDb21wb25lbnRDb25maWcgfSA9IHtcclxuICAgICAgICAgICAgLi4udGhpcy5jdXN0b21GaWVsZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5jdXN0b21GaWVsZENvbXBvbmVudFNlcnZpY2UuY3VzdG9tRmllbGRDb21wb25lbnRFeGlzdHMoXHJcbiAgICAgICAgICAgIHRoaXMuZW50aXR5TmFtZSxcclxuICAgICAgICAgICAgdGhpcy5jdXN0b21GaWVsZC5uYW1lLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGNvbmZpZy51aSA9IHsgY29tcG9uZW50OiBpZCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKGNvbmZpZy5fX3R5cGVuYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ0ludEN1c3RvbUZpZWxkQ29uZmlnJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbjogY29uZmlnLmludE1pbixcclxuICAgICAgICAgICAgICAgICAgICBtYXg6IGNvbmZpZy5pbnRNYXgsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogY29uZmlnLmludFN0ZXAsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjYXNlICdGbG9hdEN1c3RvbUZpZWxkQ29uZmlnJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbjogY29uZmlnLmZsb2F0TWluLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heDogY29uZmlnLmZsb2F0TWF4LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGNvbmZpZy5mbG9hdFN0ZXAsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjYXNlICdEYXRlVGltZUN1c3RvbUZpZWxkQ29uZmlnJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbjogY29uZmlnLmRhdGV0aW1lTWluLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heDogY29uZmlnLmRhdGV0aW1lTWF4LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGNvbmZpZy5kYXRldGltZVN0ZXAsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5jb25maWcsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=