import { Pipe } from '@angular/core';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import dayjs from 'dayjs';
import { I18nService } from '../../providers/i18n/i18n.service';
/**
 * @description
 * Converts a date into the format "3 minutes ago", "5 hours ago" etc.
 *
 * @example
 * ```HTML
 * {{ order.orderPlacedAt | timeAgo }}
 * ```
 *
 * @docsCategory pipes
 */
export class TimeAgoPipe {
    constructor(i18nService) {
        this.i18nService = i18nService;
    }
    transform(value, nowVal) {
        const then = dayjs(value);
        const now = dayjs(nowVal || new Date());
        const secondsDiff = now.diff(then, 'second');
        const durations = [
            [60, _('datetime.ago-seconds')],
            [3600, _('datetime.ago-minutes')],
            [86400, _('datetime.ago-hours')],
            [31536000, _('datetime.ago-days')],
            [Number.MAX_SAFE_INTEGER, _('datetime.ago-years')],
        ];
        let lastUpperBound = 1;
        for (const [upperBound, translationToken] of durations) {
            if (secondsDiff < upperBound) {
                const count = Math.max(0, Math.floor(secondsDiff / lastUpperBound));
                return this.i18nService.translate(translationToken, { count });
            }
            lastUpperBound = upperBound;
        }
        return then.format();
    }
}
TimeAgoPipe.decorators = [
    { type: Pipe, args: [{
                name: 'timeAgo',
                pure: false,
            },] }
];
TimeAgoPipe.ctorParameters = () => [
    { type: I18nService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL3BpcGVzL3RpbWUtYWdvLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN0RSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRWhFOzs7Ozs7Ozs7O0dBVUc7QUFLSCxNQUFNLE9BQU8sV0FBVztJQUNwQixZQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFHLENBQUM7SUFFaEQsU0FBUyxDQUFDLEtBQW9CLEVBQUUsTUFBc0I7UUFDbEQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sU0FBUyxHQUE0QjtZQUN2QyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUMvQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUNqQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNoQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUNsQyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUNyRCxDQUFDO1FBRUYsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssTUFBTSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLFNBQVMsRUFBRTtZQUNwRCxJQUFJLFdBQVcsR0FBRyxVQUFVLEVBQUU7Z0JBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsY0FBYyxHQUFHLFVBQVUsQ0FBQztTQUMvQjtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3pCLENBQUM7OztZQTVCSixJQUFJLFNBQUM7Z0JBQ0YsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsSUFBSSxFQUFFLEtBQUs7YUFDZDs7O1lBaEJRLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG1hcmtlciBhcyBfIH0gZnJvbSAnQGJpZXNiamVyZy9uZ3gtdHJhbnNsYXRlLWV4dHJhY3QtbWFya2VyJztcclxuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcclxuXHJcbmltcG9ydCB7IEkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzL2kxOG4vaTE4bi5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29udmVydHMgYSBkYXRlIGludG8gdGhlIGZvcm1hdCBcIjMgbWludXRlcyBhZ29cIiwgXCI1IGhvdXJzIGFnb1wiIGV0Yy5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgSFRNTFxyXG4gKiB7eyBvcmRlci5vcmRlclBsYWNlZEF0IHwgdGltZUFnbyB9fVxyXG4gKiBgYGBcclxuICpcclxuICogQGRvY3NDYXRlZ29yeSBwaXBlc1xyXG4gKi9cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ3RpbWVBZ28nLFxyXG4gICAgcHVyZTogZmFsc2UsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaW1lQWdvUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UpIHt9XHJcblxyXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBzdHJpbmcgfCBEYXRlLCBub3dWYWw/OiBzdHJpbmcgfCBEYXRlKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB0aGVuID0gZGF5anModmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IG5vdyA9IGRheWpzKG5vd1ZhbCB8fCBuZXcgRGF0ZSgpKTtcclxuICAgICAgICBjb25zdCBzZWNvbmRzRGlmZiA9IG5vdy5kaWZmKHRoZW4sICdzZWNvbmQnKTtcclxuICAgICAgICBjb25zdCBkdXJhdGlvbnM6IEFycmF5PFtudW1iZXIsIHN0cmluZ10+ID0gW1xyXG4gICAgICAgICAgICBbNjAsIF8oJ2RhdGV0aW1lLmFnby1zZWNvbmRzJyldLFxyXG4gICAgICAgICAgICBbMzYwMCwgXygnZGF0ZXRpbWUuYWdvLW1pbnV0ZXMnKV0sXHJcbiAgICAgICAgICAgIFs4NjQwMCwgXygnZGF0ZXRpbWUuYWdvLWhvdXJzJyldLFxyXG4gICAgICAgICAgICBbMzE1MzYwMDAsIF8oJ2RhdGV0aW1lLmFnby1kYXlzJyldLFxyXG4gICAgICAgICAgICBbTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIF8oJ2RhdGV0aW1lLmFnby15ZWFycycpXSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBsZXQgbGFzdFVwcGVyQm91bmQgPSAxO1xyXG4gICAgICAgIGZvciAoY29uc3QgW3VwcGVyQm91bmQsIHRyYW5zbGF0aW9uVG9rZW5dIG9mIGR1cmF0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoc2Vjb25kc0RpZmYgPCB1cHBlckJvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3Ioc2Vjb25kc0RpZmYgLyBsYXN0VXBwZXJCb3VuZCkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaTE4blNlcnZpY2UudHJhbnNsYXRlKHRyYW5zbGF0aW9uVG9rZW4sIHsgY291bnQgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGFzdFVwcGVyQm91bmQgPSB1cHBlckJvdW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhlbi5mb3JtYXQoKTtcclxuICAgIH1cclxufVxyXG4iXX0=