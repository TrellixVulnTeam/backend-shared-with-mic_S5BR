import { ChangeDetectorRef, Optional, Pipe } from '@angular/core';
import { DataService } from '../../data/providers/data.service';
import { LocaleBasePipe } from './locale-base.pipe';
/**
 * @description
 * Displays a human-readable name for a given ISO 4217 currency code.
 *
 * @example
 * ```HTML
 * {{ order.currencyCode | localeCurrencyName }}
 * ```
 *
 * @docsCategory pipes
 */
export class LocaleCurrencyNamePipe extends LocaleBasePipe {
    constructor(dataService, changeDetectorRef) {
        super(dataService, changeDetectorRef);
    }
    transform(value, display = 'full', locale) {
        var _a;
        if (value == null || value === '') {
            return '';
        }
        if (typeof value !== 'string') {
            return `Invalid currencyCode "${value}"`;
        }
        let name = '';
        let symbol = '';
        const activeLocale = this.getActiveLocale(locale);
        // Awaiting TS types for this API: https://github.com/microsoft/TypeScript/pull/44022/files
        const DisplayNames = Intl.DisplayNames;
        if (display === 'full' || display === 'name') {
            name = new DisplayNames([activeLocale], {
                type: 'currency',
            }).of(value);
        }
        if (display === 'full' || display === 'symbol') {
            const parts = new Intl.NumberFormat(activeLocale, {
                style: 'currency',
                currency: value,
                currencyDisplay: 'symbol',
            }).formatToParts();
            symbol = ((_a = parts.find(p => p.type === 'currency')) === null || _a === void 0 ? void 0 : _a.value) || value;
        }
        return display === 'full' ? `${name} (${symbol})` : display === 'name' ? name : symbol;
    }
}
LocaleCurrencyNamePipe.decorators = [
    { type: Pipe, args: [{
                name: 'localeCurrencyName',
                pure: false,
            },] }
];
LocaleCurrencyNamePipe.ctorParameters = () => [
    { type: DataService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlLWN1cnJlbmN5LW5hbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL3BpcGVzL2xvY2FsZS1jdXJyZW5jeS1uYW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRWpGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVoRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQ7Ozs7Ozs7Ozs7R0FVRztBQUtILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxjQUFjO0lBQ3RELFlBQXdCLFdBQXlCLEVBQWMsaUJBQXFDO1FBQ2hHLEtBQUssQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0QsU0FBUyxDQUFDLEtBQVUsRUFBRSxVQUFzQyxNQUFNLEVBQUUsTUFBZ0I7O1FBQ2hGLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO1lBQy9CLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFDRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUMzQixPQUFPLHlCQUF5QixLQUFZLEdBQUcsQ0FBQztTQUNuRDtRQUNELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxELDJGQUEyRjtRQUMzRixNQUFNLFlBQVksR0FBSSxJQUFZLENBQUMsWUFBWSxDQUFDO1FBRWhELElBQUksT0FBTyxLQUFLLE1BQU0sSUFBSSxPQUFPLEtBQUssTUFBTSxFQUFFO1lBQzFDLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLEVBQUUsVUFBVTthQUNuQixDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxPQUFPLEtBQUssTUFBTSxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDNUMsTUFBTSxLQUFLLEdBQ1AsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRTtnQkFDaEMsS0FBSyxFQUFFLFVBQVU7Z0JBQ2pCLFFBQVEsRUFBRSxLQUFLO2dCQUNmLGVBQWUsRUFBRSxRQUFRO2FBQzVCLENBQ0osQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUVsQixNQUFNLEdBQUcsQ0FBQSxNQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQywwQ0FBRSxLQUFLLEtBQUksS0FBSyxDQUFDO1NBQ25FO1FBQ0QsT0FBTyxPQUFPLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDM0YsQ0FBQzs7O1lBdkNKLElBQUksU0FBQztnQkFDRixJQUFJLEVBQUUsb0JBQW9CO2dCQUMxQixJQUFJLEVBQUUsS0FBSzthQUNkOzs7WUFsQlEsV0FBVyx1QkFvQkgsUUFBUTtZQXRCaEIsaUJBQWlCLHVCQXNCOEIsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBPcHRpb25hbCwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi9kYXRhL3Byb3ZpZGVycy9kYXRhLnNlcnZpY2UnO1xyXG5cclxuaW1wb3J0IHsgTG9jYWxlQmFzZVBpcGUgfSBmcm9tICcuL2xvY2FsZS1iYXNlLnBpcGUnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBEaXNwbGF5cyBhIGh1bWFuLXJlYWRhYmxlIG5hbWUgZm9yIGEgZ2l2ZW4gSVNPIDQyMTcgY3VycmVuY3kgY29kZS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgSFRNTFxyXG4gKiB7eyBvcmRlci5jdXJyZW5jeUNvZGUgfCBsb2NhbGVDdXJyZW5jeU5hbWUgfX1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBkb2NzQ2F0ZWdvcnkgcGlwZXNcclxuICovXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICdsb2NhbGVDdXJyZW5jeU5hbWUnLFxyXG4gICAgcHVyZTogZmFsc2UsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb2NhbGVDdXJyZW5jeU5hbWVQaXBlIGV4dGVuZHMgTG9jYWxlQmFzZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGRhdGFTZXJ2aWNlPzogRGF0YVNlcnZpY2UsIEBPcHRpb25hbCgpIGNoYW5nZURldGVjdG9yUmVmPzogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuICAgICAgICBzdXBlcihkYXRhU2VydmljZSwgY2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG4gICAgfVxyXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGRpc3BsYXk6ICdmdWxsJyB8ICdzeW1ib2wnIHwgJ25hbWUnID0gJ2Z1bGwnLCBsb2NhbGU/OiB1bmtub3duKTogYW55IHtcclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gYEludmFsaWQgY3VycmVuY3lDb2RlIFwiJHt2YWx1ZSBhcyBhbnl9XCJgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbmFtZSA9ICcnO1xyXG4gICAgICAgIGxldCBzeW1ib2wgPSAnJztcclxuICAgICAgICBjb25zdCBhY3RpdmVMb2NhbGUgPSB0aGlzLmdldEFjdGl2ZUxvY2FsZShsb2NhbGUpO1xyXG5cclxuICAgICAgICAvLyBBd2FpdGluZyBUUyB0eXBlcyBmb3IgdGhpcyBBUEk6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzQ0MDIyL2ZpbGVzXHJcbiAgICAgICAgY29uc3QgRGlzcGxheU5hbWVzID0gKEludGwgYXMgYW55KS5EaXNwbGF5TmFtZXM7XHJcblxyXG4gICAgICAgIGlmIChkaXNwbGF5ID09PSAnZnVsbCcgfHwgZGlzcGxheSA9PT0gJ25hbWUnKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBuZXcgRGlzcGxheU5hbWVzKFthY3RpdmVMb2NhbGVdLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnY3VycmVuY3knLFxyXG4gICAgICAgICAgICB9KS5vZih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXNwbGF5ID09PSAnZnVsbCcgfHwgZGlzcGxheSA9PT0gJ3N5bWJvbCcpIHtcclxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSAoXHJcbiAgICAgICAgICAgICAgICBuZXcgSW50bC5OdW1iZXJGb3JtYXQoYWN0aXZlTG9jYWxlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdjdXJyZW5jeScsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3k6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5RGlzcGxheTogJ3N5bWJvbCcsXHJcbiAgICAgICAgICAgICAgICB9KSBhcyBhbnlcclxuICAgICAgICAgICAgKS5mb3JtYXRUb1BhcnRzKCk7XHJcblxyXG4gICAgICAgICAgICBzeW1ib2wgPSBwYXJ0cy5maW5kKHAgPT4gcC50eXBlID09PSAnY3VycmVuY3knKT8udmFsdWUgfHwgdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaXNwbGF5ID09PSAnZnVsbCcgPyBgJHtuYW1lfSAoJHtzeW1ib2x9KWAgOiBkaXNwbGF5ID09PSAnbmFtZScgPyBuYW1lIDogc3ltYm9sO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==