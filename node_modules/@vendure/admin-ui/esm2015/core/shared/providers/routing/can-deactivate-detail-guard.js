import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { map } from 'rxjs/operators';
import { ModalService } from '../../../providers/modal/modal.service';
export class CanDeactivateDetailGuard {
    constructor(modalService, router) {
        this.modalService = modalService;
        this.router = router;
    }
    canDeactivate(component, currentRoute, currentState, nextState) {
        if (!component.canDeactivate()) {
            return this.modalService
                .dialog({
                title: _('common.confirm-navigation'),
                body: _('common.there-are-unsaved-changes'),
                buttons: [
                    { type: 'danger', label: _('common.discard-changes'), returnValue: true },
                    { type: 'primary', label: _('common.cancel-navigation'), returnValue: false },
                ],
            })
                .pipe(map(result => !!result));
        }
        else {
            return true;
        }
    }
}
CanDeactivateDetailGuard.decorators = [
    { type: Injectable }
];
CanDeactivateDetailGuard.ctorParameters = () => [
    { type: ModalService },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuLWRlYWN0aXZhdGUtZGV0YWlsLWd1YXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvcHJvdmlkZXJzL3JvdXRpbmcvY2FuLWRlYWN0aXZhdGUtZGV0YWlsLWd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUF5QyxNQUFNLEVBQXVCLE1BQU0saUJBQWlCLENBQUM7QUFDckcsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUV0RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBR3RFLE1BQU0sT0FBTyx3QkFBd0I7SUFDakMsWUFBb0IsWUFBMEIsRUFBVSxNQUFjO1FBQWxELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFMUUsYUFBYSxDQUNULFNBQTBCLEVBQzFCLFlBQW9DLEVBQ3BDLFlBQWlDLEVBQ2pDLFNBQStCO1FBRS9CLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsWUFBWTtpQkFDbkIsTUFBTSxDQUFDO2dCQUNKLEtBQUssRUFBRSxDQUFDLENBQUMsMkJBQTJCLENBQUM7Z0JBQ3JDLElBQUksRUFBRSxDQUFDLENBQUMsa0NBQWtDLENBQUM7Z0JBQzNDLE9BQU8sRUFBRTtvQkFDTCxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUU7b0JBQ3pFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRTtpQkFDaEY7YUFDSixDQUFDO2lCQUNELElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7OztZQXhCSixVQUFVOzs7WUFGRixZQUFZO1lBTjJCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkRlYWN0aXZhdGUsIFJvdXRlciwgUm91dGVyU3RhdGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IG1hcmtlciBhcyBfIH0gZnJvbSAnQGJpZXNiamVyZy9uZ3gtdHJhbnNsYXRlLWV4dHJhY3QtbWFya2VyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBEZWFjdGl2YXRlQXdhcmUgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZGVhY3RpdmF0ZS1hd2FyZSc7XHJcbmltcG9ydCB7IE1vZGFsU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3Byb3ZpZGVycy9tb2RhbC9tb2RhbC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENhbkRlYWN0aXZhdGVEZXRhaWxHdWFyZCBpbXBsZW1lbnRzIENhbkRlYWN0aXZhdGU8RGVhY3RpdmF0ZUF3YXJlPiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsU2VydmljZTogTW9kYWxTZXJ2aWNlLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7fVxyXG5cclxuICAgIGNhbkRlYWN0aXZhdGUoXHJcbiAgICAgICAgY29tcG9uZW50OiBEZWFjdGl2YXRlQXdhcmUsXHJcbiAgICAgICAgY3VycmVudFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxyXG4gICAgICAgIGN1cnJlbnRTdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCxcclxuICAgICAgICBuZXh0U3RhdGU/OiBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxyXG4gICAgKTogYm9vbGVhbiB8IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgICAgIGlmICghY29tcG9uZW50LmNhbkRlYWN0aXZhdGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RhbFNlcnZpY2VcclxuICAgICAgICAgICAgICAgIC5kaWFsb2coe1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfKCdjb21tb24uY29uZmlybS1uYXZpZ2F0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogXygnY29tbW9uLnRoZXJlLWFyZS11bnNhdmVkLWNoYW5nZXMnKSxcclxuICAgICAgICAgICAgICAgICAgICBidXR0b25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdHlwZTogJ2RhbmdlcicsIGxhYmVsOiBfKCdjb21tb24uZGlzY2FyZC1jaGFuZ2VzJyksIHJldHVyblZhbHVlOiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgdHlwZTogJ3ByaW1hcnknLCBsYWJlbDogXygnY29tbW9uLmNhbmNlbC1uYXZpZ2F0aW9uJyksIHJldHVyblZhbHVlOiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnBpcGUobWFwKHJlc3VsdCA9PiAhIXJlc3VsdCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=