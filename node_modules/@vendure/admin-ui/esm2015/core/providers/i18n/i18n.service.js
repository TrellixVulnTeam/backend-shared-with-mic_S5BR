import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@angular/common";
/** @dynamic */
export class I18nService {
    constructor(ngxTranslate, document) {
        this.ngxTranslate = ngxTranslate;
        this.document = document;
        this._availableLanguages = [];
    }
    get availableLanguages() {
        return [...this._availableLanguages];
    }
    /**
     * Set the default language
     */
    setDefaultLanguage(languageCode) {
        this.ngxTranslate.setDefaultLang(languageCode);
    }
    /**
     * Set the UI language
     */
    setLanguage(language) {
        var _a;
        this.ngxTranslate.use(language);
        if ((_a = this.document) === null || _a === void 0 ? void 0 : _a.documentElement) {
            this.document.documentElement.lang = language;
        }
    }
    /**
     * Set the available UI languages
     */
    setAvailableLanguages(languages) {
        this._availableLanguages = languages;
    }
    /**
     * Translate the given key.
     */
    translate(key, params) {
        return this.ngxTranslate.instant(key, params);
    }
}
I18nService.ɵprov = i0.ɵɵdefineInjectable({ factory: function I18nService_Factory() { return new I18nService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.DOCUMENT)); }, token: I18nService, providedIn: "root" });
I18nService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
I18nService.ctorParameters = () => [
    { type: TranslateService },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9wcm92aWRlcnMvaTE4bi9pMThuLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBSXZELGVBQWU7QUFJZixNQUFNLE9BQU8sV0FBVztJQU9wQixZQUFvQixZQUE4QixFQUE0QixRQUFrQjtRQUE1RSxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFBNEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQU5oRyx3QkFBbUIsR0FBbUIsRUFBRSxDQUFDO0lBTTBELENBQUM7SUFKcEcsSUFBSSxrQkFBa0I7UUFDbEIsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDekMsQ0FBQztJQUlEOztPQUVHO0lBQ0gsa0JBQWtCLENBQUMsWUFBMEI7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVyxDQUFDLFFBQXNCOztRQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxJQUFJLE1BQUEsSUFBSSxDQUFDLFFBQVEsMENBQUUsZUFBZSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7U0FDakQ7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxxQkFBcUIsQ0FBQyxTQUF5QjtRQUMzQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsU0FBUyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVMsQ0FBQyxHQUFzQixFQUFFLE1BQVk7UUFDMUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7OztZQXpDSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQVBRLGdCQUFnQjtZQWVtRSxRQUFRLHVCQUEzQyxNQUFNLFNBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuXHJcbmltcG9ydCB7IExhbmd1YWdlQ29kZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5cclxuLyoqIEBkeW5hbWljICovXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEkxOG5TZXJ2aWNlIHtcclxuICAgIF9hdmFpbGFibGVMYW5ndWFnZXM6IExhbmd1YWdlQ29kZVtdID0gW107XHJcblxyXG4gICAgZ2V0IGF2YWlsYWJsZUxhbmd1YWdlcygpOiBMYW5ndWFnZUNvZGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLl9hdmFpbGFibGVMYW5ndWFnZXNdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbmd4VHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudCkge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZGVmYXVsdCBsYW5ndWFnZVxyXG4gICAgICovXHJcbiAgICBzZXREZWZhdWx0TGFuZ3VhZ2UobGFuZ3VhZ2VDb2RlOiBMYW5ndWFnZUNvZGUpIHtcclxuICAgICAgICB0aGlzLm5neFRyYW5zbGF0ZS5zZXREZWZhdWx0TGFuZyhsYW5ndWFnZUNvZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBVSSBsYW5ndWFnZVxyXG4gICAgICovXHJcbiAgICBzZXRMYW5ndWFnZShsYW5ndWFnZTogTGFuZ3VhZ2VDb2RlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5uZ3hUcmFuc2xhdGUudXNlKGxhbmd1YWdlKTtcclxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudD8uZG9jdW1lbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcgPSBsYW5ndWFnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGF2YWlsYWJsZSBVSSBsYW5ndWFnZXNcclxuICAgICAqL1xyXG4gICAgc2V0QXZhaWxhYmxlTGFuZ3VhZ2VzKGxhbmd1YWdlczogTGFuZ3VhZ2VDb2RlW10pIHtcclxuICAgICAgICB0aGlzLl9hdmFpbGFibGVMYW5ndWFnZXMgPSBsYW5ndWFnZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2xhdGUgdGhlIGdpdmVuIGtleS5cclxuICAgICAqL1xyXG4gICAgdHJhbnNsYXRlKGtleTogc3RyaW5nIHwgc3RyaW5nW10sIHBhcmFtcz86IGFueSk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmd4VHJhbnNsYXRlLmluc3RhbnQoa2V5LCBwYXJhbXMpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==