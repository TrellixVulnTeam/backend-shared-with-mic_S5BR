import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { merge, of, Subject, timer } from 'rxjs';
import { catchError, map, shareReplay, switchMap, throttleTime } from 'rxjs/operators';
import { getServerLocation } from '../../data/utils/get-server-location';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class HealthCheckService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.pollingDelayMs = 60 * 1000;
        this._refresh = new Subject();
        this.healthCheckEndpoint = getServerLocation() + '/health';
        const refresh$ = this._refresh.pipe(throttleTime(1000));
        const result$ = merge(timer(0, this.pollingDelayMs), refresh$).pipe(switchMap(() => this.checkHealth()), shareReplay(1));
        this.status$ = result$.pipe(map(res => res.status));
        this.details$ = result$.pipe(map(res => Object.keys(res.details).map(key => {
            return { key, result: res.details[key] };
        })));
        this.lastCheck$ = result$.pipe(map(res => res.lastChecked));
    }
    refresh() {
        this._refresh.next();
    }
    checkHealth() {
        return this.httpClient.get(this.healthCheckEndpoint).pipe(catchError(err => of(err.error)), map(res => (Object.assign(Object.assign({}, res), { lastChecked: new Date() }))));
    }
}
HealthCheckService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HealthCheckService_Factory() { return new HealthCheckService(i0.ɵɵinject(i1.HttpClient)); }, token: HealthCheckService, providedIn: "root" });
HealthCheckService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HealthCheckService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhbHRoLWNoZWNrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3Byb3ZpZGVycy9oZWFsdGgtY2hlY2svaGVhbHRoLWNoZWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7QUF1QnpFLE1BQU0sT0FBTyxrQkFBa0I7SUFTM0IsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUp6QixtQkFBYyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFM0IsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFHdEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGlCQUFpQixFQUFFLEdBQUcsU0FBUyxDQUFDO1FBRTNELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQy9ELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsRUFDbkMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNqQixDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FDeEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FDTCxDQUNKLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxXQUFXO1FBQ2YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBb0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsSUFBSSxDQUN4RSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ2hDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLGlDQUFNLEdBQUcsS0FBRSxXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBRyxDQUFDLENBQ3BELENBQUM7SUFDTixDQUFDOzs7O1lBekNKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBM0JRLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG1lcmdlLCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzaGFyZVJlcGxheSwgc3dpdGNoTWFwLCB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBnZXRTZXJ2ZXJMb2NhdGlvbiB9IGZyb20gJy4uLy4uL2RhdGEvdXRpbHMvZ2V0LXNlcnZlci1sb2NhdGlvbic7XHJcblxyXG5leHBvcnQgdHlwZSBTeXN0ZW1TdGF0dXMgPSAnb2snIHwgJ2Vycm9yJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXN1bHQge1xyXG4gICAgc3RhdHVzOiBTeXN0ZW1TdGF0dXM7XHJcbiAgICBpbmZvOiB7IFtuYW1lOiBzdHJpbmddOiBIZWFsdGhDaGVja1N1Y2Nlc3NSZXN1bHQgfTtcclxuICAgIGRldGFpbHM6IHsgW25hbWU6IHN0cmluZ106IEhlYWx0aENoZWNrU3VjY2Vzc1Jlc3VsdCB8IEhlYWx0aENoZWNrRXJyb3JSZXN1bHQgfTtcclxuICAgIGVycm9yOiB7IFtuYW1lOiBzdHJpbmddOiBIZWFsdGhDaGVja0Vycm9yUmVzdWx0IH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tTdWNjZXNzUmVzdWx0IHtcclxuICAgIHN0YXR1czogJ3VwJztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIZWFsdGhDaGVja0Vycm9yUmVzdWx0IHtcclxuICAgIHN0YXR1czogJ2Rvd24nO1xyXG4gICAgbWVzc2FnZTogc3RyaW5nO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIZWFsdGhDaGVja1NlcnZpY2Uge1xyXG4gICAgc3RhdHVzJDogT2JzZXJ2YWJsZTxTeXN0ZW1TdGF0dXM+O1xyXG4gICAgZGV0YWlscyQ6IE9ic2VydmFibGU8QXJyYXk8eyBrZXk6IHN0cmluZzsgcmVzdWx0OiBIZWFsdGhDaGVja1N1Y2Nlc3NSZXN1bHQgfCBIZWFsdGhDaGVja0Vycm9yUmVzdWx0IH0+PjtcclxuICAgIGxhc3RDaGVjayQ6IE9ic2VydmFibGU8RGF0ZT47XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwb2xsaW5nRGVsYXlNcyA9IDYwICogMTAwMDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaGVhbHRoQ2hlY2tFbmRwb2ludDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmVmcmVzaCA9IG5ldyBTdWJqZWN0KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XHJcbiAgICAgICAgdGhpcy5oZWFsdGhDaGVja0VuZHBvaW50ID0gZ2V0U2VydmVyTG9jYXRpb24oKSArICcvaGVhbHRoJztcclxuXHJcbiAgICAgICAgY29uc3QgcmVmcmVzaCQgPSB0aGlzLl9yZWZyZXNoLnBpcGUodGhyb3R0bGVUaW1lKDEwMDApKTtcclxuICAgICAgICBjb25zdCByZXN1bHQkID0gbWVyZ2UodGltZXIoMCwgdGhpcy5wb2xsaW5nRGVsYXlNcyksIHJlZnJlc2gkKS5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5jaGVja0hlYWx0aCgpKSxcclxuICAgICAgICAgICAgc2hhcmVSZXBsYXkoMSksXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0dXMkID0gcmVzdWx0JC5waXBlKG1hcChyZXMgPT4gcmVzLnN0YXR1cykpO1xyXG4gICAgICAgIHRoaXMuZGV0YWlscyQgPSByZXN1bHQkLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcChyZXMgPT5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHJlcy5kZXRhaWxzKS5tYXAoa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBrZXksIHJlc3VsdDogcmVzLmRldGFpbHNba2V5XSB9O1xyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmxhc3RDaGVjayQgPSByZXN1bHQkLnBpcGUobWFwKHJlcyA9PiByZXMubGFzdENoZWNrZWQpKTtcclxuICAgIH1cclxuXHJcbiAgICByZWZyZXNoKCkge1xyXG4gICAgICAgIHRoaXMuX3JlZnJlc2gubmV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tIZWFsdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8SGVhbHRoQ2hlY2tSZXN1bHQ+KHRoaXMuaGVhbHRoQ2hlY2tFbmRwb2ludCkucGlwZShcclxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gb2YoZXJyLmVycm9yKSksXHJcbiAgICAgICAgICAgIG1hcChyZXMgPT4gKHsgLi4ucmVzLCBsYXN0Q2hlY2tlZDogbmV3IERhdGUoKSB9KSksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=