import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { FormArray, FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { BaseDetailComponent, createUpdatedTranslatable, DataService, findTranslation, NotificationService, Permission, ServerConfigService, } from '@vendure/admin-ui/core';
import { combineLatest, forkJoin } from 'rxjs';
import { map, mergeMap, take } from 'rxjs/operators';
import { ProductDetailService } from '../../providers/product-detail/product-detail.service';
export class ProductOptionsEditorComponent extends BaseDetailComponent {
    constructor(route, router, serverConfigService, dataService, productDetailService, formBuilder, changeDetector, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.route = route;
        this.router = router;
        this.serverConfigService = serverConfigService;
        this.dataService = dataService;
        this.productDetailService = productDetailService;
        this.formBuilder = formBuilder;
        this.changeDetector = changeDetector;
        this.notificationService = notificationService;
        this.autoUpdateVariantNames = true;
        this.updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];
        this.optionGroupCustomFields = this.getCustomFieldConfig('ProductOptionGroup');
        this.optionCustomFields = this.getCustomFieldConfig('ProductOption');
    }
    ngOnInit() {
        this.optionGroups$ = this.route.snapshot.data.entity.pipe(map((product) => product.optionGroups));
        this.detailForm = new FormGroup({
            optionGroups: new FormArray([]),
        });
        super.init();
    }
    getOptionGroups() {
        const optionGroups = this.detailForm.get('optionGroups');
        return optionGroups.controls;
    }
    getOptions(optionGroup) {
        const options = optionGroup.get('options');
        return options.controls;
    }
    save() {
        if (this.detailForm.invalid || this.detailForm.pristine) {
            return;
        }
        // tslint:disable-next-line:no-non-null-assertion
        const $product = this.dataService.product.getProduct(this.id).mapSingle(data => data.product);
        combineLatest(this.entity$, this.languageCode$, $product)
            .pipe(take(1), mergeMap(([{ optionGroups }, languageCode, product]) => {
            var _a, _b, _c, _d, _e;
            const updateOperations = [];
            for (const optionGroupForm of this.getOptionGroups()) {
                if (((_a = optionGroupForm.get('name')) === null || _a === void 0 ? void 0 : _a.dirty) || ((_b = optionGroupForm.get('code')) === null || _b === void 0 ? void 0 : _b.dirty)) {
                    const optionGroupEntity = optionGroups.find(og => og.id === optionGroupForm.value.id);
                    if (optionGroupEntity) {
                        const input = this.getUpdatedOptionGroup(optionGroupEntity, optionGroupForm, languageCode);
                        updateOperations.push(this.dataService.product.updateProductOptionGroup(input));
                    }
                }
                for (const optionForm of this.getOptions(optionGroupForm)) {
                    if (((_c = optionForm.get('name')) === null || _c === void 0 ? void 0 : _c.dirty) || ((_d = optionForm.get('code')) === null || _d === void 0 ? void 0 : _d.dirty)) {
                        const optionGroup = (_e = optionGroups
                            .find(og => og.id === optionGroupForm.value.id)) === null || _e === void 0 ? void 0 : _e.options.find(o => o.id === optionForm.value.id);
                        if (optionGroup) {
                            const input = this.getUpdatedOption(optionGroup, optionForm, languageCode);
                            updateOperations.push(this.productDetailService.updateProductOption(Object.assign(Object.assign({}, input), { autoUpdate: this.autoUpdateVariantNames }), product, languageCode));
                        }
                    }
                }
            }
            return forkJoin(updateOperations);
        }))
            .subscribe(() => {
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'ProductOptionGroup',
            });
        }, err => {
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'ProductOptionGroup',
            });
        });
    }
    getUpdatedOptionGroup(optionGroup, optionGroupFormGroup, languageCode) {
        const input = createUpdatedTranslatable({
            translatable: optionGroup,
            updatedFields: optionGroupFormGroup.value,
            customFieldConfig: this.optionGroupCustomFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: optionGroup.name || '',
            },
        });
        return input;
    }
    getUpdatedOption(option, optionFormGroup, languageCode) {
        const input = createUpdatedTranslatable({
            translatable: option,
            updatedFields: optionFormGroup.value,
            customFieldConfig: this.optionGroupCustomFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: option.name || '',
            },
        });
        return input;
    }
    setFormValues(entity, languageCode) {
        const groupsFormArray = new FormArray([]);
        for (const optionGroup of entity.optionGroups) {
            const groupTranslation = findTranslation(optionGroup, languageCode);
            const group = {
                id: optionGroup.id,
                createdAt: optionGroup.createdAt,
                updatedAt: optionGroup.updatedAt,
                code: optionGroup.code,
                name: groupTranslation ? groupTranslation.name : '',
            };
            const optionsFormArray = new FormArray([]);
            for (const option of optionGroup.options) {
                const optionTranslation = findTranslation(option, languageCode);
                const optionControl = this.formBuilder.group({
                    id: option.id,
                    createdAt: option.createdAt,
                    updatedAt: option.updatedAt,
                    code: option.code,
                    name: optionTranslation ? optionTranslation.name : '',
                });
                optionsFormArray.push(optionControl);
            }
            const groupControl = this.formBuilder.group(group);
            groupControl.addControl('options', optionsFormArray);
            groupsFormArray.push(groupControl);
        }
        this.detailForm.setControl('optionGroups', groupsFormArray);
    }
}
ProductOptionsEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-product-options-editor',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <div class=\"flex center\">\r\n            <div class=\"mr2\">\r\n                <clr-checkbox-wrapper>\r\n                    <input\r\n                        clrCheckbox\r\n                        type=\"checkbox\"\r\n                        id=\"auto-update\"\r\n                        [(ngModel)]=\"autoUpdateVariantNames\"\r\n                    />\r\n                    <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\r\n                </clr-checkbox-wrapper>\r\n            </div>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.pristine || detailForm.invalid\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </div>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"optionGroups$ | async as optionGroups\">\r\n    <div formGroupName=\"optionGroups\" class=\"clr-row\">\r\n        <div class=\"clr-col-12 clr-col-xl-6\" *ngFor=\"let optionGroup of getOptionGroups(); index as i\">\r\n            <section class=\"card\" [formArrayName]=\"i\">\r\n                <div class=\"card-header option-group-header\">\r\n                    <vdr-entity-info [entity]=\"optionGroup.value\"></vdr-entity-info>\r\n                    <div class=\"ml2\">{{ optionGroup.value.code }}</div>\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            [id]=\"'name-' + i\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n                        <input\r\n                            [id]=\"'code-' + i\"\r\n                            type=\"text\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"code\"\r\n                        />\r\n                    </vdr-form-field>\r\n                </div>\r\n                <section class=\"card-block\">\r\n                    <table class=\"facet-values-list table mt2 mb4\" formGroupName=\"options\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>{{ 'common.name' | translate }}</th>\r\n                                <th>{{ 'common.code' | translate }}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr\r\n                                class=\"facet-value\"\r\n                                *ngFor=\"let option of getOptions(optionGroup); let i = index\"\r\n                                [formGroupName]=\"i\"\r\n                            >\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-entity-info [entity]=\"option.value\"></vdr-entity-info>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        formControlName=\"name\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                    />\r\n                                </td>\r\n                                <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" /></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </section>\r\n            </section>\r\n        </div>\r\n    </div>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".option-group-header{display:flex;align-items:baseline}\n"]
            },] }
];
ProductOptionsEditorComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: ServerConfigService },
    { type: DataService },
    { type: ProductDetailService },
    { type: FormBuilder },
    { type: ChangeDetectorRef },
    { type: NotificationService }
];
//# sourceMappingURL=data:application/json;base64,