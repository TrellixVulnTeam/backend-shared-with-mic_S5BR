import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { DataService, getDefaultUiLanguage, ModalService, NotificationService, } from '@vendure/admin-ui/core';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { pick } from '@vendure/common/lib/pick';
import { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { unique } from '@vendure/common/lib/unique';
import { EMPTY, forkJoin, of } from 'rxjs';
import { filter, map, mergeMap, switchMap } from 'rxjs/operators';
import { ProductDetailService } from '../../providers/product-detail/product-detail.service';
import { ConfirmVariantDeletionDialogComponent } from '../confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';
export class GeneratedVariant {
    constructor(config) {
        for (const key of Object.keys(config)) {
            this[key] = config[key];
        }
    }
}
export class ProductVariantsEditorComponent {
    constructor(route, dataService, productDetailService, notificationService, modalService) {
        this.route = route;
        this.dataService = dataService;
        this.productDetailService = productDetailService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.formValueChanged = false;
        this.generatedVariants = [];
    }
    ngOnInit() {
        this.initOptionsAndVariants();
        this.languageCode =
            this.route.snapshot.paramMap.get('lang') || getDefaultUiLanguage();
        this.dataService.settings.getActiveChannel().single$.subscribe(data => {
            this.currencyCode = data.activeChannel.currencyCode;
        });
    }
    onFormChanged(variantInfo) {
        this.formValueChanged = true;
        variantInfo.enabled = true;
    }
    canDeactivate() {
        return !this.formValueChanged;
    }
    getVariantsToAdd() {
        return this.generatedVariants.filter(v => !v.existing && v.enabled);
    }
    getVariantName(variant) {
        return variant.options.length === 0
            ? _('catalog.default-variant')
            : variant.options.map(o => o.name).join(' ');
    }
    addOption() {
        this.optionGroups.push({
            isNew: true,
            name: '',
            values: [],
        });
    }
    generateVariants() {
        const groups = this.optionGroups.map(g => g.values);
        const previousVariants = this.generatedVariants;
        const generatedVariantFactory = (isDefault, options, existingVariant, prototypeVariant) => {
            var _a, _b, _c, _d, _e, _f;
            const prototype = this.getVariantPrototype(options, previousVariants);
            return new GeneratedVariant({
                enabled: true,
                existing: !!existingVariant,
                productVariantId: existingVariant === null || existingVariant === void 0 ? void 0 : existingVariant.id,
                isDefault,
                options,
                price: (_b = (_a = existingVariant === null || existingVariant === void 0 ? void 0 : existingVariant.price) !== null && _a !== void 0 ? _a : prototypeVariant === null || prototypeVariant === void 0 ? void 0 : prototypeVariant.price) !== null && _b !== void 0 ? _b : prototype.price,
                sku: (_d = (_c = existingVariant === null || existingVariant === void 0 ? void 0 : existingVariant.sku) !== null && _c !== void 0 ? _c : prototypeVariant === null || prototypeVariant === void 0 ? void 0 : prototypeVariant.sku) !== null && _d !== void 0 ? _d : prototype.sku,
                stock: (_f = (_e = existingVariant === null || existingVariant === void 0 ? void 0 : existingVariant.stockOnHand) !== null && _e !== void 0 ? _e : prototypeVariant === null || prototypeVariant === void 0 ? void 0 : prototypeVariant.stockOnHand) !== null && _f !== void 0 ? _f : prototype.stock,
            });
        };
        this.generatedVariants = groups.length
            ? generateAllCombinations(groups).map(options => {
                const existingVariant = this.product.variants.find(v => this.optionsAreEqual(v.options, options));
                const prototypeVariant = this.product.variants.find(v => this.optionsAreSubset(v.options, options));
                return generatedVariantFactory(false, options, existingVariant, prototypeVariant);
            })
            : [generatedVariantFactory(true, [], this.product.variants[0])];
    }
    /**
     * Returns one of the existing variants to base the newly-generated variant's
     * details off.
     */
    getVariantPrototype(options, previousVariants) {
        const variantsWithSimilarOptions = previousVariants.filter(v => options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)));
        if (variantsWithSimilarOptions.length) {
            return pick(previousVariants[0], ['sku', 'price', 'stock']);
        }
        return {
            sku: '',
            price: 0,
            stock: 0,
        };
    }
    deleteVariant(id) {
        this.modalService
            .dialog({
            title: _('catalog.confirm-delete-product-variant'),
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                { type: 'danger', label: _('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY), switchMap(() => this.reFetchProduct(null)))
            .subscribe(() => {
            this.notificationService.success(_('common.notify-delete-success'), {
                entity: 'ProductVariant',
            });
            this.initOptionsAndVariants();
        }, err => {
            this.notificationService.error(_('common.notify-delete-error'), {
                entity: 'ProductVariant',
            });
        });
    }
    save() {
        const newOptionGroups = this.optionGroups
            .filter(og => og.isNew)
            .map(og => ({
            name: og.name,
            values: [],
        }));
        this.checkUniqueSkus()
            .pipe(mergeMap(() => this.confirmDeletionOfObsoleteVariants()), mergeMap(() => this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode)), mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)), mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)), mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)), mergeMap(groups => this.createNewProductVariants(groups)), mergeMap(res => this.deleteObsoleteVariants(res.createProductVariants)), mergeMap(variants => this.reFetchProduct(variants)))
            .subscribe({
            next: variants => {
                this.formValueChanged = false;
                this.notificationService.success(_('catalog.created-new-variants-success'), {
                    count: variants.length,
                });
                this.initOptionsAndVariants();
            },
        });
    }
    checkUniqueSkus() {
        const withDuplicateSkus = this.generatedVariants.filter((variant, index) => {
            return this.generatedVariants.find(gv => gv.sku.trim() === variant.sku.trim() && gv !== variant);
        });
        if (withDuplicateSkus.length) {
            return this.modalService
                .dialog({
                title: _('catalog.duplicate-sku-warning'),
                body: unique(withDuplicateSkus.map(v => `${v.sku}`)).join(', '),
                buttons: [{ label: _('common.close'), returnValue: false, type: 'primary' }],
            })
                .pipe(mergeMap(res => EMPTY));
        }
        else {
            return of(true);
        }
    }
    confirmDeletionOfObsoleteVariants() {
        const obsoleteVariants = this.getObsoleteVariants();
        if (obsoleteVariants.length) {
            return this.modalService
                .fromComponent(ConfirmVariantDeletionDialogComponent, {
                locals: {
                    variants: obsoleteVariants,
                },
            })
                .pipe(mergeMap(res => {
                return res === true ? of(true) : EMPTY;
            }));
        }
        else {
            return of(true);
        }
    }
    getObsoleteVariants() {
        return this.product.variants.filter(variant => !this.generatedVariants.find(gv => gv.productVariantId === variant.id));
    }
    hasOnlyDefaultVariant(product) {
        return product.variants.length === 1 && product.optionGroups.length === 0;
    }
    addOptionGroupsToProduct(createdOptionGroups) {
        if (createdOptionGroups.length) {
            return forkJoin(createdOptionGroups.map(optionGroup => {
                return this.dataService.product.addOptionGroupToProduct({
                    productId: this.product.id,
                    optionGroupId: optionGroup.id,
                });
            })).pipe(map(() => createdOptionGroups));
        }
        else {
            return of([]);
        }
    }
    addNewOptionsToGroups(createdOptionGroups) {
        const newOptions = this.optionGroups
            .map(og => {
            const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);
            const productOptionGroupId = createdGroup ? createdGroup.id : og.id;
            if (!productOptionGroupId) {
                throw new Error('Could not get a productOptionGroupId');
            }
            return og.values
                .filter(v => !v.locked)
                .map(v => ({
                productOptionGroupId,
                code: normalizeString(v.name, '-'),
                translations: [{ name: v.name, languageCode: this.languageCode }],
            }));
        })
            .reduce((flat, options) => [...flat, ...options], []);
        const allGroupIds = [
            ...createdOptionGroups.map(g => g.id),
            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),
        ];
        if (newOptions.length) {
            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(map(() => allGroupIds));
        }
        else {
            return of(allGroupIds);
        }
    }
    fetchOptionGroups(groupsIds) {
        return forkJoin(groupsIds.map(id => this.dataService.product
            .getProductOptionGroup(id)
            .mapSingle(data => data.productOptionGroup)
            .pipe(filter(notNullOrUndefined))));
    }
    createNewProductVariants(groups) {
        const options = groups
            .filter(notNullOrUndefined)
            .map(og => og.options)
            .reduce((flat, o) => [...flat, ...o], []);
        const variants = this.generatedVariants
            .filter(v => v.enabled && !v.existing)
            .map(v => ({
            price: v.price,
            sku: v.sku,
            stock: v.stock,
            optionIds: v.options
                .map(name => options.find(o => o.name === name.name))
                .filter(notNullOrUndefined)
                .map(o => o.id),
        }));
        return this.productDetailService.createProductVariants(this.product, variants, options, this.languageCode);
    }
    deleteObsoleteVariants(input) {
        const obsoleteVariants = this.getObsoleteVariants();
        if (obsoleteVariants.length) {
            const deleteOperations = obsoleteVariants.map(v => this.dataService.product.deleteProductVariant(v.id).pipe(map(() => input)));
            return forkJoin(...deleteOperations);
        }
        else {
            return of(input);
        }
    }
    reFetchProduct(input) {
        // Re-fetch the Product to force an update to the view.
        const id = this.route.snapshot.paramMap.get('id');
        if (id) {
            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));
        }
        else {
            return of(input);
        }
    }
    initOptionsAndVariants() {
        this.dataService.product
            // tslint:disable-next-line:no-non-null-assertion
            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id'))
            // tslint:disable-next-line:no-non-null-assertion
            .mapSingle(({ product }) => product)
            .subscribe(p => {
            this.product = p;
            this.optionGroups = p.optionGroups.map(og => {
                return {
                    id: og.id,
                    isNew: false,
                    name: og.name,
                    values: og.options.map(o => ({
                        id: o.id,
                        name: o.name,
                        locked: true,
                    })),
                };
            });
            this.generateVariants();
        });
    }
    optionsAreEqual(a, b) {
        return this.toOptionString(a) === this.toOptionString(b);
    }
    optionsAreSubset(a, b) {
        return this.toOptionString(b).includes(this.toOptionString(a));
    }
    toOptionString(o) {
        return o
            .map(x => x.name)
            .sort()
            .join('|');
    }
}
ProductVariantsEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-product-variants-editor',
                template: "<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"!formValueChanged || getVariantsToAdd().length === 0\"\r\n        >\r\n            {{ 'common.add-new-variants' | translate: { count: getVariantsToAdd().length } }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\r\n    <div class=\"name\">\r\n        <label>{{ 'catalog.option' | translate }}</label>\r\n        <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\r\n    </div>\r\n    <div class=\"values\">\r\n        <label>{{ 'catalog.option-values' | translate }}</label>\r\n        <vdr-option-value-input\r\n            #optionValueInputComponent\r\n            [(ngModel)]=\"group.values\"\r\n            (ngModelChange)=\"generateVariants()\"\r\n            [groupName]=\"group.name\"\r\n            [disabled]=\"group.name === ''\"\r\n        ></vdr-option-value-input>\r\n    </div>\r\n</div>\r\n<button\r\n    class=\"btn btn-primary-outline btn-sm\"\r\n    (click)=\"addOption()\"\r\n>\r\n    <clr-icon shape=\"plus\"></clr-icon>\r\n    {{ 'catalog.add-option' | translate }}\r\n</button>\r\n\r\n<div class=\"variants-preview\">\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>{{ 'common.create' | translate }}</th>\r\n                <th>{{ 'catalog.variant' | translate }}</th>\r\n                <th>{{ 'catalog.sku' | translate }}</th>\r\n                <th>{{ 'catalog.price' | translate }}</th>\r\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tr *ngFor=\"let variant of generatedVariants\" [class.disabled]=\"!variant.enabled || variant.existing\">\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    *ngIf=\"!variant.existing\"\r\n                    [(ngModel)]=\"variant.enabled\"\r\n                    name=\"enabled\"\r\n                    clrCheckbox\r\n                    (ngModelChange)=\"formValueChanged = true\"\r\n                />\r\n            </td>\r\n            <td>\r\n                {{ getVariantName(variant) | translate }}\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        [(ngModel)]=\"variant.sku\"\r\n                        [placeholder]=\"'catalog.sku' | translate\"\r\n                        name=\"sku\"\r\n                        required\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    />\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.sku }}</span>\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <vdr-currency-input\r\n                        clrInput\r\n                        [(ngModel)]=\"variant.price\"\r\n                        name=\"price\"\r\n                        [currencyCode]=\"currencyCode\"\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    ></vdr-currency-input>\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.price | localeCurrency: currencyCode }}</span>\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <input\r\n                        clrInput\r\n                        type=\"number\"\r\n                        [(ngModel)]=\"variant.stock\"\r\n                        name=\"stock\"\r\n                        min=\"0\"\r\n                        step=\"1\"\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    />\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.stock }}</span>\r\n            </td>\r\n            <td>\r\n                <vdr-dropdown *ngIf=\"variant.productVariantId as productVariantId\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"deleteVariant(productVariantId)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.delete' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.Default,
                styles: [".option-groups{display:flex}.option-groups:first-of-type{margin-top:24px}.values{flex:1;margin:0 6px}.variants-preview tr.disabled td{background-color:var(--color-component-bg-100);color:var(--color-grey-400)}\n"]
            },] }
];
ProductVariantsEditorComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: DataService },
    { type: ProductDetailService },
    { type: NotificationService },
    { type: ModalService }
];
//# sourceMappingURL=data:application/json;base64,