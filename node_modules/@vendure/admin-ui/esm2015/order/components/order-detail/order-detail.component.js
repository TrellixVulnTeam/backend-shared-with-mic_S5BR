import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { BaseDetailComponent, DataService, EditNoteDialogComponent, ModalService, NotificationService, ServerConfigService, SortOrder, } from '@vendure/admin-ui/core';
import { assertNever, summate } from '@vendure/common/lib/shared-utils';
import { EMPTY, merge, of, Subject } from 'rxjs';
import { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';
import { OrderTransitionService } from '../../providers/order-transition.service';
import { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';
import { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';
import { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';
import { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';
import { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';
import { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';
export class OrderDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, notificationService, modalService, orderTransitionService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.orderTransitionService = orderTransitionService;
        this.detailForm = new FormGroup({});
        this.fetchHistory = new Subject();
        this.defaultStates = [
            'AddingItems',
            'ArrangingPayment',
            'PaymentAuthorized',
            'PaymentSettled',
            'PartiallyShipped',
            'Shipped',
            'PartiallyDelivered',
            'Delivered',
            'Cancelled',
            'Modifying',
            'ArrangingAdditionalPayment',
        ];
    }
    ngOnInit() {
        this.init();
        this.entity$.pipe(take(1)).subscribe(order => {
            if (order.state === 'Modifying') {
                this.router.navigate(['./', 'modify'], { relativeTo: this.route });
            }
        });
        this.customFields = this.getCustomFieldConfig('Order');
        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');
        this.history$ = this.fetchHistory.pipe(startWith(null), switchMap(() => {
            return this.dataService.order
                .getOrderHistory(this.id, {
                sort: {
                    createdAt: SortOrder.DESC,
                },
            })
                .mapStream(data => { var _a; return (_a = data.order) === null || _a === void 0 ? void 0 : _a.history.items; });
        }));
        this.nextStates$ = this.entity$.pipe(map(order => {
            const isInCustomState = !this.defaultStates.includes(order.state);
            return isInCustomState
                ? order.nextStates
                : order.nextStates.filter(s => !this.defaultStates.includes(s));
        }));
    }
    ngOnDestroy() {
        this.destroy();
    }
    openStateDiagram() {
        this.entity$
            .pipe(take(1), switchMap(order => this.modalService.fromComponent(OrderProcessGraphDialogComponent, {
            closable: true,
            locals: {
                activeState: order.state,
            },
        })))
            .subscribe();
    }
    transitionToState(state) {
        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {
            switch (transitionOrderToState === null || transitionOrderToState === void 0 ? void 0 : transitionOrderToState.__typename) {
                case 'Order':
                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });
                    this.fetchHistory.next();
                    break;
                case 'OrderStateTransitionError':
                    this.notificationService.error(transitionOrderToState.transitionError);
            }
        });
    }
    manuallyTransitionToState(order) {
        this.orderTransitionService
            .manuallyTransitionToState({
            orderId: order.id,
            nextStates: order.nextStates,
            cancellable: true,
            message: _('order.manually-transition-to-state-message'),
            retry: 0,
        })
            .subscribe();
    }
    transitionToModifying() {
        this.dataService.order
            .transitionToState(this.id, 'Modifying')
            .subscribe(({ transitionOrderToState }) => {
            switch (transitionOrderToState === null || transitionOrderToState === void 0 ? void 0 : transitionOrderToState.__typename) {
                case 'Order':
                    this.router.navigate(['./modify'], { relativeTo: this.route });
                    break;
                case 'OrderStateTransitionError':
                    this.notificationService.error(transitionOrderToState.transitionError);
            }
        });
    }
    updateCustomFields(customFieldsValue) {
        this.dataService.order
            .updateOrderCustomFields({
            id: this.id,
            customFields: customFieldsValue,
        })
            .subscribe(() => {
            this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });
        });
    }
    getOrderAddressLines(orderAddress) {
        if (!orderAddress) {
            return [];
        }
        return Object.values(orderAddress)
            .filter(val => val !== 'OrderAddress')
            .filter(line => !!line);
    }
    settlePayment(payment) {
        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {
            switch (settlePayment.__typename) {
                case 'Payment':
                    if (settlePayment.state === 'Settled') {
                        this.notificationService.success(_('order.settle-payment-success'));
                    }
                    else {
                        this.notificationService.error(_('order.settle-payment-error'));
                    }
                    this.dataService.order.getOrder(this.id).single$.subscribe();
                    this.fetchHistory.next();
                    break;
                case 'OrderStateTransitionError':
                case 'PaymentStateTransitionError':
                case 'SettlePaymentError':
                    this.notificationService.error(settlePayment.message);
            }
        });
    }
    transitionPaymentState({ payment, state }) {
        this.dataService.order
            .transitionPaymentToState(payment.id, state)
            .subscribe(({ transitionPaymentToState }) => {
            switch (transitionPaymentToState.__typename) {
                case 'Payment':
                    this.notificationService.success(_('order.transitioned-payment-to-state-success'), {
                        state,
                    });
                    this.dataService.order.getOrder(this.id).single$.subscribe();
                    this.fetchHistory.next();
                    break;
                case 'PaymentStateTransitionError':
                    this.notificationService.error(transitionPaymentToState.message);
                    break;
            }
        });
    }
    canAddFulfillment(order) {
        const allItemsFulfilled = order.lines
            .reduce((items, line) => [...items, ...line.items], [])
            .every(item => !!item.fulfillment || item.cancelled);
        return (!allItemsFulfilled &&
            !this.hasUnsettledModifications(order) &&
            this.outstandingPaymentAmount(order) === 0 &&
            (order.nextStates.includes('Shipped') ||
                order.nextStates.includes('PartiallyShipped') ||
                order.nextStates.includes('Delivered')));
    }
    hasUnsettledModifications(order) {
        return 0 < order.modifications.filter(m => !m.isSettled).length;
    }
    getOutstandingModificationAmount(order) {
        return summate(order.modifications.filter(m => !m.isSettled), 'priceChange');
    }
    outstandingPaymentAmount(order) {
        var _a, _b, _c;
        const paymentIsValid = (p) => p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';
        let amountCovered = 0;
        for (const payment of (_b = (_a = order.payments) === null || _a === void 0 ? void 0 : _a.filter(paymentIsValid)) !== null && _b !== void 0 ? _b : []) {
            const refunds = (_c = payment.refunds.filter(r => r.state !== 'Failed')) !== null && _c !== void 0 ? _c : [];
            const refundsTotal = summate(refunds, 'total');
            amountCovered += payment.amount - refundsTotal;
        }
        return order.totalWithTax - amountCovered;
    }
    addManualPayment(order) {
        const priorState = order.state;
        this.modalService
            .fromComponent(AddManualPaymentDialogComponent, {
            closable: true,
            locals: {
                outstandingAmount: this.outstandingPaymentAmount(order),
                currencyCode: order.currencyCode,
            },
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.dataService.order.addManualPaymentToOrder({
                    orderId: this.id,
                    transactionId: result.transactionId,
                    method: result.method,
                    metadata: result.metadata || {},
                });
            }
            else {
                return EMPTY;
            }
        }), switchMap(({ addManualPaymentToOrder }) => {
            switch (addManualPaymentToOrder.__typename) {
                case 'Order':
                    this.notificationService.success(_('order.add-payment-to-order-success'));
                    if (priorState === 'ArrangingAdditionalPayment') {
                        return this.orderTransitionService.transitionToPreModifyingState(order.id, order.nextStates);
                    }
                    else {
                        return this.dataService.order
                            .transitionToState(this.id, 'PaymentSettled')
                            .pipe(mapTo('PaymentSettled'));
                    }
                case 'ManualPaymentStateError':
                    this.notificationService.error(addManualPaymentToOrder.message);
                    return EMPTY;
                default:
                    return EMPTY;
            }
        }))
            .subscribe(result => {
            if (result) {
                this.refetchOrder({ result });
            }
        });
    }
    fulfillOrder() {
        this.entity$
            .pipe(take(1), switchMap(order => {
            return this.modalService.fromComponent(FulfillOrderDialogComponent, {
                size: 'xl',
                locals: {
                    order,
                },
            });
        }), switchMap(input => {
            if (input) {
                return this.dataService.order.createFulfillment(input);
            }
            else {
                return of(undefined);
            }
        }), switchMap(result => this.refetchOrder(result).pipe(mapTo(result))))
            .subscribe(result => {
            if (result) {
                const { addFulfillmentToOrder } = result;
                switch (addFulfillmentToOrder.__typename) {
                    case 'Fulfillment':
                        this.notificationService.success(_('order.create-fulfillment-success'));
                        break;
                    case 'EmptyOrderLineSelectionError':
                    case 'InsufficientStockOnHandError':
                    case 'ItemsAlreadyFulfilledError':
                    case 'InvalidFulfillmentHandlerError':
                        this.notificationService.error(addFulfillmentToOrder.message);
                        break;
                    case 'FulfillmentStateTransitionError':
                        this.notificationService.error(addFulfillmentToOrder.transitionError);
                        break;
                    case 'CreateFulfillmentError':
                        this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);
                        break;
                    case undefined:
                        this.notificationService.error(JSON.stringify(addFulfillmentToOrder));
                        break;
                    default:
                        assertNever(addFulfillmentToOrder);
                }
            }
        });
    }
    transitionFulfillment(id, state) {
        this.dataService.order
            .transitionFulfillmentToState(id, state)
            .pipe(switchMap(result => this.refetchOrder(result)))
            .subscribe(() => {
            this.notificationService.success(_('order.successfully-updated-fulfillment'));
        });
    }
    cancelOrRefund(order) {
        const isRefundable = this.orderHasSettledPayments(order);
        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {
            this.cancelOrder(order);
        }
        else {
            this.refundOrder(order);
        }
    }
    settleRefund(refund) {
        this.modalService
            .fromComponent(SettleRefundDialogComponent, {
            size: 'md',
            locals: {
                refund,
            },
        })
            .pipe(switchMap(transactionId => {
            if (transactionId) {
                return this.dataService.order.settleRefund({
                    transactionId,
                    id: refund.id,
                }, this.id);
            }
            else {
                return of(undefined);
            }
        }))
            .subscribe(result => {
            if (result) {
                this.notificationService.success(_('order.settle-refund-success'));
            }
        });
    }
    addNote(event) {
        const { note, isPublic } = event;
        this.dataService.order
            .addNoteToOrder({
            id: this.id,
            note,
            isPublic,
        })
            .pipe(switchMap(result => this.refetchOrder(result)))
            .subscribe(result => {
            this.notificationService.success(_('common.notify-create-success'), {
                entity: 'Note',
            });
        });
    }
    updateNote(entry) {
        this.modalService
            .fromComponent(EditNoteDialogComponent, {
            closable: true,
            locals: {
                displayPrivacyControls: true,
                note: entry.data.note,
                noteIsPrivate: !entry.isPublic,
            },
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.dataService.order.updateOrderNote({
                    noteId: entry.id,
                    isPublic: !result.isPrivate,
                    note: result.note,
                });
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(result => {
            this.fetchHistory.next();
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'Note',
            });
        });
    }
    deleteNote(entry) {
        return this.modalService
            .dialog({
            title: _('common.confirm-delete-note'),
            body: entry.data.note,
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                { type: 'danger', label: _('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))
            .subscribe(() => {
            this.fetchHistory.next();
            this.notificationService.success(_('common.notify-delete-success'), {
                entity: 'Note',
            });
        });
    }
    orderHasSettledPayments(order) {
        var _a;
        return !!((_a = order.payments) === null || _a === void 0 ? void 0 : _a.find(p => p.state === 'Settled'));
    }
    cancelOrder(order) {
        this.modalService
            .fromComponent(CancelOrderDialogComponent, {
            size: 'xl',
            locals: {
                order,
            },
        })
            .pipe(switchMap(input => {
            if (input) {
                return this.dataService.order.cancelOrder(input);
            }
            else {
                return of(undefined);
            }
        }), switchMap(result => this.refetchOrder(result)))
            .subscribe(result => {
            if (result) {
                this.notificationService.success(_('order.cancelled-order-success'));
            }
        });
    }
    refundOrder(order) {
        this.modalService
            .fromComponent(RefundOrderDialogComponent, {
            size: 'xl',
            locals: {
                order,
            },
        })
            .pipe(switchMap(input => {
            var _a;
            if (!input) {
                return of(undefined);
            }
            const operations = [];
            if (input.refund.lines.length) {
                operations.push(this.dataService.order
                    .refundOrder(input.refund)
                    .pipe(map(res => res.refundOrder)));
            }
            if ((_a = input.cancel.lines) === null || _a === void 0 ? void 0 : _a.length) {
                operations.push(this.dataService.order
                    .cancelOrder(input.cancel)
                    .pipe(map(res => res.cancelOrder)));
            }
            return merge(...operations);
        }))
            .subscribe(result => {
            if (result) {
                switch (result.__typename) {
                    case 'Order':
                        this.refetchOrder(result).subscribe();
                        this.notificationService.success(_('order.cancelled-order-success'));
                        break;
                    case 'Refund':
                        this.refetchOrder(result).subscribe();
                        if (result.state === 'Failed') {
                            this.notificationService.error(_('order.refund-order-failed'));
                        }
                        else {
                            this.notificationService.success(_('order.refund-order-success'));
                        }
                        break;
                    case 'QuantityTooGreatError':
                    case 'MultipleOrderError':
                    case 'OrderStateTransitionError':
                    case 'CancelActiveOrderError':
                    case 'EmptyOrderLineSelectionError':
                    case 'AlreadyRefundedError':
                    case 'NothingToRefundError':
                    case 'PaymentOrderMismatchError':
                    case 'RefundOrderStateError':
                    case 'RefundStateTransitionError':
                        this.notificationService.error(result.message);
                        break;
                }
            }
        });
    }
    refetchOrder(result) {
        this.fetchHistory.next();
        if (result) {
            return this.dataService.order.getOrder(this.id).single$;
        }
        else {
            return of(undefined);
        }
    }
    setFormValues(entity) {
        // empty
    }
}
OrderDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-order-detail',
                template: "<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\">\r\n                <button\r\n                    class=\"icon-button\"\r\n                    (click)=\"openStateDiagram()\"\r\n                    [title]=\"'order.order-state-diagram' | translate\"\r\n                >\r\n                    <clr-icon shape=\"list\"></clr-icon>\r\n                </button>\r\n            </vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"\r\n                (order.state === 'ArrangingPayment' || order.state === 'ArrangingAdditionalPayment') &&\r\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\r\n            \"\r\n            (click)=\"addManualPayment(order)\"\r\n        >\r\n            {{ 'order.add-payment-to-order' | translate }}\r\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\r\n        </button>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"\r\n                order.active === false &&\r\n                order.state !== 'ArrangingAdditionalPayment' &&\r\n                0 < outstandingPaymentAmount(order)\r\n            \"\r\n            (click)=\"transitionToState('ArrangingAdditionalPayment')\"\r\n        >\r\n            {{ 'order.arrange-additional-payment' | translate }}\r\n        </button>\r\n        <button class=\"btn btn-primary\" (click)=\"fulfillOrder()\" [disabled]=\"!canAddFulfillment(order)\">\r\n            {{ 'order.fulfill-order' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngIf=\"order.nextStates.includes('Modifying')\">\r\n                    <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"transitionToModifying()\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'order.modify-order' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                </ng-container>\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"btn\"\r\n                    vdrDropdownItem\r\n                    *ngIf=\"order.nextStates.includes('Cancelled')\"\r\n                    (click)=\"cancelOrRefund(order)\"\r\n                >\r\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\r\n                        {{ 'order.refund-and-cancel-order' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #cancelOnly>\r\n                        {{ 'order.cancel-order' | translate }}\r\n                    </ng-template>\r\n                </button>\r\n\r\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        *ngFor=\"let nextState of nextStates$ | async\"\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionToState(nextState)\"\r\n                    >\r\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                        {{\r\n                            'order.transition-to-state'\r\n                                | translate: { state: (nextState | stateI18nToken | translate) }\r\n                        }}\r\n                    </button>\r\n                </ng-container>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\r\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\r\n                    {{ 'order.manually-transition-to-state' | translate }}\r\n                </button>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n            ></vdr-order-table>\r\n            <h4>{{ 'order.tax-summary' | translate }}</h4>\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{{ 'common.description' | translate }}</th>\r\n                        <th>{{ 'order.tax-rate' | translate }}</th>\r\n                        <th>{{ 'order.tax-base' | translate }}</th>\r\n                        <th>{{ 'order.tax-total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let row of order.taxSummary\">\r\n                        <td>{{ row.description }}</td>\r\n                        <td>{{ row.taxRate / 100 | percent }}</td>\r\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\r\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"order-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n\r\n            <vdr-order-history\r\n                [order]=\"order\"\r\n                [history]=\"history$ | async\"\r\n                (addNote)=\"addNote($event)\"\r\n                (updateNote)=\"updateNote($event)\"\r\n                (deleteNote)=\"deleteNote($event)\"\r\n            ></vdr-order-history>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <vdr-order-custom-fields-card\r\n                [customFieldsConfig]=\"customFields\"\r\n                [customFieldValues]=\"order.customFields\"\r\n                (updateClick)=\"updateCustomFields($event)\"\r\n            ></vdr-order-custom-fields-card>\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.customer' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card-text\">\r\n                        <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.shippingAddress).length\">\r\n                            {{ 'order.shipping-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.billingAddress).length\">\r\n                            {{ 'order.billing-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.billingAddress\"></vdr-formatted-address>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ng-container *ngIf=\"order.payments && order.payments.length\">\r\n                <vdr-order-payment-card\r\n                    *ngFor=\"let payment of order.payments\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [payment]=\"payment\"\r\n                    (settlePayment)=\"settlePayment($event)\"\r\n                    (transitionPaymentState)=\"transitionPaymentState($event)\"\r\n                    (settleRefund)=\"settleRefund($event)\"\r\n                ></vdr-order-payment-card>\r\n            </ng-container>\r\n            <ng-container *ngFor=\"let fulfillment of order.fulfillments\">\r\n                <vdr-fulfillment-card\r\n                    [fulfillment]=\"fulfillment\"\r\n                    [order]=\"order\"\r\n                    (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\r\n                ></vdr-fulfillment-card>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".shipping-address{list-style-type:none;line-height:1.3em}.order-cards h6{margin-top:6px;color:var(--color-text-200)}\n"]
            },] }
];
OrderDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: NotificationService },
    { type: ModalService },
    { type: OrderTransitionService }
];
//# sourceMappingURL=data:application/json;base64,