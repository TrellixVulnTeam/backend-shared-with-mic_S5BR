import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, Input, Output, Directive, TemplateRef, ContentChild, Injectable, NgModule } from '@angular/core';
import * as i2 from '@vendure/admin-ui/core';
import { DataService, BaseDetailComponent, Permission, ServerConfigService, NotificationService, BaseListComponent, ModalService, CurrencyCode, createUpdatedTranslatable, findTranslation, DeletionResult, LanguageCode, configurableDefinitionToInstance, toConfigurableOperationInput, getConfigArgValue, LocalStorageService, BaseEntityResolver, getDefaultUiLanguage, createResolveData, CanDeactivateDetailGuard, detailBreadcrumb, SharedModule } from '@vendure/admin-ui/core';
import { map, take, mergeMap, switchMap, startWith, tap, withLatestFrom, takeUntil, distinctUntilChanged, mapTo } from 'rxjs/operators';
import { Validators, FormBuilder, FormControl } from '@angular/forms';
import * as i1 from '@angular/router';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { marker } from '@biesbjerg/ngx-translate-extract-marker';
import { CUSTOMER_ROLE_CODE, DEFAULT_CHANNEL_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';
import { EMPTY, Subject, combineLatest, of, merge } from 'rxjs';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { unique } from '@vendure/common/lib/unique';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@vendure/admin-ui/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@ngx-translate/core';
import * as ɵngcc4 from '@angular/router';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '@clr/angular';
import * as ɵngcc7 from '@ng-select/ng-select';
import * as ɵngcc8 from '@angular/cdk/bidi';

const _c0 = function (a0) { return { zoneName: a0 }; };
function AddCountryToZoneDialogComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(1, 1, "settings.add-countries-to-zone", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r0.zoneName)));
} }
function AddCountryToZoneDialogComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function AddCountryToZoneDialogComponent_ng_template_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.cancel(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 4);
    ɵngcc0.ɵɵlistener("click", function AddCountryToZoneDialogComponent_ng_template_3_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.add(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 3, "common.cancel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r1.selectedMemberIds.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(5, 5, "settings.add-countries-to-zone", ɵngcc0.ɵɵpureFunction1(8, _c0, ctx_r1.zoneName)), " ");
} }
function AdminDetailComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 20);
    ɵngcc0.ɵɵlistener("click", function AdminDetailComponent_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.detailForm.invalid || ctx_r0.detailForm.pristine);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function AdminDetailComponent_ng_template_8_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 20);
    ɵngcc0.ɵɵlistener("click", function AdminDetailComponent_ng_template_8_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r9.detailForm.invalid || ctx_r9.detailForm.pristine);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function AdminDetailComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AdminDetailComponent_ng_template_8_button_0_Template, 3, 4, "button", 21);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("vdrIfPermissions", "UpdateAdministrator");
} }
function AdminDetailComponent_vdr_form_field_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-form-field", 22);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "input", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(1, 1, "settings.password"));
} }
function AdminDetailComponent_vdr_form_field_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-form-field", 24);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "input", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(1, 2, "settings.password"))("readOnlyToggle", true);
} }
function AdminDetailComponent_section_28_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 25);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 26);
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r5.customFields)("customFieldsFormGroup", ctx_r5.detailForm.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, "UpdateAdministrator"));
} }
function AdminDetailComponent_li_36_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 27);
    ɵngcc0.ɵɵelementStart(1, "button", 28);
    ɵngcc0.ɵɵlistener("click", function AdminDetailComponent_li_36_Template_button_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const channel_r12 = restoredCtx.$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.selectedChannelId = channel_r12.channelId; });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵpipe(4, "channelCodeToLabel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const channel_r12 = ctx.$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("active", ctx_r6.selectedChannelId === channel_r12.channelId);
    ɵngcc0.ɵɵproperty("id", channel_r12.channelId);
    ɵngcc0.ɵɵattribute("aria-selected", ctx_r6.selectedChannelId === channel_r12.channelId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, ɵngcc0.ɵɵpipeBind1(4, 7, channel_r12.channelCode)), " ");
} }
const _c1 = function () { return ["./create"]; };
function AdministratorListComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 3);
    ɵngcc0.ɵɵelement(1, "clr-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c1));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "admin.create-new-administrator"), " ");
} }
const _c2 = function (a1) { return ["./", a1]; };
function AdministratorListComponent_ng_template_20_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 5);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 5);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "td", 6);
    ɵngcc0.ɵɵelement(7, "vdr-table-row-action", 7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "td");
    ɵngcc0.ɵɵelementStart(10, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(11, "button", 8);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelement(14, "clr-icon", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "vdr-dropdown-menu", 10);
    ɵngcc0.ɵɵelementStart(16, "button", 11);
    ɵngcc0.ɵɵlistener("click", function AdministratorListComponent_ng_template_20_Template_button_click_16_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const administrator_r2 = restoredCtx.item; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.deleteAdministrator(administrator_r2); });
    ɵngcc0.ɵɵpipe(17, "hasPermission");
    ɵngcc0.ɵɵelement(18, "clr-icon", 12);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const administrator_r2 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(administrator_r2.firstName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(administrator_r2.lastName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(administrator_r2.emailAddress);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(8, 8, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(16, _c2, administrator_r2.id));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 10, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(17, 12, "DeleteAdministrator"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 14, "common.delete"), " ");
} }
function ChannelDetailComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 24);
    ɵngcc0.ɵɵlistener("click", function ChannelDetailComponent_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", !ctx_r0.saveButtonEnabled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function ChannelDetailComponent_ng_template_8_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 24);
    ɵngcc0.ɵɵlistener("click", function ChannelDetailComponent_ng_template_8_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r12.saveButtonEnabled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
const _c3 = function () { return ["SuperAdmin", "UpdateChannel"]; };
function ChannelDetailComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ChannelDetailComponent_ng_template_8_button_0_Template, 3, 4, "button", 25);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("vdrIfPermissions", ɵngcc0.ɵɵpureFunction0(1, _c3));
} }
function ChannelDetailComponent_option_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "localeCurrencyName");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const code_r15 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", code_r15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, code_r15));
} }
function ChannelDetailComponent_option_28_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "localeLanguageName");
    ɵngcc0.ɵɵpipe(3, "uppercase");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const languageCode_r16 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", languageCode_r16);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(2, 3, languageCode_r16), " (", ɵngcc0.ɵɵpipeBind1(3, 5, languageCode_r16), ") ");
} }
function ChannelDetailComponent_option_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const zone_r17 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", zone_r17.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(zone_r17.name);
} }
function ChannelDetailComponent_clr_alert_42_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "clr-alert", 27);
    ɵngcc0.ɵɵelementStart(1, "clr-alert-item");
    ɵngcc0.ɵɵelementStart(2, "span", 28);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("clrAlertClosable", false);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "error.no-default-tax-zone-set"), " ");
} }
function ChannelDetailComponent_option_48_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 26);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const zone_r18 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", zone_r18.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(zone_r18.name);
} }
function ChannelDetailComponent_clr_alert_50_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "clr-alert", 29);
    ɵngcc0.ɵɵelementStart(1, "clr-alert-item");
    ɵngcc0.ɵɵelementStart(2, "span", 28);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("clrAlertClosable", false);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "error.no-default-shipping-zone-set"), " ");
} }
function ChannelDetailComponent_section_51_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 30);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 31);
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r9.customFields)("customFieldsFormGroup", ctx_r9.detailForm.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, ctx_r9.updatePermission));
} }
function ChannelListComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 3);
    ɵngcc0.ɵɵelement(1, "clr-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c1));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "settings.create-new-channel"), " ");
} }
const _c4 = function () { return ["SuperAdmin", "DeleteChannel"]; };
function ChannelListComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 5);
    ɵngcc0.ɵɵelement(1, "vdr-channel-badge", 6);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵpipe(4, "channelCodeToLabel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "td", 7);
    ɵngcc0.ɵɵelement(6, "vdr-table-row-action", 8);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "td", 7);
    ɵngcc0.ɵɵelementStart(9, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(10, "button", 9);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "clr-icon", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "vdr-dropdown-menu", 11);
    ɵngcc0.ɵɵelementStart(15, "button", 12);
    ɵngcc0.ɵɵlistener("click", function ChannelListComponent_ng_template_11_Template_button_click_15_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const channel_r2 = restoredCtx.item; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.deleteChannel(channel_r2.id); });
    ɵngcc0.ɵɵpipe(16, "hasPermission");
    ɵngcc0.ɵɵelement(17, "clr-icon", 13);
    ɵngcc0.ɵɵtext(18);
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const channel_r2 = ctx.item;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("channelCode", channel_r2.code);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 8, ɵngcc0.ɵɵpipeBind1(4, 10, channel_r2.code)), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(7, 12, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(20, _c2, channel_r2.id));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isDefaultChannel(channel_r2.code));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 14, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(16, 16, ɵngcc0.ɵɵpureFunction0(22, _c4)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(19, 18, "common.delete"), " ");
} }
const _c5 = function () { return ["SuperAdmin", "CreateChannel"]; };
function CountryDetailComponent_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 14);
    ɵngcc0.ɵɵlistener("click", function CountryDetailComponent_button_10_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.detailForm.invalid || ctx_r0.detailForm.pristine);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function CountryDetailComponent_ng_template_12_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 14);
    ɵngcc0.ɵɵlistener("click", function CountryDetailComponent_ng_template_12_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r6.detailForm.invalid || ctx_r6.detailForm.pristine);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function CountryDetailComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, CountryDetailComponent_ng_template_12_button_0_Template, 3, 4, "button", 15);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("vdrIfPermissions", ctx_r2.updatePermission);
} }
function CountryDetailComponent_section_28_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 16);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 17);
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r3.customFields)("customFieldsFormGroup", ctx_r3.detailForm.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, ctx_r3.updatePermission));
} }
function CountryListComponent_a_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 6);
    ɵngcc0.ɵɵelement(1, "clr-icon", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c1));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "settings.create-new-country"), " ");
} }
const _c6 = function (a0) { return { contents: a0 }; };
const _c7 = function (a2) { return ["/settings", "zones", a2]; };
function CountryListComponent_ng_template_26_a_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 17);
    ɵngcc0.ɵɵelementStart(1, "vdr-chip", 18);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const zone_r4 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction1(5, _c7, ɵngcc0.ɵɵpureFunction1(3, _c6, zone_r4.id)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("colorFrom", zone_r4.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(zone_r4.name);
} }
const _c8 = function () { return ["DeleteSettings", "DeleteCountry"]; };
function CountryListComponent_ng_template_26_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 8);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 8);
    ɵngcc0.ɵɵtemplate(5, CountryListComponent_ng_template_26_a_5_Template, 3, 7, "a", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "td", 8);
    ɵngcc0.ɵɵelement(7, "clr-icon");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "td", 10);
    ɵngcc0.ɵɵelement(9, "vdr-table-row-action", 11);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "td", 10);
    ɵngcc0.ɵɵelementStart(12, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(13, "button", 12);
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelement(16, "clr-icon", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "vdr-dropdown-menu", 14);
    ɵngcc0.ɵɵelementStart(18, "button", 15);
    ɵngcc0.ɵɵlistener("click", function CountryListComponent_ng_template_26_Template_button_click_18_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const country_r2 = restoredCtx.item; const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.deleteCountry(country_r2.id); });
    ɵngcc0.ɵɵpipe(19, "hasPermission");
    ɵngcc0.ɵɵelement(20, "clr-icon", 16);
    ɵngcc0.ɵɵtext(21);
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const country_r2 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(country_r2.code);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(country_r2.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", country_r2.zones);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("is-success", country_r2.enabled);
    ɵngcc0.ɵɵattribute("shape", country_r2.enabled ? "check" : "times");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(10, 11, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(19, _c2, country_r2.id));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 13, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(19, 15, ɵngcc0.ɵɵpureFunction0(21, _c8)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(22, 17, "common.delete"), " ");
} }
const _c9 = function () { return ["CreateSettings", "CreateCountry"]; };
function GlobalSettingsComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function GlobalSettingsComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.detailForm.invalid || ctx_r0.detailForm.pristine);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function GlobalSettingsComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵlistener("click", function GlobalSettingsComponent_ng_template_8_Template_span_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const item_r6 = restoredCtx.item; const clear_r7 = restoredCtx.clear; return clear_r7.call(null, item_r6); });
    ɵngcc0.ɵɵtext(1, " \u00D7 ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 15);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "localeLanguageName");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r6 = ctx.item;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate2("", ɵngcc0.ɵɵpipeBind1(4, 2, item_r6), " (", item_r6, ")");
} }
function GlobalSettingsComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "localeLanguageName");
} if (rf & 2) {
    const item_r10 = ctx.item;
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(1, 2, item_r10), " (", item_r10, ") ");
} }
function GlobalSettingsComponent_section_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 16);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 17);
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r3.customFields)("customFieldsFormGroup", ctx_r3.detailForm.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, ctx_r3.updatePermission));
} }
function PaymentMethodDetailComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function PaymentMethodDetailComponent_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.detailForm.pristine || ctx_r0.detailForm.invalid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function PaymentMethodDetailComponent_ng_template_8_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 5);
    ɵngcc0.ɵɵlistener("click", function PaymentMethodDetailComponent_ng_template_8_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r6.detailForm.pristine || ctx_r6.detailForm.invalid || !ctx_r6.selectedHandler);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function PaymentMethodDetailComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, PaymentMethodDetailComponent_ng_template_8_button_0_Template, 3, 4, "button", 6);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("vdrIfPermissions", ctx_r2.updatePermission);
} }
function PaymentMethodDetailComponent_form_10_section_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 23);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 24);
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r10.customFields)("customFieldsFormGroup", ctx_r10.detailForm.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, ctx_r10.updatePermission));
} }
function PaymentMethodDetailComponent_form_10_vdr_configurable_input_25_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "vdr-configurable-input", 25);
    ɵngcc0.ɵɵlistener("remove", function PaymentMethodDetailComponent_form_10_vdr_configurable_input_25_Template_vdr_configurable_input_remove_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.removeChecker(); });
    ɵngcc0.ɵɵpipe(1, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("operation", ctx_r11.selectedChecker)("operationDefinition", ctx_r11.selectedCheckerDefinition)("readonly", !ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r11.updatePermission));
} }
function PaymentMethodDetailComponent_form_10_div_26_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 30);
    ɵngcc0.ɵɵlistener("click", function PaymentMethodDetailComponent_form_10_div_26_button_7_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r20); const checker_r18 = restoredCtx.$implicit; const ctx_r19 = ɵngcc0.ɵɵnextContext(3); return ctx_r19.selectChecker(checker_r18); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const checker_r18 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", checker_r18.description, " ");
} }
function PaymentMethodDetailComponent_form_10_div_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(2, "button", 26);
    ɵngcc0.ɵɵelement(3, "clr-icon", 27);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "vdr-dropdown-menu", 28);
    ɵngcc0.ɵɵtemplate(7, PaymentMethodDetailComponent_form_10_div_26_button_7_Template, 2, 1, "button", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 2, "common.select"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r12.checkers);
} }
function PaymentMethodDetailComponent_form_10_vdr_configurable_input_31_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "vdr-configurable-input", 31);
    ɵngcc0.ɵɵlistener("remove", function PaymentMethodDetailComponent_form_10_vdr_configurable_input_31_Template_vdr_configurable_input_remove_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.removeHandler(); });
    ɵngcc0.ɵɵpipe(1, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("operation", ctx_r13.selectedHandler)("operationDefinition", ctx_r13.selectedHandlerDefinition)("readonly", !ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r13.updatePermission));
} }
function PaymentMethodDetailComponent_form_10_div_32_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 30);
    ɵngcc0.ɵɵlistener("click", function PaymentMethodDetailComponent_form_10_div_32_button_7_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r26); const handler_r24 = restoredCtx.$implicit; const ctx_r25 = ɵngcc0.ɵɵnextContext(3); return ctx_r25.selectHandler(handler_r24); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const handler_r24 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", handler_r24.description, " ");
} }
function PaymentMethodDetailComponent_form_10_div_32_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(2, "button", 26);
    ɵngcc0.ɵɵelement(3, "clr-icon", 27);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "vdr-dropdown-menu", 28);
    ɵngcc0.ɵɵtemplate(7, PaymentMethodDetailComponent_form_10_div_32_button_7_Template, 2, 1, "button", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 2, "common.select"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r14.handlers);
} }
function PaymentMethodDetailComponent_form_10_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 7);
    ɵngcc0.ɵɵelementStart(1, "vdr-form-field", 8);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "input", 9);
    ɵngcc0.ɵɵlistener("input", function PaymentMethodDetailComponent_form_10_Template_input_input_3_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r28); const paymentMethod_r9 = restoredCtx.ngIf; const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.updateCode(paymentMethod_r9.code, $event.target.value); });
    ɵngcc0.ɵɵpipe(4, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "vdr-form-field", 10);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵpipe(7, "hasPermission");
    ɵngcc0.ɵɵelement(8, "input", 11);
    ɵngcc0.ɵɵpipe(9, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "vdr-rich-text-editor", 12);
    ɵngcc0.ɵɵpipe(11, "hasPermission");
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementStart(13, "vdr-form-field", 13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementStart(15, "clr-toggle-wrapper");
    ɵngcc0.ɵɵelement(16, "input", 14);
    ɵngcc0.ɵɵpipe(17, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(18, PaymentMethodDetailComponent_form_10_section_18_Template, 6, 8, "section", 15);
    ɵngcc0.ɵɵelement(19, "vdr-custom-detail-component-host", 16);
    ɵngcc0.ɵɵelementStart(20, "div", 17);
    ɵngcc0.ɵɵelementStart(21, "div", 18);
    ɵngcc0.ɵɵelementStart(22, "label", 19);
    ɵngcc0.ɵɵtext(23);
    ɵngcc0.ɵɵpipe(24, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(25, PaymentMethodDetailComponent_form_10_vdr_configurable_input_25_Template, 2, 5, "vdr-configurable-input", 20);
    ɵngcc0.ɵɵtemplate(26, PaymentMethodDetailComponent_form_10_div_26_Template, 8, 4, "div", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "div", 18);
    ɵngcc0.ɵɵelementStart(28, "label", 19);
    ɵngcc0.ɵɵtext(29);
    ɵngcc0.ɵɵpipe(30, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(31, PaymentMethodDetailComponent_form_10_vdr_configurable_input_31_Template, 2, 5, "vdr-configurable-input", 22);
    ɵngcc0.ɵɵtemplate(32, PaymentMethodDetailComponent_form_10_div_32_Template, 8, 4, "div", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formGroup", ctx_r3.detailForm);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(2, 19, "common.name"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(4, 21, ctx_r3.updatePermission));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 23, "common.code"))("readOnlyToggle", ɵngcc0.ɵɵpipeBind1(7, 25, ctx_r3.updatePermission));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(9, 27, ctx_r3.updatePermission));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(11, 29, ctx_r3.updatePermission))("label", ɵngcc0.ɵɵpipeBind1(12, 31, "common.description"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(14, 33, "common.enabled"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(17, 35, ctx_r3.updatePermission));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.customFields.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("entity$", ctx_r3.entity$)("detailForm", ctx_r3.detailForm);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(24, 37, "settings.payment-eligibility-checker"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.selectedChecker && ctx_r3.selectedCheckerDefinition);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.selectedChecker || !ctx_r3.selectedCheckerDefinition);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(30, 39, "settings.payment-handler"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.selectedHandler && ctx_r3.selectedHandlerDefinition);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.selectedHandler || !ctx_r3.selectedHandlerDefinition);
} }
function PaymentMethodListComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 3);
    ɵngcc0.ɵɵelement(1, "clr-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c1));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "settings.create-new-payment-method"), " ");
} }
const _c10 = function () { return ["DeleteSettings", "DeletePaymentMethod"]; };
function PaymentMethodListComponent_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 5);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 6);
    ɵngcc0.ɵɵelement(5, "vdr-table-row-action", 7);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 6);
    ɵngcc0.ɵɵelementStart(8, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(9, "button", 8);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelement(12, "clr-icon", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "vdr-dropdown-menu", 10);
    ɵngcc0.ɵɵelementStart(14, "button", 11);
    ɵngcc0.ɵɵlistener("click", function PaymentMethodListComponent_ng_template_17_Template_button_click_14_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const paymentMethod_r2 = restoredCtx.item; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.deletePaymentMethod(paymentMethod_r2.id); });
    ɵngcc0.ɵɵpipe(15, "hasPermission");
    ɵngcc0.ɵɵelement(16, "clr-icon", 12);
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const paymentMethod_r2 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(paymentMethod_r2.code);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(paymentMethod_r2.enabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 7, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(15, _c2, paymentMethod_r2.id));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 9, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(15, 11, ɵngcc0.ɵɵpureFunction0(17, _c10)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 13, "common.delete"), " ");
} }
const _c11 = function () { return ["CreateSettings", "CreatePaymentMethod"]; };
function PermissionGridComponent_tr_2_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵlistener("click", function PermissionGridComponent_tr_2_button_10_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const section_r1 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.toggleAll(section_r1.permissions); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "common.toggle-all"), " ");
} }
function PermissionGridComponent_tr_2_td_11_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td");
    ɵngcc0.ɵɵelementStart(1, "vdr-select-toggle", 5);
    ɵngcc0.ɵɵlistener("selectedChange", function PermissionGridComponent_tr_2_td_11_Template_vdr_select_toggle_selectedChange_1_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r9); const permission_r7 = restoredCtx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.setPermission(permission_r7.name, $event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const permission_r7 = ctx.$implicit;
    const section_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("colspan", section_r1.permissions.length === 1 ? 4 : 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", permission_r7.description)("label", permission_r7.name)("disabled", ctx_r3.readonly)("selected", ctx_r3.activePermissions == null ? null : ctx_r3.activePermissions.includes(permission_r7.name));
} }
function PermissionGridComponent_tr_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td", 2);
    ɵngcc0.ɵɵelementStart(2, "div");
    ɵngcc0.ɵɵelementStart(3, "strong");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "small");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "br");
    ɵngcc0.ɵɵtemplate(10, PermissionGridComponent_tr_2_button_10_Template, 3, 3, "button", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(11, PermissionGridComponent_tr_2_td_11_Template, 2, 5, "td", 1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const section_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 4, section_r1.label));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 6, section_r1.description));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", 1 < section_r1.permissions.length && !ctx_r0.readonly);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", section_r1.permissions);
} }
function ProfileComponent_vdr_form_field_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-form-field", 14);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "input", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(1, 1, "settings.password"));
} }
function ProfileComponent_section_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 15);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r1.customFields)("customFieldsFormGroup", ctx_r1.detailForm.get("customFields"));
} }
function RoleDetailComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12);
    ɵngcc0.ɵɵlistener("click", function RoleDetailComponent_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.detailForm.invalid || ctx_r0.detailForm.pristine);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function RoleDetailComponent_ng_template_8_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12);
    ɵngcc0.ɵɵlistener("click", function RoleDetailComponent_ng_template_8_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r5.detailForm.invalid || ctx_r5.detailForm.pristine);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function RoleDetailComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, RoleDetailComponent_ng_template_8_button_0_Template, 3, 4, "button", 13);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("vdrIfPermissions", "UpdateAdministrator");
} }
function RoleListComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 3);
    ɵngcc0.ɵɵelement(1, "clr-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c1));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "settings.create-new-role"), " ");
} }
function RoleListComponent_ng_template_23_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const role_r2 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(role_r2.code);
} }
function RoleListComponent_ng_template_23_ng_container_5_vdr_chip_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip");
    ɵngcc0.ɵɵelement(1, "vdr-channel-badge", 17);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵpipe(4, "channelCodeToLabel");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const channel_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("channelCode", channel_r11.code);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, ɵngcc0.ɵɵpipeBind1(4, 4, channel_r11.code)), " ");
} }
function RoleListComponent_ng_template_23_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, RoleListComponent_ng_template_23_ng_container_5_vdr_chip_1_Template, 5, 6, "vdr-chip", 16);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const role_r2 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", role_r2.channels);
} }
function RoleListComponent_ng_template_23_ng_container_7_vdr_chip_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const permission_r15 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(permission_r15);
} }
function RoleListComponent_ng_template_23_ng_container_7_button_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "clr-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const role_r2 = ɵngcc0.ɵɵnextContext(3).item;
    const ctx_r16 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", role_r2.permissions.length - ctx_r16.initialLimit, " ");
} }
function RoleListComponent_ng_template_23_ng_container_7_button_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-icon", 21);
} }
function RoleListComponent_ng_template_23_ng_container_7_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function RoleListComponent_ng_template_23_ng_container_7_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const role_r2 = ɵngcc0.ɵɵnextContext(2).item; const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.toggleDisplayLimit(role_r2); });
    ɵngcc0.ɵɵtemplate(1, RoleListComponent_ng_template_23_ng_container_7_button_3_ng_container_1_Template, 3, 1, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, RoleListComponent_ng_template_23_ng_container_7_button_3_ng_template_2_Template, 1, 0, "ng-template", null, 20, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r17 = ɵngcc0.ɵɵreference(3);
    const role_r2 = ɵngcc0.ɵɵnextContext(2).item;
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r14.displayLimit[role_r2.id] || 0) < role_r2.permissions.length)("ngIfElse", _r17);
} }
function RoleListComponent_ng_template_23_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, RoleListComponent_ng_template_23_ng_container_7_vdr_chip_1_Template, 2, 1, "vdr-chip", 16);
    ɵngcc0.ɵɵpipe(2, "slice");
    ɵngcc0.ɵɵtemplate(3, RoleListComponent_ng_template_23_ng_container_7_button_3_Template, 4, 2, "button", 18);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const role_r2 = ɵngcc0.ɵɵnextContext().item;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind3(2, 2, role_r2.permissions, 0, ctx_r5.displayLimit[role_r2.id] || 3));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", role_r2.permissions.length > ctx_r5.initialLimit);
} }
function RoleListComponent_ng_template_23_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 22);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "settings.default-role-label"));
} }
function RoleListComponent_ng_template_23_vdr_table_row_action_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "vdr-table-row-action", 23);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const role_r2 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(1, 2, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(4, _c2, role_r2.id));
} }
function RoleListComponent_ng_template_23_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 5);
    ɵngcc0.ɵɵtemplate(3, RoleListComponent_ng_template_23_span_3_Template, 2, 1, "span", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 5);
    ɵngcc0.ɵɵtemplate(5, RoleListComponent_ng_template_23_ng_container_5_Template, 2, 1, "ng-container", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "td", 5);
    ɵngcc0.ɵɵtemplate(7, RoleListComponent_ng_template_23_ng_container_7_Template, 4, 6, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(8, RoleListComponent_ng_template_23_ng_template_8_Template, 3, 3, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "td", 9);
    ɵngcc0.ɵɵtemplate(11, RoleListComponent_ng_template_23_vdr_table_row_action_11_Template, 2, 6, "vdr-table-row-action", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "td", 9);
    ɵngcc0.ɵɵelementStart(13, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(14, "button", 11);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelement(17, "clr-icon", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "vdr-dropdown-menu", 13);
    ɵngcc0.ɵɵelementStart(19, "button", 14);
    ɵngcc0.ɵɵlistener("click", function RoleListComponent_ng_template_23_Template_button_click_19_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r27); const role_r2 = restoredCtx.item; const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.deleteRole(role_r2.id); });
    ɵngcc0.ɵɵpipe(20, "hasPermission");
    ɵngcc0.ɵɵelement(21, "clr-icon", 15);
    ɵngcc0.ɵɵtext(22);
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const role_r2 = ctx.item;
    const _r6 = ɵngcc0.ɵɵreference(9);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(role_r2.description);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isDefaultRole(role_r2));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isDefaultRole(role_r2));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isDefaultRole(role_r2))("ngIfElse", _r6);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isDefaultRole(role_r2));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isDefaultRole(role_r2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 10, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(20, 12, "SuperAdmin"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(23, 14, "common.delete"), " ");
} }
function ShippingEligibilityTestResultComponent_div_4_vdr_object_tree_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "vdr-object-tree", 11);
} if (rf & 2) {
    const quote_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("value", quote_r2.metadata);
} }
function ShippingEligibilityTestResultComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵelementStart(2, "vdr-labeled-data", 8);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 9);
    ɵngcc0.ɵɵelementStart(6, "vdr-labeled-data", 8);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "localeCurrency");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "vdr-labeled-data", 8);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "localeCurrency");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, ShippingEligibilityTestResultComponent_div_4_vdr_object_tree_14_Template, 1, 1, "vdr-object-tree", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const quote_r2 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("stale", ctx_r0.testDataUpdated);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(3, 9, "settings.shipping-method"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", quote_r2.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(7, 11, "common.price"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(9, 13, quote_r2.price, ctx_r0.currencyCode), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(11, 16, "common.price-with-tax"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(13, 18, quote_r2.priceWithTax, ctx_r0.currencyCode), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", quote_r2.metadata);
} }
function ShippingEligibilityTestResultComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "clr-icon", 12);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "settings.no-eligible-shipping-methods"), " ");
} }
function ShippingMethodDetailComponent_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ShippingMethodDetailComponent_button_10_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.detailForm.pristine || ctx_r0.detailForm.invalid || !ctx_r0.selectedChecker || !ctx_r0.selectedCalculator);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function ShippingMethodDetailComponent_ng_template_12_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ShippingMethodDetailComponent_ng_template_12_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r7.detailForm.pristine || ctx_r7.detailForm.invalid || !ctx_r7.selectedChecker || !ctx_r7.selectedCalculator);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function ShippingMethodDetailComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ShippingMethodDetailComponent_ng_template_12_button_0_Template, 3, 4, "button", 9);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("vdrIfPermissions", ctx_r2.updatePermission);
} }
function ShippingMethodDetailComponent_form_14_option_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const handler_r17 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", handler_r17.code);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", handler_r17.code, ": ", handler_r17.description, " ");
} }
function ShippingMethodDetailComponent_form_14_section_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 28);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 29);
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r12.customFields)("customFieldsFormGroup", ctx_r12.detailForm.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, ctx_r12.updatePermission));
} }
function ShippingMethodDetailComponent_form_14_vdr_configurable_input_25_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "vdr-configurable-input", 30);
    ɵngcc0.ɵɵlistener("remove", function ShippingMethodDetailComponent_form_14_vdr_configurable_input_25_Template_vdr_configurable_input_remove_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.selectedChecker = null; });
    ɵngcc0.ɵɵpipe(1, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("operation", ctx_r13.selectedChecker)("operationDefinition", ctx_r13.selectedCheckerDefinition)("readonly", !ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r13.updatePermission));
} }
function ShippingMethodDetailComponent_form_14_div_26_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 35);
    ɵngcc0.ɵɵlistener("click", function ShippingMethodDetailComponent_form_14_div_26_button_7_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r23); const checker_r21 = restoredCtx.$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(3); return ctx_r22.selectChecker(checker_r21); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const checker_r21 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", checker_r21.description, " ");
} }
function ShippingMethodDetailComponent_form_14_div_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(2, "button", 31);
    ɵngcc0.ɵɵelement(3, "clr-icon", 32);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "vdr-dropdown-menu", 33);
    ɵngcc0.ɵɵtemplate(7, ShippingMethodDetailComponent_form_14_div_26_button_7_Template, 2, 1, "button", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 2, "common.select"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r14.checkers);
} }
function ShippingMethodDetailComponent_form_14_vdr_configurable_input_31_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "vdr-configurable-input", 36);
    ɵngcc0.ɵɵlistener("remove", function ShippingMethodDetailComponent_form_14_vdr_configurable_input_31_Template_vdr_configurable_input_remove_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(2); return ctx_r24.selectedCalculator = null; });
    ɵngcc0.ɵɵpipe(1, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("operation", ctx_r15.selectedCalculator)("operationDefinition", ctx_r15.selectedCalculatorDefinition)("readonly", !ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r15.updatePermission));
} }
function ShippingMethodDetailComponent_form_14_div_32_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 35);
    ɵngcc0.ɵɵlistener("click", function ShippingMethodDetailComponent_form_14_div_32_button_7_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r29); const calculator_r27 = restoredCtx.$implicit; const ctx_r28 = ɵngcc0.ɵɵnextContext(3); return ctx_r28.selectCalculator(calculator_r27); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const calculator_r27 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", calculator_r27.description, " ");
} }
function ShippingMethodDetailComponent_form_14_div_32_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(2, "button", 31);
    ɵngcc0.ɵɵelement(3, "clr-icon", 32);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "vdr-dropdown-menu", 33);
    ɵngcc0.ɵɵtemplate(7, ShippingMethodDetailComponent_form_14_div_32_button_7_Template, 2, 1, "button", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 2, "common.select"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r16.calculators);
} }
function ShippingMethodDetailComponent_form_14_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "form", 10);
    ɵngcc0.ɵɵelementStart(1, "vdr-form-field", 11);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "input", 12);
    ɵngcc0.ɵɵlistener("input", function ShippingMethodDetailComponent_form_14_Template_input_input_3_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r31); const shippingMethod_r10 = restoredCtx.ngIf; const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.updateCode(shippingMethod_r10.code, $event.target.value); });
    ɵngcc0.ɵɵpipe(4, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "vdr-form-field", 13);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵpipe(7, "hasPermission");
    ɵngcc0.ɵɵelement(8, "input", 14);
    ɵngcc0.ɵɵpipe(9, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "vdr-rich-text-editor", 15);
    ɵngcc0.ɵɵpipe(11, "hasPermission");
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementStart(13, "vdr-form-field", 16);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementStart(15, "select", 17);
    ɵngcc0.ɵɵpipe(16, "hasPermission");
    ɵngcc0.ɵɵtemplate(17, ShippingMethodDetailComponent_form_14_option_17_Template, 2, 3, "option", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(18, ShippingMethodDetailComponent_form_14_section_18_Template, 6, 8, "section", 19);
    ɵngcc0.ɵɵelement(19, "vdr-custom-detail-component-host", 20);
    ɵngcc0.ɵɵelementStart(20, "div", 21);
    ɵngcc0.ɵɵelementStart(21, "div", 22);
    ɵngcc0.ɵɵelementStart(22, "label", 23);
    ɵngcc0.ɵɵtext(23);
    ɵngcc0.ɵɵpipe(24, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(25, ShippingMethodDetailComponent_form_14_vdr_configurable_input_25_Template, 2, 5, "vdr-configurable-input", 24);
    ɵngcc0.ɵɵtemplate(26, ShippingMethodDetailComponent_form_14_div_26_Template, 8, 4, "div", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(27, "div", 22);
    ɵngcc0.ɵɵelementStart(28, "label", 23);
    ɵngcc0.ɵɵtext(29);
    ɵngcc0.ɵɵpipe(30, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(31, ShippingMethodDetailComponent_form_14_vdr_configurable_input_31_Template, 2, 5, "vdr-configurable-input", 26);
    ɵngcc0.ɵɵtemplate(32, ShippingMethodDetailComponent_form_14_div_32_Template, 8, 4, "div", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formGroup", ctx_r3.detailForm);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(2, 20, "common.name"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(4, 22, ctx_r3.updatePermission));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 24, "common.code"))("readOnlyToggle", ɵngcc0.ɵɵpipeBind1(7, 26, ctx_r3.updatePermission));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(9, 28, ctx_r3.updatePermission));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(11, 30, ctx_r3.updatePermission))("label", ɵngcc0.ɵɵpipeBind1(12, 32, "common.description"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(14, 34, "settings.fulfillment-handler"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(16, 36, ctx_r3.updatePermission));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.fulfillmentHandlers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.customFields.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("entity$", ctx_r3.entity$)("detailForm", ctx_r3.detailForm);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(24, 38, "settings.shipping-eligibility-checker"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.selectedChecker && ctx_r3.selectedCheckerDefinition);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.selectedChecker || !ctx_r3.selectedCheckerDefinition);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(30, 40, "settings.shipping-calculator"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.selectedCalculator && ctx_r3.selectedCalculatorDefinition);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.selectedCalculator || !ctx_r3.selectedCalculatorDefinition);
} }
function ShippingMethodDetailComponent_clr_accordion_content_22_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "clr-accordion-content");
    ɵngcc0.ɵɵelementStart(1, "div", 37);
    ɵngcc0.ɵɵelementStart(2, "div", 22);
    ɵngcc0.ɵɵelementStart(3, "vdr-test-order-builder", 38);
    ɵngcc0.ɵɵlistener("orderLinesChange", function ShippingMethodDetailComponent_clr_accordion_content_22_Template_vdr_test_order_builder_orderLinesChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.setTestOrderLines($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 22);
    ɵngcc0.ɵɵelementStart(5, "vdr-test-address-form", 39);
    ɵngcc0.ɵɵlistener("addressChange", function ShippingMethodDetailComponent_clr_accordion_content_22_Template_vdr_test_address_form_addressChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.setTestAddress($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "vdr-shipping-method-test-result", 40);
    ɵngcc0.ɵɵlistener("runTest", function ShippingMethodDetailComponent_clr_accordion_content_22_Template_vdr_shipping_method_test_result_runTest_6_listener() { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r35 = ɵngcc0.ɵɵnextContext(); return ctx_r35.runTest(); });
    ɵngcc0.ɵɵpipe(7, "async");
    ɵngcc0.ɵɵpipe(8, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    let tmp_0_0;
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("currencyCode", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(7, 4, ctx_r4.activeChannel$)) == null ? null : tmp_0_0.currencyCode)("okToRun", ctx_r4.allTestDataPresent() && ctx_r4.testDataUpdated && ctx_r4.detailForm.valid)("testDataUpdated", ctx_r4.testDataUpdated)("testResult", ɵngcc0.ɵɵpipeBind1(8, 6, ctx_r4.testResult$));
} }
function ShippingMethodListComponent_a_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 6);
    ɵngcc0.ɵɵelement(1, "clr-icon", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c1));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "settings.create-new-shipping-method"), " ");
} }
const _c12 = function () { return ["DeleteSettings", "DeleteShippingMethod"]; };
function ShippingMethodListComponent_ng_template_21_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 8);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 9);
    ɵngcc0.ɵɵelement(5, "vdr-table-row-action", 10);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 9);
    ɵngcc0.ɵɵelementStart(8, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(9, "button", 11);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelement(12, "clr-icon", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "vdr-dropdown-menu", 13);
    ɵngcc0.ɵɵelementStart(14, "button", 14);
    ɵngcc0.ɵɵlistener("click", function ShippingMethodListComponent_ng_template_21_Template_button_click_14_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const shippingMethod_r3 = restoredCtx.item; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.deleteShippingMethod(shippingMethod_r3.id); });
    ɵngcc0.ɵɵpipe(15, "hasPermission");
    ɵngcc0.ɵɵelement(16, "clr-icon", 15);
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const shippingMethod_r3 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(shippingMethod_r3.code);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(shippingMethod_r3.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 7, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(15, _c2, shippingMethod_r3.id));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 9, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(15, 11, ɵngcc0.ɵɵpureFunction0(17, _c12)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 13, "common.delete"), " ");
} }
function ShippingMethodListComponent_clr_accordion_content_28_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "clr-accordion-content");
    ɵngcc0.ɵɵelementStart(1, "div", 16);
    ɵngcc0.ɵɵelementStart(2, "div", 17);
    ɵngcc0.ɵɵelementStart(3, "vdr-test-order-builder", 18);
    ɵngcc0.ɵɵlistener("orderLinesChange", function ShippingMethodListComponent_clr_accordion_content_28_Template_vdr_test_order_builder_orderLinesChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.setTestOrderLines($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 17);
    ɵngcc0.ɵɵelementStart(5, "vdr-test-address-form", 19);
    ɵngcc0.ɵɵlistener("addressChange", function ShippingMethodListComponent_clr_accordion_content_28_Template_vdr_test_address_form_addressChange_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.setTestAddress($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "vdr-shipping-eligibility-test-result", 20);
    ɵngcc0.ɵɵlistener("runTest", function ShippingMethodListComponent_clr_accordion_content_28_Template_vdr_shipping_eligibility_test_result_runTest_6_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.runTest(); });
    ɵngcc0.ɵɵpipe(7, "async");
    ɵngcc0.ɵɵpipe(8, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    let tmp_0_0;
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("currencyCode", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(7, 4, ctx_r2.activeChannel$)) == null ? null : tmp_0_0.currencyCode)("okToRun", ctx_r2.allTestDataPresent())("testDataUpdated", ctx_r2.testDataUpdated)("testResult", ɵngcc0.ɵɵpipeBind1(8, 6, ctx_r2.testResult$));
} }
const _c13 = function () { return ["CreateSettings", "CreateShippingMethod"]; };
function ShippingMethodTestResultComponent_clr_icon_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-icon", 14);
} }
function ShippingMethodTestResultComponent_clr_icon_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-icon", 15);
} }
function ShippingMethodTestResultComponent_clr_icon_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-icon", 16);
} }
function ShippingMethodTestResultComponent_vdr_labeled_data_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-labeled-data", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "localeCurrency");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(1, 2, "common.price"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(3, 4, ctx_r3.testResult.quote == null ? null : ctx_r3.testResult.quote.price, ctx_r3.currencyCode), " ");
} }
function ShippingMethodTestResultComponent_vdr_labeled_data_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-labeled-data", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "localeCurrency");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(1, 2, "common.price-with-tax"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(3, 4, ctx_r4.testResult.quote == null ? null : ctx_r4.testResult.quote.priceWithTax, ctx_r4.currencyCode), " ");
} }
function ShippingMethodTestResultComponent_vdr_object_tree_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "vdr-object-tree", 17);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r5.testResult == null ? null : ctx_r5.testResult.quote == null ? null : ctx_r5.testResult.quote.metadata);
} }
const _c14 = function (a0, a1, a2) { return { success: a0, error: a1, unknown: a2 }; };
function TaxCategoryDetailComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function TaxCategoryDetailComponent_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", !ctx_r0.saveButtonEnabled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function TaxCategoryDetailComponent_ng_template_8_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 11);
    ɵngcc0.ɵɵlistener("click", function TaxCategoryDetailComponent_ng_template_8_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r6.saveButtonEnabled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function TaxCategoryDetailComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TaxCategoryDetailComponent_ng_template_8_button_0_Template, 3, 4, "button", 12);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("vdrIfPermissions", ctx_r2.updatePermission);
} }
function TaxCategoryDetailComponent_section_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 13);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 14);
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r3.customFields)("customFieldsFormGroup", ctx_r3.detailForm.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, ctx_r3.updatePermission));
} }
function TaxCategoryListComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 3);
    ɵngcc0.ɵɵelement(1, "clr-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c1));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "settings.create-new-tax-category"), " ");
} }
function TaxCategoryListComponent_ng_template_12_vdr_chip_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "common.default-tax-category"));
} }
const _c15 = function () { return ["DeleteSettings", "DeleteTaxCategory"]; };
function TaxCategoryListComponent_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 5);
    ɵngcc0.ɵɵtemplate(3, TaxCategoryListComponent_ng_template_12_vdr_chip_3_Template, 3, 3, "vdr-chip", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 7);
    ɵngcc0.ɵɵelement(5, "vdr-table-row-action", 8);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 7);
    ɵngcc0.ɵɵelementStart(8, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(9, "button", 9);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelement(12, "clr-icon", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "vdr-dropdown-menu", 11);
    ɵngcc0.ɵɵelementStart(14, "button", 12);
    ɵngcc0.ɵɵlistener("click", function TaxCategoryListComponent_ng_template_12_Template_button_click_14_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const taxCategory_r2 = restoredCtx.item; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.deleteTaxCategory(taxCategory_r2); });
    ɵngcc0.ɵɵpipe(15, "hasPermission");
    ɵngcc0.ɵɵelement(16, "clr-icon", 13);
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taxCategory_r2 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(taxCategory_r2.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", taxCategory_r2.isDefault);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 7, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(15, _c2, taxCategory_r2.id));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 9, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(15, 11, ɵngcc0.ɵɵpureFunction0(17, _c15)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 13, "common.delete"), " ");
} }
const _c16 = function () { return ["CreateSettings", "CreateTaxCategory"]; };
function TaxRateDetailComponent_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function TaxRateDetailComponent_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", !ctx_r0.saveButtonEnabled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function TaxRateDetailComponent_ng_template_8_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function TaxRateDetailComponent_ng_template_8_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r8.saveButtonEnabled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function TaxRateDetailComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TaxRateDetailComponent_ng_template_8_button_0_Template, 3, 4, "button", 20);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("vdrIfPermissions", ctx_r2.updatePermission);
} }
function TaxRateDetailComponent_option_29_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 21);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taxCategory_r11 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", taxCategory_r11.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", taxCategory_r11.name, " ");
} }
function TaxRateDetailComponent_option_35_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 21);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const zone_r12 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", zone_r12.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(zone_r12.name);
} }
function TaxRateDetailComponent_section_37_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 22);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 23);
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r5.customFields)("customFieldsFormGroup", ctx_r5.detailForm.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, ctx_r5.updatePermission));
} }
function TaxRateListComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 3);
    ɵngcc0.ɵɵelement(1, "clr-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c1));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "settings.create-new-tax-rate"), " ");
} }
const _c17 = function () { return ["DeleteSettings", "DeleteTaxRate"]; };
function TaxRateListComponent_ng_template_23_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 5);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 5);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "td", 5);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "td", 6);
    ɵngcc0.ɵɵelement(9, "vdr-table-row-action", 7);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "td", 6);
    ɵngcc0.ɵɵelementStart(12, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(13, "button", 8);
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelement(16, "clr-icon", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "vdr-dropdown-menu", 10);
    ɵngcc0.ɵɵelementStart(18, "button", 11);
    ɵngcc0.ɵɵlistener("click", function TaxRateListComponent_ng_template_23_Template_button_click_18_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const taxRate_r2 = restoredCtx.item; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.deleteTaxRate(taxRate_r2); });
    ɵngcc0.ɵɵpipe(19, "hasPermission");
    ɵngcc0.ɵɵelement(20, "clr-icon", 12);
    ɵngcc0.ɵɵtext(21);
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taxRate_r2 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(taxRate_r2.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(taxRate_r2.category.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(taxRate_r2.zone.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", taxRate_r2.value, "%");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(10, 9, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(17, _c2, taxRate_r2.id));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 11, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(19, 13, ɵngcc0.ɵɵpureFunction0(19, _c17)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(22, 15, "common.delete"), " ");
} }
const _c18 = function () { return ["CreateSettings", "CreateTaxRate"]; };
function TestAddressFormComponent_option_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const country_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", country_r1.code);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", country_r1.name, " ");
} }
function TestOrderBuilderComponent_table_4_tr_19_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tr", 10);
    ɵngcc0.ɵɵelementStart(1, "td", 11);
    ɵngcc0.ɵɵelement(2, "img", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "td", 13);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "td", 14);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 15);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "localeCurrency");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "td", 16);
    ɵngcc0.ɵɵelementStart(11, "input", 17);
    ɵngcc0.ɵɵlistener("ngModelChange", function TestOrderBuilderComponent_table_4_tr_19_Template_input_ngModelChange_11_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const line_r4 = restoredCtx.$implicit; return line_r4.quantity = $event; })("change", function TestOrderBuilderComponent_table_4_tr_19_Template_input_change_11_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.updateQuantity(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "button", 18);
    ɵngcc0.ɵɵlistener("click", function TestOrderBuilderComponent_table_4_tr_19_Template_button_click_12_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r6); const line_r4 = restoredCtx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.removeLine(line_r4); });
    ɵngcc0.ɵɵelement(13, "clr-icon", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "td", 20);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "localeCurrency");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const line_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("src", line_r4.preview + "?preset=tiny", ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(line_r4.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(line_r4.sku);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(9, 6, line_r4.unitPriceWithTax, ctx_r3.currencyCode), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngModel", line_r4.quantity);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(16, 9, line_r4.unitPriceWithTax * line_r4.quantity, ctx_r3.currencyCode), " ");
} }
function TestOrderBuilderComponent_table_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 6);
    ɵngcc0.ɵɵelementStart(1, "thead");
    ɵngcc0.ɵɵelementStart(2, "tr");
    ɵngcc0.ɵɵelement(3, "th");
    ɵngcc0.ɵɵelementStart(4, "th");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "th");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "th");
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "th");
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "th");
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(19, TestOrderBuilderComponent_table_4_tr_19_Template, 17, 12, "tr", 7);
    ɵngcc0.ɵɵelementStart(20, "tr", 8);
    ɵngcc0.ɵɵelementStart(21, "td", 9);
    ɵngcc0.ɵɵtext(22);
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(24, "td");
    ɵngcc0.ɵɵelement(25, "td");
    ɵngcc0.ɵɵelement(26, "td");
    ɵngcc0.ɵɵelement(27, "td");
    ɵngcc0.ɵɵelementStart(28, "td");
    ɵngcc0.ɵɵtext(29);
    ɵngcc0.ɵɵpipe(30, "localeCurrency");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 8, "order.product-name"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 10, "order.product-sku"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(12, 12, "order.unit-price"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 14, "order.quantity"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(18, 16, "order.total"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.lines);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(23, 18, "order.sub-total"));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(30, 20, ctx_r0.subTotal, ctx_r0.currencyCode));
} }
function TestOrderBuilderComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵelementStart(1, "div", 22);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "clr-icon", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "settings.add-products-to-test-order"));
} }
function ZoneDetailDialogComponent_ng_template_0_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "settings.update-zone"));
} }
function ZoneDetailDialogComponent_ng_template_0_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "settings.create-zone"));
} }
function ZoneDetailDialogComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ZoneDetailDialogComponent_ng_template_0_span_0_Template, 3, 3, "span", 6);
    ɵngcc0.ɵɵtemplate(1, ZoneDetailDialogComponent_ng_template_0_span_1_Template, 3, 3, "span", 6);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.zone.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.zone.id);
} }
function ZoneDetailDialogComponent_ng_template_8_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "settings.update-zone"));
} }
function ZoneDetailDialogComponent_ng_template_8_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "settings.create-zone"));
} }
function ZoneDetailDialogComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function ZoneDetailDialogComponent_ng_template_8_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.cancel(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ZoneDetailDialogComponent_ng_template_8_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.save(); });
    ɵngcc0.ɵɵtemplate(4, ZoneDetailDialogComponent_ng_template_8_span_4_Template, 3, 3, "span", 6);
    ɵngcc0.ɵɵtemplate(5, ZoneDetailDialogComponent_ng_template_8_span_5_Template, 3, 3, "span", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 4, "common.cancel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.form.invalid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.zone.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.zone.id);
} }
const _c19 = function () { return ["UpdateSettings", "UpdateZone"]; };
function ZoneListComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ZoneListComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.create(); });
    ɵngcc0.ɵɵelement(1, "clr-icon", 10);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "settings.create-new-zone"), " ");
} }
const _c20 = function () { return ["DeleteSettings", "DeleteZone"]; };
function ZoneListComponent_tr_12_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵelementStart(2, "td", 11);
    ɵngcc0.ɵɵelement(3, "vdr-entity-info", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 11);
    ɵngcc0.ɵɵelementStart(5, "vdr-chip", 13);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 14);
    ɵngcc0.ɵɵelementStart(8, "a", 15);
    ɵngcc0.ɵɵelement(9, "clr-icon", 16);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "td", 17);
    ɵngcc0.ɵɵelementStart(13, "button", 18);
    ɵngcc0.ɵɵlistener("click", function ZoneListComponent_tr_12_Template_button_click_13_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const zone_r5 = restoredCtx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.update(zone_r5); });
    ɵngcc0.ɵɵelement(14, "clr-icon", 19);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "td", 17);
    ɵngcc0.ɵɵelementStart(18, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(19, "button", 20);
    ɵngcc0.ɵɵtext(20);
    ɵngcc0.ɵɵpipe(21, "translate");
    ɵngcc0.ɵɵelement(22, "clr-icon", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(23, "vdr-dropdown-menu", 22);
    ɵngcc0.ɵɵelementStart(24, "button", 23);
    ɵngcc0.ɵɵlistener("click", function ZoneListComponent_tr_12_Template_button_click_24_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const zone_r5 = restoredCtx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.delete(zone_r5.id); });
    ɵngcc0.ɵɵpipe(25, "hasPermission");
    ɵngcc0.ɵɵelement(26, "clr-icon", 24);
    ɵngcc0.ɵɵtext(27);
    ɵngcc0.ɵɵpipe(28, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const zone_r5 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    let tmp_0_0;
    ɵngcc0.ɵɵclassProp("active", zone_r5.id === ((tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 11, ctx_r1.activeZone$)) == null ? null : tmp_0_0.id));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("entity", zone_r5);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("colorFrom", zone_r5.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(zone_r5.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction1(25, _c2, ɵngcc0.ɵɵpureFunction1(23, _c6, zone_r5.id)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 13, "settings.view-zone-members"), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 15, "common.edit"), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 17, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(25, 19, ɵngcc0.ɵɵpureFunction0(27, _c20)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(28, 21, "common.delete"), " ");
} }
function ZoneListComponent_ng_container_16_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 28);
    ɵngcc0.ɵɵelementStart(2, "div", 29);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "div", 30);
    ɵngcc0.ɵɵelementStart(5, "button", 31);
    ɵngcc0.ɵɵlistener("click", function ZoneListComponent_ng_container_16_div_2_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.closeMembers(); });
    ɵngcc0.ɵɵelement(6, "clr-icon", 32);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 33);
    ɵngcc0.ɵɵelementStart(8, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(9, "button", 34);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelement(12, "clr-icon", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "vdr-dropdown-menu", 22);
    ɵngcc0.ɵɵelementStart(14, "button", 35);
    ɵngcc0.ɵɵlistener("click", function ZoneListComponent_ng_container_16_div_2_Template_button_click_14_listener() { ɵngcc0.ɵɵrestoreView(_r13); const activeZone_r9 = ɵngcc0.ɵɵnextContext().ngIf; const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.removeFromZone(activeZone_r9, ctx_r14.selectedMemberIds); });
    ɵngcc0.ɵɵpipe(15, "hasPermission");
    ɵngcc0.ɵɵelement(16, "clr-icon", 24);
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "button", 36);
    ɵngcc0.ɵɵlistener("click", function ZoneListComponent_ng_container_16_div_2_Template_button_click_19_listener() { ɵngcc0.ɵɵrestoreView(_r13); const activeZone_r9 = ɵngcc0.ɵɵnextContext().ngIf; const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.addToZone(activeZone_r9); });
    ɵngcc0.ɵɵtext(20);
    ɵngcc0.ɵɵpipe(21, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const activeZone_r9 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate2(" ", activeZone_r9.name, " (", activeZone_r9.members.length, ") ");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("disabled", ctx_r10.selectedMemberIds.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 7, "common.with-selected"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(15, 9, ɵngcc0.ɵɵpureFunction0(16, _c19)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 11, "settings.remove-from-zone"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(21, 13, "settings.add-countries-to-zone", ɵngcc0.ɵɵpureFunction1(17, _c0, activeZone_r9.name)), " ");
} }
const _c21 = function (a2) { return ["/settings", "countries", a2]; };
function ZoneListComponent_ng_container_16_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(2, "button", 20);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "clr-icon", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "vdr-dropdown-menu", 22);
    ɵngcc0.ɵɵelementStart(7, "a", 37);
    ɵngcc0.ɵɵelement(8, "clr-icon", 19);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "button", 35);
    ɵngcc0.ɵɵlistener("click", function ZoneListComponent_ng_container_16_div_3_Template_button_click_11_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r22); const member_r19 = restoredCtx.member; const activeZone_r9 = ɵngcc0.ɵɵnextContext().ngIf; const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.removeFromZone(activeZone_r9, [member_r19.id]); });
    ɵngcc0.ɵɵpipe(12, "hasPermission");
    ɵngcc0.ɵɵelement(13, "clr-icon", 24);
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const member_r19 = ctx.member;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 5, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction1(13, _c21, member_r19.id));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 7, "common.edit"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(12, 9, ɵngcc0.ɵɵpureFunction0(15, _c19)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 11, "settings.remove-from-zone"), " ");
} }
function ZoneListComponent_ng_container_16_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "vdr-zone-member-list", 25);
    ɵngcc0.ɵɵlistener("selectionChange", function ZoneListComponent_ng_container_16_Template_vdr_zone_member_list_selectionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.selectedMemberIds = $event; });
    ɵngcc0.ɵɵtemplate(2, ZoneListComponent_ng_container_16_div_2_Template, 22, 19, "div", 26);
    ɵngcc0.ɵɵtemplate(3, ZoneListComponent_ng_container_16_div_3_Template, 16, 16, "div", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const activeZone_r9 = ctx.ngIf;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("members", activeZone_r9.members)("selectedMemberIds", ctx_r2.selectedMemberIds);
} }
const _c22 = function () { return ["CreateSettings", "CreateZone"]; };
function ZoneMemberListComponent_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ZoneMemberListComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ZoneMemberListComponent_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.headerTemplate.templateRef);
} }
function ZoneMemberListComponent_ng_template_16_ng_container_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c23 = function (a0) { return { member: a0 }; };
function ZoneMemberListComponent_ng_template_16_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ZoneMemberListComponent_ng_template_16_ng_container_7_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const member_r3 = ɵngcc0.ɵɵnextContext().item;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.controlsTemplate.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c23, member_r3));
} }
function ZoneMemberListComponent_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 5);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 5);
    ɵngcc0.ɵɵelement(5, "clr-icon");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "td", 6);
    ɵngcc0.ɵɵtemplate(7, ZoneMemberListComponent_ng_template_16_ng_container_7_Template, 2, 4, "ng-container", 1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const member_r3 = ctx.item;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(member_r3.code);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(member_r3.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("is-success", member_r3.enabled);
    ɵngcc0.ɵɵattribute("shape", member_r3.enabled ? "check" : "times");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.controlsTemplate);
} }
class AddCountryToZoneDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.currentMembers = [];
        this.selectedMemberIds = [];
    }
    ngOnInit() {
        const currentMemberIds = this.currentMembers.map(m => m.id);
        this.availableCountries$ = this.dataService.settings
            .getCountries(999)
            .mapStream(data => data.countries.items)
            .pipe(map(countries => countries.filter(c => !currentMemberIds.includes(c.id))));
    }
    cancel() {
        this.resolveWith();
    }
    add() {
        this.resolveWith(this.selectedMemberIds);
    }
}
AddCountryToZoneDialogComponent.ɵfac = function AddCountryToZoneDialogComponent_Factory(t) { return new (t || AddCountryToZoneDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService)); };
AddCountryToZoneDialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddCountryToZoneDialogComponent, selectors: [["vdr-add-country-to-zone-dialog"]], decls: 4, vars: 4, consts: [["vdrDialogTitle", ""], [3, "members", "selectedMemberIds", "selectionChange"], ["vdrDialogButtons", ""], ["type", "button", 1, "btn", 3, "click"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "click"]], template: function AddCountryToZoneDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AddCountryToZoneDialogComponent_ng_template_0_Template, 2, 6, "ng-template", 0);
        ɵngcc0.ɵɵelementStart(1, "vdr-zone-member-list", 1);
        ɵngcc0.ɵɵlistener("selectionChange", function AddCountryToZoneDialogComponent_Template_vdr_zone_member_list_selectionChange_1_listener($event) { return ctx.selectedMemberIds = $event; });
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, AddCountryToZoneDialogComponent_ng_template_3_Template, 6, 10, "ng-template", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("members", ɵngcc0.ɵɵpipeBind1(2, 2, ctx.availableCountries$))("selectedMemberIds", ctx.selectedMemberIds);
    } }, directives: function () { return [ɵngcc1.DialogTitleDirective, ZoneMemberListComponent, ɵngcc1.DialogButtonsDirective]; }, pipes: function () { return [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe]; }, styles: [""], changeDetection: 0 });
AddCountryToZoneDialogComponent.ctorParameters = () => [
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddCountryToZoneDialogComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-add-country-to-zone-dialog',
                template: "<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\r\n\r\n<vdr-zone-member-list\r\n    [members]=\"availableCountries$ | async\"\r\n    [selectedMemberIds]=\"selectedMemberIds\"\r\n    (selectionChange)=\"selectedMemberIds = $event\"\r\n>\r\n</vdr-zone-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\r\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\r\n    </button>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }]; }, null); })();

class AdminDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.selectedRoles = [];
        this.selectedRolePermissions = {};
        this.selectedChannelId = null;
        this.customFields = this.getCustomFieldConfig('Administrator');
        this.detailForm = this.formBuilder.group({
            emailAddress: ['', Validators.required],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            password: [''],
            roles: [[]],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    getAvailableChannels() {
        return Object.values(this.selectedRolePermissions);
    }
    ngOnInit() {
        this.init();
        this.administrator$ = this.entity$;
        this.allRoles$ = this.dataService.administrator
            .getRoles(999)
            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));
        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {
            if (!userStatus.permissions.includes(Permission.UpdateAdministrator)) {
                const rolesSelect = this.detailForm.get('roles');
                if (rolesSelect) {
                    rolesSelect.disable();
                }
            }
        });
        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();
    }
    ngOnDestroy() {
        this.destroy();
    }
    rolesChanged(roles) {
        this.buildPermissionsMap();
    }
    getPermissionsForSelectedChannel() {
        function getActivePermissions(input) {
            return Object.entries(input)
                .filter(([permission, active]) => active)
                .map(([permission, active]) => permission);
        }
        if (this.selectedChannelId) {
            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];
            if (selectedChannel) {
                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;
                return getActivePermissions(permissionMap);
            }
        }
        const channels = Object.values(this.selectedRolePermissions);
        if (0 < channels.length) {
            this.selectedChannelId = channels[0].channelId;
            return getActivePermissions(channels[0].permissions);
        }
        return [];
    }
    create() {
        const formValue = this.detailForm.value;
        const administrator = {
            emailAddress: formValue.emailAddress,
            firstName: formValue.firstName,
            lastName: formValue.lastName,
            password: formValue.password,
            customFields: formValue.customFields,
            roleIds: formValue.roles.map(role => role.id),
        };
        this.dataService.administrator.createAdministrator(administrator).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Administrator',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Administrator',
            });
        });
    }
    save() {
        this.administrator$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const administrator = {
                id,
                emailAddress: formValue.emailAddress,
                firstName: formValue.firstName,
                lastName: formValue.lastName,
                password: formValue.password,
                customFields: formValue.customFields,
                roleIds: formValue.roles.map(role => role.id),
            };
            return this.dataService.administrator.updateAdministrator(administrator);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Administrator',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Administrator',
            });
        });
    }
    setFormValues(administrator, languageCode) {
        this.detailForm.patchValue({
            emailAddress: administrator.emailAddress,
            firstName: administrator.firstName,
            lastName: administrator.lastName,
            roles: administrator.user.roles,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), administrator);
        }
        const passwordControl = this.detailForm.get('password');
        if (passwordControl) {
            if (!administrator.id) {
                passwordControl.setValidators([Validators.required]);
            }
            else {
                passwordControl.setValidators([]);
            }
        }
        this.buildPermissionsMap();
    }
    buildPermissionsMap() {
        const permissionsControl = this.detailForm.get('roles');
        if (permissionsControl) {
            const roles = permissionsControl.value;
            const channelIdPermissionsMap = new Map();
            const channelIdCodeMap = new Map();
            for (const role of roles) {
                for (const channel of role.channels) {
                    const channelPermissions = channelIdPermissionsMap.get(channel.id);
                    const permissionSet = channelPermissions || new Set();
                    role.permissions.forEach(p => permissionSet.add(p));
                    channelIdPermissionsMap.set(channel.id, permissionSet);
                    channelIdCodeMap.set(channel.id, channel.code);
                }
            }
            this.selectedRolePermissions = {};
            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {
                // tslint:disable-next-line:no-non-null-assertion
                const permissionSet = channelIdPermissionsMap.get(channelId);
                const permissionsHash = {};
                for (const def of this.serverConfigService.getPermissionDefinitions()) {
                    permissionsHash[def.name] = permissionSet.has(def.name);
                }
                this.selectedRolePermissions[channelId] = {
                    // tslint:disable:no-non-null-assertion
                    channelId,
                    channelCode: channelIdCodeMap.get(channelId),
                    permissions: permissionsHash,
                    // tslint:enable:no-non-null-assertion
                };
            }
        }
    }
}
AdminDetailComponent.ɵfac = function AdminDetailComponent_Factory(t) { return new (t || AdminDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
AdminDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AdminDetailComponent, selectors: [["vdr-admin-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 38, vars: 49, consts: [[3, "entity"], ["locationId", "administrator-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], [1, "form", 3, "formGroup"], ["for", "emailAddress", 3, "label"], ["id", "emailAddress", "type", "text", "formControlName", "emailAddress", 3, "readonly"], ["for", "firstName", 3, "label"], ["id", "firstName", "type", "text", "formControlName", "firstName", 3, "readonly"], ["for", "lastName", 3, "label"], ["id", "lastName", "type", "text", "formControlName", "lastName", 3, "readonly"], ["for", "password", 3, "label", 4, "ngIf"], ["for", "password", 3, "label", "readOnlyToggle", 4, "ngIf"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "administrator-detail", 3, "entity$", "detailForm"], [1, "clr-control-label"], ["formControlName", "roles", "bindLabel", "description", 3, "items", "multiple", "hideSelected", "change"], ["role", "tablist", 1, "nav"], ["role", "presentation", "class", "nav-item", 4, "ngFor", "ngForOf"], [3, "activePermissions", "permissionDefinitions", "readonly"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], ["for", "password", 3, "label"], ["id", "password", "type", "password", "formControlName", "password"], ["for", "password", 3, "label", "readOnlyToggle"], ["formGroupName", "customFields"], ["entityName", "Administrator", 3, "customFields", "customFieldsFormGroup", "readonly"], ["role", "presentation", 1, "nav-item"], ["type", "button", 1, "btn", "btn-link", "nav-link", 3, "id", "click"]], template: function AdminDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(6, AdminDetailComponent_button_6_Template, 3, 4, "button", 2);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵtemplate(8, AdminDetailComponent_ng_template_8_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "form", 4);
        ɵngcc0.ɵɵelementStart(11, "vdr-form-field", 5);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelement(13, "input", 6);
        ɵngcc0.ɵɵpipe(14, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-form-field", 7);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelement(17, "input", 8);
        ɵngcc0.ɵɵpipe(18, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "vdr-form-field", 9);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelement(21, "input", 10);
        ɵngcc0.ɵɵpipe(22, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(23, AdminDetailComponent_vdr_form_field_23_Template, 3, 3, "vdr-form-field", 11);
        ɵngcc0.ɵɵpipe(24, "async");
        ɵngcc0.ɵɵtemplate(25, AdminDetailComponent_vdr_form_field_25_Template, 3, 4, "vdr-form-field", 12);
        ɵngcc0.ɵɵpipe(26, "async");
        ɵngcc0.ɵɵpipe(27, "hasPermission");
        ɵngcc0.ɵɵtemplate(28, AdminDetailComponent_section_28_Template, 6, 8, "section", 13);
        ɵngcc0.ɵɵelement(29, "vdr-custom-detail-component-host", 14);
        ɵngcc0.ɵɵelementStart(30, "label", 15);
        ɵngcc0.ɵɵtext(31);
        ɵngcc0.ɵɵpipe(32, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(33, "ng-select", 16);
        ɵngcc0.ɵɵlistener("change", function AdminDetailComponent_Template_ng_select_change_33_listener($event) { return ctx.rolesChanged($event); });
        ɵngcc0.ɵɵpipe(34, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(35, "ul", 17);
        ɵngcc0.ɵɵtemplate(36, AdminDetailComponent_li_36_Template, 5, 9, "li", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(37, "vdr-permission-grid", 19);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 23, ctx.entity$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(7, 25, ctx.isNew$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(12, 27, "settings.email-address"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(14, 29, "UpdateAdministrator"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(16, 31, "settings.first-name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(18, 33, "UpdateAdministrator"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(20, 35, "settings.last-name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(22, 37, "UpdateAdministrator"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(24, 39, ctx.isNew$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(26, 41, ctx.isNew$) && ɵngcc0.ɵɵpipeBind1(27, 43, "UpdateAdministrator"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("entity$", ctx.entity$)("detailForm", ctx.detailForm);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(32, 45, "settings.roles"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(34, 47, ctx.allRoles$))("multiple", true)("hideSelected", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.getAvailableChannels());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("activePermissions", ctx.getPermissionsForSelectedChannel())("permissionDefinitions", ctx.permissionDefinitions)("readonly", true);
    } }, directives: function () { return [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc2.NgIf, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc6.ClrLabel, ɵngcc7.NgSelectComponent, ɵngcc2.NgForOf, PermissionGridComponent, ɵngcc1.IfPermissionsDirective, ɵngcc5.FormGroupName, ɵngcc1.TabbedCustomFieldsComponent]; }, pipes: function () { return [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe, ɵngcc1.ChannelLabelPipe]; }, styles: [""], changeDetection: 0 });
AdminDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AdminDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-admin-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\r\n        <input\r\n            id=\"emailAddress\"\r\n            type=\"text\"\r\n            formControlName=\"emailAddress\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n        <input\r\n            id=\"firstName\"\r\n            type=\"text\"\r\n            formControlName=\"firstName\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n        <input\r\n            id=\"lastName\"\r\n            type=\"text\"\r\n            formControlName=\"lastName\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        *ngIf=\"!(isNew$ | async) && ('UpdateAdministrator' | hasPermission)\"\r\n        [label]=\"'settings.password' | translate\"\r\n        for=\"password\"\r\n        [readOnlyToggle]=\"true\"\r\n    >\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Administrator\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"administrator-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n    <label class=\"clr-control-label\">{{ 'settings.roles' | translate }}</label>\r\n    <ng-select\r\n        [items]=\"allRoles$ | async\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        formControlName=\"roles\"\r\n        (change)=\"rolesChanged($event)\"\r\n        bindLabel=\"description\"\r\n    ></ng-select>\r\n\r\n    <ul class=\"nav\" role=\"tablist\">\r\n        <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\r\n            <button\r\n                [id]=\"channel.channelId\"\r\n                (click)=\"selectedChannelId = channel.channelId\"\r\n                class=\"btn btn-link nav-link\"\r\n                [class.active]=\"selectedChannelId === channel.channelId\"\r\n                [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\r\n                type=\"button\"\r\n            >\r\n                {{ channel.channelCode | channelCodeToLabel | translate }}\r\n            </button>\r\n        </li>\r\n    </ul>\r\n    <vdr-permission-grid\r\n        [activePermissions]=\"getPermissionsForSelectedChannel()\"\r\n        [permissionDefinitions]=\"permissionDefinitions\"\r\n        [readonly]=\"true\"\r\n    ></vdr-permission-grid>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class AdministratorListComponent extends BaseListComponent {
    constructor(dataService, router, route, modalService, notificationService) {
        super(router, route);
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        super.setQueryFn((...args) => this.dataService.administrator.getAdministrators(...args), (data) => data.administrators);
    }
    deleteAdministrator(administrator) {
        return this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-administrator'),
            body: `${administrator.firstName} ${administrator.lastName}`,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap((res) => res ? this.dataService.administrator.deleteAdministrator(administrator.id) : EMPTY))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Administrator',
            });
            this.refresh();
        }, (err) => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'Administrator',
            });
        });
    }
}
AdministratorListComponent.ɵfac = function AdministratorListComponent_Factory(t) { return new (t || AdministratorListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
AdministratorListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AdministratorListComponent, selectors: [["vdr-administrator-list"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 21, vars: 22, consts: [["locationId", "administrator-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "pageChange", "itemsPerPageChange"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"]], template: function AdministratorListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-right");
        ɵngcc0.ɵɵelement(2, "vdr-action-bar-items", 0);
        ɵngcc0.ɵɵtemplate(3, AdministratorListComponent_a_3_Template, 4, 5, "a", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-data-table", 2);
        ɵngcc0.ɵɵlistener("pageChange", function AdministratorListComponent_Template_vdr_data_table_pageChange_4_listener($event) { return ctx.setPageNumber($event); })("itemsPerPageChange", function AdministratorListComponent_Template_vdr_data_table_itemsPerPageChange_4_listener($event) { return ctx.setItemsPerPage($event); });
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementStart(9, "vdr-dt-column");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "vdr-dt-column");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-dt-column");
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(18, "vdr-dt-column");
        ɵngcc0.ɵɵelement(19, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(20, AdministratorListComponent_ng_template_20_Template, 21, 18, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", "CreateAdministrator");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(5, 8, ctx.items$))("itemsPerPage", ɵngcc0.ɵɵpipeBind1(6, 10, ctx.itemsPerPage$))("totalItems", ɵngcc0.ɵɵpipeBind1(7, 12, ctx.totalItems$))("currentPage", ɵngcc0.ɵɵpipeBind1(8, 14, ctx.currentPage$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 16, "settings.first-name"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 18, "settings.last-name"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 20, "settings.email-address"));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc4.RouterLinkWithHref, ɵngcc6.ClrIconCustomTag, ɵngcc1.TableRowActionComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""] });
AdministratorListComponent.ctorParameters = () => [
    { type: DataService },
    { type: Router },
    { type: ActivatedRoute },
    { type: ModalService },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AdministratorListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-administrator-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'admin.create-new-administrator' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'settings.first-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.last-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-administrator=\"item\">\r\n        <td class=\"left align-middle\">{{ administrator.firstName }}</td>\r\n        <td class=\"left align-middle\">{{ administrator.lastName }}</td>\r\n        <td class=\"left align-middle\">{{ administrator.emailAddress }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', administrator.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteAdministrator(administrator)\"\r\n                        [disabled]=\"!('DeleteAdministrator' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }]; }, null); })();

class ChannelDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.serverConfigService = serverConfigService;
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.currencyCodes = Object.values(CurrencyCode);
        this.updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];
        this.customFields = this.getCustomFieldConfig('Channel');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            token: ['', Validators.required],
            pricesIncludeTax: [false],
            currencyCode: [''],
            defaultShippingZoneId: ['', Validators.required],
            defaultLanguageCode: [],
            defaultTaxZoneId: ['', Validators.required],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);
        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();
    }
    ngOnDestroy() {
        this.destroy();
    }
    saveButtonEnabled() {
        return this.detailForm.dirty && this.detailForm.valid;
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        const input = {
            code: formValue.code,
            token: formValue.token,
            defaultLanguageCode: formValue.defaultLanguageCode,
            pricesIncludeTax: formValue.pricesIncludeTax,
            currencyCode: formValue.currencyCode,
            defaultShippingZoneId: formValue.defaultShippingZoneId,
            defaultTaxZoneId: formValue.defaultTaxZoneId,
            customFields: formValue.customFields,
        };
        this.dataService.settings
            .createChannel(input)
            .pipe(mergeMap(({ createChannel }) => this.dataService.auth.currentUser().single$.pipe(map(({ me }) => ({
            me,
            createChannel,
        })))), mergeMap(({ me, createChannel }) => 
        // tslint:disable-next-line:no-non-null-assertion
        this.dataService.client.updateUserChannels(me.channels).pipe(map(() => createChannel))))
            .subscribe(data => {
            switch (data.__typename) {
                case 'Channel':
                    this.notificationService.success(marker('common.notify-create-success'), {
                        entity: 'Channel',
                    });
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    this.router.navigate(['../', data.id], { relativeTo: this.route });
                    break;
                case 'LanguageNotAvailableError':
                    this.notificationService.error(data.message);
                    break;
            }
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.entity$
            .pipe(take(1), mergeMap(channel => {
            const input = {
                id: channel.id,
                code: formValue.code,
                token: formValue.token,
                pricesIncludeTax: formValue.pricesIncludeTax,
                currencyCode: formValue.currencyCode,
                defaultShippingZoneId: formValue.defaultShippingZoneId,
                defaultLanguageCode: formValue.defaultLanguageCode,
                defaultTaxZoneId: formValue.defaultTaxZoneId,
                customFields: formValue.customFields,
            };
            return this.dataService.settings.updateChannel(input);
        }))
            .subscribe(({ updateChannel }) => {
            switch (updateChannel.__typename) {
                case 'Channel':
                    this.notificationService.success(marker('common.notify-update-success'), {
                        entity: 'Channel',
                    });
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    break;
                case 'LanguageNotAvailableError':
                    this.notificationService.error(updateChannel.message);
            }
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            code: entity.code,
            token: entity.token || this.generateToken(),
            pricesIncludeTax: entity.pricesIncludeTax,
            currencyCode: entity.currencyCode,
            defaultShippingZoneId: entity.defaultShippingZone ? entity.defaultShippingZone.id : '',
            defaultLanguageCode: entity.defaultLanguageCode,
            defaultTaxZoneId: entity.defaultTaxZone ? entity.defaultTaxZone.id : '',
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);
        }
        if (entity.code === DEFAULT_CHANNEL_CODE) {
            const codeControl = this.detailForm.get('code');
            if (codeControl) {
                codeControl.disable();
            }
        }
    }
    generateToken() {
        const randomString = () => Math.random().toString(36).substr(3, 10);
        return `${randomString()}${randomString()}`;
    }
}
ChannelDetailComponent.ɵfac = function ChannelDetailComponent_Factory(t) { return new (t || ChannelDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
ChannelDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ChannelDetailComponent, selectors: [["vdr-channel-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 53, vars: 65, consts: [[3, "entity"], ["locationId", "channel-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], [1, "form", 3, "formGroup"], ["for", "code", 3, "label"], ["id", "code", "type", "text", "formControlName", "code", 3, "readonly"], ["for", "token", 3, "label"], ["id", "token", "type", "text", "formControlName", "token", 3, "readonly"], ["for", "defaultTaxZoneId", 3, "label"], ["clrSelect", "", "name", "currencyCode", "formControlName", "currencyCode", 3, "vdrDisabled"], [3, "value", 4, "ngFor", "ngForOf"], ["for", "defaultLanguage", 3, "label"], ["clrSelect", "", "name", "defaultLanguageCode", "formControlName", "defaultLanguageCode", 3, "vdrDisabled"], ["for", "pricesIncludeTax", 3, "label"], ["type", "checkbox", "clrToggle", "", "id", "pricesIncludeTax", "formControlName", "pricesIncludeTax", 3, "vdrDisabled"], ["clrSelect", "", "name", "defaultTaxZoneId", "formControlName", "defaultTaxZoneId", 3, "vdrDisabled"], ["selected", "", "value", "", 2, "display", "none"], ["clrAlertType", "danger", 3, "clrAlertClosable", 4, "ngIf"], ["for", "defaultShippingZoneId", 3, "label"], ["clrSelect", "", "name", "defaultShippingZoneId", "formControlName", "defaultShippingZoneId", 3, "vdrDisabled"], ["clrAlertType", "warning", 3, "clrAlertClosable", 4, "ngIf"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "channel-detail", 3, "entity$", "detailForm"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], [3, "value"], ["clrAlertType", "danger", 3, "clrAlertClosable"], [1, "alert-text"], ["clrAlertType", "warning", 3, "clrAlertClosable"], ["formGroupName", "customFields"], ["entityName", "Channel", 3, "customFields", "customFieldsFormGroup", "readonly"]], template: function ChannelDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(6, ChannelDetailComponent_button_6_Template, 3, 4, "button", 2);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵtemplate(8, ChannelDetailComponent_ng_template_8_Template, 1, 2, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "form", 4);
        ɵngcc0.ɵɵelementStart(11, "vdr-form-field", 5);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelement(13, "input", 6);
        ɵngcc0.ɵɵpipe(14, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-form-field", 7);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelement(17, "input", 8);
        ɵngcc0.ɵɵpipe(18, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "vdr-form-field", 9);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementStart(21, "select", 10);
        ɵngcc0.ɵɵpipe(22, "hasPermission");
        ɵngcc0.ɵɵtemplate(23, ChannelDetailComponent_option_23_Template, 3, 4, "option", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "vdr-form-field", 12);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementStart(26, "select", 13);
        ɵngcc0.ɵɵpipe(27, "hasPermission");
        ɵngcc0.ɵɵtemplate(28, ChannelDetailComponent_option_28_Template, 4, 7, "option", 11);
        ɵngcc0.ɵɵpipe(29, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "vdr-form-field", 14);
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementStart(32, "clr-toggle-wrapper");
        ɵngcc0.ɵɵelement(33, "input", 15);
        ɵngcc0.ɵɵpipe(34, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(35, "vdr-form-field", 9);
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementStart(37, "select", 16);
        ɵngcc0.ɵɵpipe(38, "hasPermission");
        ɵngcc0.ɵɵelement(39, "option", 17);
        ɵngcc0.ɵɵtemplate(40, ChannelDetailComponent_option_40_Template, 2, 2, "option", 11);
        ɵngcc0.ɵɵpipe(41, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(42, ChannelDetailComponent_clr_alert_42_Template, 5, 4, "clr-alert", 18);
        ɵngcc0.ɵɵelementStart(43, "vdr-form-field", 19);
        ɵngcc0.ɵɵpipe(44, "translate");
        ɵngcc0.ɵɵelementStart(45, "select", 20);
        ɵngcc0.ɵɵpipe(46, "hasPermission");
        ɵngcc0.ɵɵelement(47, "option", 17);
        ɵngcc0.ɵɵtemplate(48, ChannelDetailComponent_option_48_Template, 2, 2, "option", 11);
        ɵngcc0.ɵɵpipe(49, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(50, ChannelDetailComponent_clr_alert_50_Template, 5, 4, "clr-alert", 21);
        ɵngcc0.ɵɵtemplate(51, ChannelDetailComponent_section_51_Template, 6, 8, "section", 22);
        ɵngcc0.ɵɵelement(52, "vdr-custom-detail-component-host", 23);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 27, ctx.entity$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(7, 29, ctx.isNew$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(12, 31, "common.code"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(14, 33, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(16, 35, "settings.channel-token"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(18, 37, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(20, 39, "settings.currency"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(22, 41, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.currencyCodes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(25, 43, "common.default-language"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(27, 45, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(29, 47, ctx.availableLanguageCodes$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(31, 49, "settings.prices-include-tax"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(34, 51, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(36, 53, "settings.default-tax-zone"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(38, 55, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(41, 57, ctx.zones$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.detailForm.value.code && !ctx.detailForm.value.defaultTaxZoneId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(44, 59, "settings.default-shipping-zone"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(46, 61, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(49, 63, ctx.zones$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.detailForm.value.code && !ctx.detailForm.value.defaultShippingZoneId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("entity$", ctx.entity$)("detailForm", ctx.detailForm);
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc2.NgIf, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc5.SelectControlValueAccessor, ɵngcc6.ClrSelect, ɵngcc1.DisabledDirective, ɵngcc2.NgForOf, ɵngcc6.ClrCheckboxWrapper, ɵngcc5.CheckboxControlValueAccessor, ɵngcc6.ClrCheckbox, ɵngcc5.NgSelectOption, ɵngcc5.ɵNgSelectMultipleOption, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc1.IfPermissionsDirective, ɵngcc6.ClrAlert, ɵngcc6.ClrAlertItem, ɵngcc6.ClrAlertText, ɵngcc5.FormGroupName, ɵngcc6.ClrLabel, ɵngcc1.TabbedCustomFieldsComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe, ɵngcc1.LocaleCurrencyNamePipe, ɵngcc1.LocaleLanguageNamePipe, ɵngcc2.UpperCasePipe], styles: ["clr-alert[_ngcontent-%COMP%]{max-width:30rem;margin-bottom:12px}"], changeDetection: 0 });
ChannelDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChannelDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-channel-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"channel-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"['SuperAdmin', 'UpdateChannel']\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            formControlName=\"code\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.channel-token' | translate\" for=\"token\">\r\n        <input\r\n            id=\"token\"\r\n            type=\"text\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            formControlName=\"token\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.currency' | translate\" for=\"defaultTaxZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"currencyCode\"\r\n            formControlName=\"currencyCode\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let code of currencyCodes\" [value]=\"code\">{{ code | localeCurrencyName }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.default-language' | translate\" for=\"defaultLanguage\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultLanguageCode\"\r\n            formControlName=\"defaultLanguageCode\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let languageCode of availableLanguageCodes$ | async\" [value]=\"languageCode\">\r\n                {{ languageCode | localeLanguageName }} ({{ languageCode | uppercase }})\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.prices-include-tax' | translate\" for=\"pricesIncludeTax\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"pricesIncludeTax\"\r\n                formControlName=\"pricesIncludeTax\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.default-tax-zone' | translate\" for=\"defaultTaxZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultTaxZoneId\"\r\n            formControlName=\"defaultTaxZoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option selected value style=\"display: none\"></option>\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <clr-alert\r\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultTaxZoneId\"\r\n        clrAlertType=\"danger\"\r\n        [clrAlertClosable]=\"false\"\r\n    >\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'error.no-default-tax-zone-set' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <vdr-form-field [label]=\"'settings.default-shipping-zone' | translate\" for=\"defaultShippingZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultShippingZoneId\"\r\n            formControlName=\"defaultShippingZoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option selected value style=\"display: none\"></option>\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <clr-alert\r\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultShippingZoneId\"\r\n        clrAlertType=\"warning\"\r\n        [clrAlertClosable]=\"false\"\r\n    >\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'error.no-default-shipping-zone-set' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Channel\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"channel-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["clr-alert{max-width:30rem;margin-bottom:12px}\n"]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class ChannelListComponent {
    constructor(dataService, modalService, notificationService) {
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.refresh$ = new Subject();
        this.channels$ = this.refresh$.pipe(startWith(1), switchMap(() => this.dataService.settings.getChannels().mapStream(data => data.channels)));
    }
    isDefaultChannel(channelCode) {
        return channelCode === DEFAULT_CHANNEL_CODE;
    }
    deleteChannel(id) {
        this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-channel'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => (response ? this.dataService.settings.deleteChannel(id) : EMPTY)), mergeMap(() => this.dataService.auth.currentUser().single$), 
        // tslint:disable-next-line:no-non-null-assertion
        mergeMap(data => this.dataService.client.updateUserChannels(data.me.channels)))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Channel',
            });
            this.refresh$.next(1);
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'Channel',
            });
        });
    }
}
ChannelListComponent.ɵfac = function ChannelListComponent_Factory(t) { return new (t || ChannelListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
ChannelListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ChannelListComponent, selectors: [["vdr-channel-list"]], decls: 12, vars: 8, consts: [["locationId", "channel-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [3, "channelCode"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm", 3, "disabled"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"]], template: function ChannelListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-right");
        ɵngcc0.ɵɵelement(2, "vdr-action-bar-items", 0);
        ɵngcc0.ɵɵtemplate(3, ChannelListComponent_a_3_Template, 4, 5, "a", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-data-table", 2);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementStart(6, "vdr-dt-column");
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "vdr-dt-column");
        ɵngcc0.ɵɵelement(10, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(11, ChannelListComponent_ng_template_11_Template, 20, 23, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", ɵngcc0.ɵɵpureFunction0(7, _c5));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(5, 3, ctx.channels$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 5, "common.code"));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc4.RouterLinkWithHref, ɵngcc6.ClrIconCustomTag, ɵngcc1.ChannelBadgeComponent, ɵngcc1.TableRowActionComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.ChannelLabelPipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
ChannelListComponent.ctorParameters = () => [
    { type: DataService },
    { type: ModalService },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChannelListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-channel-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"channel-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['SuperAdmin', 'CreateChannel']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-channel' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table [items]=\"channels$ | async\">\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-channel=\"item\">\r\n        <td class=\"left align-middle\">\r\n            <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n            {{ channel.code | channelCodeToLabel | translate }}\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', channel.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultChannel(channel.code)\">\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteChannel(channel.id)\"\r\n                        [disabled]=\"!(['SuperAdmin', 'DeleteChannel'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }]; }, null); })();

class CountryDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];
        this.customFields = this.getCustomFieldConfig('Country');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            name: ['', Validators.required],
            enabled: [true],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
        this.country$ = this.entity$;
    }
    ngOnDestroy() {
        this.destroy();
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        combineLatest(this.country$, this.languageCode$)
            .pipe(take(1), mergeMap(([country, languageCode]) => {
            const formValue = this.detailForm.value;
            const input = createUpdatedTranslatable({
                translatable: country,
                updatedFields: formValue,
                customFieldConfig: this.customFields,
                languageCode,
                defaultTranslation: {
                    name: formValue.name,
                    languageCode,
                },
            });
            return this.dataService.settings.createCountry(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Country',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Country',
            });
        });
    }
    save() {
        combineLatest(this.country$, this.languageCode$)
            .pipe(take(1), mergeMap(([country, languageCode]) => {
            const formValue = this.detailForm.value;
            const input = createUpdatedTranslatable({
                translatable: country,
                updatedFields: formValue,
                customFieldConfig: this.customFields,
                languageCode,
                defaultTranslation: {
                    name: formValue.name,
                    languageCode,
                },
            });
            return this.dataService.settings.updateCountry(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Country',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Country',
            });
        });
    }
    setFormValues(country, languageCode) {
        const currentTranslation = findTranslation(country, languageCode);
        this.detailForm.patchValue({
            code: country.code,
            name: currentTranslation ? currentTranslation.name : '',
            enabled: country.enabled,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), country, currentTranslation);
        }
    }
}
CountryDetailComponent.ɵfac = function CountryDetailComponent_Factory(t) { return new (t || CountryDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
CountryDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CountryDetailComponent, selectors: [["vdr-country-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 30, vars: 38, consts: [[3, "entity"], [3, "disabled", "availableLanguageCodes", "currentLanguageCode", "languageCodeChange"], ["locationId", "country-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], [1, "form", 3, "formGroup"], ["for", "code", 3, "label"], ["id", "code", "type", "text", "formControlName", "code", 3, "readonly"], ["for", "name", 3, "label"], ["id", "name", "type", "text", "formControlName", "name", 3, "readonly"], ["for", "enabled", 3, "label"], ["type", "checkbox", "clrToggle", "", "id", "enabled", "formControlName", "enabled", 3, "vdrDisabled"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "country-detail", 3, "entity$", "detailForm"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], ["formGroupName", "customFields"], ["entityName", "Country", 3, "customFields", "customFieldsFormGroup", "readonly"]], template: function CountryDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementStart(4, "vdr-language-selector", 1);
        ɵngcc0.ɵɵlistener("languageCodeChange", function CountryDetailComponent_Template_vdr_language_selector_languageCodeChange_4_listener($event) { return ctx.setLanguage($event); });
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "vdr-ab-right");
        ɵngcc0.ɵɵelement(9, "vdr-action-bar-items", 2);
        ɵngcc0.ɵɵtemplate(10, CountryDetailComponent_button_10_Template, 3, 4, "button", 3);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵtemplate(12, CountryDetailComponent_ng_template_12_Template, 1, 1, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "form", 5);
        ɵngcc0.ɵɵelementStart(15, "vdr-form-field", 6);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelement(17, "input", 7);
        ɵngcc0.ɵɵpipe(18, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "vdr-form-field", 8);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelement(21, "input", 9);
        ɵngcc0.ɵɵpipe(22, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "vdr-form-field", 10);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵelementStart(25, "clr-toggle-wrapper");
        ɵngcc0.ɵɵelement(26, "input", 11);
        ɵngcc0.ɵɵpipe(27, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(28, CountryDetailComponent_section_28_Template, 6, 8, "section", 12);
        ɵngcc0.ɵɵelement(29, "vdr-custom-detail-component-host", 13);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(13);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 16, ctx.entity$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ɵngcc0.ɵɵpipeBind1(5, 18, ctx.isNew$))("availableLanguageCodes", ɵngcc0.ɵɵpipeBind1(6, 20, ctx.availableLanguages$))("currentLanguageCode", ɵngcc0.ɵɵpipeBind1(7, 22, ctx.languageCode$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(11, 24, ctx.isNew$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(16, 26, "common.code"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(18, 28, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(20, 30, "common.name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(22, 32, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(24, 34, "common.enabled"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(27, 36, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("entity$", ctx.entity$)("detailForm", ctx.detailForm);
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.LanguageSelectorComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc2.NgIf, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc6.ClrCheckboxWrapper, ɵngcc5.CheckboxControlValueAccessor, ɵngcc6.ClrCheckbox, ɵngcc1.DisabledDirective, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc1.IfPermissionsDirective, ɵngcc5.FormGroupName, ɵngcc6.ClrLabel, ɵngcc1.TabbedCustomFieldsComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
CountryDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CountryDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-country-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"country-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                formControlName=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Country\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"country-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class CountryListComponent {
    constructor(dataService, notificationService, modalService, serverConfigService) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.serverConfigService = serverConfigService;
        this.searchTerm = new FormControl('');
        this.countries = [];
        this.destroy$ = new Subject();
        this.refresh$ = new Subject();
    }
    ngOnInit() {
        this.contentLanguage$ = this.dataService.client
            .uiState()
            .mapStream(({ uiState }) => uiState.contentLanguage);
        const countries$ = combineLatest(this.contentLanguage$, this.searchTerm.valueChanges.pipe(startWith(null))).pipe(map(([__, term]) => term), switchMap(term => this.dataService.settings.getCountries(999, 0, term).single$), tap(data => {
            this.countries = data.countries.items;
        }), map(data => data.countries.items));
        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);
        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(map(([countries, zones]) => {
            return countries.map(country => (Object.assign(Object.assign({}, country), { zones: zones.filter(z => !!z.members.find(c => c.id === country.id)) })));
        }));
        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();
    }
    ngOnDestroy() {
        this.destroy$.next(undefined);
        this.destroy$.complete();
    }
    setLanguage(code) {
        this.dataService.client.setContentLanguage(code).subscribe();
    }
    deleteCountry(countryId) {
        this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-country'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response ? this.dataService.settings.deleteCountry(countryId) : EMPTY))
            .subscribe(response => {
            if (response.deleteCountry.result === DeletionResult.DELETED) {
                this.notificationService.success(marker('common.notify-delete-success'), {
                    entity: 'Country',
                });
                this.dataService.settings.getCountries(999, 0).single$.subscribe();
            }
            else {
                this.notificationService.error(response.deleteCountry.message || '');
            }
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'Country',
            });
        });
    }
    isZone(input) {
        return input.hasOwnProperty('id');
    }
}
CountryListComponent.ɵfac = function CountryListComponent_Factory(t) { return new (t || CountryListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService)); };
CountryListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CountryListComponent, selectors: [["vdr-country-list"]], decls: 27, vars: 28, consts: [["type", "text", "name", "searchTerm", 1, "search-input", 3, "formControl", "placeholder"], [3, "availableLanguageCodes", "currentLanguageCode", "languageCodeChange"], ["locationId", "country-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items"], [3, "expand"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [3, "routerLink", 4, "ngFor", "ngForOf"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"], [3, "routerLink"], [3, "colorFrom"]], template: function CountryListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "input", 0);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementStart(4, "vdr-language-selector", 1);
        ɵngcc0.ɵɵlistener("languageCodeChange", function CountryListComponent_Template_vdr_language_selector_languageCodeChange_4_listener($event) { return ctx.setLanguage($event); });
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "vdr-ab-right");
        ɵngcc0.ɵɵelement(8, "vdr-action-bar-items", 2);
        ɵngcc0.ɵɵtemplate(9, CountryListComponent_a_9_Template, 4, 5, "a", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "vdr-data-table", 4);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵelementStart(12, "vdr-dt-column");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-dt-column", 5);
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "vdr-dt-column");
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "vdr-dt-column");
        ɵngcc0.ɵɵtext(22);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(24, "vdr-dt-column");
        ɵngcc0.ɵɵelement(25, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(26, CountryListComponent_ng_template_26_Template, 23, 22, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formControl", ctx.searchTerm)("placeholder", ɵngcc0.ɵɵpipeBind1(3, 11, "settings.search-country-by-name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("availableLanguageCodes", ɵngcc0.ɵɵpipeBind1(5, 13, ctx.availableLanguages$))("currentLanguageCode", ɵngcc0.ɵɵpipeBind1(6, 15, ctx.contentLanguage$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", ɵngcc0.ɵɵpureFunction0(27, _c9));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(11, 17, ctx.countriesWithZones$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 19, "common.code"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("expand", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 21, "common.name"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 23, "settings.zone"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(23, 25, "common.enabled"));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlDirective, ɵngcc1.LanguageSelectorComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc4.RouterLinkWithHref, ɵngcc6.ClrIconCustomTag, ɵngcc2.NgForOf, ɵngcc1.TableRowActionComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective, ɵngcc1.ChipComponent], pipes: [ɵngcc3.TranslatePipe, ɵngcc2.AsyncPipe, ɵngcc1.HasPermissionPipe], styles: [".search-input[_ngcontent-%COMP%]{margin-top:6px;min-width:300px}"], changeDetection: 0 });
CountryListComponent.ctorParameters = () => [
    { type: DataService },
    { type: NotificationService },
    { type: ModalService },
    { type: ServerConfigService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CountryListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-country-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"searchTerm\"\r\n            [formControl]=\"searchTerm\"\r\n            [placeholder]=\"'settings.search-country-by-name' | translate\"\r\n            class=\"search-input\"\r\n        />\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"contentLanguage$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"country-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-country' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"countriesWithZones$ | async\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-country=\"item\">\r\n        <td class=\"left align-middle\">{{ country.code }}</td>\r\n        <td class=\"left align-middle\">{{ country.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <a [routerLink]=\"['/settings', 'zones', { contents: zone.id }]\" *ngFor=\"let zone of country.zones\">\r\n                <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\r\n            </a>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <clr-icon\r\n                [class.is-success]=\"country.enabled\"\r\n                [attr.shape]=\"country.enabled ? 'check' : 'times'\"\r\n            ></clr-icon>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', country.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteCountry(country.id)\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteCountry'] | hasPermission)\"\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".search-input{margin-top:6px;min-width:300px}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.ServerConfigService }]; }, null); })();

class GlobalSettingsComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.languageCodes = Object.values(LanguageCode);
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];
        this.customFields = this.getCustomFieldConfig('GlobalSettings');
        this.detailForm = this.formBuilder.group({
            availableLanguages: [''],
            trackInventory: false,
            outOfStockThreshold: [0, Validators.required],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {
            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {
                const languagesSelect = this.detailForm.get('availableLanguages');
                if (languagesSelect) {
                    languagesSelect.disable();
                }
            }
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        this.dataService.settings
            .updateGlobalSettings(this.detailForm.value)
            .pipe(tap(({ updateGlobalSettings }) => {
            switch (updateGlobalSettings.__typename) {
                case 'GlobalSettings':
                    this.detailForm.markAsPristine();
                    this.changeDetector.markForCheck();
                    this.notificationService.success(marker('common.notify-update-success'), {
                        entity: 'Settings',
                    });
                    break;
                case 'ChannelDefaultLanguageError':
                    this.notificationService.error(updateGlobalSettings.message);
            }
        }), switchMap(() => this.serverConfigService.refreshGlobalSettings()), withLatestFrom(this.dataService.client.uiState().single$))
            .subscribe(([{ globalSettings }, { uiState }]) => {
            const availableLangs = globalSettings.availableLanguages;
            if (availableLangs.length && !availableLangs.includes(uiState.contentLanguage)) {
                this.dataService.client.setContentLanguage(availableLangs[0]).subscribe();
            }
        });
    }
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            availableLanguages: entity.availableLanguages,
            trackInventory: entity.trackInventory,
            outOfStockThreshold: entity.outOfStockThreshold,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
}
GlobalSettingsComponent.ɵfac = function GlobalSettingsComponent_Factory(t) { return new (t || GlobalSettingsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
GlobalSettingsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: GlobalSettingsComponent, selectors: [["vdr-global-settings"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 23, vars: 29, consts: [["locationId", "global-settings-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], [1, "form", 3, "formGroup"], ["for", "availableLanguages", 3, "label"], ["multiple", "true", "appendTo", "body", "formControlName", "availableLanguages", 3, "items", "addTag", "hideSelected"], ["ng-label-tmp", ""], ["ng-option-tmp", ""], ["for", "outOfStockThreshold", 3, "label", "tooltip"], ["id", "outOfStockThreshold", "type", "number", "formControlName", "outOfStockThreshold", 3, "readonly"], ["for", "enabled", 3, "label", "tooltip"], ["type", "checkbox", "clrToggle", "", "name", "enabled", "formControlName", "trackInventory", 3, "vdrDisabled"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "global-settings-detail", 3, "entity$", "detailForm"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["aria-hidden", "true", 1, "ng-value-icon", "left", 3, "click"], [1, "ng-value-label"], ["formGroupName", "customFields"], ["entityName", "GlobalSettings", 3, "customFields", "customFieldsFormGroup", "readonly"]], template: function GlobalSettingsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-right");
        ɵngcc0.ɵɵelement(2, "vdr-action-bar-items", 0);
        ɵngcc0.ɵɵtemplate(3, GlobalSettingsComponent_button_3_Template, 3, 4, "button", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "form", 2);
        ɵngcc0.ɵɵelementStart(5, "vdr-form-field", 3);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementStart(7, "ng-select", 4);
        ɵngcc0.ɵɵtemplate(8, GlobalSettingsComponent_ng_template_8_Template, 5, 4, "ng-template", 5);
        ɵngcc0.ɵɵtemplate(9, GlobalSettingsComponent_ng_template_9_Template, 2, 4, "ng-template", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "vdr-form-field", 7);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelement(13, "input", 8);
        ɵngcc0.ɵɵpipe(14, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-form-field", 9);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementStart(18, "clr-toggle-wrapper");
        ɵngcc0.ɵɵelement(19, "input", 10);
        ɵngcc0.ɵɵpipe(20, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(21, GlobalSettingsComponent_section_21_Template, 6, 8, "section", 11);
        ɵngcc0.ɵɵelement(22, "vdr-custom-detail-component-host", 12);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", ctx.updatePermission);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 15, "common.available-languages"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("items", ctx.languageCodes)("addTag", false)("hideSelected", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(11, 17, "settings.global-out-of-stock-threshold"))("tooltip", ɵngcc0.ɵɵpipeBind1(12, 19, "settings.global-out-of-stock-threshold-tooltip"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(14, 21, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(16, 23, "settings.track-inventory-default"))("tooltip", ɵngcc0.ɵɵpipeBind1(17, 25, "catalog.track-inventory-tooltip"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(20, 27, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("entity$", ctx.entity$)("detailForm", ctx.detailForm);
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc7.NgSelectComponent, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc7.ɵh, ɵngcc7.ɵf, ɵngcc1.FormFieldControlDirective, ɵngcc5.NumberValueAccessor, ɵngcc5.DefaultValueAccessor, ɵngcc6.ClrCheckboxWrapper, ɵngcc5.CheckboxControlValueAccessor, ɵngcc6.ClrCheckbox, ɵngcc1.DisabledDirective, ɵngcc2.NgIf, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc5.FormGroupName, ɵngcc6.ClrLabel, ɵngcc1.TabbedCustomFieldsComponent], pipes: [ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe, ɵngcc1.LocaleLanguageNamePipe], styles: ["ng-select .ng-value>span{margin:0!important}  ng-select .ng-arrow-wrapper .ng-arrow{margin:0!important}  ng-select .ng-select-container>span{margin:0!important}"], changeDetection: 0 });
GlobalSettingsComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GlobalSettingsComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-global-settings',
                template: "<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"global-settings-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            *vdrIfPermissions=\"updatePermission\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.available-languages' | translate\" for=\"availableLanguages\">\r\n        <ng-select\r\n            [items]=\"languageCodes\"\r\n            [addTag]=\"false\"\r\n            [hideSelected]=\"true\"\r\n            multiple=\"true\"\r\n            appendTo=\"body\"\r\n            formControlName=\"availableLanguages\"\r\n        >\r\n            <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                <span class=\"ng-value-icon left\" (click)=\"clear.call(null, item)\" aria-hidden=\"true\">\r\n                    \u00D7\r\n                </span>\r\n                <span class=\"ng-value-label\">{{ item | localeLanguageName }} ({{ item }})</span>\r\n            </ng-template>\r\n            <ng-template ng-option-tmp let-item=\"item\">\r\n                {{ item | localeLanguageName }} ({{ item }})\r\n            </ng-template>\r\n        </ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'settings.global-out-of-stock-threshold' | translate\"\r\n        for=\"outOfStockThreshold\"\r\n        [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\r\n    >\r\n        <input\r\n            id=\"outOfStockThreshold\"\r\n            type=\"number\"\r\n            formControlName=\"outOfStockThreshold\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'settings.track-inventory-default' | translate\"\r\n        for=\"enabled\"\r\n        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\r\n    >\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                name=\"enabled\"\r\n                formControlName=\"trackInventory\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"GlobalSettings\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"global-settings-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["::ng-deep ng-select .ng-value>span{margin:0!important}::ng-deep ng-select .ng-arrow-wrapper .ng-arrow{margin:0!important}::ng-deep ng-select .ng-select-container>span{margin:0!important}\n"]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class PaymentMethodDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.checkers = [];
        this.handlers = [];
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];
        this.customFields = this.getCustomFieldConfig('PaymentMethod');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            name: ['', Validators.required],
            description: '',
            enabled: [true, Validators.required],
            checker: {},
            handler: {},
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
        combineLatest([
            this.dataService.settings.getPaymentMethodOperations().single$,
            this.entity$.pipe(take(1)),
        ]).subscribe(([data, entity]) => {
            this.checkers = data.paymentMethodEligibilityCheckers;
            this.handlers = data.paymentMethodHandlers;
            this.changeDetector.markForCheck();
            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(c => c.code === (entity.checker && entity.checker.code));
            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(c => c.code === (entity.handler && entity.handler.code));
        });
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(currentCode, nameValue) {
        if (!currentCode) {
            const codeControl = this.detailForm.get(['code']);
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    configArgsIsPopulated() {
        const configArgsGroup = this.detailForm.get('configArgs');
        if (!configArgsGroup) {
            return false;
        }
        return 0 < Object.keys(configArgsGroup.controls).length;
    }
    selectChecker(checker) {
        this.selectedCheckerDefinition = checker;
        this.selectedChecker = configurableDefinitionToInstance(checker);
        const formControl = this.detailForm.get('checker');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedChecker);
        }
        this.detailForm.markAsDirty();
    }
    selectHandler(handler) {
        this.selectedHandlerDefinition = handler;
        this.selectedHandler = configurableDefinitionToInstance(handler);
        const formControl = this.detailForm.get('handler');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedHandler);
        }
        this.detailForm.markAsDirty();
    }
    removeChecker() {
        this.selectedChecker = null;
        this.detailForm.markAsDirty();
    }
    removeHandler() {
        this.selectedHandler = null;
        this.detailForm.markAsDirty();
    }
    create() {
        const selectedChecker = this.selectedChecker;
        const selectedHandler = this.selectedHandler;
        if (!selectedHandler) {
            return;
        }
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const input = {
                name: formValue.name,
                code: formValue.code,
                description: formValue.description,
                enabled: formValue.enabled,
                checker: selectedChecker
                    ? toConfigurableOperationInput(selectedChecker, formValue.checker)
                    : null,
                handler: toConfigurableOperationInput(selectedHandler, formValue.handler),
                customFields: formValue.customFields,
            };
            return this.dataService.settings.createPaymentMethod(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'PaymentMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'PaymentMethod',
            });
        });
    }
    save() {
        const selectedChecker = this.selectedChecker;
        const selectedHandler = this.selectedHandler;
        if (!selectedHandler) {
            return;
        }
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const input = {
                id,
                name: formValue.name,
                code: formValue.code,
                description: formValue.description,
                enabled: formValue.enabled,
                checker: selectedChecker
                    ? toConfigurableOperationInput(selectedChecker, formValue.checker)
                    : null,
                handler: toConfigurableOperationInput(selectedHandler, formValue.handler),
                customFields: formValue.customFields,
            };
            return this.dataService.settings.updatePaymentMethod(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'PaymentMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'PaymentMethod',
            });
        });
    }
    setFormValues(paymentMethod) {
        this.detailForm.patchValue({
            name: paymentMethod.name,
            code: paymentMethod.code,
            description: paymentMethod.description,
            enabled: paymentMethod.enabled,
            checker: paymentMethod.checker || {},
            handler: paymentMethod.handler || {},
        });
        if (!this.selectedChecker) {
            this.selectedChecker = paymentMethod.checker && {
                code: paymentMethod.checker.code,
                args: paymentMethod.checker.args.map(a => (Object.assign(Object.assign({}, a), { value: getConfigArgValue(a.value) }))),
            };
        }
        if (!this.selectedHandler) {
            this.selectedHandler = paymentMethod.handler && {
                code: paymentMethod.handler.code,
                args: paymentMethod.handler.args.map(a => (Object.assign(Object.assign({}, a), { value: getConfigArgValue(a.value) }))),
            };
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), paymentMethod);
        }
    }
}
PaymentMethodDetailComponent.ɵfac = function PaymentMethodDetailComponent_Factory(t) { return new (t || PaymentMethodDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
PaymentMethodDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PaymentMethodDetailComponent, selectors: [["vdr-payment-method-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 12, vars: 10, consts: [[3, "entity"], ["locationId", "payment-method-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], ["class", "form", 3, "formGroup", 4, "ngIf"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], [1, "form", 3, "formGroup"], ["for", "name", 3, "label"], ["id", "name", "type", "text", "formControlName", "name", 3, "readonly", "input"], ["for", "code", 3, "label", "readOnlyToggle"], ["id", "code", "type", "text", "formControlName", "code", 3, "readonly"], ["formControlName", "description", 3, "readonly", "label"], ["for", "description", 3, "label"], ["type", "checkbox", "clrToggle", "", "id", "enabled", "formControlName", "enabled", 3, "vdrDisabled"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "payment-method-detail", 3, "entity$", "detailForm"], [1, "clr-row", "mt4"], [1, "clr-col"], [1, "clr-control-label"], ["formControlName", "checker", 3, "operation", "operationDefinition", "readonly", "remove", 4, "ngIf"], [4, "ngIf"], ["formControlName", "handler", 3, "operation", "operationDefinition", "readonly", "remove", 4, "ngIf"], ["formGroupName", "customFields"], ["entityName", "PaymentMethod", 3, "customFields", "customFieldsFormGroup", "readonly"], ["formControlName", "checker", 3, "operation", "operationDefinition", "readonly", "remove"], ["vdrDropdownTrigger", "", 1, "btn", "btn-outline"], ["shape", "plus"], ["vdrPosition", "bottom-left"], ["type", "button", "vdrDropdownItem", "", 3, "click", 4, "ngFor", "ngForOf"], ["type", "button", "vdrDropdownItem", "", 3, "click"], ["formControlName", "handler", 3, "operation", "operationDefinition", "readonly", "remove"]], template: function PaymentMethodDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(6, PaymentMethodDetailComponent_button_6_Template, 3, 4, "button", 2);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵtemplate(8, PaymentMethodDetailComponent_ng_template_8_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, PaymentMethodDetailComponent_form_10_Template, 33, 41, "form", 4);
        ɵngcc0.ɵɵpipe(11, "async");
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 4, ctx.entity$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(7, 6, ctx.isNew$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(11, 8, ctx.entity$));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc2.NgIf, ɵngcc1.IfPermissionsDirective, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc1.RichTextEditorComponent, ɵngcc6.ClrCheckboxWrapper, ɵngcc5.CheckboxControlValueAccessor, ɵngcc6.ClrCheckbox, ɵngcc1.DisabledDirective, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc6.ClrLabel, ɵngcc5.FormGroupName, ɵngcc1.TabbedCustomFieldsComponent, ɵngcc1.ConfigurableInputComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc6.ClrIconCustomTag, ɵngcc1.DropdownMenuComponent, ɵngcc2.NgForOf, ɵngcc1.DropdownItemDirective], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
PaymentMethodDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PaymentMethodDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-payment-method-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"payment-method-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            [disabled]=\"detailForm.pristine || detailForm.invalid\"\r\n            (click)=\"create()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as paymentMethod\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            (input)=\"updateCode(paymentMethod.code, $event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-rich-text-editor\r\n        formControlName=\"description\"\r\n        [readonly]=\"!(updatePermission | hasPermission)\"\r\n        [label]=\"'common.description' | translate\"\r\n    ></vdr-rich-text-editor>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"description\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"enabled\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"PaymentMethod\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"payment-method-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n\r\n    <div class=\"clr-row mt4\">\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.payment-eligibility-checker' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                [operation]=\"selectedChecker\"\r\n                [operationDefinition]=\"selectedCheckerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"removeChecker()\"\r\n                formControlName=\"checker\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let checker of checkers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectChecker(checker)\"\r\n                        >\r\n                            {{ checker.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.payment-handler' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedHandler && selectedHandlerDefinition\"\r\n                [operation]=\"selectedHandler\"\r\n                [operationDefinition]=\"selectedHandlerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"removeHandler()\"\r\n                formControlName=\"handler\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedHandler || !selectedHandlerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let handler of handlers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectHandler(handler)\"\r\n                        >\r\n                            {{ handler.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class PaymentMethodListComponent extends BaseListComponent {
    constructor(dataService, router, route, modalService, notificationService) {
        super(router, route);
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        super.setQueryFn((...args) => this.dataService.settings.getPaymentMethods(...args).refetchOnChannelChange(), data => data.paymentMethods);
    }
    deletePaymentMethod(paymentMethodId) {
        this.showModalAndDelete(paymentMethodId)
            .pipe(switchMap(response => {
            if (response.result === DeletionResult.DELETED) {
                return [true];
            }
            else {
                return this.showModalAndDelete(paymentMethodId, response.message || '').pipe(map(r => r.result === DeletionResult.DELETED));
            }
        }), 
        // Refresh the cached facets to reflect the changes
        switchMap(() => this.dataService.settings.getPaymentMethods(100).single$))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'PaymentMethod',
            });
            this.refresh();
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'PaymentMethod',
            });
        });
    }
    showModalAndDelete(paymentMethodId, message) {
        return this.modalService
            .dialog({
            title: marker('settings.confirm-delete-payment-method'),
            body: message,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => res ? this.dataService.settings.deletePaymentMethod(paymentMethodId, !!message) : EMPTY), map(res => res.deletePaymentMethod));
    }
}
PaymentMethodListComponent.ɵfac = function PaymentMethodListComponent_Factory(t) { return new (t || PaymentMethodListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
PaymentMethodListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PaymentMethodListComponent, selectors: [["vdr-payment-method-list"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 18, vars: 20, consts: [["locationId", "payment-method-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "pageChange", "itemsPerPageChange"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"]], template: function PaymentMethodListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-right");
        ɵngcc0.ɵɵelement(2, "vdr-action-bar-items", 0);
        ɵngcc0.ɵɵtemplate(3, PaymentMethodListComponent_a_3_Template, 4, 5, "a", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-data-table", 2);
        ɵngcc0.ɵɵlistener("pageChange", function PaymentMethodListComponent_Template_vdr_data_table_pageChange_4_listener($event) { return ctx.setPageNumber($event); })("itemsPerPageChange", function PaymentMethodListComponent_Template_vdr_data_table_itemsPerPageChange_4_listener($event) { return ctx.setItemsPerPage($event); });
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementStart(9, "vdr-dt-column");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "vdr-dt-column");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(15, "vdr-dt-column");
        ɵngcc0.ɵɵelement(16, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(17, PaymentMethodListComponent_ng_template_17_Template, 19, 18, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", ɵngcc0.ɵɵpureFunction0(19, _c11));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(5, 7, ctx.items$))("itemsPerPage", ɵngcc0.ɵɵpipeBind1(6, 9, ctx.itemsPerPage$))("totalItems", ɵngcc0.ɵɵpipeBind1(7, 11, ctx.totalItems$))("currentPage", ɵngcc0.ɵɵpipeBind1(8, 13, ctx.currentPage$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 15, "common.code"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 17, "common.enabled"));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc4.RouterLinkWithHref, ɵngcc6.ClrIconCustomTag, ɵngcc1.TableRowActionComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
PaymentMethodListComponent.ctorParameters = () => [
    { type: DataService },
    { type: Router },
    { type: ActivatedRoute },
    { type: ModalService },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PaymentMethodListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-payment-method-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"payment-method-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreatePaymentMethod']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-payment-method' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-paymentMethod=\"item\">\r\n        <td class=\"left align-middle\">{{ paymentMethod.code }}</td>\r\n        <td class=\"left align-middle\">{{ paymentMethod.enabled }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', paymentMethod.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deletePaymentMethod(paymentMethod.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeletePaymentMethod'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }]; }, null); })();

/**
 * A table showing and allowing the setting of all possible CRUD permissions.
 */
class PermissionGridComponent {
    constructor() {
        this.readonly = false;
        this.permissionChange = new EventEmitter();
    }
    ngOnInit() {
        this.buildGrid();
    }
    setPermission(permission, value) {
        if (!this.readonly) {
            this.permissionChange.emit({ permission, value });
        }
    }
    toggleAll(defs) {
        const value = defs.some(d => !this.activePermissions.includes(d.name));
        for (const def of defs) {
            this.permissionChange.emit({ permission: def.name, value });
        }
    }
    buildGrid() {
        var _a;
        const crudGroups = new Map();
        const nonCrud = [];
        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;
        for (const def of this.permissionDefinitions) {
            const isCrud = crudRe.test(def.name);
            if (isCrud) {
                const groupName = (_a = def.name.match(crudRe)) === null || _a === void 0 ? void 0 : _a[2];
                if (groupName) {
                    const existing = crudGroups.get(groupName);
                    if (existing) {
                        existing.push(def);
                    }
                    else {
                        crudGroups.set(groupName, [def]);
                    }
                }
            }
            else if (def.assignable) {
                nonCrud.push(def);
            }
        }
        this.gridData = [
            ...nonCrud.map(d => ({
                label: d.name,
                description: d.description,
                permissions: [d],
            })),
            ...Array.from(crudGroups.entries()).map(([label, defs]) => {
                return {
                    label,
                    description: this.extractCrudDescription(defs[0]),
                    permissions: defs,
                };
            }),
        ];
    }
    extractCrudDescription(def) {
        return def.description.replace(/Grants permission to [\w]+/, 'Grants permissions on');
    }
}
PermissionGridComponent.ɵfac = function PermissionGridComponent_Factory(t) { return new (t || PermissionGridComponent)(); };
PermissionGridComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PermissionGridComponent, selectors: [["vdr-permission-grid"]], inputs: { readonly: "readonly", permissionDefinitions: "permissionDefinitions", activePermissions: "activePermissions" }, outputs: { permissionChange: "permissionChange" }, decls: 3, vars: 1, consts: [[1, "table"], [4, "ngFor", "ngForOf"], [1, "permission-group", "left"], ["class", "btn btn-sm btn-link", 3, "click", 4, "ngIf"], [1, "btn", "btn-sm", "btn-link", 3, "click"], ["size", "small", 3, "title", "label", "disabled", "selected", "selectedChange"]], template: function PermissionGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table", 0);
        ɵngcc0.ɵɵelementStart(1, "tbody");
        ɵngcc0.ɵɵtemplate(2, PermissionGridComponent_tr_2_Template, 12, 8, "tr", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.gridData);
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc1.SelectToggleComponent], pipes: [ɵngcc3.TranslatePipe], styles: ["td.permission-group[_ngcontent-%COMP%]{max-width:300px;background-color:var(--color-component-bg-200)}"], changeDetection: 0 });
PermissionGridComponent.propDecorators = {
    permissionDefinitions: [{ type: Input }],
    activePermissions: [{ type: Input }],
    readonly: [{ type: Input }],
    permissionChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PermissionGridComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-permission-grid',
                template: "<table class=\"table\">\r\n    <tbody>\r\n        <tr *ngFor=\"let section of gridData\">\r\n            <td class=\"permission-group left\">\r\n                <div><strong>{{ section.label | translate }}</strong></div>\r\n                <small>{{ section.description | translate }}</small><br>\r\n                <button *ngIf=\"1 < section.permissions.length && !readonly\" class=\"btn btn-sm btn-link\" (click)=\"toggleAll(section.permissions)\">\r\n                    {{ 'common.toggle-all' | translate }}\r\n                </button>\r\n            </td>\r\n            <td *ngFor=\"let permission of section.permissions\" [attr.colspan]=\"section.permissions.length === 1 ? 4 : 1\">\r\n                <vdr-select-toggle\r\n                    size=\"small\"\r\n                    [title]=\"permission.description\"\r\n                    [label]=\"permission.name\"\r\n                    [disabled]=\"readonly\"\r\n                    [selected]=\"activePermissions?.includes(permission.name)\"\r\n                    (selectedChange)=\"setPermission(permission.name, $event)\"\r\n                ></vdr-select-toggle>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["td.permission-group{max-width:300px;background-color:var(--color-component-bg-200)}\n"]
            }]
    }], function () { return []; }, { readonly: [{
            type: Input
        }], permissionChange: [{
            type: Output
        }], permissionDefinitions: [{
            type: Input
        }], activePermissions: [{
            type: Input
        }] }); })();

class ProfileComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('Administrator');
        this.detailForm = this.formBuilder.group({
            emailAddress: ['', Validators.required],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            password: [''],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    save() {
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const administrator = {
                emailAddress: formValue.emailAddress,
                firstName: formValue.firstName,
                lastName: formValue.lastName,
                password: formValue.password,
                customFields: formValue.customFields,
            };
            return this.dataService.administrator.updateActiveAdministrator(administrator);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Administrator',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Administrator',
            });
        });
    }
    setFormValues(administrator, languageCode) {
        this.detailForm.patchValue({
            emailAddress: administrator.emailAddress,
            firstName: administrator.firstName,
            lastName: administrator.lastName,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), administrator);
        }
    }
}
ProfileComponent.ɵfac = function ProfileComponent_Factory(t) { return new (t || ProfileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
ProfileComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ProfileComponent, selectors: [["vdr-profile"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 25, vars: 25, consts: [[3, "entity"], ["locationId", "administrator-detail"], [1, "btn", "btn-primary", 3, "disabled", "click"], [1, "form", 3, "formGroup"], ["for", "emailAddress", 3, "label"], ["id", "emailAddress", "type", "text", "formControlName", "emailAddress"], ["for", "firstName", 3, "label"], ["id", "firstName", "type", "text", "formControlName", "firstName"], ["for", "lastName", 3, "label"], ["id", "lastName", "type", "text", "formControlName", "lastName"], ["for", "password", 3, "label", 4, "ngIf"], ["for", "password", 3, "label", "readOnlyToggle"], ["id", "password", "type", "password", "formControlName", "password"], ["formGroupName", "customFields", 4, "ngIf"], ["for", "password", 3, "label"], ["formGroupName", "customFields"], ["entityName", "Administrator", 3, "customFields", "customFieldsFormGroup"]], template: function ProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵelementStart(6, "button", 2);
        ɵngcc0.ɵɵlistener("click", function ProfileComponent_Template_button_click_6_listener() { return ctx.save(); });
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "form", 3);
        ɵngcc0.ɵɵelementStart(10, "vdr-form-field", 4);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelement(12, "input", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "vdr-form-field", 6);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelement(15, "input", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "vdr-form-field", 8);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelement(18, "input", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(19, ProfileComponent_vdr_form_field_19_Template, 3, 3, "vdr-form-field", 10);
        ɵngcc0.ɵɵpipe(20, "async");
        ɵngcc0.ɵɵelementStart(21, "vdr-form-field", 11);
        ɵngcc0.ɵɵpipe(22, "translate");
        ɵngcc0.ɵɵelement(23, "input", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(24, ProfileComponent_section_24_Template, 5, 5, "section", 13);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 11, ctx.entity$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.detailForm.invalid || ctx.detailForm.pristine);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 13, "common.update"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(11, 15, "settings.email-address"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(14, 17, "settings.first-name"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(17, 19, "settings.last-name"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(20, 21, ctx.isNew$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(22, 23, "settings.password"))("readOnlyToggle", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc2.NgIf, ɵngcc5.FormGroupName, ɵngcc6.ClrLabel, ɵngcc1.TabbedCustomFieldsComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe], styles: [""], changeDetection: 0 });
ProfileComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProfileComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-profile',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\r\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.password' | translate\" for=\"password\" [readOnlyToggle]=\"true\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Administrator\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class RoleDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            description: ['', Validators.required],
            channelIds: [],
            permissions: [],
        });
    }
    ngOnInit() {
        this.init();
        this.role$ = this.entity$;
        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(nameValue) {
        const codeControl = this.detailForm.get(['code']);
        if (codeControl && codeControl.pristine) {
            codeControl.setValue(normalizeString(nameValue, '-'));
        }
    }
    setPermission(change) {
        const permissionsControl = this.detailForm.get('permissions');
        if (permissionsControl) {
            const currentPermissions = permissionsControl.value;
            const newValue = change.value === true
                ? unique([...currentPermissions, change.permission])
                : currentPermissions.filter(p => p !== change.permission);
            permissionsControl.setValue(newValue);
            permissionsControl.markAsDirty();
        }
    }
    create() {
        const formValue = this.detailForm.value;
        const role = formValue;
        this.dataService.administrator.createRole(role).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), { entity: 'Role' });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Role',
            });
        });
    }
    save() {
        this.role$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const role = Object.assign({ id }, formValue);
            return this.dataService.administrator.updateRole(role);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), { entity: 'Role' });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Role',
            });
        });
    }
    setFormValues(role, languageCode) {
        this.detailForm.patchValue({
            description: role.description,
            code: role.code,
            channelIds: role.channels.map(c => c.id),
            permissions: role.permissions,
        });
        // This was required to get the channel selector component to
        // correctly display its contents. A while spent debugging the root
        // cause did not yield a solution, therefore this next line.
        this.changeDetector.detectChanges();
    }
}
RoleDetailComponent.ɵfac = function RoleDetailComponent_Factory(t) { return new (t || RoleDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
RoleDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RoleDetailComponent, selectors: [["vdr-role-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 29, vars: 37, consts: [[3, "entity"], ["locationId", "role-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], [1, "form", 3, "formGroup"], ["for", "description", 3, "label"], ["id", "description", "type", "text", "formControlName", "description", 3, "readonly", "input"], ["for", "code", 3, "label", "readOnlyToggle"], ["id", "code", "type", "text", "formControlName", "code", 3, "readonly"], [3, "label"], ["formControlName", "channelIds", 3, "vdrDisabled"], [3, "permissionDefinitions", "activePermissions", "readonly", "permissionChange"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"]], template: function RoleDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(6, RoleDetailComponent_button_6_Template, 3, 4, "button", 2);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵtemplate(8, RoleDetailComponent_ng_template_8_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "form", 4);
        ɵngcc0.ɵɵelementStart(11, "vdr-form-field", 5);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementStart(13, "input", 6);
        ɵngcc0.ɵɵlistener("input", function RoleDetailComponent_Template_input_input_13_listener($event) { return ctx.updateCode($event.target.value); });
        ɵngcc0.ɵɵpipe(14, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-form-field", 7);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵpipe(17, "hasPermission");
        ɵngcc0.ɵɵelement(18, "input", 8);
        ɵngcc0.ɵɵpipe(19, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "vdr-form-field", 9);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelement(22, "vdr-channel-assignment-control", 10);
        ɵngcc0.ɵɵpipe(23, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "label");
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "vdr-permission-grid", 11);
        ɵngcc0.ɵɵlistener("permissionChange", function RoleDetailComponent_Template_vdr_permission_grid_permissionChange_27_listener($event) { return ctx.setPermission($event); });
        ɵngcc0.ɵɵpipe(28, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(9);
        let tmp_13_0;
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 15, ctx.entity$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(7, 17, ctx.isNew$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(12, 19, "common.description"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(14, 21, "UpdateAdministrator"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(16, 23, "common.code"))("readOnlyToggle", ɵngcc0.ɵɵpipeBind1(17, 25, "UpdateAdministrator"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(19, 27, "UpdateAdministrator"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(21, 29, "settings.channel"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(23, 31, "UpdateAdministrator"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(26, 33, "settings.permissions"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("permissionDefinitions", ctx.permissionDefinitions)("activePermissions", (tmp_13_0 = ctx.detailForm.get("permissions")) == null ? null : tmp_13_0.value)("readonly", !ɵngcc0.ɵɵpipeBind1(28, 35, "UpdateAdministrator"));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc2.NgIf, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc1.ChannelAssignmentControlComponent, ɵngcc1.DisabledDirective, ɵngcc6.ClrLabel, PermissionGridComponent, ɵngcc1.IfPermissionsDirective], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
RoleDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RoleDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-role-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"role-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\">\r\n        <input\r\n            id=\"description\"\r\n            type=\"text\"\r\n            formControlName=\"description\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n            (input)=\"updateCode($event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"'UpdateAdministrator' | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.channel' | translate\">\r\n        <vdr-channel-assignment-control\r\n            formControlName=\"channelIds\"\r\n            [vdrDisabled]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        ></vdr-channel-assignment-control>\r\n    </vdr-form-field>\r\n    <label>{{ 'settings.permissions' | translate }}</label>\r\n    <vdr-permission-grid\r\n        [permissionDefinitions]=\"permissionDefinitions\"\r\n        [activePermissions]=\"detailForm.get('permissions')?.value\"\r\n        (permissionChange)=\"setPermission($event)\"\r\n        [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n    ></vdr-permission-grid>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class RoleListComponent extends BaseListComponent {
    constructor(modalService, notificationService, dataService, router, route) {
        super(router, route);
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.initialLimit = 3;
        this.displayLimit = {};
        super.setQueryFn((...args) => this.dataService.administrator.getRoles(...args), data => data.roles);
    }
    ngOnInit() {
        super.ngOnInit();
        this.visibleRoles$ = this.items$.pipe(map(roles => roles.filter(role => role.code !== CUSTOMER_ROLE_CODE)));
    }
    toggleDisplayLimit(role) {
        if (this.displayLimit[role.id] === role.permissions.length) {
            this.displayLimit[role.id] = this.initialLimit;
        }
        else {
            this.displayLimit[role.id] = role.permissions.length;
        }
    }
    isDefaultRole(role) {
        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;
    }
    deleteRole(id) {
        this.modalService
            .dialog({
            title: marker('settings.confirm-delete-role'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => (response ? this.dataService.administrator.deleteRole(id) : EMPTY)))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Role',
            });
            this.refresh();
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'Role',
            });
        });
    }
}
RoleListComponent.ɵfac = function RoleListComponent_Factory(t) { return new (t || RoleListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute)); };
RoleListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: RoleListComponent, selectors: [["vdr-role-list"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 24, vars: 25, consts: [["locationId", "role-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "pageChange", "itemsPerPageChange"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [4, "ngIf"], [4, "ngIf", "ngIfElse"], ["defaultRole", ""], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo", 4, "ngIf"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm", 3, "disabled"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"], [4, "ngFor", "ngForOf"], [3, "channelCode"], ["class", "btn btn-sm btn-secondary btn-icon", 3, "click", 4, "ngIf"], [1, "btn", "btn-sm", "btn-secondary", "btn-icon", 3, "click"], ["collapse", ""], ["shape", "minus"], [1, "default-role-label"], ["iconShape", "edit", 3, "label", "linkTo"]], template: function RoleListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-right");
        ɵngcc0.ɵɵelement(2, "vdr-action-bar-items", 0);
        ɵngcc0.ɵɵtemplate(3, RoleListComponent_a_3_Template, 4, 5, "a", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-data-table", 2);
        ɵngcc0.ɵɵlistener("pageChange", function RoleListComponent_Template_vdr_data_table_pageChange_4_listener($event) { return ctx.setPageNumber($event); })("itemsPerPageChange", function RoleListComponent_Template_vdr_data_table_itemsPerPageChange_4_listener($event) { return ctx.setItemsPerPage($event); });
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementStart(9, "vdr-dt-column");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "vdr-dt-column");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-dt-column");
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "vdr-dt-column");
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(21, "vdr-dt-column");
        ɵngcc0.ɵɵelement(22, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(23, RoleListComponent_ng_template_23_Template, 24, 16, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", "CreateAdministrator");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(5, 9, ctx.visibleRoles$))("itemsPerPage", ɵngcc0.ɵɵpipeBind1(6, 11, ctx.itemsPerPage$))("totalItems", ɵngcc0.ɵɵpipeBind1(7, 13, ctx.totalItems$))("currentPage", ɵngcc0.ɵɵpipeBind1(8, 15, ctx.currentPage$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 17, "common.description"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 19, "common.code"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 21, "settings.channel"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 23, "settings.permissions"));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc4.RouterLinkWithHref, ɵngcc6.ClrIconCustomTag, ɵngcc2.NgIf, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective, ɵngcc2.NgForOf, ɵngcc1.ChipComponent, ɵngcc1.ChannelBadgeComponent, ɵngcc1.TableRowActionComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe, ɵngcc1.ChannelLabelPipe, ɵngcc2.SlicePipe], styles: [".default-role-label[_ngcontent-%COMP%]{color:var(--color-grey-400)}"], changeDetection: 0 });
RoleListComponent.ctorParameters = () => [
    { type: ModalService },
    { type: NotificationService },
    { type: DataService },
    { type: Router },
    { type: ActivatedRoute }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RoleListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-role-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"role-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-role' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"visibleRoles$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.description' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.channel' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.permissions' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-role=\"item\">\r\n        <td class=\"left align-middle\">{{ role.description }}</td>\r\n        <td class=\"left align-middle\"><span *ngIf=\"!isDefaultRole(role)\">{{ role.code }}</span></td>\r\n        <td class=\"left align-middle\">\r\n            <ng-container *ngIf=\"!isDefaultRole(role)\">\r\n                <vdr-chip *ngFor=\"let channel of role.channels\">\r\n                    <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                    {{ channel.code | channelCodeToLabel | translate }}\r\n                </vdr-chip>\r\n            </ng-container>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <ng-container *ngIf=\"!isDefaultRole(role); else defaultRole\">\r\n                <vdr-chip *ngFor=\"let permission of role.permissions |  slice: 0:displayLimit[role.id] || 3\">{{ permission }}</vdr-chip>\r\n                <button\r\n                    class=\"btn btn-sm btn-secondary btn-icon\"\r\n                    *ngIf=\"role.permissions.length > initialLimit\"\r\n                    (click)=\"toggleDisplayLimit(role)\"\r\n                >\r\n                    <ng-container *ngIf=\"(displayLimit[role.id] || 0) < role.permissions.length; else collapse\">\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ role.permissions.length - initialLimit }}\r\n                    </ng-container>\r\n                    <ng-template #collapse>\r\n                        <clr-icon shape=\"minus\"></clr-icon>\r\n                    </ng-template>\r\n                </button>\r\n            </ng-container>\r\n            <ng-template #defaultRole>\r\n                <span class=\"default-role-label\">{{ 'settings.default-role-label' | translate }}</span>\r\n            </ng-template>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                *ngIf=\"!isDefaultRole(role)\"\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', role.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultRole(role)\">\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteRole(role.id)\"\r\n                        [disabled]=\"!('SuperAdmin' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".default-role-label{color:var(--color-grey-400)}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.DataService }, { type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }]; }, null); })();

class ShippingEligibilityTestResultComponent {
    constructor() {
        this.okToRun = false;
        this.testDataUpdated = false;
        this.runTest = new EventEmitter();
    }
}
ShippingEligibilityTestResultComponent.ɵfac = function ShippingEligibilityTestResultComponent_Factory(t) { return new (t || ShippingEligibilityTestResultComponent)(); };
ShippingEligibilityTestResultComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ShippingEligibilityTestResultComponent, selectors: [["vdr-shipping-eligibility-test-result"]], inputs: { okToRun: "okToRun", testDataUpdated: "testDataUpdated", testResult: "testResult", currencyCode: "currencyCode" }, outputs: { runTest: "runTest" }, decls: 10, vars: 9, consts: [[1, "test-result", "card"], [1, "card-header"], ["class", "card-block", 4, "ngFor", "ngForOf"], ["class", "card-block", 4, "ngIf"], [1, "card-footer"], [1, "btn", "btn-secondary", 3, "disabled", "click"], [1, "card-block"], [1, "result-details"], [3, "label"], [1, "price-row"], [3, "value", 4, "ngIf"], [3, "value"], ["shape", "ban", 1, "is-solid", "error"]], template: function ShippingEligibilityTestResultComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ShippingEligibilityTestResultComponent_div_4_Template, 15, 21, "div", 2);
        ɵngcc0.ɵɵtemplate(5, ShippingEligibilityTestResultComponent_div_5_Template, 4, 3, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵelementStart(7, "button", 5);
        ɵngcc0.ɵɵlistener("click", function ShippingEligibilityTestResultComponent_Template_button_click_7_listener() { return ctx.runTest.emit(); });
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "settings.test-result"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.testResult);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.testResult == null ? null : ctx.testResult.length) === 0);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.okToRun);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 7, "settings.test-shipping-methods"), " ");
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc1.LabeledDataComponent, ɵngcc1.ObjectTreeComponent, ɵngcc6.ClrIconCustomTag], pipes: [ɵngcc3.TranslatePipe, ɵngcc1.LocaleCurrencyPipe], styles: [".result-details[_ngcontent-%COMP%]{transition:opacity .2s}.result-details.stale[_ngcontent-%COMP%]{opacity:.5}.price-row[_ngcontent-%COMP%]{display:flex}.price-row[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]:not(:first-child){margin-left:24px}clr-icon.error[_ngcontent-%COMP%]{color:var(--color-error-500)}"], changeDetection: 0 });
ShippingEligibilityTestResultComponent.propDecorators = {
    testResult: [{ type: Input }],
    okToRun: [{ type: Input }],
    testDataUpdated: [{ type: Input }],
    currencyCode: [{ type: Input }],
    runTest: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShippingEligibilityTestResultComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-shipping-eligibility-test-result',
                template: "<div class=\"test-result card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-result' | translate }}\r\n    </div>\r\n    <div class=\"card-block\" *ngFor=\"let quote of testResult\">\r\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\r\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\r\n                {{ quote.name }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                    {{ quote.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\r\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\" *ngIf=\"testResult?.length === 0\">\r\n        <clr-icon shape=\"ban\" class=\"is-solid error\"></clr-icon>\r\n        {{ 'settings.no-eligible-shipping-methods' | translate }}\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\r\n            {{ 'settings.test-shipping-methods' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".result-details{transition:opacity .2s}.result-details.stale{opacity:.5}.price-row{display:flex}.price-row>*:not(:first-child){margin-left:24px}clr-icon.error{color:var(--color-error-500)}\n"]
            }]
    }], function () { return []; }, { okToRun: [{
            type: Input
        }], testDataUpdated: [{
            type: Input
        }], runTest: [{
            type: Output
        }], testResult: [{
            type: Input
        }], currencyCode: [{
            type: Input
        }] }); })();

class ShippingMethodDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.checkers = [];
        this.calculators = [];
        this.fulfillmentHandlers = [];
        this.testDataUpdated = false;
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];
        this.fetchTestResult$ = new Subject();
        this.customFields = this.getCustomFieldConfig('ShippingMethod');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            name: ['', Validators.required],
            description: '',
            fulfillmentHandler: ['', Validators.required],
            checker: {},
            calculator: {},
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
        combineLatest([
            this.dataService.shippingMethod.getShippingMethodOperations().single$,
            this.entity$.pipe(take(1)),
        ]).subscribe(([data, entity]) => {
            this.checkers = data.shippingEligibilityCheckers;
            this.calculators = data.shippingCalculators;
            this.fulfillmentHandlers = data.fulfillmentHandlers;
            this.changeDetector.markForCheck();
            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(c => c.code === (entity.checker && entity.checker.code));
            this.selectedCalculatorDefinition = data.shippingCalculators.find(c => c.code === (entity.calculator && entity.calculator.code));
        });
        this.activeChannel$ = this.dataService.settings
            .getActiveChannel()
            .mapStream(data => data.activeChannel);
        this.testResult$ = this.fetchTestResult$.pipe(switchMap(([address, lines]) => {
            if (!this.selectedChecker || !this.selectedCalculator) {
                return of(undefined);
            }
            const formValue = this.detailForm.value;
            const input = {
                shippingAddress: Object.assign(Object.assign({}, address), { streetLine1: 'test' }),
                lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),
                checker: toConfigurableOperationInput(this.selectedChecker, formValue.checker),
                calculator: toConfigurableOperationInput(this.selectedCalculator, formValue.calculator),
            };
            return this.dataService.shippingMethod
                .testShippingMethod(input)
                .mapSingle(result => result.testShippingMethod);
        }));
        // tslint:disable:no-non-null-assertion
        merge(this.detailForm.get(['checker']).valueChanges, this.detailForm.get(['calculator']).valueChanges)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => (this.testDataUpdated = true));
        // tslint:enable:no-non-null-assertion
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(currentCode, nameValue) {
        if (!currentCode) {
            const codeControl = this.detailForm.get(['code']);
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    selectChecker(checker) {
        this.selectedCheckerDefinition = checker;
        this.selectedChecker = configurableDefinitionToInstance(checker);
        const formControl = this.detailForm.get('checker');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedChecker);
        }
        this.detailForm.markAsDirty();
    }
    selectCalculator(calculator) {
        this.selectedCalculatorDefinition = calculator;
        this.selectedCalculator = configurableDefinitionToInstance(calculator);
        const formControl = this.detailForm.get('calculator');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedCalculator);
        }
        this.detailForm.markAsDirty();
    }
    create() {
        const selectedChecker = this.selectedChecker;
        const selectedCalculator = this.selectedCalculator;
        if (!selectedChecker || !selectedCalculator) {
            return;
        }
        combineLatest([this.entity$, this.languageCode$])
            .pipe(take(1), mergeMap(([shippingMethod, languageCode]) => {
            const formValue = this.detailForm.value;
            const input = Object.assign(Object.assign({}, this.getUpdatedShippingMethod(shippingMethod, this.detailForm, languageCode)), { checker: toConfigurableOperationInput(selectedChecker, formValue.checker), calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator) });
            return this.dataService.shippingMethod.createShippingMethod(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'ShippingMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'ShippingMethod',
            });
        });
    }
    save() {
        const selectedChecker = this.selectedChecker;
        const selectedCalculator = this.selectedCalculator;
        if (!selectedChecker || !selectedCalculator) {
            return;
        }
        combineLatest([this.entity$, this.languageCode$])
            .pipe(take(1), mergeMap(([shippingMethod, languageCode]) => {
            const formValue = this.detailForm.value;
            const input = Object.assign(Object.assign({}, this.getUpdatedShippingMethod(shippingMethod, this.detailForm, languageCode)), { checker: toConfigurableOperationInput(selectedChecker, formValue.checker), calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator) });
            return this.dataService.shippingMethod.updateShippingMethod(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'ShippingMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'ShippingMethod',
            });
        });
    }
    setTestOrderLines(event) {
        this.testOrderLines = event;
        this.testDataUpdated = true;
    }
    setTestAddress(event) {
        this.testAddress = event;
        this.testDataUpdated = true;
    }
    allTestDataPresent() {
        return !!(this.testAddress &&
            this.testOrderLines &&
            this.testOrderLines.length &&
            this.selectedChecker &&
            this.selectedCalculator);
    }
    runTest() {
        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);
        this.testDataUpdated = false;
    }
    /**
     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which
     * can then be persisted to the API.
     */
    getUpdatedShippingMethod(shippingMethod, formGroup, languageCode) {
        const formValue = formGroup.value;
        const input = createUpdatedTranslatable({
            translatable: shippingMethod,
            updatedFields: formValue,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: shippingMethod.name || '',
                description: shippingMethod.description || '',
            },
        });
        return Object.assign(Object.assign({}, input), { fulfillmentHandler: formValue.fulfillmentHandler });
    }
    setFormValues(shippingMethod, languageCode) {
        var _a, _b, _c, _d;
        const currentTranslation = findTranslation(shippingMethod, languageCode);
        this.detailForm.patchValue({
            name: (_a = currentTranslation === null || currentTranslation === void 0 ? void 0 : currentTranslation.name) !== null && _a !== void 0 ? _a : '',
            description: (_b = currentTranslation === null || currentTranslation === void 0 ? void 0 : currentTranslation.description) !== null && _b !== void 0 ? _b : '',
            code: shippingMethod.code,
            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,
            checker: shippingMethod.checker || {},
            calculator: shippingMethod.calculator || {},
        });
        if (!this.selectedChecker) {
            this.selectedChecker = shippingMethod.checker && {
                code: shippingMethod.checker.code,
                args: shippingMethod.checker.args.map(a => (Object.assign(Object.assign({}, a), { value: getConfigArgValue(a.value) }))),
            };
        }
        if (!this.selectedCalculator) {
            this.selectedCalculator = shippingMethod.calculator && {
                code: (_c = shippingMethod.calculator) === null || _c === void 0 ? void 0 : _c.code,
                args: (_d = shippingMethod.calculator) === null || _d === void 0 ? void 0 : _d.args.map(a => (Object.assign(Object.assign({}, a), { value: getConfigArgValue(a.value) }))),
            };
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), shippingMethod, currentTranslation);
        }
    }
}
ShippingMethodDetailComponent.ɵfac = function ShippingMethodDetailComponent_Factory(t) { return new (t || ShippingMethodDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
ShippingMethodDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ShippingMethodDetailComponent, selectors: [["vdr-shipping-method-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 23, vars: 22, consts: [[3, "entity"], [3, "disabled", "availableLanguageCodes", "currentLanguageCode", "languageCodeChange"], ["locationId", "shipping-method-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], ["class", "form", 3, "formGroup", 4, "ngIf"], [1, "testing-tool"], [4, "clrIfExpanded"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], [1, "form", 3, "formGroup"], ["for", "name", 3, "label"], ["id", "name", "type", "text", "formControlName", "name", 3, "readonly", "input"], ["for", "code", 3, "label", "readOnlyToggle"], ["id", "code", "type", "text", "formControlName", "code", 3, "readonly"], ["formControlName", "description", 3, "readonly", "label"], ["for", "fulfillmentHandler", 1, "mb2", 3, "label"], ["name", "fulfillmentHandler", "formControlName", "fulfillmentHandler", 3, "vdrDisabled"], [3, "value", 4, "ngFor", "ngForOf"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "shipping-method-detail", 3, "entity$", "detailForm"], [1, "clr-row", "mt4"], [1, "clr-col"], [1, "clr-control-label"], ["formControlName", "checker", 3, "operation", "operationDefinition", "readonly", "remove", 4, "ngIf"], [4, "ngIf"], ["formControlName", "calculator", 3, "operation", "operationDefinition", "readonly", "remove", 4, "ngIf"], [3, "value"], ["formGroupName", "customFields"], ["entityName", "ShippingMethod", 3, "customFields", "customFieldsFormGroup", "readonly"], ["formControlName", "checker", 3, "operation", "operationDefinition", "readonly", "remove"], ["vdrDropdownTrigger", "", 1, "btn", "btn-outline"], ["shape", "plus"], ["vdrPosition", "bottom-left"], ["type", "button", "vdrDropdownItem", "", 3, "click", 4, "ngFor", "ngForOf"], ["type", "button", "vdrDropdownItem", "", 3, "click"], ["formControlName", "calculator", 3, "operation", "operationDefinition", "readonly", "remove"], [1, "clr-row"], [3, "orderLinesChange"], [3, "addressChange"], [3, "currencyCode", "okToRun", "testDataUpdated", "testResult", "runTest"]], template: function ShippingMethodDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementStart(4, "vdr-language-selector", 1);
        ɵngcc0.ɵɵlistener("languageCodeChange", function ShippingMethodDetailComponent_Template_vdr_language_selector_languageCodeChange_4_listener($event) { return ctx.setLanguage($event); });
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "vdr-ab-right");
        ɵngcc0.ɵɵelement(9, "vdr-action-bar-items", 2);
        ɵngcc0.ɵɵtemplate(10, ShippingMethodDetailComponent_button_10_Template, 3, 4, "button", 3);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵtemplate(12, ShippingMethodDetailComponent_ng_template_12_Template, 1, 1, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(14, ShippingMethodDetailComponent_form_14_Template, 33, 42, "form", 5);
        ɵngcc0.ɵɵpipe(15, "async");
        ɵngcc0.ɵɵelementStart(16, "div", 6);
        ɵngcc0.ɵɵelementStart(17, "clr-accordion");
        ɵngcc0.ɵɵelementStart(18, "clr-accordion-panel");
        ɵngcc0.ɵɵelementStart(19, "clr-accordion-title");
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(22, ShippingMethodDetailComponent_clr_accordion_content_22_Template, 9, 8, "clr-accordion-content", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(13);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 8, ctx.entity$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ɵngcc0.ɵɵpipeBind1(5, 10, ctx.isNew$))("availableLanguageCodes", ɵngcc0.ɵɵpipeBind1(6, 12, ctx.availableLanguages$))("currentLanguageCode", ɵngcc0.ɵɵpipeBind1(7, 14, ctx.languageCode$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(11, 16, ctx.isNew$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(15, 18, ctx.entity$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(21, 20, "settings.test-shipping-method"));
    } }, directives: function () { return [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.LanguageSelectorComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc2.NgIf, ɵngcc6.ClrAccordion, ɵngcc6.ÇlrAccordionWillyWonka, ɵngcc6.ClrAccordionPanel, ɵngcc6.ÇlrAccordionOompaLoompa, ɵngcc6.ClrAccordionTitle, ɵngcc6.ÇlrDatagridDetailRegisterer, ɵngcc6.ClrIfExpanded, ɵngcc1.IfPermissionsDirective, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc1.RichTextEditorComponent, ɵngcc5.SelectControlValueAccessor, ɵngcc1.DisabledDirective, ɵngcc2.NgForOf, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc6.ClrLabel, ɵngcc5.NgSelectOption, ɵngcc5.ɵNgSelectMultipleOption, ɵngcc5.FormGroupName, ɵngcc1.TabbedCustomFieldsComponent, ɵngcc1.ConfigurableInputComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc6.ClrIconCustomTag, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective, ɵngcc6.ClrAccordionContent, TestOrderBuilderComponent, TestAddressFormComponent, ShippingMethodTestResultComponent]; }, pipes: function () { return [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe]; }, styles: [".testing-tool[_ngcontent-%COMP%]{margin-top:48px;margin-bottom:128px}.testing-tool[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{margin-bottom:12px}"], changeDetection: 0 });
ShippingMethodDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShippingMethodDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-shipping-method-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"shipping-method-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                [disabled]=\"\r\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as shippingMethod\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            (input)=\"updateCode(shippingMethod.code, $event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-rich-text-editor\r\n        formControlName=\"description\"\r\n        [readonly]=\"!(updatePermission | hasPermission)\"\r\n        [label]=\"'common.description' | translate\"\r\n    ></vdr-rich-text-editor>\r\n    <vdr-form-field [label]=\"'settings.fulfillment-handler' | translate\" for=\"fulfillmentHandler\" class=\"mb2\">\r\n        <select\r\n            name=\"fulfillmentHandler\"\r\n            formControlName=\"fulfillmentHandler\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\r\n                {{ handler.code }}: {{ handler.description }}\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"ShippingMethod\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"shipping-method-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n\r\n    <div class=\"clr-row mt4\">\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.shipping-eligibility-checker' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                [operation]=\"selectedChecker\"\r\n                [operationDefinition]=\"selectedCheckerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"selectedChecker = null\"\r\n                formControlName=\"checker\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let checker of checkers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectChecker(checker)\"\r\n                        >\r\n                            {{ checker.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.shipping-calculator' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\r\n                [operation]=\"selectedCalculator\"\r\n                [operationDefinition]=\"selectedCalculatorDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"selectedCalculator = null\"\r\n                formControlName=\"calculator\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let calculator of calculators\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectCalculator(calculator)\"\r\n                        >\r\n                            {{ calculator.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div class=\"testing-tool\">\r\n    <clr-accordion>\r\n        <clr-accordion-panel>\r\n            <clr-accordion-title>{{ 'settings.test-shipping-method' | translate }}</clr-accordion-title>\r\n            <clr-accordion-content *clrIfExpanded>\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-order-builder\r\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                        ></vdr-test-order-builder>\r\n                    </div>\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-address-form\r\n                            (addressChange)=\"setTestAddress($event)\"\r\n                        ></vdr-test-address-form>\r\n                        <vdr-shipping-method-test-result\r\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                            [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\r\n                            [testDataUpdated]=\"testDataUpdated\"\r\n                            [testResult]=\"testResult$ | async\"\r\n                            (runTest)=\"runTest()\"\r\n                        ></vdr-shipping-method-test-result>\r\n                    </div>\r\n                </div>\r\n            </clr-accordion-content>\r\n        </clr-accordion-panel>\r\n    </clr-accordion>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".testing-tool{margin-top:48px;margin-bottom:128px}.testing-tool h4{margin-bottom:12px}\n"]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class ShippingMethodListComponent extends BaseListComponent {
    constructor(modalService, notificationService, dataService, serverConfigService, router, route) {
        super(router, route);
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.serverConfigService = serverConfigService;
        this.testDataUpdated = false;
        this.fetchTestResult$ = new Subject();
        super.setQueryFn((...args) => this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(), data => data.shippingMethods);
    }
    ngOnInit() {
        super.ngOnInit();
        this.testResult$ = this.fetchTestResult$.pipe(switchMap(([address, lines]) => {
            const input = {
                shippingAddress: Object.assign(Object.assign({}, address), { streetLine1: 'test' }),
                lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),
            };
            return this.dataService.shippingMethod
                .testEligibleShippingMethods(input)
                .mapSingle(result => result.testEligibleShippingMethods);
        }));
        this.activeChannel$ = this.dataService.settings
            .getActiveChannel()
            .mapStream(data => data.activeChannel);
        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();
        this.contentLanguage$ = this.dataService.client
            .uiState()
            .mapStream(({ uiState }) => uiState.contentLanguage)
            .pipe(tap(() => this.refresh()));
    }
    deleteShippingMethod(id) {
        this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-shipping-method'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'ShippingMethod',
            });
            this.refresh();
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'ShippingMethod',
            });
        });
    }
    setTestOrderLines(event) {
        this.testOrderLines = event;
        this.testDataUpdated = true;
    }
    setTestAddress(event) {
        this.testAddress = event;
        this.testDataUpdated = true;
    }
    allTestDataPresent() {
        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);
    }
    runTest() {
        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);
        this.testDataUpdated = false;
    }
    setLanguage(code) {
        this.dataService.client.setContentLanguage(code).subscribe();
    }
}
ShippingMethodListComponent.ɵfac = function ShippingMethodListComponent_Factory(t) { return new (t || ShippingMethodListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute)); };
ShippingMethodListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ShippingMethodListComponent, selectors: [["vdr-shipping-method-list"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 29, vars: 29, consts: [[3, "availableLanguageCodes", "currentLanguageCode", "languageCodeChange"], ["locationId", "shipping-method-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "pageChange", "itemsPerPageChange"], [1, "testing-tool"], [4, "clrIfExpanded"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"], [1, "clr-row"], [1, "clr-col"], [3, "orderLinesChange"], [3, "addressChange"], [3, "currencyCode", "okToRun", "testDataUpdated", "testResult", "runTest"]], template: function ShippingMethodListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelementStart(2, "vdr-language-selector", 0);
        ɵngcc0.ɵɵlistener("languageCodeChange", function ShippingMethodListComponent_Template_vdr_language_selector_languageCodeChange_2_listener($event) { return ctx.setLanguage($event); });
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "vdr-ab-right");
        ɵngcc0.ɵɵelement(6, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(7, ShippingMethodListComponent_a_7_Template, 4, 5, "a", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "vdr-data-table", 3);
        ɵngcc0.ɵɵlistener("pageChange", function ShippingMethodListComponent_Template_vdr_data_table_pageChange_8_listener($event) { return ctx.setPageNumber($event); })("itemsPerPageChange", function ShippingMethodListComponent_Template_vdr_data_table_itemsPerPageChange_8_listener($event) { return ctx.setItemsPerPage($event); });
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵpipe(10, "async");
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵelementStart(13, "vdr-dt-column");
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "vdr-dt-column");
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(19, "vdr-dt-column");
        ɵngcc0.ɵɵelement(20, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(21, ShippingMethodListComponent_ng_template_21_Template, 19, 18, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 4);
        ɵngcc0.ɵɵelementStart(23, "clr-accordion");
        ɵngcc0.ɵɵelementStart(24, "clr-accordion-panel");
        ɵngcc0.ɵɵelementStart(25, "clr-accordion-title");
        ɵngcc0.ɵɵtext(26);
        ɵngcc0.ɵɵpipe(27, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(28, ShippingMethodListComponent_clr_accordion_content_28_Template, 9, 8, "clr-accordion-content", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("availableLanguageCodes", ɵngcc0.ɵɵpipeBind1(3, 10, ctx.availableLanguages$))("currentLanguageCode", ɵngcc0.ɵɵpipeBind1(4, 12, ctx.contentLanguage$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", ɵngcc0.ɵɵpureFunction0(28, _c13));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(9, 14, ctx.items$))("itemsPerPage", ɵngcc0.ɵɵpipeBind1(10, 16, ctx.itemsPerPage$))("totalItems", ɵngcc0.ɵɵpipeBind1(11, 18, ctx.totalItems$))("currentPage", ɵngcc0.ɵɵpipeBind1(12, 20, ctx.currentPage$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 22, "common.code"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(18, 24, "common.name"));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(27, 26, "settings.test-shipping-methods"));
    } }, directives: function () { return [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.LanguageSelectorComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc6.ClrAccordion, ɵngcc6.ÇlrAccordionWillyWonka, ɵngcc6.ClrAccordionPanel, ɵngcc6.ÇlrAccordionOompaLoompa, ɵngcc6.ClrAccordionTitle, ɵngcc6.ÇlrDatagridDetailRegisterer, ɵngcc6.ClrIfExpanded, ɵngcc4.RouterLinkWithHref, ɵngcc6.ClrIconCustomTag, ɵngcc1.TableRowActionComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective, ɵngcc6.ClrAccordionContent, TestOrderBuilderComponent, TestAddressFormComponent, ShippingEligibilityTestResultComponent]; }, pipes: function () { return [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe]; }, styles: [".testing-tool[_ngcontent-%COMP%]{margin-top:48px}"], changeDetection: 0 });
ShippingMethodListComponent.ctorParameters = () => [
    { type: ModalService },
    { type: NotificationService },
    { type: DataService },
    { type: ServerConfigService },
    { type: Router },
    { type: ActivatedRoute }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShippingMethodListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-shipping-method-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"contentLanguage$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"shipping-method-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            [routerLink]=\"['./create']\"\r\n            *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-shipping-method' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-shippingMethod=\"item\">\r\n        <td class=\"left align-middle\">{{ shippingMethod.code }}</td>\r\n        <td class=\"left align-middle\">{{ shippingMethod.name }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', shippingMethod.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteShippingMethod(shippingMethod.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteShippingMethod'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n\r\n<div class=\"testing-tool\">\r\n    <clr-accordion>\r\n        <clr-accordion-panel>\r\n            <clr-accordion-title>{{ 'settings.test-shipping-methods' | translate }}</clr-accordion-title>\r\n            <clr-accordion-content *clrIfExpanded>\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-order-builder\r\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                        ></vdr-test-order-builder>\r\n                    </div>\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-address-form\r\n                            (addressChange)=\"setTestAddress($event)\"\r\n                        ></vdr-test-address-form>\r\n                        <vdr-shipping-eligibility-test-result\r\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                            [okToRun]=\"allTestDataPresent()\"\r\n                            [testDataUpdated]=\"testDataUpdated\"\r\n                            [testResult]=\"testResult$ | async\"\r\n                            (runTest)=\"runTest()\"\r\n                        ></vdr-shipping-eligibility-test-result>\r\n                    </div>\r\n                </div>\r\n            </clr-accordion-content>\r\n        </clr-accordion-panel>\r\n    </clr-accordion>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".testing-tool{margin-top:48px}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.DataService }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }]; }, null); })();

class ShippingMethodTestResultComponent {
    constructor() {
        this.okToRun = false;
        this.testDataUpdated = false;
        this.runTest = new EventEmitter();
    }
}
ShippingMethodTestResultComponent.ɵfac = function ShippingMethodTestResultComponent_Factory(t) { return new (t || ShippingMethodTestResultComponent)(); };
ShippingMethodTestResultComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ShippingMethodTestResultComponent, selectors: [["vdr-shipping-method-test-result"]], inputs: { okToRun: "okToRun", testDataUpdated: "testDataUpdated", testResult: "testResult", currencyCode: "currencyCode" }, outputs: { runTest: "runTest" }, decls: 21, vars: 24, consts: [[1, "test-result", "card", 3, "ngClass"], [1, "card-header"], [1, "card-block"], [1, "result-details"], [3, "label"], [1, "eligible-icon"], ["shape", "success-standard", "class", "is-solid success", 4, "ngIf"], ["shape", "ban", "class", "is-solid error", 4, "ngIf"], ["shape", "unknown-status", 4, "ngIf"], [1, "price-row"], [3, "label", 4, "ngIf"], [3, "value", 4, "ngIf"], [1, "card-footer"], [1, "btn", "btn-secondary", 3, "disabled", "click"], ["shape", "success-standard", 1, "is-solid", "success"], ["shape", "ban", 1, "is-solid", "error"], ["shape", "unknown-status"], [3, "value"]], template: function ShippingMethodTestResultComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "vdr-labeled-data", 4);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementStart(8, "div", 5);
        ɵngcc0.ɵɵtemplate(9, ShippingMethodTestResultComponent_clr_icon_9_Template, 1, 0, "clr-icon", 6);
        ɵngcc0.ɵɵtemplate(10, ShippingMethodTestResultComponent_clr_icon_10_Template, 1, 0, "clr-icon", 7);
        ɵngcc0.ɵɵtemplate(11, ShippingMethodTestResultComponent_clr_icon_11_Template, 1, 0, "clr-icon", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 9);
        ɵngcc0.ɵɵtemplate(14, ShippingMethodTestResultComponent_vdr_labeled_data_14_Template, 4, 7, "vdr-labeled-data", 10);
        ɵngcc0.ɵɵtemplate(15, ShippingMethodTestResultComponent_vdr_labeled_data_15_Template, 4, 7, "vdr-labeled-data", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(16, ShippingMethodTestResultComponent_vdr_object_tree_16_Template, 1, 1, "vdr-object-tree", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "div", 12);
        ɵngcc0.ɵɵelementStart(18, "button", 13);
        ɵngcc0.ɵɵlistener("click", function ShippingMethodTestResultComponent_Template_button_click_18_listener() { return ctx.runTest.emit(); });
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(20, _c14, (ctx.testResult == null ? null : ctx.testResult.eligible) === true, (ctx.testResult == null ? null : ctx.testResult.eligible) === false, !ctx.testResult));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 14, "settings.test-result"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵclassProp("stale", ctx.testDataUpdated);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(7, 16, "settings.eligible"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.testResult == null ? null : ctx.testResult.eligible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.testResult == null ? null : ctx.testResult.eligible) === false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.testResult);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.testResult == null ? null : ctx.testResult.eligible, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.testResult == null ? null : ctx.testResult.quote == null ? null : ctx.testResult.quote.price) != null);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.testResult == null ? null : ctx.testResult.quote == null ? null : ctx.testResult.quote.priceWithTax) != null);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.testResult == null ? null : ctx.testResult.quote == null ? null : ctx.testResult.quote.metadata);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.okToRun);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 18, "settings.test-shipping-method"), " ");
    } }, directives: [ɵngcc2.NgClass, ɵngcc1.LabeledDataComponent, ɵngcc2.NgIf, ɵngcc6.ClrIconCustomTag, ɵngcc1.ObjectTreeComponent], pipes: [ɵngcc3.TranslatePipe, ɵngcc1.LocaleCurrencyPipe], styles: [".test-result.success[_ngcontent-%COMP%]   .card-block[_ngcontent-%COMP%]{background-color:var(--color-success-100)}.test-result.error[_ngcontent-%COMP%]   .card-block[_ngcontent-%COMP%]{background-color:var(--color-error-100)}.test-result.unknown[_ngcontent-%COMP%]   .card-block[_ngcontent-%COMP%]{background-color:var(--color-component-bg-100)}.result-details[_ngcontent-%COMP%]{transition:opacity .2s}.result-details.stale[_ngcontent-%COMP%]{opacity:.5}.eligible-icon[_ngcontent-%COMP%]{display:inline-block}.eligible-icon[_ngcontent-%COMP%]   .success[_ngcontent-%COMP%]{color:var(--color-success-500)}.eligible-icon[_ngcontent-%COMP%]   .error[_ngcontent-%COMP%]{color:var(--color-error-500)}.price-row[_ngcontent-%COMP%]{display:flex}.price-row[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]:not(:first-child){margin-left:24px}"], changeDetection: 0 });
ShippingMethodTestResultComponent.propDecorators = {
    testResult: [{ type: Input }],
    okToRun: [{ type: Input }],
    testDataUpdated: [{ type: Input }],
    currencyCode: [{ type: Input }],
    runTest: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShippingMethodTestResultComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-shipping-method-test-result',
                template: "<div\r\n    class=\"test-result card\"\r\n    [ngClass]=\"{\r\n        success: testResult?.eligible === true,\r\n        error: testResult?.eligible === false,\r\n        unknown: !testResult\r\n    }\"\r\n>\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-result' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\r\n            <vdr-labeled-data [label]=\"'settings.eligible' | translate\">\r\n                <div class=\"eligible-icon\">\r\n                    <clr-icon\r\n                        shape=\"success-standard\"\r\n                        class=\"is-solid success\"\r\n                        *ngIf=\"testResult?.eligible\"\r\n                    ></clr-icon>\r\n                    <clr-icon\r\n                        shape=\"ban\"\r\n                        class=\"is-solid error\"\r\n                        *ngIf=\"testResult?.eligible === false\"\r\n                    ></clr-icon>\r\n                    <clr-icon shape=\"unknown-status\" *ngIf=\"!testResult\"></clr-icon>\r\n                </div>\r\n                {{ testResult?.eligible }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data\r\n                    [label]=\"'common.price' | translate\"\r\n                    *ngIf=\"testResult?.quote?.price != null\"\r\n                >\r\n                    {{ testResult.quote?.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data\r\n                    [label]=\"'common.price-with-tax' | translate\"\r\n                    *ngIf=\"testResult?.quote?.priceWithTax != null\"\r\n                >\r\n                    {{ testResult.quote?.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree\r\n                *ngIf=\"testResult?.quote?.metadata\"\r\n                [value]=\"testResult?.quote?.metadata\"\r\n            ></vdr-object-tree>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\r\n            {{ 'settings.test-shipping-method' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".test-result.success .card-block{background-color:var(--color-success-100)}.test-result.error .card-block{background-color:var(--color-error-100)}.test-result.unknown .card-block{background-color:var(--color-component-bg-100)}.result-details{transition:opacity .2s}.result-details.stale{opacity:.5}.eligible-icon{display:inline-block}.eligible-icon .success{color:var(--color-success-500)}.eligible-icon .error{color:var(--color-error-500)}.price-row{display:flex}.price-row>*:not(:first-child){margin-left:24px}\n"]
            }]
    }], function () { return []; }, { okToRun: [{
            type: Input
        }], testDataUpdated: [{
            type: Input
        }], runTest: [{
            type: Output
        }], testResult: [{
            type: Input
        }], currencyCode: [{
            type: Input
        }] }); })();

class TaxCategoryDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];
        this.customFields = this.getCustomFieldConfig('TaxCategory');
        this.detailForm = this.formBuilder.group({
            name: ['', Validators.required],
            isDefault: false,
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
        this.taxCategory$ = this.entity$;
    }
    ngOnDestroy() {
        this.destroy();
    }
    saveButtonEnabled() {
        return this.detailForm.dirty && this.detailForm.valid;
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        const input = {
            name: formValue.name,
            isDefault: formValue.isDefault,
            customFields: formValue.customFields,
        };
        this.dataService.settings.createTaxCategory(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'TaxCategory',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'TaxCategory',
            });
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.taxCategory$
            .pipe(take(1), mergeMap(taxCategory => {
            const input = {
                id: taxCategory.id,
                name: formValue.name,
                isDefault: formValue.isDefault,
                customFields: formValue.customFields,
            };
            return this.dataService.settings.updateTaxCategory(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'TaxCategory',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'TaxCategory',
            });
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            name: entity.name,
            isDefault: entity.isDefault,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
}
TaxCategoryDetailComponent.ɵfac = function TaxCategoryDetailComponent_Factory(t) { return new (t || TaxCategoryDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
TaxCategoryDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TaxCategoryDetailComponent, selectors: [["vdr-tax-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 22, vars: 23, consts: [[3, "entity"], ["locationId", "tax-category-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], [1, "form", 3, "formGroup"], ["for", "name", 3, "label"], ["id", "name", "type", "text", "formControlName", "name", 3, "readonly"], ["for", "isDefault", 3, "label"], ["type", "checkbox", "clrToggle", "", "id", "isDefault", "formControlName", "isDefault", 3, "vdrDisabled"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "tax-category-detail", 3, "entity$", "detailForm"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], ["formGroupName", "customFields"], ["entityName", "TaxCategory", 3, "customFields", "customFieldsFormGroup", "readonly"]], template: function TaxCategoryDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(6, TaxCategoryDetailComponent_button_6_Template, 3, 4, "button", 2);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵtemplate(8, TaxCategoryDetailComponent_ng_template_8_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "form", 4);
        ɵngcc0.ɵɵelementStart(11, "vdr-form-field", 5);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelement(13, "input", 6);
        ɵngcc0.ɵɵpipe(14, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-form-field", 7);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementStart(17, "clr-toggle-wrapper");
        ɵngcc0.ɵɵelement(18, "input", 8);
        ɵngcc0.ɵɵpipe(19, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(20, TaxCategoryDetailComponent_section_20_Template, 6, 8, "section", 9);
        ɵngcc0.ɵɵelement(21, "vdr-custom-detail-component-host", 10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 11, ctx.entity$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(7, 13, ctx.isNew$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(12, 15, "common.name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(14, 17, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(16, 19, "common.default-tax-category"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(19, 21, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("entity$", ctx.entity$)("detailForm", ctx.detailForm);
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc2.NgIf, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc6.ClrCheckboxWrapper, ɵngcc5.CheckboxControlValueAccessor, ɵngcc6.ClrCheckbox, ɵngcc1.DisabledDirective, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc1.IfPermissionsDirective, ɵngcc5.FormGroupName, ɵngcc6.ClrLabel, ɵngcc1.TabbedCustomFieldsComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
TaxCategoryDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaxCategoryDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-tax-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-category-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.default-tax-category' | translate\" for=\"isDefault\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"isDefault\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"isDefault\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"TaxCategory\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"tax-category-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class TaxCategoryListComponent {
    constructor(dataService, notificationService, modalService) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.queryResult = this.dataService.settings.getTaxCategories();
        this.taxCategories$ = this.queryResult.mapStream(data => data.taxCategories);
    }
    deleteTaxCategory(taxCategory) {
        return this.modalService
            .dialog({
            title: marker('settings.confirm-delete-tax-category'),
            body: taxCategory.name,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => (res ? this.dataService.settings.deleteTaxCategory(taxCategory.id) : EMPTY)), map(res => res.deleteTaxCategory))
            .subscribe(res => {
            if (res.result === DeletionResult.DELETED) {
                this.notificationService.success(marker('common.notify-delete-success'), {
                    entity: 'TaxRate',
                });
                this.queryResult.ref.refetch();
            }
            else {
                this.notificationService.error(res.message || marker('common.notify-delete-error'), {
                    entity: 'TaxRate',
                });
            }
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'TaxRate',
            });
        });
    }
}
TaxCategoryListComponent.ɵfac = function TaxCategoryListComponent_Factory(t) { return new (t || TaxCategoryListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService)); };
TaxCategoryListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TaxCategoryListComponent, selectors: [["vdr-tax-list"]], decls: 13, vars: 8, consts: [["locationId", "tax-category-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [4, "ngIf"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"]], template: function TaxCategoryListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-right");
        ɵngcc0.ɵɵelement(2, "vdr-action-bar-items", 0);
        ɵngcc0.ɵɵtemplate(3, TaxCategoryListComponent_a_3_Template, 4, 5, "a", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-data-table", 2);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementStart(6, "vdr-dt-column");
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "vdr-dt-column");
        ɵngcc0.ɵɵelement(10, "vdr-dt-column");
        ɵngcc0.ɵɵelement(11, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(12, TaxCategoryListComponent_ng_template_12_Template, 19, 18, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", ɵngcc0.ɵɵpureFunction0(7, _c16));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(5, 3, ctx.taxCategories$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 5, "common.name"));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc4.RouterLinkWithHref, ɵngcc6.ClrIconCustomTag, ɵngcc2.NgIf, ɵngcc1.TableRowActionComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective, ɵngcc1.ChipComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
TaxCategoryListComponent.ctorParameters = () => [
    { type: DataService },
    { type: NotificationService },
    { type: ModalService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaxCategoryListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-tax-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-category-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxCategory']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-tax-category' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table [items]=\"taxCategories$ | async\">\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-taxCategory=\"item\">\r\n        <td class=\"left align-middle\">{{ taxCategory.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-chip *ngIf=\"taxCategory.isDefault\">{{ 'common.default-tax-category' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', taxCategory.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteTaxCategory(taxCategory)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxCategory'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.ModalService }]; }, null); })();

class TaxRateDetailComponent extends BaseDetailComponent {
    constructor(router, route, serverConfigService, changeDetector, dataService, formBuilder, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];
        this.customFields = this.getCustomFieldConfig('TaxRate');
        this.detailForm = this.formBuilder.group({
            name: ['', Validators.required],
            enabled: [true],
            value: [0, Validators.required],
            taxCategoryId: [''],
            zoneId: [''],
            customerGroupId: [''],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
    }
    ngOnInit() {
        this.init();
        this.taxCategories$ = this.dataService.settings
            .getTaxCategories()
            .mapSingle(data => data.taxCategories);
        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);
    }
    ngOnDestroy() {
        this.destroy();
    }
    saveButtonEnabled() {
        return this.detailForm.dirty && this.detailForm.valid;
    }
    create() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        const input = {
            name: formValue.name,
            enabled: formValue.enabled,
            value: formValue.value,
            categoryId: formValue.taxCategoryId,
            zoneId: formValue.zoneId,
            customerGroupId: formValue.customerGroupId,
            customFields: formValue.customFields,
        };
        this.dataService.settings.createTaxRate(input).subscribe(data => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'TaxRate',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'TaxRate',
            });
        });
    }
    save() {
        if (!this.detailForm.dirty) {
            return;
        }
        const formValue = this.detailForm.value;
        this.entity$
            .pipe(take(1), mergeMap(taxRate => {
            const input = {
                id: taxRate.id,
                name: formValue.name,
                enabled: formValue.enabled,
                value: formValue.value,
                categoryId: formValue.taxCategoryId,
                zoneId: formValue.zoneId,
                customerGroupId: formValue.customerGroupId,
                customFields: formValue.customFields,
            };
            return this.dataService.settings.updateTaxRate(input);
        }))
            .subscribe(data => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'TaxRate',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'TaxRate',
            });
        });
    }
    /**
     * Update the form values when the entity changes.
     */
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            name: entity.name,
            enabled: entity.enabled,
            value: entity.value,
            taxCategoryId: entity.category ? entity.category.id : '',
            zoneId: entity.zone ? entity.zone.id : '',
            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);
        }
    }
}
TaxRateDetailComponent.ɵfac = function TaxRateDetailComponent_Factory(t) { return new (t || TaxRateDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
TaxRateDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TaxRateDetailComponent, selectors: [["vdr-tax-rate-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 39, vars: 47, consts: [[3, "entity"], ["locationId", "tax-rate-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], [1, "form", 3, "formGroup"], ["for", "name", 3, "label"], ["id", "name", "type", "text", "formControlName", "name", 3, "readonly"], ["for", "enabled", 3, "label"], ["type", "checkbox", "clrToggle", "", "id", "enabled", "formControlName", "enabled", 3, "vdrDisabled"], ["for", "value", 3, "label"], ["suffix", "%"], ["id", "value", "type", "number", "step", "0.1", "formControlName", "value", 3, "readonly"], ["for", "taxCategoryId", 3, "label"], ["clrSelect", "", "name", "taxCategoryId", "formControlName", "taxCategoryId", 3, "vdrDisabled"], [3, "value", 4, "ngFor", "ngForOf"], ["for", "zoneId", 3, "label"], ["clrSelect", "", "name", "zoneId", "formControlName", "zoneId", 3, "vdrDisabled"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "tax-rate-detail", 3, "entity$", "detailForm"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], [3, "value"], ["formGroupName", "customFields"], ["entityName", "TaxRate", 3, "customFields", "customFieldsFormGroup", "readonly"]], template: function TaxRateDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "vdr-entity-info", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(6, TaxRateDetailComponent_button_6_Template, 3, 4, "button", 2);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵtemplate(8, TaxRateDetailComponent_ng_template_8_Template, 1, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "form", 4);
        ɵngcc0.ɵɵelementStart(11, "vdr-form-field", 5);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelement(13, "input", 6);
        ɵngcc0.ɵɵpipe(14, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-form-field", 7);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementStart(17, "clr-toggle-wrapper");
        ɵngcc0.ɵɵelement(18, "input", 8);
        ɵngcc0.ɵɵpipe(19, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "vdr-form-field", 9);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementStart(22, "vdr-affixed-input", 10);
        ɵngcc0.ɵɵelement(23, "input", 11);
        ɵngcc0.ɵɵpipe(24, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "vdr-form-field", 12);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementStart(27, "select", 13);
        ɵngcc0.ɵɵpipe(28, "hasPermission");
        ɵngcc0.ɵɵtemplate(29, TaxRateDetailComponent_option_29_Template, 2, 2, "option", 14);
        ɵngcc0.ɵɵpipe(30, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(31, "vdr-form-field", 15);
        ɵngcc0.ɵɵpipe(32, "translate");
        ɵngcc0.ɵɵelementStart(33, "select", 16);
        ɵngcc0.ɵɵpipe(34, "hasPermission");
        ɵngcc0.ɵɵtemplate(35, TaxRateDetailComponent_option_35_Template, 2, 2, "option", 14);
        ɵngcc0.ɵɵpipe(36, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(37, TaxRateDetailComponent_section_37_Template, 6, 8, "section", 17);
        ɵngcc0.ɵɵelement(38, "vdr-custom-detail-component-host", 18);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(3, 19, ctx.entity$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(7, 21, ctx.isNew$))("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(12, 23, "common.name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(14, 25, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(16, 27, "common.enabled"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(19, 29, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(21, 31, "settings.rate"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(24, 33, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(26, 35, "settings.tax-category"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(28, 37, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(30, 39, ctx.taxCategories$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(32, 41, "settings.zone"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("vdrDisabled", !ɵngcc0.ɵɵpipeBind1(34, 43, ctx.updatePermission));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(36, 45, ctx.zones$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("entity$", ctx.entity$)("detailForm", ctx.detailForm);
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc2.NgIf, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc6.ClrCheckboxWrapper, ɵngcc5.CheckboxControlValueAccessor, ɵngcc6.ClrCheckbox, ɵngcc1.DisabledDirective, ɵngcc1.AffixedInputComponent, ɵngcc5.NumberValueAccessor, ɵngcc5.SelectControlValueAccessor, ɵngcc6.ClrSelect, ɵngcc2.NgForOf, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc1.IfPermissionsDirective, ɵngcc5.NgSelectOption, ɵngcc5.ɵNgSelectMultipleOption, ɵngcc5.FormGroupName, ɵngcc6.ClrLabel, ɵngcc1.TabbedCustomFieldsComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
TaxRateDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: DataService },
    { type: FormBuilder },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaxRateDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-tax-rate-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-rate-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                formControlName=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.rate' | translate\" for=\"value\">\r\n        <vdr-affixed-input suffix=\"%\">\r\n            <input\r\n                id=\"value\"\r\n                type=\"number\"\r\n                step=\"0.1\"\r\n                formControlName=\"value\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </vdr-affixed-input>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.tax-category' | translate\" for=\"taxCategoryId\">\r\n        <select\r\n            clrSelect\r\n            name=\"taxCategoryId\"\r\n            formControlName=\"taxCategoryId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let taxCategory of taxCategories$ | async\" [value]=\"taxCategory.id\">\r\n                {{ taxCategory.name }}\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.zone' | translate\" for=\"zoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"zoneId\"\r\n            formControlName=\"zoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"TaxRate\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"tax-rate-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DataService }, { type: ɵngcc5.FormBuilder }, { type: ɵngcc1.NotificationService }]; }, null); })();

class TaxRateListComponent extends BaseListComponent {
    constructor(modalService, notificationService, dataService, router, route) {
        super(router, route);
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.dataService = dataService;
        super.setQueryFn((...args) => this.dataService.settings.getTaxRates(...args), data => data.taxRates);
    }
    deleteTaxRate(taxRate) {
        return this.modalService
            .dialog({
            title: marker('settings.confirm-delete-tax-rate'),
            body: taxRate.name,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => (res ? this.dataService.settings.deleteTaxRate(taxRate.id) : EMPTY)), map(res => res.deleteTaxRate))
            .subscribe(res => {
            if (res.result === DeletionResult.DELETED) {
                this.notificationService.success(marker('common.notify-delete-success'), {
                    entity: 'TaxRate',
                });
                this.refresh();
            }
            else {
                this.notificationService.error(res.message || marker('common.notify-delete-error'), {
                    entity: 'TaxRate',
                });
            }
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'TaxRate',
            });
        });
    }
}
TaxRateListComponent.ɵfac = function TaxRateListComponent_Factory(t) { return new (t || TaxRateListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute)); };
TaxRateListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TaxRateListComponent, selectors: [["vdr-tax-rate-list"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 24, vars: 26, consts: [["locationId", "tax-rate-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "pageChange", "itemsPerPageChange"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"]], template: function TaxRateListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-right");
        ɵngcc0.ɵɵelement(2, "vdr-action-bar-items", 0);
        ɵngcc0.ɵɵtemplate(3, TaxRateListComponent_a_3_Template, 4, 5, "a", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-data-table", 2);
        ɵngcc0.ɵɵlistener("pageChange", function TaxRateListComponent_Template_vdr_data_table_pageChange_4_listener($event) { return ctx.setPageNumber($event); })("itemsPerPageChange", function TaxRateListComponent_Template_vdr_data_table_itemsPerPageChange_4_listener($event) { return ctx.setItemsPerPage($event); });
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementStart(9, "vdr-dt-column");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "vdr-dt-column");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-dt-column");
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "vdr-dt-column");
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(21, "vdr-dt-column");
        ɵngcc0.ɵɵelement(22, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(23, TaxRateListComponent_ng_template_23_Template, 23, 20, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", ɵngcc0.ɵɵpureFunction0(25, _c18));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(5, 9, ctx.items$))("itemsPerPage", ɵngcc0.ɵɵpipeBind1(6, 11, ctx.itemsPerPage$))("totalItems", ɵngcc0.ɵɵpipeBind1(7, 13, ctx.totalItems$))("currentPage", ɵngcc0.ɵɵpipeBind1(8, 15, ctx.currentPage$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 17, "common.name"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 19, "settings.tax-category"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 21, "settings.zone"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 23, "settings.tax-rate"));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc4.RouterLinkWithHref, ɵngcc6.ClrIconCustomTag, ɵngcc1.TableRowActionComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
TaxRateListComponent.ctorParameters = () => [
    { type: ModalService },
    { type: NotificationService },
    { type: DataService },
    { type: Router },
    { type: ActivatedRoute }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaxRateListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-tax-rate-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-rate-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-tax-rate' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.tax-category' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.tax-rate' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-taxRate=\"item\">\r\n        <td class=\"left align-middle\">{{ taxRate.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.category.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.zone.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.value }}%</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', taxRate.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteTaxRate(taxRate)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxRate'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.DataService }, { type: ɵngcc4.Router }, { type: ɵngcc4.ActivatedRoute }]; }, null); })();

class TestAddressFormComponent {
    constructor(formBuilder, dataService, localStorageService) {
        this.formBuilder = formBuilder;
        this.dataService = dataService;
        this.localStorageService = localStorageService;
        this.addressChange = new EventEmitter();
    }
    ngOnInit() {
        this.availableCountries$ = this.dataService.settings
            .getAvailableCountries()
            .mapSingle(result => result.countries.items);
        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');
        const initialValue = storedValue
            ? storedValue
            : {
                city: '',
                countryCode: '',
                postalCode: '',
                province: '',
            };
        this.addressChange.emit(initialValue);
        this.form = this.formBuilder.group(initialValue);
        this.subscription = this.form.valueChanges.subscribe(value => {
            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);
            this.addressChange.emit(value);
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
TestAddressFormComponent.ɵfac = function TestAddressFormComponent_Factory(t) { return new (t || TestAddressFormComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalStorageService)); };
TestAddressFormComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TestAddressFormComponent, selectors: [["vdr-test-address-form"]], outputs: { addressChange: "addressChange" }, decls: 28, vars: 19, consts: [[1, "card"], [1, "card-header"], [1, "card-block"], [3, "formGroup"], ["formControlName", "city", "type", "text", "clrInput", ""], ["formControlName", "province", "type", "text", "clrInput", ""], ["formControlName", "postalCode", "type", "text", "clrInput", ""], ["name", "countryCode", "formControlName", "countryCode", "clrInput", "", "clrSelect", ""], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"]], template: function TestAddressFormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "form", 3);
        ɵngcc0.ɵɵelementStart(6, "clr-input-container");
        ɵngcc0.ɵɵelementStart(7, "label");
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(10, "input", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "clr-input-container");
        ɵngcc0.ɵɵelementStart(12, "label");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(15, "input", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "clr-input-container");
        ɵngcc0.ɵɵelementStart(17, "label");
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(20, "input", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "clr-input-container");
        ɵngcc0.ɵɵelementStart(22, "label");
        ɵngcc0.ɵɵtext(23);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "select", 7);
        ɵngcc0.ɵɵtemplate(26, TestAddressFormComponent_option_26_Template, 2, 2, "option", 8);
        ɵngcc0.ɵɵpipe(27, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 7, "settings.test-address"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 9, "customer.city"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 11, "customer.province"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(19, 13, "customer.postal-code"));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(24, 15, "customer.country"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(27, 17, ctx.availableCountries$));
    } }, directives: [ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc6.ClrInputContainer, ɵngcc6.ClrLabel, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc6.ClrInput, ɵngcc5.SelectControlValueAccessor, ɵngcc6.ClrSelect, ɵngcc2.NgForOf, ɵngcc5.NgSelectOption, ɵngcc5.ɵNgSelectMultipleOption], pipes: [ɵngcc3.TranslatePipe, ɵngcc2.AsyncPipe], styles: ["clr-input-container[_ngcontent-%COMP%]{margin-bottom:12px}"], changeDetection: 0 });
TestAddressFormComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: DataService },
    { type: LocalStorageService }
];
TestAddressFormComponent.propDecorators = {
    addressChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TestAddressFormComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-test-address-form',
                template: "<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-address' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <form [formGroup]=\"form\">\r\n            <clr-input-container>\r\n                <label>{{ 'customer.city' | translate }}</label>\r\n                <input formControlName=\"city\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.province' | translate }}</label>\r\n                <input formControlName=\"province\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.postal-code' | translate }}</label>\r\n                <input formControlName=\"postalCode\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.country' | translate }}</label>\r\n                <select name=\"countryCode\" formControlName=\"countryCode\" clrInput clrSelect>\r\n                    <option *ngFor=\"let country of availableCountries$ | async\" [value]=\"country.code\">\r\n                        {{ country.name }}\r\n                    </option>\r\n                </select>\r\n            </clr-input-container>\r\n        </form>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["clr-input-container{margin-bottom:12px}\n"]
            }]
    }], function () { return [{ type: ɵngcc5.FormBuilder }, { type: ɵngcc1.DataService }, { type: ɵngcc1.LocalStorageService }]; }, { addressChange: [{
            type: Output
        }] }); })();

class TestOrderBuilderComponent {
    constructor(dataService, localStorageService) {
        this.dataService = dataService;
        this.localStorageService = localStorageService;
        this.orderLinesChange = new EventEmitter();
        this.lines = [];
    }
    get subTotal() {
        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);
    }
    ngOnInit() {
        this.lines = this.loadFromLocalStorage();
        if (this.lines) {
            this.orderLinesChange.emit(this.lines);
        }
        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {
            this.currencyCode = result.activeChannel.currencyCode;
        });
    }
    selectResult(result) {
        if (result) {
            this.addToLines(result);
        }
    }
    addToLines(result) {
        var _a, _b;
        if (!this.lines.find(l => l.id === result.productVariantId)) {
            this.lines.push({
                id: result.productVariantId,
                name: result.productVariantName,
                preview: (_b = (_a = result.productAsset) === null || _a === void 0 ? void 0 : _a.preview) !== null && _b !== void 0 ? _b : '',
                quantity: 1,
                sku: result.sku,
                unitPriceWithTax: (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,
            });
            this.persistToLocalStorage();
            this.orderLinesChange.emit(this.lines);
        }
    }
    updateQuantity() {
        this.persistToLocalStorage();
        this.orderLinesChange.emit(this.lines);
    }
    removeLine(line) {
        this.lines = this.lines.filter(l => l.id !== line.id);
        this.persistToLocalStorage();
        this.orderLinesChange.emit(this.lines);
    }
    persistToLocalStorage() {
        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);
    }
    loadFromLocalStorage() {
        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];
    }
}
TestOrderBuilderComponent.ɵfac = function TestOrderBuilderComponent_Factory(t) { return new (t || TestOrderBuilderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalStorageService)); };
TestOrderBuilderComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TestOrderBuilderComponent, selectors: [["vdr-test-order-builder"]], outputs: { orderLinesChange: "orderLinesChange" }, decls: 9, vars: 5, consts: [[1, "card"], [1, "card-header"], ["class", "order-table table", 4, "ngIf", "ngIfElse"], ["emptyPlaceholder", ""], [1, "card-block"], [3, "productSelected"], [1, "order-table", "table"], ["class", "order-line", 4, "ngFor", "ngForOf"], [1, "sub-total"], [1, "left"], [1, "order-line"], [1, "align-middle", "thumb"], [3, "src"], [1, "align-middle", "name"], [1, "align-middle", "sku"], [1, "align-middle", "unit-price"], [1, "align-middle", "quantity"], ["type", "number", "max", "9999", "min", "1", 3, "ngModel", "ngModelChange", "change"], [1, "icon-button", 3, "click"], ["shape", "trash"], [1, "align-middle", "total"], [1, "card-block", "empty-placeholder"], [1, "empty-text"], ["shape", "arrow", "dir", "down", "size", "96"]], template: function TestOrderBuilderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, TestOrderBuilderComponent_table_4_Template, 31, 23, "table", 2);
        ɵngcc0.ɵɵtemplate(5, TestOrderBuilderComponent_ng_template_5_Template, 5, 3, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(7, "div", 4);
        ɵngcc0.ɵɵelementStart(8, "vdr-product-selector", 5);
        ɵngcc0.ɵɵlistener("productSelected", function TestOrderBuilderComponent_Template_vdr_product_selector_productSelected_8_listener($event) { return ctx.selectResult($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "settings.test-order"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.lines.length)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc1.ProductSelectorComponent, ɵngcc2.NgForOf, ɵngcc1.FormFieldControlDirective, ɵngcc5.MaxValidator, ɵngcc5.MinValidator, ɵngcc5.NumberValueAccessor, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc6.ClrIconCustomTag, ɵngcc8.Dir], pipes: [ɵngcc3.TranslatePipe, ɵngcc1.LocaleCurrencyPipe], styles: [".empty-placeholder[_ngcontent-%COMP%]{color:var(--color-grey-400);text-align:center}.empty-text[_ngcontent-%COMP%]{font-size:22px}"], changeDetection: 0 });
TestOrderBuilderComponent.ctorParameters = () => [
    { type: DataService },
    { type: LocalStorageService }
];
TestOrderBuilderComponent.propDecorators = {
    orderLinesChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TestOrderBuilderComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-test-order-builder',
                template: "<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-order' | translate }}\r\n    </div>\r\n    <table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th>{{ 'order.product-name' | translate }}</th>\r\n                <th>{{ 'order.product-sku' | translate }}</th>\r\n                <th>{{ 'order.unit-price' | translate }}</th>\r\n                <th>{{ 'order.quantity' | translate }}</th>\r\n                <th>{{ 'order.total' | translate }}</th>\r\n            </tr>\r\n        </thead>\r\n        <tr *ngFor=\"let line of lines\" class=\"order-line\">\r\n            <td class=\"align-middle thumb\">\r\n                <img [src]=\"line.preview + '?preset=tiny'\" />\r\n            </td>\r\n            <td class=\"align-middle name\">{{ line.name }}</td>\r\n            <td class=\"align-middle sku\">{{ line.sku }}</td>\r\n            <td class=\"align-middle unit-price\">\r\n                {{ line.unitPriceWithTax | localeCurrency: currencyCode }}\r\n            </td>\r\n            <td class=\"align-middle quantity\">\r\n                <input\r\n                    [(ngModel)]=\"line.quantity\"\r\n                    (change)=\"updateQuantity()\"\r\n                    type=\"number\"\r\n                    max=\"9999\"\r\n                    min=\"1\"\r\n                />\r\n                <button class=\"icon-button\" (click)=\"removeLine(line)\">\r\n                    <clr-icon shape=\"trash\"></clr-icon>\r\n                </button>\r\n            </td>\r\n            <td class=\"align-middle total\">\r\n                {{ (line.unitPriceWithTax * line.quantity) | localeCurrency: currencyCode }}\r\n            </td>\r\n        </tr>\r\n        <tr class=\"sub-total\">\r\n            <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>{{ subTotal | localeCurrency: currencyCode }}</td>\r\n        </tr>\r\n    </table>\r\n\r\n    <ng-template #emptyPlaceholder>\r\n        <div class=\"card-block empty-placeholder\">\r\n            <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\r\n            <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\r\n        </div>\r\n    </ng-template>\r\n    <div class=\"card-block\">\r\n        <vdr-product-selector (productSelected)=\"selectResult($event)\"> </vdr-product-selector>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".empty-placeholder{color:var(--color-grey-400);text-align:center}.empty-text{font-size:22px}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc1.LocalStorageService }]; }, { orderLinesChange: [{
            type: Output
        }] }); })();

class ZoneDetailDialogComponent {
    constructor(serverConfigService, formBuilder) {
        this.serverConfigService = serverConfigService;
        this.formBuilder = formBuilder;
        this.customFields = this.serverConfigService.getCustomFieldsFor('CustomerGroup');
    }
    ngOnInit() {
        var _a;
        this.form = this.formBuilder.group({
            name: [this.zone.name, Validators.required],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
        if (this.customFields.length) {
            const customFieldsGroup = this.form.get('customFields');
            for (const fieldDef of this.customFields) {
                const key = fieldDef.name;
                const value = (_a = this.zone.customFields) === null || _a === void 0 ? void 0 : _a[key];
                const control = customFieldsGroup.get(key);
                if (control) {
                    control.patchValue(value);
                }
            }
        }
    }
    cancel() {
        this.resolveWith();
    }
    save() {
        this.resolveWith(this.form.value);
    }
}
ZoneDetailDialogComponent.ɵfac = function ZoneDetailDialogComponent_Factory(t) { return new (t || ZoneDetailDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormBuilder)); };
ZoneDetailDialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ZoneDetailDialogComponent, selectors: [["vdr-zone-detail-dialog"]], decls: 9, vars: 14, consts: [["vdrDialogTitle", ""], [3, "formGroup"], ["for", "name", 3, "label"], ["id", "name", "type", "text", "formControlName", "name", 3, "readonly"], ["entityName", "Zone", 3, "customFields", "customFieldsFormGroup", "readonly"], ["vdrDialogButtons", ""], [4, "ngIf"], ["type", "button", 1, "btn", 3, "click"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "click"]], template: function ZoneDetailDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ZoneDetailDialogComponent_ng_template_0_Template, 2, 2, "ng-template", 0);
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵelementStart(2, "vdr-form-field", 2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelement(4, "input", 3);
        ɵngcc0.ɵɵpipe(5, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "vdr-tabbed-custom-fields", 4);
        ɵngcc0.ɵɵpipe(7, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, ZoneDetailDialogComponent_ng_template_8_Template, 6, 6, "ng-template", 5);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(3, 6, "common.name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(5, 8, ɵngcc0.ɵɵpureFunction0(12, _c19)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("customFields", ctx.customFields)("customFieldsFormGroup", ctx.form.get("customFields"))("readonly", !ɵngcc0.ɵɵpipeBind1(7, 10, ɵngcc0.ɵɵpureFunction0(13, _c19)));
    } }, directives: [ɵngcc1.DialogTitleDirective, ɵngcc5.ɵNgNoValidate, ɵngcc5.NgControlStatusGroup, ɵngcc5.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.FormControlName, ɵngcc1.TabbedCustomFieldsComponent, ɵngcc1.DialogButtonsDirective, ɵngcc2.NgIf], pipes: [ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
ZoneDetailDialogComponent.ctorParameters = () => [
    { type: ServerConfigService },
    { type: FormBuilder }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZoneDetailDialogComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-zone-detail-dialog',
                template: "<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\r\n    <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\r\n</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-tabbed-custom-fields\r\n        entityName=\"Zone\"\r\n        [customFields]=\"customFields\"\r\n        [customFieldsFormGroup]=\"form.get('customFields')\"\r\n        [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n    ></vdr-tabbed-custom-fields>\r\n</form>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\r\n        <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\r\n    </button>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.ServerConfigService }, { type: ɵngcc5.FormBuilder }]; }, null); })();

class ZoneListComponent {
    constructor(dataService, notificationService, modalService, route, router, serverConfigService) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.route = route;
        this.router = router;
        this.serverConfigService = serverConfigService;
        this.selectedMemberIds = [];
    }
    ngOnInit() {
        const zonesQueryRef = this.dataService.settings.getZones().ref;
        this.zones$ = zonesQueryRef.valueChanges.pipe(map(data => data.data.zones));
        const activeZoneId$ = this.route.paramMap.pipe(map(pm => pm.get('contents')), distinctUntilChanged(), tap(() => (this.selectedMemberIds = [])));
        this.activeZone$ = combineLatest(this.zones$, activeZoneId$).pipe(map(([zones, activeZoneId]) => {
            if (activeZoneId) {
                return zones.find(z => z.id === activeZoneId);
            }
        }));
        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();
        this.contentLanguage$ = this.dataService.client
            .uiState()
            .mapStream(({ uiState }) => uiState.contentLanguage)
            .pipe(tap(() => zonesQueryRef.refetch()));
    }
    setLanguage(code) {
        this.dataService.client.setContentLanguage(code).subscribe();
    }
    create() {
        this.modalService
            .fromComponent(ZoneDetailDialogComponent, { locals: { zone: { name: '' } } })
            .pipe(switchMap(result => result ? this.dataService.settings.createZone(Object.assign(Object.assign({}, result), { memberIds: [] })) : EMPTY), 
        // refresh list
        switchMap(() => this.dataService.settings.getZones().single$))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Zone',
            });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'Zone',
            });
        });
    }
    delete(zoneId) {
        this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-zone'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => (response ? this.dataService.settings.deleteZone(zoneId) : EMPTY)), switchMap(result => {
            if (result.deleteZone.result === DeletionResult.DELETED) {
                // refresh list
                return this.dataService.settings
                    .getZones()
                    .mapSingle(() => ({ errorMessage: false }));
            }
            else {
                return of({ errorMessage: result.deleteZone.message });
            }
        }))
            .subscribe(result => {
            if (typeof result.errorMessage === 'string') {
                this.notificationService.error(result.errorMessage);
            }
            else {
                this.notificationService.success(marker('common.notify-delete-success'), {
                    entity: 'Zone',
                });
            }
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'Zone',
            });
        });
    }
    update(zone) {
        this.modalService
            .fromComponent(ZoneDetailDialogComponent, { locals: { zone } })
            .pipe(switchMap(result => result ? this.dataService.settings.updateZone(Object.assign({ id: zone.id }, result)) : EMPTY))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Zone',
            });
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Zone',
            });
        });
    }
    closeMembers() {
        const params = Object.assign({}, this.route.snapshot.params);
        delete params.contents;
        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });
    }
    addToZone(zone) {
        this.modalService
            .fromComponent(AddCountryToZoneDialogComponent, {
            locals: {
                zoneName: zone.name,
                currentMembers: zone.members,
            },
            size: 'md',
        })
            .pipe(switchMap(memberIds => memberIds
            ? this.dataService.settings
                .addMembersToZone(zone.id, memberIds)
                .pipe(mapTo(memberIds))
            : EMPTY))
            .subscribe({
            next: result => {
                this.notificationService.success(marker(`settings.add-countries-to-zone-success`), {
                    countryCount: result.length,
                    zoneName: zone.name,
                });
            },
            error: err => {
                this.notificationService.error(err);
            },
        });
    }
    removeFromZone(zone, memberIds) {
        this.dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({
            complete: () => {
                this.notificationService.success(marker(`settings.remove-countries-from-zone-success`), {
                    countryCount: memberIds.length,
                    zoneName: zone.name,
                });
            },
        });
    }
}
ZoneListComponent.ɵfac = function ZoneListComponent_Factory(t) { return new (t || ZoneListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService)); };
ZoneListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ZoneListComponent, selectors: [["vdr-zone-list"]], decls: 18, vars: 18, consts: [[3, "availableLanguageCodes", "currentLanguageCode", "languageCodeChange"], ["locationId", "zone-list"], ["class", "btn btn-primary", 3, "click", 4, "vdrIfPermissions"], [1, "zone-wrapper"], [1, "zone-list"], [1, "table", "mt0"], [3, "active", 4, "ngFor", "ngForOf"], [1, "zone-members"], [4, "ngIf"], [1, "btn", "btn-primary", 3, "click"], ["shape", "plus"], [1, "left", "align-middle"], [3, "entity"], [3, "colorFrom"], [1, "text-right", "align-middle"], ["queryParamsHandling", "preserve", 1, "btn", "btn-link", "btn-sm", 3, "routerLink"], ["shape", "view-list"], [1, "align-middle"], [1, "btn", "btn-link", "btn-sm", 3, "click"], ["shape", "edit"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["vdrDropdownItem", "", 1, "button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"], [3, "members", "selectedMemberIds", "selectionChange"], [4, "vdrZoneMemberListHeader"], [4, "vdrZoneMemberControls"], [1, "flex"], [1, "header-title-row"], [1, "flex-spacer"], ["type", "button", 1, "close-button", 3, "click"], ["shape", "close"], [1, "controls"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-secondary", "btn-sm", 3, "disabled"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], [1, "btn", "btn-secondary", "btn-sm", 3, "click"], ["type", "button", "vdrDropdownItem", "", 3, "routerLink"]], template: function ZoneListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelementStart(2, "vdr-language-selector", 0);
        ɵngcc0.ɵɵlistener("languageCodeChange", function ZoneListComponent_Template_vdr_language_selector_languageCodeChange_2_listener($event) { return ctx.setLanguage($event); });
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "vdr-ab-right");
        ɵngcc0.ɵɵelement(6, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(7, ZoneListComponent_button_7_Template, 4, 3, "button", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵelementStart(10, "table", 5);
        ɵngcc0.ɵɵelementStart(11, "tbody");
        ɵngcc0.ɵɵtemplate(12, ZoneListComponent_tr_12_Template, 29, 28, "tr", 6);
        ɵngcc0.ɵɵpipe(13, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 7);
        ɵngcc0.ɵɵpipe(15, "async");
        ɵngcc0.ɵɵtemplate(16, ZoneListComponent_ng_container_16_Template, 4, 2, "ng-container", 8);
        ɵngcc0.ɵɵpipe(17, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("availableLanguageCodes", ɵngcc0.ɵɵpipeBind1(3, 7, ctx.availableLanguages$))("currentLanguageCode", ɵngcc0.ɵɵpipeBind1(4, 9, ctx.contentLanguage$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", ɵngcc0.ɵɵpureFunction0(17, _c22));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(13, 11, ctx.zones$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("expanded", ɵngcc0.ɵɵpipeBind1(15, 13, ctx.activeZone$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(17, 15, ctx.activeZone$));
    } }, directives: function () { return [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.LanguageSelectorComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc6.ClrIconCustomTag, ɵngcc1.EntityInfoComponent, ɵngcc1.ChipComponent, ɵngcc4.RouterLinkWithHref, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective, ZoneMemberListComponent, ZoneMemberListHeaderDirective, ZoneMemberControlsDirective]; }, pipes: function () { return [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe]; }, styles: [".zone-wrapper[_ngcontent-%COMP%]{display:flex;height:calc(100% - 50px)}.zone-wrapper[_ngcontent-%COMP%]   .zone-list[_ngcontent-%COMP%]{flex:1;overflow:auto;margin-top:0}.zone-wrapper[_ngcontent-%COMP%]   .zone-list[_ngcontent-%COMP%]   tr.active[_ngcontent-%COMP%]{background-color:var(--color-component-bg-200)}.zone-members[_ngcontent-%COMP%]{height:100%;width:0;opacity:0;visibility:hidden;overflow:auto;transition:width .3s,opacity .2s .3s,visibility 0s .3s}.zone-members.expanded[_ngcontent-%COMP%]{width:40vw;visibility:visible;opacity:1;padding-left:12px}.zone-members[_ngcontent-%COMP%]   .close-button[_ngcontent-%COMP%]{margin:0;background:none;border:none;cursor:pointer}.zone-members[_ngcontent-%COMP%]     table.table{margin-top:0}.zone-members[_ngcontent-%COMP%]     table.table th{top:0}.zone-members[_ngcontent-%COMP%]   .controls[_ngcontent-%COMP%]{display:flex;justify-content:space-between}"], changeDetection: 0 });
ZoneListComponent.ctorParameters = () => [
    { type: DataService },
    { type: NotificationService },
    { type: ModalService },
    { type: ActivatedRoute },
    { type: Router },
    { type: ServerConfigService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZoneListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-zone-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"zone-list\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *vdrIfPermissions=\"['CreateSettings', 'CreateZone']\"\r\n            (click)=\"create()\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-zone' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"zone-wrapper\">\r\n    <div class=\"zone-list\">\r\n        <table class=\"table mt0\">\r\n            <tbody>\r\n                <tr\r\n                    *ngFor=\"let zone of zones$ | async\"\r\n                    [class.active]=\"zone.id === (activeZone$ | async)?.id\"\r\n                >\r\n                    <td class=\"left align-middle\"><vdr-entity-info [entity]=\"zone\"></vdr-entity-info></td>\r\n                    <td class=\"left align-middle\">\r\n                        <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"text-right align-middle\">\r\n                        <a\r\n                            class=\"btn btn-link btn-sm\"\r\n                            [routerLink]=\"['./', { contents: zone.id }]\"\r\n                            queryParamsHandling=\"preserve\"\r\n                        >\r\n                            <clr-icon shape=\"view-list\"></clr-icon>\r\n                            {{ 'settings.view-zone-members' | translate }}\r\n                        </a>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <button class=\"btn btn-link btn-sm\" (click)=\"update(zone)\">\r\n                            <clr-icon shape=\"edit\"></clr-icon>\r\n                            {{ 'common.edit' | translate }}\r\n                        </button>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    class=\"button\"\r\n                                    vdrDropdownItem\r\n                                    (click)=\"delete(zone.id)\"\r\n                                    [disabled]=\"!(['DeleteSettings', 'DeleteZone'] | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"zone-members\" [class.expanded]=\"activeZone$ | async\">\r\n        <ng-container *ngIf=\"activeZone$ | async as activeZone\">\r\n            <vdr-zone-member-list\r\n                [members]=\"activeZone.members\"\r\n                [selectedMemberIds]=\"selectedMemberIds\"\r\n                (selectionChange)=\"selectedMemberIds = $event\"\r\n            >\r\n                <div *vdrZoneMemberListHeader>\r\n                    <div class=\"flex\">\r\n                        <div class=\"header-title-row\">\r\n                            {{ activeZone.name }} ({{ activeZone.members.length }})\r\n                        </div>\r\n                        <div class=\"flex-spacer\"></div>\r\n                        <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\r\n                            <clr-icon shape=\"close\"></clr-icon>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"controls\">\r\n                        <vdr-dropdown>\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"btn btn-secondary btn-sm\"\r\n                                vdrDropdownTrigger\r\n                                [disabled]=\"selectedMemberIds.length === 0\"\r\n                            >\r\n                                {{ 'common.with-selected' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"delete-button\"\r\n                                    (click)=\"removeFromZone(activeZone, selectedMemberIds)\"\r\n                                    vdrDropdownItem\r\n                                    [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'settings.remove-from-zone' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                        <button class=\"btn btn-secondary btn-sm\" (click)=\"addToZone(activeZone)\">\r\n                            {{ 'settings.add-countries-to-zone' | translate: { zoneName: activeZone.name } }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div *vdrZoneMemberControls=\"let member = member\">\r\n                    <vdr-dropdown>\r\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                            {{ 'common.actions' | translate }}\r\n                            <clr-icon shape=\"caret down\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <a\r\n                                type=\"button\"\r\n                                [routerLink]=\"['/settings', 'countries', member.id]\"\r\n                                vdrDropdownItem\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </a>\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"delete-button\"\r\n                                (click)=\"removeFromZone(activeZone, [member.id])\"\r\n                                vdrDropdownItem\r\n                                [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'settings.remove-from-zone' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-zone-member-list>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".zone-wrapper{display:flex;height:calc(100% - 50px)}.zone-wrapper .zone-list{flex:1;overflow:auto;margin-top:0}.zone-wrapper .zone-list tr.active{background-color:var(--color-component-bg-200)}.zone-members{height:100%;width:0;opacity:0;visibility:hidden;overflow:auto;transition:width .3s,opacity .2s .3s,visibility 0s .3s}.zone-members.expanded{width:40vw;visibility:visible;opacity:1;padding-left:12px}.zone-members .close-button{margin:0;background:none;border:none;cursor:pointer}.zone-members ::ng-deep table.table{margin-top:0}.zone-members ::ng-deep table.table th{top:0}.zone-members .controls{display:flex;justify-content:space-between}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.ModalService }, { type: ɵngcc4.ActivatedRoute }, { type: ɵngcc4.Router }, { type: ɵngcc1.ServerConfigService }]; }, null); })();

class ZoneMemberControlsDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ZoneMemberControlsDirective.ɵfac = function ZoneMemberControlsDirective_Factory(t) { return new (t || ZoneMemberControlsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
ZoneMemberControlsDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ZoneMemberControlsDirective, selectors: [["", "vdrZoneMemberControls", ""]] });
ZoneMemberControlsDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZoneMemberControlsDirective, [{
        type: Directive,
        args: [{
                selector: '[vdrZoneMemberControls]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

class ZoneMemberListHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ZoneMemberListHeaderDirective.ɵfac = function ZoneMemberListHeaderDirective_Factory(t) { return new (t || ZoneMemberListHeaderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
ZoneMemberListHeaderDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ZoneMemberListHeaderDirective, selectors: [["", "vdrZoneMemberListHeader", ""]] });
ZoneMemberListHeaderDirective.ctorParameters = () => [
    { type: TemplateRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZoneMemberListHeaderDirective, [{
        type: Directive,
        args: [{
                selector: '[vdrZoneMemberListHeader]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

class ZoneMemberListComponent {
    constructor() {
        this.members = [];
        this.selectedMemberIds = [];
        this.selectionChange = new EventEmitter();
        this.filterTerm = '';
        this.isMemberSelected = (member) => {
            return -1 < this.selectedMemberIds.indexOf(member.id);
        };
    }
    filteredMembers() {
        if (this.filterTerm !== '') {
            const term = this.filterTerm.toLocaleLowerCase();
            return this.members.filter(m => m.name.toLocaleLowerCase().includes(term) || m.code.toLocaleLowerCase().includes(term));
        }
        else {
            return this.members;
        }
    }
    areAllSelected() {
        if (this.members) {
            return this.selectedMemberIds.length === this.members.length;
        }
        else {
            return false;
        }
    }
    toggleSelectAll() {
        if (this.areAllSelected()) {
            this.selectionChange.emit([]);
        }
        else {
            this.selectionChange.emit(this.members.map(v => v.id));
        }
    }
    toggleSelectMember(member) {
        if (this.selectedMemberIds.includes(member.id)) {
            this.selectionChange.emit(this.selectedMemberIds.filter(id => id !== member.id));
        }
        else {
            this.selectionChange.emit([...this.selectedMemberIds, member.id]);
        }
    }
}
ZoneMemberListComponent.ɵfac = function ZoneMemberListComponent_Factory(t) { return new (t || ZoneMemberListComponent)(); };
ZoneMemberListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ZoneMemberListComponent, selectors: [["vdr-zone-member-list"]], contentQueries: function ZoneMemberListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ZoneMemberListHeaderDirective, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ZoneMemberControlsDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlsTemplate = _t.first);
    } }, inputs: { members: "members", selectedMemberIds: "selectedMemberIds" }, outputs: { selectionChange: "selectionChange" }, decls: 17, vars: 20, consts: [[1, "members-header"], [4, "ngIf"], ["type", "text", 3, "placeholder", "ngModel", "ngModelChange"], [3, "items", "allSelected", "isRowSelectedFn", "rowSelectChange", "allSelectChange"], [4, "ngTemplateOutlet"], [1, "left", "align-middle"], [1, "right", "align-middle"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function ZoneMemberListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ZoneMemberListComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵelementStart(2, "input", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function ZoneMemberListComponent_Template_input_ngModelChange_2_listener($event) { return ctx.filterTerm = $event; });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-data-table", 3);
        ɵngcc0.ɵɵlistener("rowSelectChange", function ZoneMemberListComponent_Template_vdr_data_table_rowSelectChange_4_listener($event) { return ctx.toggleSelectMember($event); })("allSelectChange", function ZoneMemberListComponent_Template_vdr_data_table_allSelectChange_4_listener() { return ctx.toggleSelectAll(); });
        ɵngcc0.ɵɵpipe(5, "hasPermission");
        ɵngcc0.ɵɵelementStart(6, "vdr-dt-column");
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "vdr-dt-column");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "vdr-dt-column");
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(15, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(16, ZoneMemberListComponent_ng_template_16_Template, 8, 6, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(3, 9, "settings.filter-by-member-name"))("ngModel", ctx.filterTerm);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("items", ctx.filteredMembers())("allSelected", ctx.areAllSelected())("isRowSelectedFn", ɵngcc0.ɵɵpipeBind1(5, 11, ɵngcc0.ɵɵpureFunction0(19, _c19)) && ctx.isMemberSelected);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 13, "common.code"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 15, "common.name"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 17, "common.enabled"));
    } }, directives: [ɵngcc2.NgIf, ɵngcc1.FormFieldControlDirective, ɵngcc5.DefaultValueAccessor, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc2.NgTemplateOutlet, ɵngcc6.ClrIconCustomTag], pipes: [ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [".members-header[_ngcontent-%COMP%]{background-color:var(--color-component-bg-100);position:sticky;top:0;padding:6px;z-index:5;border-bottom:1px solid var(--color-component-border-200)}.members-header[_ngcontent-%COMP%]   .header-title-row[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center}.members-header[_ngcontent-%COMP%]   .clr-input[_ngcontent-%COMP%]{width:100%}"], changeDetection: 0 });
ZoneMemberListComponent.propDecorators = {
    members: [{ type: Input }],
    selectedMemberIds: [{ type: Input }],
    selectionChange: [{ type: Output }],
    headerTemplate: [{ type: ContentChild, args: [ZoneMemberListHeaderDirective,] }],
    controlsTemplate: [{ type: ContentChild, args: [ZoneMemberControlsDirective,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ZoneMemberListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-zone-member-list',
                template: "<div class=\"members-header\">\r\n    <ng-container *ngIf=\"headerTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"headerTemplate.templateRef\"></ng-container>\r\n    </ng-container>\r\n    <input\r\n        type=\"text\"\r\n        [placeholder]=\"'settings.filter-by-member-name' | translate\"\r\n        [(ngModel)]=\"filterTerm\"\r\n    />\r\n</div>\r\n<vdr-data-table\r\n    [items]=\"filteredMembers()\"\r\n    [allSelected]=\"areAllSelected()\"\r\n    [isRowSelectedFn]=\"(['UpdateSettings', 'UpdateZone'] | hasPermission) && isMemberSelected\"\r\n    (rowSelectChange)=\"toggleSelectMember($event)\"\r\n    (allSelectChange)=\"toggleSelectAll()\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-member=\"item\">\r\n        <td class=\"left align-middle\">{{ member.code }}</td>\r\n        <td class=\"left align-middle\">{{ member.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <clr-icon\r\n                [class.is-success]=\"member.enabled\"\r\n                [attr.shape]=\"member.enabled ? 'check' : 'times'\"\r\n            ></clr-icon>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <ng-container *ngIf=\"controlsTemplate\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"controlsTemplate.templateRef; context: { member: member }\"\r\n                ></ng-container>\r\n            </ng-container>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".members-header{background-color:var(--color-component-bg-100);position:sticky;top:0;padding:6px;z-index:5;border-bottom:1px solid var(--color-component-border-200)}.members-header .header-title-row{display:flex;justify-content:space-between;align-items:center}.members-header .clr-input{width:100%}\n"]
            }]
    }], function () { return []; }, { members: [{
            type: Input
        }], selectedMemberIds: [{
            type: Input
        }], selectionChange: [{
            type: Output
        }], headerTemplate: [{
            type: ContentChild,
            args: [ZoneMemberListHeaderDirective]
        }], controlsTemplate: [{
            type: ContentChild,
            args: [ZoneMemberControlsDirective]
        }] }); })();

class AdministratorResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'Administrator',
            id: '',
            createdAt: '',
            updatedAt: '',
            emailAddress: '',
            firstName: '',
            lastName: '',
            user: { roles: [] },
        }, id => dataService.administrator.getAdministrator(id).mapStream(data => data.administrator));
    }
}
AdministratorResolver.ɵfac = function AdministratorResolver_Factory(t) { return new (t || AdministratorResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
AdministratorResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function AdministratorResolver_Factory() { return new AdministratorResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: AdministratorResolver, providedIn: "root" });
AdministratorResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AdministratorResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

/**
 * Resolves the id from the path into a Customer entity.
 */
class ChannelResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'Channel',
            id: '',
            createdAt: '',
            updatedAt: '',
            code: '',
            token: '',
            pricesIncludeTax: false,
            currencyCode: CurrencyCode.USD,
            defaultLanguageCode: getDefaultUiLanguage(),
            defaultShippingZone: {},
            defaultTaxZone: {},
        }, (id) => dataService.settings.getChannel(id).mapStream((data) => data.channel));
    }
}
ChannelResolver.ɵfac = function ChannelResolver_Factory(t) { return new (t || ChannelResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
ChannelResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ChannelResolver_Factory() { return new ChannelResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: ChannelResolver, providedIn: "root" });
ChannelResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChannelResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

/**
 * Resolves the id from the path into a Customer entity.
 */
class CountryResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'Country',
            id: '',
            createdAt: '',
            updatedAt: '',
            code: '',
            name: '',
            enabled: false,
            translations: [],
        }, id => dataService.settings.getCountry(id).mapStream(data => data.country));
    }
}
CountryResolver.ɵfac = function CountryResolver_Factory(t) { return new (t || CountryResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
CountryResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function CountryResolver_Factory() { return new CountryResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: CountryResolver, providedIn: "root" });
CountryResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CountryResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

/**
 * Resolves the global settings.
 */
class GlobalSettingsResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, 
        // we will never be creating a new GlobalSettings entity, so this part is not used.
        {}, () => dataService.settings.getGlobalSettings().mapStream(data => data.globalSettings));
    }
}
GlobalSettingsResolver.ɵfac = function GlobalSettingsResolver_Factory(t) { return new (t || GlobalSettingsResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
GlobalSettingsResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function GlobalSettingsResolver_Factory() { return new GlobalSettingsResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: GlobalSettingsResolver, providedIn: "root" });
GlobalSettingsResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GlobalSettingsResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

/**
 * Resolves the id from the path into a Customer entity.
 */
class PaymentMethodResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'PaymentMethod',
            id: '',
            createdAt: '',
            updatedAt: '',
            name: '',
            code: '',
            description: '',
            enabled: true,
            checker: undefined,
            handler: undefined,
        }, id => dataService.settings.getPaymentMethod(id).mapStream(data => data.paymentMethod));
    }
}
PaymentMethodResolver.ɵfac = function PaymentMethodResolver_Factory(t) { return new (t || PaymentMethodResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
PaymentMethodResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function PaymentMethodResolver_Factory() { return new PaymentMethodResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: PaymentMethodResolver, providedIn: "root" });
PaymentMethodResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PaymentMethodResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

class ProfileResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'Administrator',
            id: '',
            createdAt: '',
            updatedAt: '',
            emailAddress: '',
            firstName: '',
            lastName: '',
            user: { roles: [] },
        }, id => dataService.administrator
            .getActiveAdministrator()
            .mapStream(data => data.activeAdministrator));
    }
}
ProfileResolver.ɵfac = function ProfileResolver_Factory(t) { return new (t || ProfileResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
ProfileResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProfileResolver_Factory() { return new ProfileResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: ProfileResolver, providedIn: "root" });
ProfileResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProfileResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

class RoleResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'Role',
            id: '',
            createdAt: '',
            updatedAt: '',
            code: '',
            description: '',
            permissions: [],
            channels: [],
        }, id => dataService.administrator.getRole(id).mapStream(data => data.role));
    }
}
RoleResolver.ɵfac = function RoleResolver_Factory(t) { return new (t || RoleResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
RoleResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoleResolver_Factory() { return new RoleResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: RoleResolver, providedIn: "root" });
RoleResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RoleResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

/**
 * Resolves the id from the path into a Customer entity.
 */
class ShippingMethodResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'ShippingMethod',
            createdAt: '',
            updatedAt: '',
            id: '',
            code: '',
            name: '',
            description: '',
            fulfillmentHandlerCode: undefined,
            checker: undefined,
            calculator: undefined,
            translations: [],
        }, id => dataService.shippingMethod.getShippingMethod(id).mapStream(data => data.shippingMethod));
    }
}
ShippingMethodResolver.ɵfac = function ShippingMethodResolver_Factory(t) { return new (t || ShippingMethodResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
ShippingMethodResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShippingMethodResolver_Factory() { return new ShippingMethodResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: ShippingMethodResolver, providedIn: "root" });
ShippingMethodResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShippingMethodResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

/**
 * Resolves the id from the path into a Customer entity.
 */
class TaxCategoryResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'TaxCategory',
            id: '',
            createdAt: '',
            updatedAt: '',
            name: '',
            isDefault: false,
        }, id => dataService.settings.getTaxCategory(id).mapStream(data => data.taxCategory));
    }
}
TaxCategoryResolver.ɵfac = function TaxCategoryResolver_Factory(t) { return new (t || TaxCategoryResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
TaxCategoryResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaxCategoryResolver_Factory() { return new TaxCategoryResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: TaxCategoryResolver, providedIn: "root" });
TaxCategoryResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaxCategoryResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

/**
 * Resolves the id from the path into a Customer entity.
 */
class TaxRateResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'TaxRate',
            id: '',
            createdAt: '',
            updatedAt: '',
            name: '',
            value: 0,
            enabled: true,
            category: {},
            zone: {},
            customerGroup: null,
        }, id => dataService.settings.getTaxRate(id).mapStream(data => data.taxRate));
    }
}
TaxRateResolver.ɵfac = function TaxRateResolver_Factory(t) { return new (t || TaxRateResolver)(ɵngcc0.ɵɵinject(ɵngcc4.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
TaxRateResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaxRateResolver_Factory() { return new TaxRateResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: TaxRateResolver, providedIn: "root" });
TaxRateResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TaxRateResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc4.Router }, { type: ɵngcc1.DataService }]; }, null); })();

const ɵ0 = {
    breadcrumb: marker('breadcrumb.profile'),
}, ɵ1 = {
    breadcrumb: marker('breadcrumb.administrators'),
}, ɵ2 = { breadcrumb: administratorBreadcrumb }, ɵ3 = {
    breadcrumb: marker('breadcrumb.channels'),
}, ɵ4 = { breadcrumb: channelBreadcrumb }, ɵ5 = {
    breadcrumb: marker('breadcrumb.roles'),
}, ɵ6 = { breadcrumb: roleBreadcrumb }, ɵ7 = {
    breadcrumb: marker('breadcrumb.tax-categories'),
}, ɵ8 = {
    breadcrumb: taxCategoryBreadcrumb,
}, ɵ9 = {
    breadcrumb: marker('breadcrumb.tax-rates'),
}, ɵ10 = {
    breadcrumb: taxRateBreadcrumb,
}, ɵ11 = {
    breadcrumb: marker('breadcrumb.countries'),
}, ɵ12 = {
    breadcrumb: countryBreadcrumb,
}, ɵ13 = {
    breadcrumb: marker('breadcrumb.zones'),
}, ɵ14 = {
    breadcrumb: marker('breadcrumb.shipping-methods'),
}, ɵ15 = {
    breadcrumb: shippingMethodBreadcrumb,
}, ɵ16 = {
    breadcrumb: marker('breadcrumb.payment-methods'),
}, ɵ17 = {
    breadcrumb: paymentMethodBreadcrumb,
}, ɵ18 = {
    breadcrumb: marker('breadcrumb.global-settings'),
};
const settingsRoutes = [
    {
        path: 'profile',
        component: ProfileComponent,
        resolve: createResolveData(ProfileResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ0,
    },
    {
        path: 'administrators',
        component: AdministratorListComponent,
        data: ɵ1,
    },
    {
        path: 'administrators/:id',
        component: AdminDetailComponent,
        resolve: createResolveData(AdministratorResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ2,
    },
    {
        path: 'channels',
        component: ChannelListComponent,
        data: ɵ3,
    },
    {
        path: 'channels/:id',
        component: ChannelDetailComponent,
        resolve: createResolveData(ChannelResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ4,
    },
    {
        path: 'roles',
        component: RoleListComponent,
        data: ɵ5,
    },
    {
        path: 'roles/:id',
        component: RoleDetailComponent,
        resolve: createResolveData(RoleResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ6,
    },
    {
        path: 'tax-categories',
        component: TaxCategoryListComponent,
        data: ɵ7,
    },
    {
        path: 'tax-categories/:id',
        component: TaxCategoryDetailComponent,
        resolve: createResolveData(TaxCategoryResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ8,
    },
    {
        path: 'tax-rates',
        component: TaxRateListComponent,
        data: ɵ9,
    },
    {
        path: 'tax-rates/:id',
        component: TaxRateDetailComponent,
        resolve: createResolveData(TaxRateResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ10,
    },
    {
        path: 'countries',
        component: CountryListComponent,
        data: ɵ11,
    },
    {
        path: 'countries/:id',
        component: CountryDetailComponent,
        resolve: createResolveData(CountryResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ12,
    },
    {
        path: 'zones',
        component: ZoneListComponent,
        data: ɵ13,
    },
    {
        path: 'shipping-methods',
        component: ShippingMethodListComponent,
        data: ɵ14,
    },
    {
        path: 'shipping-methods/:id',
        component: ShippingMethodDetailComponent,
        resolve: createResolveData(ShippingMethodResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ15,
    },
    {
        path: 'payment-methods',
        component: PaymentMethodListComponent,
        data: ɵ16,
    },
    {
        path: 'payment-methods/:id',
        component: PaymentMethodDetailComponent,
        resolve: createResolveData(PaymentMethodResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ17,
    },
    {
        path: 'global-settings',
        component: GlobalSettingsComponent,
        resolve: createResolveData(GlobalSettingsResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ18,
    },
];
function administratorBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.administrators',
        getName: admin => `${admin.firstName} ${admin.lastName}`,
        route: 'administrators',
    });
}
function channelBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.channels',
        getName: channel => channel.code,
        route: 'channels',
    });
}
function roleBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.roles',
        getName: role => role.description,
        route: 'roles',
    });
}
function taxCategoryBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.tax-categories',
        getName: category => category.name,
        route: 'tax-categories',
    });
}
function taxRateBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.tax-rates',
        getName: category => category.name,
        route: 'tax-rates',
    });
}
function countryBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.countries',
        getName: promotion => promotion.name,
        route: 'countries',
    });
}
function shippingMethodBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.shipping-methods',
        getName: method => method.name,
        route: 'shipping-methods',
    });
}
function paymentMethodBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.payment-methods',
        getName: method => method.code,
        route: 'payment-methods',
    });
}

class SettingsModule {
}
SettingsModule.ɵfac = function SettingsModule_Factory(t) { return new (t || SettingsModule)(); };
SettingsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SettingsModule });
SettingsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[SharedModule, RouterModule.forChild(settingsRoutes)]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SettingsModule, [{
        type: NgModule,
        args: [{
                imports: [SharedModule, RouterModule.forChild(settingsRoutes)],
                declarations: [
                    TaxCategoryListComponent,
                    TaxCategoryDetailComponent,
                    AdministratorListComponent,
                    RoleListComponent,
                    RoleDetailComponent,
                    AdminDetailComponent,
                    PermissionGridComponent,
                    CountryListComponent,
                    CountryDetailComponent,
                    TaxRateListComponent,
                    TaxRateDetailComponent,
                    ChannelListComponent,
                    ChannelDetailComponent,
                    ShippingMethodListComponent,
                    ShippingMethodDetailComponent,
                    PaymentMethodListComponent,
                    PaymentMethodDetailComponent,
                    GlobalSettingsComponent,
                    TestOrderBuilderComponent,
                    TestAddressFormComponent,
                    ShippingMethodTestResultComponent,
                    ShippingEligibilityTestResultComponent,
                    ZoneListComponent,
                    AddCountryToZoneDialogComponent,
                    ZoneMemberListComponent,
                    ZoneMemberListHeaderDirective,
                    ZoneMemberControlsDirective,
                    ZoneDetailDialogComponent,
                    ProfileComponent,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SettingsModule, { declarations: function () { return [TaxCategoryListComponent, TaxCategoryDetailComponent, AdministratorListComponent, RoleListComponent, RoleDetailComponent, AdminDetailComponent, PermissionGridComponent, CountryListComponent, CountryDetailComponent, TaxRateListComponent, TaxRateDetailComponent, ChannelListComponent, ChannelDetailComponent, ShippingMethodListComponent, ShippingMethodDetailComponent, PaymentMethodListComponent, PaymentMethodDetailComponent, GlobalSettingsComponent, TestOrderBuilderComponent, TestAddressFormComponent, ShippingMethodTestResultComponent, ShippingEligibilityTestResultComponent, ZoneListComponent, AddCountryToZoneDialogComponent, ZoneMemberListComponent, ZoneMemberListHeaderDirective, ZoneMemberControlsDirective, ZoneDetailDialogComponent, ProfileComponent]; }, imports: function () { return [SharedModule, ɵngcc4.RouterModule]; } }); })();

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { AddCountryToZoneDialogComponent, AdminDetailComponent, AdministratorListComponent, AdministratorResolver, ChannelDetailComponent, ChannelListComponent, ChannelResolver, CountryDetailComponent, CountryListComponent, CountryResolver, GlobalSettingsComponent, GlobalSettingsResolver, PaymentMethodDetailComponent, PaymentMethodListComponent, PaymentMethodResolver, PermissionGridComponent, ProfileComponent, ProfileResolver, RoleDetailComponent, RoleListComponent, RoleResolver, SettingsModule, ShippingEligibilityTestResultComponent, ShippingMethodDetailComponent, ShippingMethodListComponent, ShippingMethodResolver, ShippingMethodTestResultComponent, TaxCategoryDetailComponent, TaxCategoryListComponent, TaxCategoryResolver, TaxRateDetailComponent, TaxRateListComponent, TaxRateResolver, TestAddressFormComponent, TestOrderBuilderComponent, ZoneDetailDialogComponent, ZoneListComponent, ZoneMemberControlsDirective, ZoneMemberListComponent, ZoneMemberListHeaderDirective, administratorBreadcrumb, channelBreadcrumb, countryBreadcrumb, paymentMethodBreadcrumb, roleBreadcrumb, settingsRoutes, shippingMethodBreadcrumb, taxCategoryBreadcrumb, taxRateBreadcrumb, ɵ0, ɵ1, ɵ10, ɵ11, ɵ12, ɵ13, ɵ14, ɵ15, ɵ16, ɵ17, ɵ18, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9 };

//# sourceMappingURL=vendure-admin-ui-settings.js.map