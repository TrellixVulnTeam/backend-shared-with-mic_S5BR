import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, Input, Output, Injectable, NgModule } from '@angular/core';
import * as i2 from '@vendure/admin-ui/core';
import { DataService, ModalService, BaseDetailComponent, SortOrder, EditNoteDialogComponent, ServerConfigService, NotificationService, DeletionResult, HistoryEntryType, BaseListComponent, LogicalOperator, BaseEntityResolver, createResolveData, CanDeactivateDetailGuard, detailBreadcrumb, SharedModule } from '@vendure/admin-ui/core';
import { BehaviorSubject, Subject, forkJoin, from, EMPTY, combineLatest, of } from 'rxjs';
import { switchMap, map, filter, take, shareReplay, merge, startWith, mergeMap, concatMap, distinctUntilChanged, tap, mapTo, debounceTime, takeUntil } from 'rxjs/operators';
import { __rest } from 'tslib';
import { Validators, FormArray, FormControl, FormBuilder } from '@angular/forms';
import * as i1 from '@angular/router';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { marker } from '@biesbjerg/ngx-translate-extract-marker';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { SortOrder as SortOrder$1 } from '@vendure/common/lib/generated-shop-types';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@vendure/admin-ui/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@ngx-translate/core';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from '@clr/angular';
import * as ɵngcc6 from '@ng-select/ng-select';
import * as ɵngcc7 from '@angular/router';

const _c0 = function (a0) { return { groupName: a0 }; };
function AddCustomerToGroupDialogComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(1, 1, "customer.add-customers-to-group-with-name", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r0.group.name)), "\n");
} }
const _c1 = function (a0) { return { count: a0 }; };
function AddCustomerToGroupDialogComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function AddCustomerToGroupDialogComponent_ng_template_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.cancel(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 4);
    ɵngcc0.ɵɵlistener("click", function AddCustomerToGroupDialogComponent_ng_template_4_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.add(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 3, "common.cancel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r1.selectedCustomerIds.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(5, 5, "customer.add-customers-to-group-with-count", ɵngcc0.ɵɵpureFunction1(8, _c1, ctx_r1.selectedCustomerIds.length)), " ");
} }
function AddressDetailDialogComponent_ng_template_0_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const streetLine1_r4 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", streetLine1_r4, ",");
} }
function AddressDetailDialogComponent_ng_template_0_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const countryCode_r5 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", countryCode_r5, "");
} }
function AddressDetailDialogComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AddressDetailDialogComponent_ng_template_0_span_0_Template, 2, 1, "span", 3);
    ɵngcc0.ɵɵtemplate(1, AddressDetailDialogComponent_ng_template_0_span_1_Template, 2, 1, "span", 3);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    let tmp_0_0;
    let tmp_1_0;
    ɵngcc0.ɵɵproperty("ngIf", (tmp_0_0 = ctx_r0.addressForm.get("streetLine1")) == null ? null : tmp_0_0.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (tmp_1_0 = ctx_r0.addressForm.get("countryCode")) == null ? null : tmp_1_0.value);
} }
function AddressDetailDialogComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵlistener("click", function AddressDetailDialogComponent_ng_template_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.cancel(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 5);
    ɵngcc0.ɵɵlistener("click", function AddressDetailDialogComponent_ng_template_2_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.save(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 3, "common.cancel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r1.addressForm.valid || !ctx_r1.addressForm.touched);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 5, "common.update"), " ");
} }
function AddressCardComponent_div_0_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const address_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", address_r1.streetLine1, ",");
} }
function AddressCardComponent_div_0_vdr_chip_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip", 14);
    ɵngcc0.ɵɵelement(1, "clr-icon", 15);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "customer.default-shipping-address"), " ");
} }
function AddressCardComponent_div_0_vdr_chip_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip", 14);
    ɵngcc0.ɵɵelement(1, "clr-icon", 16);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "customer.default-billing-address"), " ");
} }
function AddressCardComponent_div_0_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 17);
    ɵngcc0.ɵɵlistener("click", function AddressCardComponent_div_0_ng_container_13_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.editAddress(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(5, "button", 18);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelement(8, "clr-icon", 19);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "vdr-dropdown-menu");
    ɵngcc0.ɵɵelementStart(10, "button", 20);
    ɵngcc0.ɵɵlistener("click", function AddressCardComponent_div_0_ng_container_13_Template_button_click_10_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.setAsDefaultShippingAddress(); });
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "button", 20);
    ɵngcc0.ɵɵlistener("click", function AddressCardComponent_div_0_ng_container_13_Template_button_click_13_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.setAsDefaultBillingAddress(); });
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(16, "div", 21);
    ɵngcc0.ɵɵelementStart(17, "button", 22);
    ɵngcc0.ɵɵlistener("click", function AddressCardComponent_div_0_ng_container_13_Template_button_click_17_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.delete(); });
    ɵngcc0.ɵɵelement(18, "clr-icon", 23);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 7, "common.edit"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 9, "common.more"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", ctx_r5.isDefaultShipping);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 11, "customer.set-as-default-shipping-address"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r5.isDefaultBilling);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 13, "customer.set-as-default-billing-address"), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 15, "common.delete"), " ");
} }
function AddressCardComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵtemplate(3, AddressCardComponent_div_0_span_3_Template, 2, 1, "span", 4);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 5);
    ɵngcc0.ɵɵtemplate(6, AddressCardComponent_div_0_vdr_chip_6_Template, 4, 3, "vdr-chip", 6);
    ɵngcc0.ɵɵtemplate(7, AddressCardComponent_div_0_vdr_chip_7_Template, 4, 3, "vdr-chip", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 7);
    ɵngcc0.ɵɵelementStart(9, "div", 8);
    ɵngcc0.ɵɵelement(10, "vdr-formatted-address", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 10);
    ɵngcc0.ɵɵelement(12, "vdr-entity-info", 11);
    ɵngcc0.ɵɵtemplate(13, AddressCardComponent_div_0_ng_container_13_Template, 21, 17, "ng-container", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const address_r1 = ctx.ngIf;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", address_r1.streetLine1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", address_r1.countryCode, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isDefaultShipping);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isDefaultBilling);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("address", address_r1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("entity", address_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.editable);
} }
function SelectCustomerGroupDialogComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 1, "customer.add-customer-to-group"), "\n");
} }
function SelectCustomerGroupDialogComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵlistener("click", function SelectCustomerGroupDialogComponent_ng_template_3_Template_span_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const item_r4 = restoredCtx.item; const clear_r5 = restoredCtx.clear; return clear_r5(item_r4); });
    ɵngcc0.ɵɵtext(1, " \u00D7 ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "vdr-chip", 6);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r4 = ctx.item;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("colorFrom", item_r4.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r4.name);
} }
function SelectCustomerGroupDialogComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r8 = ctx.item;
    ɵngcc0.ɵɵproperty("colorFrom", item_r8.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r8.name);
} }
function SelectCustomerGroupDialogComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SelectCustomerGroupDialogComponent_ng_template_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.cancel(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 8);
    ɵngcc0.ɵɵlistener("click", function SelectCustomerGroupDialogComponent_ng_template_5_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.add(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 3, "common.cancel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r3.selectedGroupIds.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(5, 5, "customer.add-customer-to-groups-with-count", ɵngcc0.ɵɵpureFunction1(8, _c1, ctx_r3.selectedGroupIds.length)), " ");
} }
function CustomerDetailComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵpipe(1, "localeDate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵpipe(4, "timeAgo");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const lastLogin_r9 = ctx.ngIf;
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind2(1, 3, lastLogin_r9, "medium"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(3, 6, "customer.last-login"), ": ", ɵngcc0.ɵɵpipeBind1(4, 8, lastLogin_r9), " ");
} }
function CustomerDetailComponent_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 24);
    ɵngcc0.ɵɵlistener("click", function CustomerDetailComponent_button_11_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.create(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", !(ctx_r1.addressDefaultsUpdated || ctx_r1.detailForm.valid && ctx_r1.detailForm.dirty));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.create"), " ");
} }
function CustomerDetailComponent_ng_template_13_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 24);
    ɵngcc0.ɵɵlistener("click", function CustomerDetailComponent_ng_template_13_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.save(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", !(ctx_r12.addressDefaultsUpdated || ctx_r12.detailForm.valid && ctx_r12.detailForm.dirty));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "common.update"), " ");
} }
function CustomerDetailComponent_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, CustomerDetailComponent_ng_template_13_button_0_Template, 3, 4, "button", 25);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("vdrIfPermissions", "UpdateCustomer");
} }
function CustomerDetailComponent_vdr_form_field_36_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-form-field", 26);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "input", 27);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(1, 1, "customer.password"));
} }
const _c2 = function () { return ["customer", "customFields"]; };
function CustomerDetailComponent_section_38_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 28);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 29);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r5.customFields)("customFieldsFormGroup", ctx_r5.detailForm.get(ɵngcc0.ɵɵpureFunction0(5, _c2)));
} }
function CustomerDetailComponent_div_40_ng_container_4_vdr_chip_1_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "vdr-chip", 36);
    ɵngcc0.ɵɵlistener("iconClick", function CustomerDetailComponent_div_40_ng_container_4_vdr_chip_1_Template_vdr_chip_iconClick_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r23); const group_r21 = restoredCtx.$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(3); return ctx_r22.removeFromGroup(group_r21); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r21 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("colorFrom", group_r21.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(group_r21.name);
} }
function CustomerDetailComponent_div_40_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, CustomerDetailComponent_div_40_ng_container_4_vdr_chip_1_Template, 2, 2, "vdr-chip", 35);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const groups_r15 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", groups_r15);
} }
function CustomerDetailComponent_div_40_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 1, "customer.not-a-member-of-any-groups"), " ");
} }
function CustomerDetailComponent_div_40_button_8_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 37);
    ɵngcc0.ɵɵlistener("click", function CustomerDetailComponent_div_40_button_8_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.addToGroup(); });
    ɵngcc0.ɵɵelement(1, "clr-icon", 38);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "customer.add-customer-to-group"), " ");
} }
function CustomerDetailComponent_div_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵelementStart(1, "label", 31);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, CustomerDetailComponent_div_40_ng_container_4_Template, 2, 1, "ng-container", 32);
    ɵngcc0.ɵɵtemplate(5, CustomerDetailComponent_div_40_ng_template_5_Template, 2, 3, "ng-template", null, 33, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(7, "div");
    ɵngcc0.ɵɵtemplate(8, CustomerDetailComponent_div_40_button_8_Template, 4, 3, "button", 34);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const groups_r15 = ctx.ngIf;
    const _r17 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "customer.customer-groups"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", groups_r15.length)("ngIfElse", _r17);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("vdrIfPermissions", "UpdateCustomerGroup");
} }
const _c3 = function () { return ["UpdateCustomer"]; };
function CustomerDetailComponent_div_42_vdr_address_card_5_Template(rf, ctx) { if (rf & 1) {
    const _r32 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "vdr-address-card", 45);
    ɵngcc0.ɵɵlistener("setAsDefaultBilling", function CustomerDetailComponent_div_42_vdr_address_card_5_Template_vdr_address_card_setAsDefaultBilling_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r32); const ctx_r31 = ɵngcc0.ɵɵnextContext(2); return ctx_r31.setDefaultBillingAddressId($event); })("setAsDefaultShipping", function CustomerDetailComponent_div_42_vdr_address_card_5_Template_vdr_address_card_setAsDefaultShipping_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r32); const ctx_r33 = ɵngcc0.ɵɵnextContext(2); return ctx_r33.setDefaultShippingAddressId($event); })("deleteAddress", function CustomerDetailComponent_div_42_vdr_address_card_5_Template_vdr_address_card_deleteAddress_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r32); const ctx_r34 = ɵngcc0.ɵɵnextContext(2); return ctx_r34.toggleDeleteAddress($event); });
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵpipe(2, "hasPermission");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const addressForm_r30 = ctx.$implicit;
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("to-delete", ctx_r27.addressesToDeleteIds.has(addressForm_r30.value.id));
    ɵngcc0.ɵɵproperty("availableCountries", ɵngcc0.ɵɵpipeBind1(1, 8, ctx_r27.availableCountries$))("isDefaultBilling", ctx_r27.defaultBillingAddressId === addressForm_r30.value.id)("isDefaultShipping", ctx_r27.defaultShippingAddressId === addressForm_r30.value.id)("addressForm", addressForm_r30)("customFields", ctx_r27.addressCustomFields)("editable", ɵngcc0.ɵɵpipeBind1(2, 10, ɵngcc0.ɵɵpureFunction0(12, _c3)) && !ctx_r27.addressesToDeleteIds.has(addressForm_r30.value.id));
} }
function CustomerDetailComponent_div_42_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r36 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 46);
    ɵngcc0.ɵɵlistener("click", function CustomerDetailComponent_div_42_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r35 = ɵngcc0.ɵɵnextContext(2); return ctx_r35.addAddress(); });
    ɵngcc0.ɵɵelement(1, "clr-icon", 38);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "customer.create-new-address"), " ");
} }
const _c4 = function (a1) { return ["/orders/", a1]; };
function CustomerDetailComponent_div_42_ng_template_28_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 47);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 47);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 47);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "localeCurrency");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 47);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "localeDate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "td", 48);
    ɵngcc0.ɵɵelement(11, "vdr-table-row-action", 49);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const order_r37 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(order_r37.code);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(order_r37.state);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(6, 6, order_r37.totalWithTax, order_r37.currencyCode));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(9, 9, order_r37.updatedAt, "medium"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(12, 12, "common.open"))("linkTo", ɵngcc0.ɵɵpureFunction1(14, _c4, order_r37.id));
} }
function CustomerDetailComponent_div_42_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 39);
    ɵngcc0.ɵɵelementStart(1, "div", 40);
    ɵngcc0.ɵɵelementStart(2, "h3");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, CustomerDetailComponent_div_42_vdr_address_card_5_Template, 3, 13, "vdr-address-card", 41);
    ɵngcc0.ɵɵtemplate(6, CustomerDetailComponent_div_42_button_6_Template, 4, 3, "button", 42);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "div", 43);
    ɵngcc0.ɵɵelementStart(8, "h3");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "vdr-data-table", 44);
    ɵngcc0.ɵɵlistener("itemsPerPageChange", function CustomerDetailComponent_div_42_Template_vdr_data_table_itemsPerPageChange_11_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const ctx_r38 = ɵngcc0.ɵɵnextContext(); return ctx_r38.setOrderItemsPerPage($event); })("pageChange", function CustomerDetailComponent_div_42_Template_vdr_data_table_pageChange_11_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const ctx_r40 = ɵngcc0.ɵɵnextContext(); return ctx_r40.setOrderCurrentPage($event); });
    ɵngcc0.ɵɵpipe(12, "async");
    ɵngcc0.ɵɵpipe(13, "async");
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementStart(15, "vdr-dt-column");
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "vdr-dt-column");
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "vdr-dt-column");
    ɵngcc0.ɵɵtext(22);
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "vdr-dt-column");
    ɵngcc0.ɵɵtext(25);
    ɵngcc0.ɵɵpipe(26, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(27, "vdr-dt-column");
    ɵngcc0.ɵɵtemplate(28, CustomerDetailComponent_div_42_ng_template_28_Template, 13, 16, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 13, "customer.addresses"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r7.getAddressFormControls());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("vdrIfPermissions", "UpdateCustomer");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 15, "customer.orders"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(12, 17, ctx_r7.orders$))("itemsPerPage", ctx_r7.ordersPerPage)("totalItems", ɵngcc0.ɵɵpipeBind1(13, 19, ctx_r7.ordersCount$))("currentPage", ctx_r7.currentOrdersPage)("emptyStateLabel", ɵngcc0.ɵɵpipeBind1(14, 21, "customer.no-orders-placed"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 23, "common.code"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 25, "order.state"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(23, 27, "order.total"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(26, 29, "common.updated-at"));
} }
function CustomerDetailComponent_div_44_Template(rf, ctx) { if (rf & 1) {
    const _r42 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 39);
    ɵngcc0.ɵɵelementStart(1, "div", 50);
    ɵngcc0.ɵɵelementStart(2, "vdr-customer-history", 51);
    ɵngcc0.ɵɵlistener("addNote", function CustomerDetailComponent_div_44_Template_vdr_customer_history_addNote_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); const ctx_r41 = ɵngcc0.ɵɵnextContext(); return ctx_r41.addNoteToCustomer($event); })("updateNote", function CustomerDetailComponent_div_44_Template_vdr_customer_history_updateNote_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); const ctx_r43 = ɵngcc0.ɵɵnextContext(); return ctx_r43.updateNote($event); })("deleteNote", function CustomerDetailComponent_div_44_Template_vdr_customer_history_deleteNote_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); const ctx_r44 = ɵngcc0.ɵɵnextContext(); return ctx_r44.deleteNote($event); });
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customer", ɵngcc0.ɵɵpipeBind1(3, 2, ctx_r8.entity$))("history", ɵngcc0.ɵɵpipeBind1(4, 4, ctx_r8.history$));
} }
function CustomerGroupDetailDialogComponent_ng_template_0_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "customer.update-customer-group"));
} }
function CustomerGroupDetailDialogComponent_ng_template_0_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "customer.create-customer-group"));
} }
function CustomerGroupDetailDialogComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, CustomerGroupDetailDialogComponent_ng_template_0_span_0_Template, 3, 3, "span", 6);
    ɵngcc0.ɵɵtemplate(1, CustomerGroupDetailDialogComponent_ng_template_0_span_1_Template, 3, 3, "span", 6);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.group.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.group.id);
} }
function CustomerGroupDetailDialogComponent_section_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 7);
    ɵngcc0.ɵɵelementStart(1, "label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "vdr-tabbed-custom-fields", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, "common.custom-fields"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customFields", ctx_r1.customFields)("customFieldsFormGroup", ctx_r1.form.get("customFields"));
} }
function CustomerGroupDetailDialogComponent_ng_template_7_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "customer.update-customer-group"));
} }
function CustomerGroupDetailDialogComponent_ng_template_7_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "customer.create-customer-group"));
} }
function CustomerGroupDetailDialogComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function CustomerGroupDetailDialogComponent_ng_template_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.cancel(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 10);
    ɵngcc0.ɵɵlistener("click", function CustomerGroupDetailDialogComponent_ng_template_7_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.save(); });
    ɵngcc0.ɵɵtemplate(4, CustomerGroupDetailDialogComponent_ng_template_7_span_4_Template, 3, 3, "span", 6);
    ɵngcc0.ɵɵtemplate(5, CustomerGroupDetailDialogComponent_ng_template_7_span_5_Template, 3, 3, "span", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 4, "common.cancel"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r2.form.valid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.group.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.group.id);
} }
const _c5 = function () { return ["CreateCustomerGroup", "UpdateCustomerGroup"]; };
function CustomerGroupListComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function CustomerGroupListComponent_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.create(); });
    ɵngcc0.ɵɵelement(1, "clr-icon", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "customer.create-new-customer-group"), " ");
} }
const _c6 = function (a0) { return { contents: a0 }; };
const _c7 = function (a1) { return ["./", a1]; };
function CustomerGroupListComponent_table_7_tr_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵelementStart(2, "td", 12);
    ɵngcc0.ɵɵelement(3, "vdr-entity-info", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 12);
    ɵngcc0.ɵɵelementStart(5, "vdr-chip", 14);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "td", 15);
    ɵngcc0.ɵɵelementStart(8, "a", 16);
    ɵngcc0.ɵɵelement(9, "clr-icon", 17);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "td", 18);
    ɵngcc0.ɵɵelementStart(13, "button", 19);
    ɵngcc0.ɵɵlistener("click", function CustomerGroupListComponent_table_7_tr_3_Template_button_click_13_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10); const group_r8 = restoredCtx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.update(group_r8); });
    ɵngcc0.ɵɵelement(14, "clr-icon", 20);
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "td", 18);
    ɵngcc0.ɵɵelementStart(18, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(19, "button", 21);
    ɵngcc0.ɵɵtext(20);
    ɵngcc0.ɵɵpipe(21, "translate");
    ɵngcc0.ɵɵelement(22, "clr-icon", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(23, "vdr-dropdown-menu", 23);
    ɵngcc0.ɵɵelementStart(24, "button", 24);
    ɵngcc0.ɵɵlistener("click", function CustomerGroupListComponent_table_7_tr_3_Template_button_click_24_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10); const group_r8 = restoredCtx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.delete(group_r8.id); });
    ɵngcc0.ɵɵpipe(25, "hasPermission");
    ɵngcc0.ɵɵelement(26, "clr-icon", 25);
    ɵngcc0.ɵɵtext(27);
    ɵngcc0.ɵɵpipe(28, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r8 = ctx.$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    let tmp_0_0;
    ɵngcc0.ɵɵclassProp("active", group_r8.id === ((tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 11, ctx_r7.activeGroup$)) == null ? null : tmp_0_0.id));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("entity", group_r8);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("colorFrom", group_r8.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(group_r8.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction1(25, _c7, ɵngcc0.ɵɵpureFunction1(23, _c6, group_r8.id)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(11, 13, "customer.view-group-members"), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 15, "common.edit"), " ");
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 17, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(25, 19, "DeleteCustomerGroup"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(28, 21, "common.delete"), " ");
} }
function CustomerGroupListComponent_table_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 10);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵelementStart(2, "tbody");
    ɵngcc0.ɵɵtemplate(3, CustomerGroupListComponent_table_7_tr_3_Template, 29, 27, "tr", 11);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("expanded", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r1.activeGroup$));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(4, 5, ctx_r1.groups$));
} }
function CustomerGroupListComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "vdr-empty-placeholder");
} }
function CustomerGroupListComponent_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 26);
    ɵngcc0.ɵɵelementStart(2, "div", 27);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "div", 28);
    ɵngcc0.ɵɵelementStart(6, "button", 29);
    ɵngcc0.ɵɵlistener("click", function CustomerGroupListComponent_ng_container_13_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.closeMembers(); });
    ɵngcc0.ɵɵelement(7, "clr-icon", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 31);
    ɵngcc0.ɵɵelementStart(9, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(10, "button", 32);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelement(13, "clr-icon", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "vdr-dropdown-menu", 23);
    ɵngcc0.ɵɵelementStart(15, "button", 33);
    ɵngcc0.ɵɵlistener("click", function CustomerGroupListComponent_ng_container_13_Template_button_click_15_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const activeGroup_r12 = restoredCtx.ngIf; const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.removeFromGroup(activeGroup_r12, ctx_r15.selectedCustomerIds); });
    ɵngcc0.ɵɵpipe(16, "hasPermission");
    ɵngcc0.ɵɵelement(17, "clr-icon", 25);
    ɵngcc0.ɵɵtext(18);
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "button", 34);
    ɵngcc0.ɵɵlistener("click", function CustomerGroupListComponent_ng_container_13_Template_button_click_20_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const activeGroup_r12 = restoredCtx.ngIf; const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.addToGroup(activeGroup_r12); });
    ɵngcc0.ɵɵtext(21);
    ɵngcc0.ɵɵpipe(22, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(23, "vdr-customer-group-member-list", 35);
    ɵngcc0.ɵɵlistener("selectionChange", function CustomerGroupListComponent_ng_container_13_Template_vdr_customer_group_member_list_selectionChange_23_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.selectedCustomerIds = $event; })("fetchParamsChange", function CustomerGroupListComponent_ng_container_13_Template_vdr_customer_group_member_list_fetchParamsChange_23_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.fetchGroupMembers$.next($event); });
    ɵngcc0.ɵɵpipe(24, "async");
    ɵngcc0.ɵɵpipe(25, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const activeGroup_r12 = ctx.ngIf;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate2("", activeGroup_r12.name, " (", ɵngcc0.ɵɵpipeBind1(4, 11, ctx_r4.membersTotal$), ")");
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("disabled", ctx_r4.selectedCustomerIds.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(12, 13, "common.with-selected"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(16, 15, "UpdateCustomerGroup"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(19, 17, "customer.remove-from-group"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(22, 19, "customer.add-customers-to-group", ɵngcc0.ɵɵpureFunction1(26, _c0, activeGroup_r12.name)), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("members", ɵngcc0.ɵɵpipeBind1(24, 22, ctx_r4.members$))("route", ctx_r4.route)("totalItems", ɵngcc0.ɵɵpipeBind1(25, 24, ctx_r4.membersTotal$))("selectedMemberIds", ctx_r4.selectedCustomerIds);
} }
const _c8 = function (a2) { return ["/customer", "customers", a2]; };
function CustomerGroupMemberListComponent_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 3);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 4);
    ɵngcc0.ɵɵelement(5, "vdr-table-row-action", 5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const customer_r1 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate3(" ", customer_r1.title, " ", customer_r1.firstName, " ", customer_r1.lastName, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(customer_r1.emailAddress);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 6, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(8, _c8, customer_r1.id));
} }
function CustomerHistoryComponent_vdr_timeline_entry_4_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "vdr-timeline-entry", 4);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "textarea", 6);
    ɵngcc0.ɵɵlistener("ngModelChange", function CustomerHistoryComponent_vdr_timeline_entry_4_Template_textarea_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.note = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 7);
    ɵngcc0.ɵɵlistener("click", function CustomerHistoryComponent_vdr_timeline_entry_4_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.addNoteToCustomer(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r0.note);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r0.note);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 3, "order.add-note"), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "customer.history-using-native-auth-strategy"), " ");
} }
const _c9 = function (a0) { return { strategy: a0 }; };
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_2_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(1, 1, "customer.history-using-external-auth-strategy", ɵngcc0.ɵɵpureFunction1(4, _c9, entry_r5.data.strategy)), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 11);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_2_ng_container_4_Template, 3, 3, "ng-container", 12);
    ɵngcc0.ɵɵtemplate(5, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_2_ng_template_5_Template, 2, 6, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r21 = ɵngcc0.ɵɵreference(6);
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "customer.history-customer-registered"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", entry_r5.data.strategy === "native")("ngIfElse", _r21);
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_3_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "customer.history-using-native-auth-strategy"), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_3_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(1, 1, "customer.history-using-external-auth-strategy", ɵngcc0.ɵɵpureFunction1(4, _c9, entry_r5.data.strategy)), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 11);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_3_ng_container_4_Template, 3, 3, "ng-container", 12);
    ɵngcc0.ɵɵtemplate(5, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_3_ng_template_5_Template, 2, 6, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r26 = ɵngcc0.ɵɵreference(6);
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "customer.history-customer-verified"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", entry_r5.data.strategy === "native")("ngIfElse", _r26);
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "vdr-history-entry-detail");
    ɵngcc0.ɵɵelement(5, "vdr-object-tree", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "customer.history-customer-detail-updated"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("value", entry_r5.data.input);
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "customer.history-customer-added-to-group", ɵngcc0.ɵɵpureFunction1(4, _c0, entry_r5.data.groupName)), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "customer.history-customer-removed-from-group", ɵngcc0.ɵɵpureFunction1(4, _c0, entry_r5.data.groupName)), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "div", 14);
    ɵngcc0.ɵɵelementStart(4, "div", 16);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "customer.history-customer-address-created"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(entry_r5.data.address);
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "div", 14);
    ɵngcc0.ɵɵelementStart(4, "div", 16);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "vdr-history-entry-detail");
    ɵngcc0.ɵɵelement(7, "vdr-object-tree", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "customer.history-customer-address-updated"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(entry_r5.data.address);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", entry_r5.data.input);
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "div", 16);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "customer.history-customer-address-deleted"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(entry_r5.data.address);
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "customer.history-customer-password-updated"), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "customer.history-customer-password-reset-requested"), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "customer.history-customer-password-reset-verified"), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "vdr-history-entry-detail");
    ɵngcc0.ɵɵelementStart(5, "vdr-labeled-data", 17);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "vdr-labeled-data", 17);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "customer.history-customer-email-update-requested"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 7, "customer.old-email-address"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r5.data.oldEmailAddress);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(9, 9, "customer.new-email-address"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r5.data.newEmailAddress);
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "vdr-history-entry-detail");
    ɵngcc0.ɵɵelementStart(5, "vdr-labeled-data", 17);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "vdr-labeled-data", 17);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "customer.history-customer-email-update-verified"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(6, 7, "customer.old-email-address"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r5.data.oldEmailAddress);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(9, 9, "customer.new-email-address"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(entry_r5.data.newEmailAddress);
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    const _r40 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵelementStart(2, "div", 18);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "div", 19);
    ɵngcc0.ɵɵelementStart(5, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(6, "button", 20);
    ɵngcc0.ɵɵelement(7, "clr-icon", 21);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "vdr-dropdown-menu", 22);
    ɵngcc0.ɵɵelementStart(9, "button", 23);
    ɵngcc0.ɵɵlistener("click", function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_15_Template_button_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r40); const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r38 = ɵngcc0.ɵɵnextContext(); return ctx_r38.updateNote.emit(entry_r5); });
    ɵngcc0.ɵɵpipe(10, "hasPermission");
    ɵngcc0.ɵɵelement(11, "clr-icon", 24);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(14, "div", 25);
    ɵngcc0.ɵɵelementStart(15, "button", 23);
    ɵngcc0.ɵɵlistener("click", function CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_15_Template_button_click_15_listener() { ɵngcc0.ɵɵrestoreView(_r40); const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(); return ctx_r41.deleteNote.emit(entry_r5); });
    ɵngcc0.ɵɵpipe(16, "hasPermission");
    ɵngcc0.ɵɵelement(17, "clr-icon", 26);
    ɵngcc0.ɵɵtext(18);
    ɵngcc0.ɵɵpipe(19, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const entry_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", entry_r5.data.note, " ");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(10, 5, "UpdateCustomer"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 7, "common.edit"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(16, 9, "UpdateCustomer"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(19, 11, "common.delete"), " ");
} }
function CustomerHistoryComponent_vdr_timeline_entry_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-timeline-entry", 8);
    ɵngcc0.ɵɵelementContainerStart(1, 9);
    ɵngcc0.ɵɵtemplate(2, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_2_Template, 7, 5, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(3, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_3_Template, 7, 5, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(4, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_4_Template, 6, 4, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(5, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_5_Template, 3, 6, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(6, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_6_Template, 3, 6, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(7, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_7_Template, 6, 4, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(8, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_8_Template, 8, 5, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(9, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_9_Template, 5, 4, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(10, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_10_Template, 3, 3, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(11, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_11_Template, 3, 3, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(12, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_12_Template, 3, 3, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(13, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_13_Template, 11, 11, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(14, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_14_Template, 11, 11, "ng-container", 10);
    ɵngcc0.ɵɵtemplate(15, CustomerHistoryComponent_vdr_timeline_entry_5_ng_container_15_Template, 20, 13, "ng-container", 10);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r5 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("displayType", ctx_r1.getDisplayType(entry_r5))("iconShape", ctx_r1.getTimelineIcon(entry_r5))("createdAt", entry_r5.createdAt)("name", ctx_r1.getName(entry_r5))("featured", ctx_r1.isFeatured(entry_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitch", entry_r5.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_REGISTERED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_VERIFIED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_DETAIL_UPDATED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_ADDED_TO_GROUP);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_REMOVED_FROM_GROUP);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_ADDRESS_CREATED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_ADDRESS_UPDATED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_ADDRESS_DELETED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_PASSWORD_UPDATED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_PASSWORD_RESET_REQUESTED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_PASSWORD_RESET_VERIFIED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_EMAIL_UPDATE_REQUESTED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_EMAIL_UPDATE_VERIFIED);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.type.CUSTOMER_NOTE);
} }
const _c10 = function () { return ["./create"]; };
function CustomerListComponent_a_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 5);
    ɵngcc0.ɵɵelement(1, "clr-icon", 6);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(4, _c10));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "customer.create-new-customer"), " ");
} }
function CustomerListComponent_ng_template_23_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 7);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "td", 7);
    ɵngcc0.ɵɵelement(5, "vdr-customer-status-label", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "td", 9);
    ɵngcc0.ɵɵelement(7, "vdr-table-row-action", 10);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "td");
    ɵngcc0.ɵɵelementStart(10, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(11, "button", 11);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelement(14, "clr-icon", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "vdr-dropdown-menu", 13);
    ɵngcc0.ɵɵelementStart(16, "button", 14);
    ɵngcc0.ɵɵlistener("click", function CustomerListComponent_ng_template_23_Template_button_click_16_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const customer_r2 = restoredCtx.item; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.deleteCustomer(customer_r2); });
    ɵngcc0.ɵɵpipe(17, "hasPermission");
    ɵngcc0.ɵɵelement(18, "clr-icon", 15);
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const customer_r2 = ctx.item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate3(" ", customer_r2.title, " ", customer_r2.firstName, " ", customer_r2.lastName, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(customer_r2.emailAddress);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("customer", customer_r2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(8, 10, "common.edit"))("linkTo", ɵngcc0.ɵɵpureFunction1(18, _c7, customer_r2.id));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 12, "common.actions"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(17, 14, "DeleteCustomer"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 16, "common.delete"), " ");
} }
function CustomerStatusLabelComponent_vdr_chip_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "clr-icon", 1);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "customer.verified"), " ");
} }
function CustomerStatusLabelComponent_vdr_chip_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "clr-icon", 2);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "customer.registered"), " ");
} }
function CustomerStatusLabelComponent_vdr_chip_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip");
    ɵngcc0.ɵɵtemplate(1, CustomerStatusLabelComponent_vdr_chip_0_ng_container_1_Template, 4, 3, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(2, CustomerStatusLabelComponent_vdr_chip_0_ng_container_2_Template, 4, 3, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.customer.user == null ? null : ctx_r0.customer.user.verified);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r0.customer.user == null ? null : ctx_r0.customer.user.verified));
} }
function CustomerStatusLabelComponent_vdr_chip_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "customer.guest"));
} }
class AddCustomerToGroupDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.selectedCustomerIds = [];
        this.fetchGroupMembers$ = new BehaviorSubject({
            skip: 0,
            take: 10,
            filterTerm: '',
        });
    }
    ngOnInit() {
        const customerResult$ = this.fetchGroupMembers$.pipe(switchMap(({ skip, take, filterTerm }) => {
            return this.dataService.customer
                .getCustomerList(take, skip, filterTerm)
                .mapStream((res) => res.customers);
        }));
        this.customers$ = customerResult$.pipe(map((res) => res.items));
        this.customersTotal$ = customerResult$.pipe(map((res) => res.totalItems));
    }
    cancel() {
        this.resolveWith();
    }
    add() {
        this.resolveWith(this.selectedCustomerIds);
    }
}
AddCustomerToGroupDialogComponent.ɵfac = function AddCustomerToGroupDialogComponent_Factory(t) { return new (t || AddCustomerToGroupDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService)); };
AddCustomerToGroupDialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddCustomerToGroupDialogComponent, selectors: [["vdr-add-customer-to-group-dialog"]], decls: 5, vars: 8, consts: [["vdrDialogTitle", ""], [3, "members", "totalItems", "route", "selectedMemberIds", "fetchParamsChange", "selectionChange"], ["vdrDialogButtons", ""], ["type", "button", 1, "btn", 3, "click"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "click"]], template: function AddCustomerToGroupDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AddCustomerToGroupDialogComponent_ng_template_0_Template, 2, 6, "ng-template", 0);
        ɵngcc0.ɵɵelementStart(1, "vdr-customer-group-member-list", 1);
        ɵngcc0.ɵɵlistener("fetchParamsChange", function AddCustomerToGroupDialogComponent_Template_vdr_customer_group_member_list_fetchParamsChange_1_listener($event) { return ctx.fetchGroupMembers$.next($event); })("selectionChange", function AddCustomerToGroupDialogComponent_Template_vdr_customer_group_member_list_selectionChange_1_listener($event) { return ctx.selectedCustomerIds = $event; });
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, AddCustomerToGroupDialogComponent_ng_template_4_Template, 6, 10, "ng-template", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("members", ɵngcc0.ɵɵpipeBind1(2, 4, ctx.customers$))("totalItems", ɵngcc0.ɵɵpipeBind1(3, 6, ctx.customersTotal$))("route", ctx.route)("selectedMemberIds", ctx.selectedCustomerIds);
    } }, directives: function () { return [ɵngcc1.DialogTitleDirective, CustomerGroupMemberListComponent, ɵngcc1.DialogButtonsDirective]; }, pipes: function () { return [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe]; }, styles: [""], changeDetection: 0 });
AddCustomerToGroupDialogComponent.ctorParameters = () => [
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddCustomerToGroupDialogComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-add-customer-to-group-dialog',
                template: "<ng-template vdrDialogTitle>\r\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\r\n</ng-template>\r\n\r\n<vdr-customer-group-member-list\r\n    [members]=\"customers$ | async\"\r\n    [totalItems]=\"customersTotal$ | async\"\r\n    [route]=\"route\"\r\n    [selectedMemberIds]=\"selectedCustomerIds\"\r\n    (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\r\n    (selectionChange)=\"selectedCustomerIds = $event\"\r\n>\r\n\r\n</vdr-customer-group-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedCustomerIds.length\" class=\"btn btn-primary\">\r\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\r\n    </button>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }]; }, null); })();

class AddressDetailDialogComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.availableCountries = [];
    }
    ngOnInit() {
        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());
    }
    cancel() {
        this.resolveWith();
    }
    save() {
        this.resolveWith(this.addressForm);
    }
}
AddressDetailDialogComponent.ɵfac = function AddressDetailDialogComponent_Factory(t) { return new (t || AddressDetailDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
AddressDetailDialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddressDetailDialogComponent, selectors: [["vdr-address-detail-dialog"]], decls: 3, vars: 3, consts: [["vdrDialogTitle", ""], [3, "formGroup", "availableCountries", "customFields"], ["vdrDialogButtons", ""], [4, "ngIf"], ["type", "button", 1, "btn", 3, "click"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "click"]], template: function AddressDetailDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AddressDetailDialogComponent_ng_template_0_Template, 2, 2, "ng-template", 0);
        ɵngcc0.ɵɵelement(1, "vdr-address-form", 1);
        ɵngcc0.ɵɵtemplate(2, AddressDetailDialogComponent_ng_template_2_Template, 6, 7, "ng-template", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.addressForm)("availableCountries", ctx.availableCountries)("customFields", ctx.customFields);
    } }, directives: [ɵngcc1.DialogTitleDirective, ɵngcc1.AddressFormComponent, ɵngcc4.NgControlStatusGroup, ɵngcc4.FormGroupDirective, ɵngcc1.DialogButtonsDirective, ɵngcc2.NgIf], pipes: [ɵngcc3.TranslatePipe], styles: ["clr-input-container[_ngcontent-%COMP%]{margin-bottom:12px}"], changeDetection: 0 });
AddressDetailDialogComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddressDetailDialogComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-address-detail-dialog',
                template: "<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"addressForm.get('streetLine1')?.value as streetLine1\">{{ streetLine1 }},</span>\r\n    <span *ngIf=\"addressForm.get('countryCode')?.value as countryCode\"> {{ countryCode }}</span>\r\n</ng-template>\r\n\r\n<vdr-address-form\r\n    [formGroup]=\"addressForm\"\r\n    [availableCountries]=\"availableCountries\"\r\n    [customFields]=\"customFields\"\r\n></vdr-address-form>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"save()\"\r\n        [disabled]=\"!addressForm.valid || !addressForm.touched\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.update' | translate }}\r\n    </button>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["clr-input-container{margin-bottom:12px}\n"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, null); })();

class AddressCardComponent {
    constructor(modalService, changeDetector) {
        this.modalService = modalService;
        this.changeDetector = changeDetector;
        this.availableCountries = [];
        this.editable = true;
        this.setAsDefaultShipping = new EventEmitter();
        this.setAsDefaultBilling = new EventEmitter();
        this.deleteAddress = new EventEmitter();
        this.dataDependenciesPopulated = new BehaviorSubject(false);
    }
    ngOnInit() {
        const streetLine1 = this.addressForm.get('streetLine1');
        // Make the address dialog display automatically if there is no address line
        // as is the case when adding a new address.
        if (!streetLine1.value) {
            this.dataDependenciesPopulated
                .pipe(filter(value => value), take(1))
                .subscribe(() => {
                this.editAddress();
            });
        }
    }
    ngOnChanges(changes) {
        if (this.customFields != null && this.availableCountries != null) {
            this.dataDependenciesPopulated.next(true);
        }
    }
    getCountryName(countryCode) {
        if (!this.availableCountries) {
            return '';
        }
        const match = this.availableCountries.find(c => c.code === countryCode);
        return match ? match.name : '';
    }
    setAsDefaultBillingAddress() {
        this.setAsDefaultBilling.emit(this.addressForm.value.id);
        this.addressForm.markAsDirty();
    }
    setAsDefaultShippingAddress() {
        this.setAsDefaultShipping.emit(this.addressForm.value.id);
        this.addressForm.markAsDirty();
    }
    delete() {
        this.deleteAddress.emit(this.addressForm.value.id);
        this.addressForm.markAsDirty();
    }
    editAddress() {
        this.modalService
            .fromComponent(AddressDetailDialogComponent, {
            locals: {
                addressForm: this.addressForm,
                customFields: this.customFields,
                availableCountries: this.availableCountries,
            },
            size: 'md',
            closable: true,
        })
            .subscribe(() => {
            this.changeDetector.markForCheck();
        });
    }
}
AddressCardComponent.ɵfac = function AddressCardComponent_Factory(t) { return new (t || AddressCardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
AddressCardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AddressCardComponent, selectors: [["vdr-address-card"]], inputs: { availableCountries: "availableCountries", editable: "editable", addressForm: "addressForm", customFields: "customFields", isDefaultBilling: "isDefaultBilling", isDefaultShipping: "isDefaultShipping" }, outputs: { setAsDefaultShipping: "setAsDefaultShipping", setAsDefaultBilling: "setAsDefaultBilling", deleteAddress: "deleteAddress" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "card", 4, "ngIf"], [1, "card"], [1, "card-header"], [1, "address-title"], ["class", "street-line", 4, "ngIf"], [1, "default-controls"], ["class", "is-default p8", 4, "ngIf"], [1, "card-block"], [1, "card-text"], [3, "address"], [1, "card-footer"], [3, "entity"], [4, "ngIf"], [1, "street-line"], [1, "is-default", "p8"], ["shape", "truck"], ["shape", "credit-card"], [1, "btn", "btn-sm", "btn-link", 3, "click"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-sm", "btn-link"], ["shape", "caret down"], ["vdrDropdownItem", "", 1, "button", 3, "disabled", "click"], [1, "dropdown-divider"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "click"], ["shape", "trash", 1, "is-danger"]], template: function AddressCardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AddressCardComponent_div_0_Template, 14, 7, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.addressForm.value);
    } }, directives: [ɵngcc2.NgIf, ɵngcc1.FormattedAddressComponent, ɵngcc1.EntityInfoComponent, ɵngcc1.ChipComponent, ɵngcc5.ClrIconCustomTag, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective], pipes: [ɵngcc3.TranslatePipe], styles: ["[_nghost-%COMP%]{display:block;max-width:360px}clr-input-container[_ngcontent-%COMP%]{margin-bottom:12px}.defaul-controls[_ngcontent-%COMP%]{display:flex}.is-default[_ngcontent-%COMP%]{margin:0;color:var(--color-success-500)}"], changeDetection: 0 });
AddressCardComponent.ctorParameters = () => [
    { type: ModalService },
    { type: ChangeDetectorRef }
];
AddressCardComponent.propDecorators = {
    addressForm: [{ type: Input }],
    customFields: [{ type: Input }],
    availableCountries: [{ type: Input }],
    isDefaultBilling: [{ type: Input }],
    isDefaultShipping: [{ type: Input }],
    editable: [{ type: Input }],
    setAsDefaultShipping: [{ type: Output }],
    setAsDefaultBilling: [{ type: Output }],
    deleteAddress: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddressCardComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-address-card',
                template: "<div class=\"card\" *ngIf=\"addressForm.value as address\">\r\n    <div class=\"card-header\">\r\n        <div class=\"address-title\">\r\n            <span class=\"street-line\" *ngIf=\"address.streetLine1\">{{ address.streetLine1 }},</span>\r\n            {{ address.countryCode }}\r\n        </div>\r\n        <div class=\"default-controls\">\r\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultShipping\">\r\n                <clr-icon shape=\"truck\"></clr-icon>\r\n                {{ 'customer.default-shipping-address' | translate }}\r\n            </vdr-chip>\r\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultBilling\">\r\n                <clr-icon shape=\"credit-card\"></clr-icon>\r\n                {{ 'customer.default-billing-address' | translate }}\r\n            </vdr-chip>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text\">\r\n            <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <vdr-entity-info [entity]=\"address\"></vdr-entity-info>\r\n        <ng-container *ngIf=\"editable\">\r\n            <button class=\"btn btn-sm btn-link\" (click)=\"editAddress()\">\r\n                {{ 'common.edit' | translate }}\r\n            </button>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-sm btn-link\" vdrDropdownTrigger>\r\n                    {{ 'common.more' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu>\r\n                    <button\r\n                        vdrDropdownItem\r\n                        class=\"button\"\r\n                        [disabled]=\"isDefaultShipping\"\r\n                        (click)=\"setAsDefaultShippingAddress()\"\r\n                    >\r\n                        {{ 'customer.set-as-default-shipping-address' | translate }}\r\n                    </button>\r\n                    <button\r\n                        vdrDropdownItem\r\n                        class=\"button\"\r\n                        [disabled]=\"isDefaultBilling\"\r\n                        (click)=\"setAsDefaultBillingAddress()\"\r\n                    >\r\n                        {{ 'customer.set-as-default-billing-address' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"delete()\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block;max-width:360px}clr-input-container{margin-bottom:12px}.defaul-controls{display:flex}.is-default{margin:0;color:var(--color-success-500)}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.ModalService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { availableCountries: [{
            type: Input
        }], editable: [{
            type: Input
        }], setAsDefaultShipping: [{
            type: Output
        }], setAsDefaultBilling: [{
            type: Output
        }], deleteAddress: [{
            type: Output
        }], addressForm: [{
            type: Input
        }], customFields: [{
            type: Input
        }], isDefaultBilling: [{
            type: Input
        }], isDefaultShipping: [{
            type: Input
        }] }); })();

class SelectCustomerGroupDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.selectedGroupIds = [];
    }
    ngOnInit() {
        this.groups$ = this.dataService.customer
            .getCustomerGroupList()
            .mapStream((res) => res.customerGroups.items);
    }
    cancel() {
        this.resolveWith();
    }
    add() {
        this.resolveWith(this.selectedGroupIds);
    }
}
SelectCustomerGroupDialogComponent.ɵfac = function SelectCustomerGroupDialogComponent_Factory(t) { return new (t || SelectCustomerGroupDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService)); };
SelectCustomerGroupDialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectCustomerGroupDialogComponent, selectors: [["vdr-select-customer-group-dialog"]], decls: 6, vars: 8, consts: [["vdrDialogTitle", ""], ["appendTo", "body", "bindValue", "id", 3, "items", "addTag", "multiple", "ngModel", "clearable", "searchable", "ngModelChange"], ["ng-label-tmp", ""], ["ng-option-tmp", ""], ["vdrDialogButtons", ""], ["aria-hidden", "true", 1, "ng-value-icon", "left", 3, "click"], [3, "colorFrom"], ["type", "button", 1, "btn", 3, "click"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "click"]], template: function SelectCustomerGroupDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SelectCustomerGroupDialogComponent_ng_template_0_Template, 2, 3, "ng-template", 0);
        ɵngcc0.ɵɵelementStart(1, "ng-select", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function SelectCustomerGroupDialogComponent_Template_ng_select_ngModelChange_1_listener($event) { return ctx.selectedGroupIds = $event; });
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtemplate(3, SelectCustomerGroupDialogComponent_ng_template_3_Template, 4, 2, "ng-template", 2);
        ɵngcc0.ɵɵtemplate(4, SelectCustomerGroupDialogComponent_ng_template_4_Template, 2, 2, "ng-template", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, SelectCustomerGroupDialogComponent_ng_template_5_Template, 6, 10, "ng-template", 4);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(2, 6, ctx.groups$))("addTag", false)("multiple", true)("ngModel", ctx.selectedGroupIds)("clearable", true)("searchable", false);
    } }, directives: [ɵngcc1.DialogTitleDirective, ɵngcc6.NgSelectComponent, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc6.ɵh, ɵngcc6.ɵf, ɵngcc1.DialogButtonsDirective, ɵngcc1.ChipComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe], styles: [""], changeDetection: 0 });
SelectCustomerGroupDialogComponent.ctorParameters = () => [
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectCustomerGroupDialogComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-select-customer-group-dialog',
                template: "<ng-template vdrDialogTitle>\r\n    {{ 'customer.add-customer-to-group' | translate }}\r\n</ng-template>\r\n\r\n<ng-select\r\n    [items]=\"groups$ | async\"\r\n    appendTo=\"body\"\r\n    [addTag]=\"false\"\r\n    [multiple]=\"true\"\r\n    bindValue=\"id\"\r\n    [(ngModel)]=\"selectedGroupIds\"\r\n    [clearable]=\"true\"\r\n    [searchable]=\"false\"\r\n>\r\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n        <span aria-hidden=\"true\" class=\"ng-value-icon left\" (click)=\"clear(item)\"> \u00D7 </span>\r\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\r\n    </ng-template>\r\n    <ng-template ng-option-tmp let-item=\"item\">\r\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\r\n    </ng-template>\r\n</ng-select>\r\n\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedGroupIds.length\" class=\"btn btn-primary\">\r\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\r\n    </button>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }]; }, null); })();

class CustomerDetailComponent extends BaseDetailComponent {
    constructor(route, router, serverConfigService, changeDetector, formBuilder, dataService, modalService, notificationService) {
        super(route, router, serverConfigService, dataService);
        this.changeDetector = changeDetector;
        this.formBuilder = formBuilder;
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.fetchHistory = new Subject();
        this.addressesToDeleteIds = new Set();
        this.addressDefaultsUpdated = false;
        this.ordersPerPage = 10;
        this.currentOrdersPage = 1;
        this.orderListUpdates$ = new Subject();
        this.customFields = this.getCustomFieldConfig('Customer');
        this.addressCustomFields = this.getCustomFieldConfig('Address');
        this.detailForm = this.formBuilder.group({
            customer: this.formBuilder.group({
                title: '',
                firstName: ['', Validators.required],
                lastName: ['', Validators.required],
                phoneNumber: '',
                emailAddress: ['', [Validators.required, Validators.email]],
                password: '',
                customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
            }),
            addresses: new FormArray([]),
        });
    }
    ngOnInit() {
        this.init();
        this.availableCountries$ = this.dataService.settings
            .getAvailableCountries()
            .mapSingle(result => result.countries.items)
            .pipe(shareReplay(1));
        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));
        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));
        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));
        this.history$ = this.fetchHistory.pipe(startWith(null), switchMap(() => {
            return this.dataService.customer
                .getCustomerHistory(this.id, {
                sort: {
                    createdAt: SortOrder.DESC,
                },
            })
                .mapStream(data => { var _a; return (_a = data.customer) === null || _a === void 0 ? void 0 : _a.history.items; });
        }));
    }
    ngOnDestroy() {
        this.destroy();
        this.orderListUpdates$.complete();
    }
    getAddressFormControls() {
        const formArray = this.detailForm.get(['addresses']);
        return formArray.controls;
    }
    setDefaultBillingAddressId(id) {
        this.defaultBillingAddressId = id;
        this.addressDefaultsUpdated = true;
    }
    setDefaultShippingAddressId(id) {
        this.defaultShippingAddressId = id;
        this.addressDefaultsUpdated = true;
    }
    toggleDeleteAddress(id) {
        if (this.addressesToDeleteIds.has(id)) {
            this.addressesToDeleteIds.delete(id);
        }
        else {
            this.addressesToDeleteIds.add(id);
        }
    }
    addAddress() {
        const addressFormArray = this.detailForm.get('addresses');
        const newAddress = this.formBuilder.group({
            fullName: '',
            company: '',
            streetLine1: ['', Validators.required],
            streetLine2: '',
            city: '',
            province: '',
            postalCode: '',
            countryCode: ['', Validators.required],
            phoneNumber: '',
            defaultShippingAddress: false,
            defaultBillingAddress: false,
        });
        if (this.addressCustomFields.length) {
            const customFieldsGroup = this.formBuilder.group({});
            for (const fieldDef of this.addressCustomFields) {
                customFieldsGroup.addControl(fieldDef.name, new FormControl(''));
            }
            newAddress.addControl('customFields', customFieldsGroup);
        }
        addressFormArray.push(newAddress);
    }
    setOrderItemsPerPage(itemsPerPage) {
        this.ordersPerPage = +itemsPerPage;
        this.fetchOrdersList();
    }
    setOrderCurrentPage(page) {
        this.currentOrdersPage = +page;
        this.fetchOrdersList();
    }
    create() {
        var _a;
        const customerForm = this.detailForm.get('customer');
        if (!customerForm) {
            return;
        }
        const formValue = customerForm.value;
        const customFields = (_a = customerForm.get('customFields')) === null || _a === void 0 ? void 0 : _a.value;
        const customer = {
            title: formValue.title,
            emailAddress: formValue.emailAddress,
            firstName: formValue.firstName,
            lastName: formValue.lastName,
            phoneNumber: formValue.phoneNumber,
            customFields,
        };
        this.dataService.customer
            .createCustomer(customer, formValue.password)
            .subscribe(({ createCustomer }) => {
            switch (createCustomer.__typename) {
                case 'Customer':
                    this.notificationService.success(marker('common.notify-create-success'), {
                        entity: 'Customer',
                    });
                    if (createCustomer.emailAddress && !formValue.password) {
                        this.notificationService.notify({
                            message: marker('customer.email-verification-sent'),
                            translationVars: { emailAddress: formValue.emailAddress },
                            type: 'info',
                            duration: 10000,
                        });
                    }
                    this.detailForm.markAsPristine();
                    this.addressDefaultsUpdated = false;
                    this.changeDetector.markForCheck();
                    this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });
                    break;
                case 'EmailAddressConflictError':
                    this.notificationService.error(createCustomer.message);
            }
        });
    }
    save() {
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            var _a;
            const saveOperations = [];
            const customerForm = this.detailForm.get('customer');
            if (customerForm && customerForm.dirty) {
                const formValue = customerForm.value;
                const customFields = (_a = customerForm.get('customFields')) === null || _a === void 0 ? void 0 : _a.value;
                const customer = {
                    id,
                    title: formValue.title,
                    emailAddress: formValue.emailAddress,
                    firstName: formValue.firstName,
                    lastName: formValue.lastName,
                    phoneNumber: formValue.phoneNumber,
                    customFields,
                };
                saveOperations.push(this.dataService.customer
                    .updateCustomer(customer)
                    .pipe(map(res => res.updateCustomer)));
            }
            const addressFormArray = this.detailForm.get('addresses');
            if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {
                for (const addressControl of addressFormArray.controls) {
                    if (addressControl.dirty || this.addressDefaultsUpdated) {
                        const address = addressControl.value;
                        const input = {
                            fullName: address.fullName,
                            company: address.company,
                            streetLine1: address.streetLine1,
                            streetLine2: address.streetLine2,
                            city: address.city,
                            province: address.province,
                            postalCode: address.postalCode,
                            countryCode: address.countryCode,
                            phoneNumber: address.phoneNumber,
                            defaultShippingAddress: this.defaultShippingAddressId === address.id,
                            defaultBillingAddress: this.defaultBillingAddressId === address.id,
                            customFields: address.customFields,
                        };
                        if (!address.id) {
                            saveOperations.push(this.dataService.customer
                                .createCustomerAddress(id, input)
                                .pipe(map(res => res.createCustomerAddress)));
                        }
                        else {
                            if (this.addressesToDeleteIds.has(address.id)) {
                                saveOperations.push(this.dataService.customer
                                    .deleteCustomerAddress(address.id)
                                    .pipe(map(res => res.deleteCustomerAddress)));
                            }
                            else {
                                saveOperations.push(this.dataService.customer
                                    .updateCustomerAddress(Object.assign(Object.assign({}, input), { id: address.id }))
                                    .pipe(map(res => res.updateCustomerAddress)));
                            }
                        }
                    }
                }
            }
            return forkJoin(saveOperations);
        }))
            .subscribe(data => {
            let notified = false;
            for (const result of data) {
                switch (result.__typename) {
                    case 'Customer':
                    case 'Address':
                    case 'Success':
                        if (!notified) {
                            this.notificationService.success(marker('common.notify-update-success'), {
                                entity: 'Customer',
                            });
                            notified = true;
                            this.detailForm.markAsPristine();
                            this.addressDefaultsUpdated = false;
                            this.changeDetector.markForCheck();
                            this.fetchHistory.next();
                            this.dataService.customer.getCustomer(this.id).single$.subscribe();
                        }
                        break;
                    case 'EmailAddressConflictError':
                        this.notificationService.error(result.message);
                        break;
                }
            }
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'Customer',
            });
        });
    }
    addToGroup() {
        this.modalService
            .fromComponent(SelectCustomerGroupDialogComponent, {
            size: 'md',
        })
            .pipe(switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)), concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])))
            .subscribe({
            next: res => {
                this.notificationService.success(marker(`customer.add-customers-to-group-success`), {
                    customerCount: 1,
                    groupName: res.addCustomersToGroup.name,
                });
            },
            complete: () => {
                this.dataService.customer.getCustomer(this.id, { take: 0 }).single$.subscribe();
                this.fetchHistory.next();
            },
        });
    }
    removeFromGroup(group) {
        this.modalService
            .dialog({
            title: marker('customer.confirm-remove-customer-from-group'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response
            ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])
            : EMPTY), switchMap(() => this.dataService.customer.getCustomer(this.id, { take: 0 }).single$))
            .subscribe(result => {
            this.notificationService.success(marker(`customer.remove-customers-from-group-success`), {
                customerCount: 1,
                groupName: group.name,
            });
            this.fetchHistory.next();
        });
    }
    addNoteToCustomer({ note }) {
        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {
            this.fetchHistory.next();
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'Note',
            });
        });
    }
    updateNote(entry) {
        this.modalService
            .fromComponent(EditNoteDialogComponent, {
            closable: true,
            locals: {
                displayPrivacyControls: false,
                note: entry.data.note,
            },
        })
            .pipe(switchMap(result => {
            if (result) {
                return this.dataService.customer.updateCustomerNote({
                    noteId: entry.id,
                    note: result.note,
                });
            }
            else {
                return EMPTY;
            }
        }))
            .subscribe(result => {
            this.fetchHistory.next();
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'Note',
            });
        });
    }
    deleteNote(entry) {
        return this.modalService
            .dialog({
            title: marker('common.confirm-delete-note'),
            body: entry.data.note,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))
            .subscribe(() => {
            this.fetchHistory.next();
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Note',
            });
        });
    }
    setFormValues(entity) {
        var _a;
        const customerGroup = this.detailForm.get('customer');
        if (customerGroup) {
            customerGroup.patchValue({
                title: entity.title,
                firstName: entity.firstName,
                lastName: entity.lastName,
                phoneNumber: entity.phoneNumber,
                emailAddress: entity.emailAddress,
            });
        }
        if (entity.addresses) {
            const addressesArray = new FormArray([]);
            for (const address of entity.addresses) {
                const _b = address, { customFields } = _b, rest = __rest(_b, ["customFields"]);
                const addressGroup = this.formBuilder.group(Object.assign(Object.assign({}, rest), { countryCode: address.country.code }));
                addressesArray.push(addressGroup);
                if (address.defaultShippingAddress) {
                    this.defaultShippingAddressId = address.id;
                }
                if (address.defaultBillingAddress) {
                    this.defaultBillingAddressId = address.id;
                }
                if (this.addressCustomFields.length) {
                    const customFieldsGroup = this.formBuilder.group({});
                    for (const fieldDef of this.addressCustomFields) {
                        const key = fieldDef.name;
                        const value = (_a = address.customFields) === null || _a === void 0 ? void 0 : _a[key];
                        const control = new FormControl(value);
                        customFieldsGroup.addControl(key, control);
                    }
                    addressGroup.addControl('customFields', customFieldsGroup);
                }
            }
            this.detailForm.setControl('addresses', addressesArray);
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customer', 'customFields']), entity);
        }
        this.changeDetector.markForCheck();
    }
    /**
     * Refetch the customer with the current order list settings.
     */
    fetchOrdersList() {
        this.dataService.customer
            .getCustomer(this.id, {
            take: this.ordersPerPage,
            skip: (this.currentOrdersPage - 1) * this.ordersPerPage,
        })
            .single$.pipe(map(data => data.customer), filter(notNullOrUndefined))
            .subscribe(result => this.orderListUpdates$.next(result));
    }
}
CustomerDetailComponent.ɵfac = function CustomerDetailComponent_Factory(t) { return new (t || CustomerDetailComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
CustomerDetailComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CustomerDetailComponent, selectors: [["vdr-customer-detail"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 46, vars: 59, consts: [[1, "flex", "clr-align-items-center"], [3, "entity"], [3, "customer"], ["class", "last-login", 3, "title", 4, "ngIf"], ["locationId", "customer-detail"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "ngIf", "ngIfElse"], ["updateButton", ""], [1, "form", 3, "formGroup"], ["for", "title", 3, "label", "readOnlyToggle"], ["id", "title", "type", "text", "formControlName", "title"], ["for", "firstName", 3, "label", "readOnlyToggle"], ["id", "firstName", "type", "text", "formControlName", "firstName"], ["for", "lastName", 3, "label", "readOnlyToggle"], ["id", "lastName", "type", "text", "formControlName", "lastName"], ["for", "emailAddress", 3, "label", "readOnlyToggle"], ["id", "emailAddress", "type", "text", "formControlName", "emailAddress"], ["for", "phoneNumber", 3, "label", "readOnlyToggle"], ["id", "phoneNumber", "type", "text", "formControlName", "phoneNumber"], ["for", "password", 3, "label", 4, "ngIf"], ["formGroupName", "customFields", 4, "ngIf"], ["locationId", "customer-detail", 3, "entity$", "detailForm"], ["class", "groups", 4, "ngIf"], ["class", "clr-row", 4, "ngIf"], [1, "last-login", 3, "title"], [1, "btn", "btn-primary", 3, "disabled", "click"], ["class", "btn btn-primary", 3, "disabled", "click", 4, "vdrIfPermissions"], ["for", "password", 3, "label"], ["id", "password", "type", "password", "formControlName", "password"], ["formGroupName", "customFields"], ["entityName", "Customer", 3, "customFields", "customFieldsFormGroup"], [1, "groups"], [1, "clr-control-label"], [4, "ngIf", "ngIfElse"], ["noGroups", ""], ["class", "btn btn-sm btn-secondary", 3, "click", 4, "vdrIfPermissions"], ["icon", "times", 3, "colorFrom", "iconClick", 4, "ngFor", "ngForOf"], ["icon", "times", 3, "colorFrom", "iconClick"], [1, "btn", "btn-sm", "btn-secondary", 3, "click"], ["shape", "plus"], [1, "clr-row"], [1, "clr-col-md-4"], [3, "to-delete", "availableCountries", "isDefaultBilling", "isDefaultShipping", "addressForm", "customFields", "editable", "setAsDefaultBilling", "setAsDefaultShipping", "deleteAddress", 4, "ngFor", "ngForOf"], ["class", "btn btn-secondary", 3, "click", 4, "vdrIfPermissions"], [1, "clr-col-md-8"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "emptyStateLabel", "itemsPerPageChange", "pageChange"], [3, "availableCountries", "isDefaultBilling", "isDefaultShipping", "addressForm", "customFields", "editable", "setAsDefaultBilling", "setAsDefaultShipping", "deleteAddress"], [1, "btn", "btn-secondary", 3, "click"], [1, "left"], [1, "right"], ["iconShape", "shopping-cart", 3, "label", "linkTo"], [1, "clr-col-md-6"], [3, "customer", "history", "addNote", "updateNote", "deleteNote"]], template: function CustomerDetailComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelementStart(2, "div", 0);
        ɵngcc0.ɵɵelement(3, "vdr-entity-info", 1);
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵelement(5, "vdr-customer-status-label", 2);
        ɵngcc0.ɵɵpipe(6, "async");
        ɵngcc0.ɵɵtemplate(7, CustomerDetailComponent_div_7_Template, 5, 10, "div", 3);
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "vdr-ab-right");
        ɵngcc0.ɵɵelement(10, "vdr-action-bar-items", 4);
        ɵngcc0.ɵɵtemplate(11, CustomerDetailComponent_button_11_Template, 3, 4, "button", 5);
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵtemplate(13, CustomerDetailComponent_ng_template_13_Template, 1, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "form", 7);
        ɵngcc0.ɵɵelementStart(16, "vdr-form-field", 8);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵpipe(18, "async");
        ɵngcc0.ɵɵelement(19, "input", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "vdr-form-field", 10);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵpipe(22, "async");
        ɵngcc0.ɵɵelement(23, "input", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(24, "vdr-form-field", 12);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵpipe(26, "async");
        ɵngcc0.ɵɵelement(27, "input", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "vdr-form-field", 14);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵpipe(30, "async");
        ɵngcc0.ɵɵelement(31, "input", 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(32, "vdr-form-field", 16);
        ɵngcc0.ɵɵpipe(33, "translate");
        ɵngcc0.ɵɵpipe(34, "async");
        ɵngcc0.ɵɵelement(35, "input", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(36, CustomerDetailComponent_vdr_form_field_36_Template, 3, 3, "vdr-form-field", 18);
        ɵngcc0.ɵɵpipe(37, "async");
        ɵngcc0.ɵɵtemplate(38, CustomerDetailComponent_section_38_Template, 5, 6, "section", 19);
        ɵngcc0.ɵɵelement(39, "vdr-custom-detail-component-host", 20);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(40, CustomerDetailComponent_div_40_Template, 9, 6, "div", 21);
        ɵngcc0.ɵɵpipe(41, "async");
        ɵngcc0.ɵɵtemplate(42, CustomerDetailComponent_div_42_Template, 29, 31, "div", 22);
        ɵngcc0.ɵɵpipe(43, "async");
        ɵngcc0.ɵɵtemplate(44, CustomerDetailComponent_div_44_Template, 5, 6, "div", 22);
        ɵngcc0.ɵɵpipe(45, "async");
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(14);
        let tmp_2_0;
        let tmp_20_0;
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("entity", ɵngcc0.ɵɵpipeBind1(4, 23, ctx.entity$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("customer", ɵngcc0.ɵɵpipeBind1(6, 25, ctx.entity$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (tmp_2_0 = ɵngcc0.ɵɵpipeBind1(8, 27, ctx.entity$)) == null ? null : tmp_2_0.user == null ? null : tmp_2_0.user.lastLogin);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(12, 29, ctx.isNew$))("ngIfElse", _r2);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.detailForm.get("customer"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(17, 31, "customer.title"))("readOnlyToggle", !ɵngcc0.ɵɵpipeBind1(18, 33, ctx.isNew$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(21, 35, "customer.first-name"))("readOnlyToggle", !ɵngcc0.ɵɵpipeBind1(22, 37, ctx.isNew$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(25, 39, "customer.last-name"))("readOnlyToggle", !ɵngcc0.ɵɵpipeBind1(26, 41, ctx.isNew$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(29, 43, "customer.email-address"))("readOnlyToggle", !ɵngcc0.ɵɵpipeBind1(30, 45, ctx.isNew$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(33, 47, "customer.phone-number"))("readOnlyToggle", !ɵngcc0.ɵɵpipeBind1(34, 49, ctx.isNew$));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(37, 51, ctx.isNew$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("entity$", ctx.entity$)("detailForm", ctx.detailForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (tmp_20_0 = ɵngcc0.ɵɵpipeBind1(41, 53, ctx.entity$)) == null ? null : tmp_20_0.groups);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(43, 55, ctx.isNew$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(45, 57, ctx.isNew$));
    } }, directives: function () { return [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.EntityInfoComponent, CustomerStatusLabelComponent, ɵngcc2.NgIf, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc4.ɵNgNoValidate, ɵngcc4.NgControlStatusGroup, ɵngcc4.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlName, ɵngcc1.CustomDetailComponentHostComponent, ɵngcc1.IfPermissionsDirective, ɵngcc4.FormGroupName, ɵngcc5.ClrLabel, ɵngcc1.TabbedCustomFieldsComponent, ɵngcc2.NgForOf, ɵngcc1.ChipComponent, ɵngcc5.ClrIconCustomTag, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, AddressCardComponent, ɵngcc1.TableRowActionComponent, CustomerHistoryComponent]; }, pipes: function () { return [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.LocaleDatePipe, ɵngcc1.TimeAgoPipe, ɵngcc1.HasPermissionPipe, ɵngcc1.LocaleCurrencyPipe]; }, styles: [".last-login[_ngcontent-%COMP%]{margin-left:6px;color:var(--color-grey-500)}.to-delete[_ngcontent-%COMP%]{opacity:.5}"], changeDetection: 0 });
CustomerDetailComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: ServerConfigService },
    { type: ChangeDetectorRef },
    { type: FormBuilder },
    { type: DataService },
    { type: ModalService },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerDetailComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-customer-detail',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-customer-status-label [customer]=\"entity$ | async\"></vdr-customer-status-label>\r\n            <div\r\n                class=\"last-login\"\r\n                *ngIf=\"(entity$ | async)?.user?.lastLogin as lastLogin\"\r\n                [title]=\"lastLogin | localeDate: 'medium'\"\r\n            >\r\n                {{ 'customer.last-login' | translate }}: {{ lastLogin | timeAgo }}\r\n            </div>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"'UpdateCustomer'\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm.get('customer')\">\r\n    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\" [readOnlyToggle]=\"!(isNew$ | async)\">\r\n        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.first-name' | translate\"\r\n        for=\"firstName\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.last-name' | translate\"\r\n        for=\"lastName\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.email-address' | translate\"\r\n        for=\"emailAddress\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.phone-number' | translate\"\r\n        for=\"phoneNumber\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'customer.password' | translate\" for=\"password\" *ngIf=\"isNew$ | async\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Customer\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get(['customer', 'customFields'])\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"customer-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n\r\n<div class=\"groups\" *ngIf=\"(entity$ | async)?.groups as groups\">\r\n    <label class=\"clr-control-label\">{{ 'customer.customer-groups' | translate }}</label>\r\n    <ng-container *ngIf=\"groups.length; else noGroups\">\r\n        <vdr-chip\r\n            *ngFor=\"let group of groups\"\r\n            [colorFrom]=\"group.id\"\r\n            icon=\"times\"\r\n            (iconClick)=\"removeFromGroup(group)\"\r\n            >{{ group.name }}</vdr-chip\r\n        >\r\n    </ng-container>\r\n    <ng-template #noGroups>\r\n        {{ 'customer.not-a-member-of-any-groups' | translate }}\r\n    </ng-template>\r\n    <div>\r\n        <button\r\n            class=\"btn btn-sm btn-secondary\"\r\n            (click)=\"addToGroup()\"\r\n            *vdrIfPermissions=\"'UpdateCustomerGroup'\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.add-customer-to-group' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\r\n    <div class=\"clr-col-md-4\">\r\n        <h3>{{ 'customer.addresses' | translate }}</h3>\r\n        <vdr-address-card\r\n            *ngFor=\"let addressForm of getAddressFormControls()\"\r\n            [class.to-delete]=\"addressesToDeleteIds.has(addressForm.value.id)\"\r\n            [availableCountries]=\"availableCountries$ | async\"\r\n            [isDefaultBilling]=\"defaultBillingAddressId === addressForm.value.id\"\r\n            [isDefaultShipping]=\"defaultShippingAddressId === addressForm.value.id\"\r\n            [addressForm]=\"addressForm\"\r\n            [customFields]=\"addressCustomFields\"\r\n            [editable]=\"(['UpdateCustomer'] | hasPermission) && !addressesToDeleteIds.has(addressForm.value.id)\"\r\n            (setAsDefaultBilling)=\"setDefaultBillingAddressId($event)\"\r\n            (setAsDefaultShipping)=\"setDefaultShippingAddressId($event)\"\r\n            (deleteAddress)=\"toggleDeleteAddress($event)\"\r\n        ></vdr-address-card>\r\n        <button class=\"btn btn-secondary\" (click)=\"addAddress()\" *vdrIfPermissions=\"'UpdateCustomer'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-address' | translate }}\r\n        </button>\r\n    </div>\r\n    <div class=\"clr-col-md-8\">\r\n        <h3>{{ 'customer.orders' | translate }}</h3>\r\n        <vdr-data-table\r\n            [items]=\"orders$ | async\"\r\n            [itemsPerPage]=\"ordersPerPage\"\r\n            [totalItems]=\"ordersCount$ | async\"\r\n            [currentPage]=\"currentOrdersPage\"\r\n            [emptyStateLabel]=\"'customer.no-orders-placed' | translate\"\r\n            (itemsPerPageChange)=\"setOrderItemsPerPage($event)\"\r\n            (pageChange)=\"setOrderCurrentPage($event)\"\r\n        >\r\n            <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column></vdr-dt-column>\r\n            <ng-template let-order=\"item\">\r\n                <td class=\"left\">{{ order.code }}</td>\r\n                <td class=\"left\">{{ order.state }}</td>\r\n                <td class=\"left\">{{ order.totalWithTax | localeCurrency: order.currencyCode }}</td>\r\n                <td class=\"left\">{{ order.updatedAt | localeDate: 'medium' }}</td>\r\n                <td class=\"right\">\r\n                    <vdr-table-row-action\r\n                        iconShape=\"shopping-cart\"\r\n                        [label]=\"'common.open' | translate\"\r\n                        [linkTo]=\"['/orders/', order.id]\"\r\n                    ></vdr-table-row-action>\r\n                </td>\r\n            </ng-template>\r\n        </vdr-data-table>\r\n    </div>\r\n</div>\r\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\r\n    <div class=\"clr-col-md-6\">\r\n        <vdr-customer-history\r\n            [customer]=\"entity$ | async\"\r\n            [history]=\"history$ | async\"\r\n            (addNote)=\"addNoteToCustomer($event)\"\r\n            (updateNote)=\"updateNote($event)\"\r\n            (deleteNote)=\"deleteNote($event)\"\r\n        ></vdr-customer-history>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".last-login{margin-left:6px;color:var(--color-grey-500)}.to-delete{opacity:.5}\n"]
            }]
    }], function () { return [{ type: ɵngcc7.ActivatedRoute }, { type: ɵngcc7.Router }, { type: ɵngcc1.ServerConfigService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc4.FormBuilder }, { type: ɵngcc1.DataService }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }]; }, null); })();

class CustomerGroupDetailDialogComponent {
    constructor(serverConfigService, formBuilder) {
        this.serverConfigService = serverConfigService;
        this.formBuilder = formBuilder;
        this.customFields = this.serverConfigService.getCustomFieldsFor('CustomerGroup');
    }
    ngOnInit() {
        var _a;
        this.form = this.formBuilder.group({
            name: [this.group.name, Validators.required],
            customFields: this.formBuilder.group(this.customFields.reduce((hash, field) => (Object.assign(Object.assign({}, hash), { [field.name]: '' })), {})),
        });
        if (this.customFields.length) {
            const customFieldsGroup = this.form.get('customFields');
            for (const fieldDef of this.customFields) {
                const key = fieldDef.name;
                const value = (_a = this.group.customFields) === null || _a === void 0 ? void 0 : _a[key];
                const control = customFieldsGroup.get(key);
                if (control) {
                    control.patchValue(value);
                }
            }
        }
    }
    cancel() {
        this.resolveWith();
    }
    save() {
        this.resolveWith(this.form.value);
    }
}
CustomerGroupDetailDialogComponent.ɵfac = function CustomerGroupDetailDialogComponent_Factory(t) { return new (t || CustomerGroupDetailDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServerConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormBuilder)); };
CustomerGroupDetailDialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CustomerGroupDetailDialogComponent, selectors: [["vdr-customer-group-detail-dialog"]], decls: 8, vars: 9, consts: [["vdrDialogTitle", ""], [3, "formGroup"], ["for", "name", 3, "label"], ["id", "name", "type", "text", "formControlName", "name", 3, "readonly"], ["formGroupName", "customFields", 4, "ngIf"], ["vdrDialogButtons", ""], [4, "ngIf"], ["formGroupName", "customFields"], ["entityName", "CustomerGroup", 3, "customFields", "customFieldsFormGroup"], ["type", "button", 1, "btn", 3, "click"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "click"]], template: function CustomerGroupDetailDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CustomerGroupDetailDialogComponent_ng_template_0_Template, 2, 2, "ng-template", 0);
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵelementStart(2, "vdr-form-field", 2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelement(4, "input", 3);
        ɵngcc0.ɵɵpipe(5, "hasPermission");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, CustomerGroupDetailDialogComponent_section_6_Template, 5, 5, "section", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, CustomerGroupDetailDialogComponent_ng_template_7_Template, 6, 6, "ng-template", 5);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("label", ɵngcc0.ɵɵpipeBind1(3, 4, "common.name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("readonly", !ɵngcc0.ɵɵpipeBind1(5, 6, ɵngcc0.ɵɵpureFunction0(8, _c5)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.customFields.length);
    } }, directives: [ɵngcc1.DialogTitleDirective, ɵngcc4.ɵNgNoValidate, ɵngcc4.NgControlStatusGroup, ɵngcc4.FormGroupDirective, ɵngcc1.FormFieldComponent, ɵngcc1.FormFieldControlDirective, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlName, ɵngcc2.NgIf, ɵngcc1.DialogButtonsDirective, ɵngcc4.FormGroupName, ɵngcc5.ClrLabel, ɵngcc1.TabbedCustomFieldsComponent], pipes: [ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
CustomerGroupDetailDialogComponent.ctorParameters = () => [
    { type: ServerConfigService },
    { type: FormBuilder }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerGroupDetailDialogComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-customer-group-detail-dialog',
                template: "<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\r\n    <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\r\n</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"CustomerGroup\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"form.get('customFields')\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!form.valid\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\r\n        <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\r\n    </button>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.ServerConfigService }, { type: ɵngcc4.FormBuilder }]; }, null); })();

class CustomerGroupListComponent {
    constructor(dataService, notificationService, modalService, route, router) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.route = route;
        this.router = router;
        this.selectedCustomerIds = [];
        this.fetchGroupMembers$ = new BehaviorSubject({
            skip: 0,
            take: 0,
            filterTerm: '',
        });
        this.refreshActiveGroupMembers$ = new BehaviorSubject(undefined);
    }
    ngOnInit() {
        this.groups$ = this.dataService.customer
            .getCustomerGroupList()
            .mapStream(data => data.customerGroups.items);
        const activeGroupId$ = this.route.paramMap.pipe(map(pm => pm.get('contents')), distinctUntilChanged(), tap(() => (this.selectedCustomerIds = [])));
        this.listIsEmpty$ = this.groups$.pipe(map(groups => groups.length === 0));
        this.activeGroup$ = combineLatest(this.groups$, activeGroupId$).pipe(map(([groups, activeGroupId]) => {
            if (activeGroupId) {
                return groups.find(g => g.id === activeGroupId);
            }
        }));
        const membersResult$ = combineLatest(this.activeGroup$, this.fetchGroupMembers$, this.refreshActiveGroupMembers$).pipe(switchMap(([activeGroup, { skip, take, filterTerm }]) => {
            if (activeGroup) {
                return this.dataService.customer
                    .getCustomerGroupWithCustomers(activeGroup.id, {
                    skip,
                    take,
                    filter: {
                        emailAddress: {
                            contains: filterTerm,
                        },
                    },
                })
                    .mapStream(res => { var _a; return (_a = res.customerGroup) === null || _a === void 0 ? void 0 : _a.customers; });
            }
            else {
                return of(undefined);
            }
        }));
        this.members$ = membersResult$.pipe(map(res => { var _a; return (_a = res === null || res === void 0 ? void 0 : res.items) !== null && _a !== void 0 ? _a : []; }));
        this.membersTotal$ = membersResult$.pipe(map(res => { var _a; return (_a = res === null || res === void 0 ? void 0 : res.totalItems) !== null && _a !== void 0 ? _a : 0; }));
    }
    create() {
        this.modalService
            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group: { name: '' } } })
            .pipe(switchMap(result => result
            ? this.dataService.customer.createCustomerGroup(Object.assign(Object.assign({}, result), { customerIds: [] }))
            : EMPTY), 
        // refresh list
        switchMap(() => this.dataService.customer.getCustomerGroupList().single$))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-create-success'), {
                entity: 'CustomerGroup',
            });
        }, err => {
            this.notificationService.error(marker('common.notify-create-error'), {
                entity: 'CustomerGroup',
            });
        });
    }
    delete(groupId) {
        this.modalService
            .dialog({
            title: marker('customer.confirm-delete-customer-group'),
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response ? this.dataService.customer.deleteCustomerGroup(groupId) : EMPTY), switchMap(result => {
            if (result.deleteCustomerGroup.result === DeletionResult.DELETED) {
                // refresh list
                return this.dataService.customer
                    .getCustomerGroupList()
                    .mapSingle(() => ({ errorMessage: false }));
            }
            else {
                return of({ errorMessage: result.deleteCustomerGroup.message });
            }
        }))
            .subscribe(result => {
            if (typeof result.errorMessage === 'string') {
                this.notificationService.error(result.errorMessage);
            }
            else {
                this.notificationService.success(marker('common.notify-delete-success'), {
                    entity: 'CustomerGroup',
                });
            }
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'CustomerGroup',
            });
        });
    }
    update(group) {
        this.modalService
            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group } })
            .pipe(switchMap(result => result
            ? this.dataService.customer.updateCustomerGroup(Object.assign({ id: group.id }, result))
            : EMPTY))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-update-success'), {
                entity: 'CustomerGroup',
            });
        }, err => {
            this.notificationService.error(marker('common.notify-update-error'), {
                entity: 'CustomerGroup',
            });
        });
    }
    closeMembers() {
        const params = Object.assign({}, this.route.snapshot.params);
        delete params.contents;
        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });
    }
    addToGroup(group) {
        this.modalService
            .fromComponent(AddCustomerToGroupDialogComponent, {
            locals: {
                group,
                route: this.route,
            },
            size: 'md',
            verticalAlign: 'top',
        })
            .pipe(switchMap(customerIds => customerIds
            ? this.dataService.customer
                .addCustomersToGroup(group.id, customerIds)
                .pipe(mapTo(customerIds))
            : EMPTY))
            .subscribe({
            next: result => {
                this.notificationService.success(marker(`customer.add-customers-to-group-success`), {
                    customerCount: result.length,
                    groupName: group.name,
                });
                this.refreshActiveGroupMembers$.next();
                this.selectedCustomerIds = [];
            },
        });
    }
    removeFromGroup(group, customerIds) {
        this.dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({
            complete: () => {
                this.notificationService.success(marker(`customer.remove-customers-from-group-success`), {
                    customerCount: customerIds.length,
                    groupName: group.name,
                });
                this.refreshActiveGroupMembers$.next();
                this.selectedCustomerIds = [];
            },
        });
    }
}
CustomerGroupListComponent.ɵfac = function CustomerGroupListComponent_Factory(t) { return new (t || CustomerGroupListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Router)); };
CustomerGroupListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CustomerGroupListComponent, selectors: [["vdr-customer-group-list"]], decls: 15, vars: 12, consts: [["locationId", "customer-group-list"], ["class", "btn btn-primary", 3, "click", 4, "vdrIfPermissions"], [1, "group-wrapper"], [1, "group-list"], ["class", "table mt0", 3, "expanded", 4, "ngIf", "ngIfElse"], ["emptyPlaceholder", ""], [1, "group-members"], [4, "ngIf"], [1, "btn", "btn-primary", 3, "click"], ["shape", "plus"], [1, "table", "mt0"], [3, "active", 4, "ngFor", "ngForOf"], [1, "left", "align-middle"], [3, "entity"], [3, "colorFrom"], [1, "text-right", "align-middle"], ["queryParamsHandling", "preserve", 1, "btn", "btn-link", "btn-sm", 3, "routerLink"], ["shape", "view-list"], [1, "align-middle"], [1, "btn", "btn-link", "btn-sm", 3, "click"], ["shape", "edit"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["vdrDropdownItem", "", 1, "button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"], [1, "flex"], [1, "header-title-row"], [1, "flex-spacer"], ["type", "button", 1, "close-button", 3, "click"], ["shape", "close"], [1, "controls"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-secondary", "btn-sm", 3, "disabled"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], [1, "btn", "btn-secondary", "btn-sm", 3, "click"], [3, "members", "route", "totalItems", "selectedMemberIds", "selectionChange", "fetchParamsChange"]], template: function CustomerGroupListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelement(1, "vdr-ab-left");
        ɵngcc0.ɵɵelementStart(2, "vdr-ab-right");
        ɵngcc0.ɵɵelement(3, "vdr-action-bar-items", 0);
        ɵngcc0.ɵɵtemplate(4, CustomerGroupListComponent_button_4_Template, 4, 3, "button", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "div", 3);
        ɵngcc0.ɵɵtemplate(7, CustomerGroupListComponent_table_7_Template, 5, 7, "table", 4);
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, CustomerGroupListComponent_ng_template_9_Template, 1, 0, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(11, "div", 6);
        ɵngcc0.ɵɵpipe(12, "async");
        ɵngcc0.ɵɵtemplate(13, CustomerGroupListComponent_ng_container_13_Template, 26, 28, "ng-container", 7);
        ɵngcc0.ɵɵpipe(14, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(10);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", "CreateCustomerGroup");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ɵngcc0.ɵɵpipeBind1(8, 6, ctx.listIsEmpty$))("ngIfElse", _r2);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵclassProp("expanded", ɵngcc0.ɵɵpipeBind1(12, 8, ctx.activeGroup$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(14, 10, ctx.activeGroup$));
    } }, directives: function () { return [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc2.NgIf, ɵngcc5.ClrIconCustomTag, ɵngcc2.NgForOf, ɵngcc1.EntityInfoComponent, ɵngcc1.ChipComponent, ɵngcc7.RouterLinkWithHref, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective, ɵngcc1.EmptyPlaceholderComponent, CustomerGroupMemberListComponent]; }, pipes: function () { return [ɵngcc2.AsyncPipe, ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe]; }, styles: [".group-wrapper[_ngcontent-%COMP%]{display:flex;height:calc(100% - 50px)}.group-wrapper[_ngcontent-%COMP%]   .group-list[_ngcontent-%COMP%]{flex:1;overflow:auto;margin-top:0}.group-wrapper[_ngcontent-%COMP%]   .group-list[_ngcontent-%COMP%]   tr.active[_ngcontent-%COMP%]{background-color:var(--color-component-bg-200)}.group-wrapper[_ngcontent-%COMP%]   .group-list.expanded[_ngcontent-%COMP%]{width:calc(100% - 40vw)}.group-members[_ngcontent-%COMP%]{height:100%;width:0;opacity:0;visibility:hidden;overflow:auto;transition:width .3s,opacity .2s .3s,visibility 0s .3s}.group-members.expanded[_ngcontent-%COMP%]{width:40vw;visibility:visible;opacity:1;padding-left:12px}.group-members[_ngcontent-%COMP%]   .close-button[_ngcontent-%COMP%]{margin:0;background:none;border:none;cursor:pointer}.group-members[_ngcontent-%COMP%]     table.table{margin-top:0}.group-members[_ngcontent-%COMP%]     table.table th{top:0}.group-members[_ngcontent-%COMP%]   .controls[_ngcontent-%COMP%]{display:flex;justify-content:space-between}vdr-empty-placeholder[_ngcontent-%COMP%]{flex:1}"], changeDetection: 0 });
CustomerGroupListComponent.ctorParameters = () => [
    { type: DataService },
    { type: NotificationService },
    { type: ModalService },
    { type: ActivatedRoute },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerGroupListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-customer-group-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left> </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-group-list\"></vdr-action-bar-items>\r\n        <button class=\"btn btn-primary\" *vdrIfPermissions=\"'CreateCustomerGroup'\" (click)=\"create()\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-customer-group' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"group-wrapper\">\r\n    <div class=\"group-list\">\r\n        <table\r\n            class=\"table mt0\"\r\n            [class.expanded]=\"activeGroup$ | async\"\r\n            *ngIf=\"!(listIsEmpty$ | async); else emptyPlaceholder\"\r\n        >\r\n            <tbody>\r\n                <tr\r\n                    *ngFor=\"let group of groups$ | async\"\r\n                    [class.active]=\"group.id === (activeGroup$ | async)?.id\"\r\n                >\r\n                    <td class=\"left align-middle\"><vdr-entity-info [entity]=\"group\"></vdr-entity-info></td>\r\n                    <td class=\"left align-middle\">\r\n                        <vdr-chip [colorFrom]=\"group.id\">{{ group.name }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"text-right align-middle\">\r\n                        <a\r\n                            class=\"btn btn-link btn-sm\"\r\n                            [routerLink]=\"['./', { contents: group.id }]\"\r\n                            queryParamsHandling=\"preserve\"\r\n                        >\r\n                            <clr-icon shape=\"view-list\"></clr-icon>\r\n                            {{ 'customer.view-group-members' | translate }}\r\n                        </a>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <button class=\"btn btn-link btn-sm\" (click)=\"update(group)\">\r\n                            <clr-icon shape=\"edit\"></clr-icon>\r\n                            {{ 'common.edit' | translate }}\r\n                        </button>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    class=\"button\"\r\n                                    vdrDropdownItem\r\n                                    (click)=\"delete(group.id)\"\r\n                                    [disabled]=\"!('DeleteCustomerGroup' | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <ng-template #emptyPlaceholder>\r\n        <vdr-empty-placeholder></vdr-empty-placeholder>\r\n    </ng-template>\r\n    <div class=\"group-members\" [class.expanded]=\"activeGroup$ | async\">\r\n        <ng-container *ngIf=\"activeGroup$ | async as activeGroup\">\r\n            <div class=\"flex\">\r\n                <div class=\"header-title-row\">{{ activeGroup.name }} ({{ membersTotal$ | async }})</div>\r\n                <div class=\"flex-spacer\"></div>\r\n                <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\r\n                    <clr-icon shape=\"close\"></clr-icon>\r\n                </button>\r\n            </div>\r\n            <div class=\"controls\">\r\n                <vdr-dropdown>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn btn-secondary btn-sm\"\r\n                        vdrDropdownTrigger\r\n                        [disabled]=\"selectedCustomerIds.length === 0\"\r\n                    >\r\n                        {{ 'common.with-selected' | translate }}\r\n                        <clr-icon shape=\"caret down\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"removeFromGroup(activeGroup, selectedCustomerIds)\"\r\n                            vdrDropdownItem\r\n                            [disabled]=\"!('UpdateCustomerGroup' | hasPermission)\"\r\n                        >\r\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'customer.remove-from-group' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <button class=\"btn btn-secondary btn-sm\" (click)=\"addToGroup(activeGroup)\">\r\n                    {{ 'customer.add-customers-to-group' | translate: { groupName: activeGroup.name } }}\r\n                </button>\r\n            </div>\r\n            <vdr-customer-group-member-list\r\n                [members]=\"members$ | async\"\r\n                [route]=\"route\"\r\n                [totalItems]=\"membersTotal$ | async\"\r\n                [selectedMemberIds]=\"selectedCustomerIds\"\r\n                (selectionChange)=\"selectedCustomerIds = $event\"\r\n                (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\r\n            ></vdr-customer-group-member-list>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".group-wrapper{display:flex;height:calc(100% - 50px)}.group-wrapper .group-list{flex:1;overflow:auto;margin-top:0}.group-wrapper .group-list tr.active{background-color:var(--color-component-bg-200)}.group-wrapper .group-list.expanded{width:calc(100% - 40vw)}.group-members{height:100%;width:0;opacity:0;visibility:hidden;overflow:auto;transition:width .3s,opacity .2s .3s,visibility 0s .3s}.group-members.expanded{width:40vw;visibility:visible;opacity:1;padding-left:12px}.group-members .close-button{margin:0;background:none;border:none;cursor:pointer}.group-members ::ng-deep table.table{margin-top:0}.group-members ::ng-deep table.table th{top:0}.group-members .controls{display:flex;justify-content:space-between}vdr-empty-placeholder{flex:1}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.ModalService }, { type: ɵngcc7.ActivatedRoute }, { type: ɵngcc7.Router }]; }, null); })();

class CustomerGroupMemberListComponent {
    constructor(router, dataService) {
        this.router = router;
        this.dataService = dataService;
        this.selectedMemberIds = [];
        this.selectionChange = new EventEmitter();
        this.fetchParamsChange = new EventEmitter();
        this.filterTermControl = new FormControl('');
        this.refresh$ = new BehaviorSubject(true);
        this.destroy$ = new Subject();
        this.isMemberSelected = (member) => {
            return -1 < this.selectedMemberIds.indexOf(member.id);
        };
    }
    ngOnInit() {
        this.membersCurrentPage$ = this.route.paramMap.pipe(map((qpm) => qpm.get('membersPage')), map((page) => (!page ? 1 : +page)), startWith(1), distinctUntilChanged());
        this.membersItemsPerPage$ = this.route.paramMap.pipe(map((qpm) => qpm.get('membersPerPage')), map((perPage) => (!perPage ? 10 : +perPage)), startWith(10), distinctUntilChanged());
        const filterTerm$ = this.filterTermControl.valueChanges.pipe(debounceTime(250), tap(() => this.setContentsPageNumber(1)), startWith(''));
        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)
            .pipe(takeUntil(this.destroy$))
            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {
            const take = itemsPerPage;
            const skip = (currentPage - 1) * itemsPerPage;
            this.fetchParamsChange.emit({
                filterTerm,
                skip,
                take,
            });
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    setContentsPageNumber(page) {
        this.setParam('membersPage', page);
    }
    setContentsItemsPerPage(perPage) {
        this.setParam('membersPerPage', perPage);
    }
    refresh() {
        this.refresh$.next(true);
    }
    setParam(key, value) {
        this.router.navigate(['./', Object.assign(Object.assign({}, this.route.snapshot.params), { [key]: value })], {
            relativeTo: this.route,
            queryParamsHandling: 'merge',
        });
    }
    areAllSelected() {
        if (this.members) {
            return this.selectedMemberIds.length === this.members.length;
        }
        else {
            return false;
        }
    }
    toggleSelectAll() {
        if (this.areAllSelected()) {
            this.selectionChange.emit([]);
        }
        else {
            this.selectionChange.emit(this.members.map((v) => v.id));
        }
    }
    toggleSelectMember(member) {
        if (this.selectedMemberIds.includes(member.id)) {
            this.selectionChange.emit(this.selectedMemberIds.filter((id) => id !== member.id));
        }
        else {
            this.selectionChange.emit([...this.selectedMemberIds, member.id]);
        }
    }
}
CustomerGroupMemberListComponent.ɵfac = function CustomerGroupMemberListComponent_Factory(t) { return new (t || CustomerGroupMemberListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService)); };
CustomerGroupMemberListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CustomerGroupMemberListComponent, selectors: [["vdr-customer-group-member-list"]], inputs: { selectedMemberIds: "selectedMemberIds", members: "members", totalItems: "totalItems", route: "route" }, outputs: { selectionChange: "selectionChange", fetchParamsChange: "fetchParamsChange" }, decls: 14, vars: 24, consts: [["type", "text", "name", "searchTerm", 1, "search-input", 3, "formControl", "placeholder"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "allSelected", "isRowSelectedFn", "pageChange", "itemsPerPageChange", "rowSelectChange", "allSelectChange"], [3, "expand"], [1, "left", "align-middle"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"]], template: function CustomerGroupMemberListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "input", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵelementStart(2, "vdr-data-table", 1);
        ɵngcc0.ɵɵlistener("pageChange", function CustomerGroupMemberListComponent_Template_vdr_data_table_pageChange_2_listener($event) { return ctx.setContentsPageNumber($event); })("itemsPerPageChange", function CustomerGroupMemberListComponent_Template_vdr_data_table_itemsPerPageChange_2_listener($event) { return ctx.setContentsItemsPerPage($event); })("rowSelectChange", function CustomerGroupMemberListComponent_Template_vdr_data_table_rowSelectChange_2_listener($event) { return ctx.toggleSelectMember($event); })("allSelectChange", function CustomerGroupMemberListComponent_Template_vdr_data_table_allSelectChange_2_listener() { return ctx.toggleSelectAll(); });
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵpipe(4, "async");
        ɵngcc0.ɵɵpipe(5, "hasPermission");
        ɵngcc0.ɵɵelementStart(6, "vdr-dt-column", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "vdr-dt-column", 2);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(13, CustomerGroupMemberListComponent_ng_template_13_Template, 7, 10, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formControl", ctx.filterTermControl)("placeholder", ɵngcc0.ɵɵpipeBind1(1, 12, "customer.search-customers-by-email"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("items", ctx.members)("itemsPerPage", ɵngcc0.ɵɵpipeBind1(3, 14, ctx.membersItemsPerPage$))("totalItems", ctx.totalItems)("currentPage", ɵngcc0.ɵɵpipeBind1(4, 16, ctx.membersCurrentPage$))("allSelected", ctx.areAllSelected())("isRowSelectedFn", ɵngcc0.ɵɵpipeBind1(5, 18, "UpdateCustomerGroup") && ctx.isMemberSelected);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("expand", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 20, "customer.name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("expand", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 22, "customer.email-address"));
    } }, directives: [ɵngcc1.FormFieldControlDirective, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc1.TableRowActionComponent], pipes: [ɵngcc3.TranslatePipe, ɵngcc2.AsyncPipe, ɵngcc1.HasPermissionPipe], styles: [""], changeDetection: 0 });
CustomerGroupMemberListComponent.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
CustomerGroupMemberListComponent.propDecorators = {
    members: [{ type: Input }],
    totalItems: [{ type: Input }],
    route: [{ type: Input }],
    selectedMemberIds: [{ type: Input }],
    selectionChange: [{ type: Output }],
    fetchParamsChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerGroupMemberListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-customer-group-member-list',
                template: "<input\r\n    type=\"text\"\r\n    name=\"searchTerm\"\r\n    [formControl]=\"filterTermControl\"\r\n    [placeholder]=\"'customer.search-customers-by-email' | translate\"\r\n    class=\"search-input\"\r\n/>\r\n\r\n<vdr-data-table\r\n    [items]=\"members\"\r\n    [itemsPerPage]=\"membersItemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems\"\r\n    [currentPage]=\"membersCurrentPage$ | async\"\r\n    (pageChange)=\"setContentsPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\r\n    [allSelected]=\"areAllSelected()\"\r\n    [isRowSelectedFn]=\"('UpdateCustomerGroup' | hasPermission) && isMemberSelected\"\r\n    (rowSelectChange)=\"toggleSelectMember($event)\"\r\n    (allSelectChange)=\"toggleSelectAll()\"\r\n>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-customer=\"item\">\r\n        <td class=\"left align-middle\">\r\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\r\n        </td>\r\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['/customer', 'customers', customer.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc7.Router }, { type: ɵngcc1.DataService }]; }, { selectedMemberIds: [{
            type: Input
        }], selectionChange: [{
            type: Output
        }], fetchParamsChange: [{
            type: Output
        }], members: [{
            type: Input
        }], totalItems: [{
            type: Input
        }], route: [{
            type: Input
        }] }); })();

class CustomerHistoryComponent {
    constructor() {
        this.addNote = new EventEmitter();
        this.updateNote = new EventEmitter();
        this.deleteNote = new EventEmitter();
        this.note = '';
        this.type = HistoryEntryType;
    }
    getDisplayType(entry) {
        switch (entry.type) {
            case HistoryEntryType.CUSTOMER_VERIFIED:
            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:
            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:
                return 'success';
            case HistoryEntryType.CUSTOMER_REGISTERED:
                return 'muted';
            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:
                return 'error';
            default:
                return 'default';
        }
    }
    getTimelineIcon(entry) {
        switch (entry.type) {
            case HistoryEntryType.CUSTOMER_REGISTERED:
                return 'user';
            case HistoryEntryType.CUSTOMER_VERIFIED:
                return ['assign-user', 'is-solid'];
            case HistoryEntryType.CUSTOMER_NOTE:
                return 'note';
            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:
            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:
                return 'users';
        }
    }
    isFeatured(entry) {
        switch (entry.type) {
            case HistoryEntryType.CUSTOMER_REGISTERED:
            case HistoryEntryType.CUSTOMER_VERIFIED:
                return true;
            default:
                return false;
        }
    }
    getName(entry) {
        const { administrator } = entry;
        if (administrator) {
            return `${administrator.firstName} ${administrator.lastName}`;
        }
        else {
            return `${this.customer.firstName} ${this.customer.lastName}`;
        }
    }
    addNoteToCustomer() {
        this.addNote.emit({ note: this.note });
        this.note = '';
    }
}
CustomerHistoryComponent.ɵfac = function CustomerHistoryComponent_Factory(t) { return new (t || CustomerHistoryComponent)(); };
CustomerHistoryComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CustomerHistoryComponent, selectors: [["vdr-customer-history"]], inputs: { customer: "customer", history: "history" }, outputs: { addNote: "addNote", updateNote: "updateNote", deleteNote: "deleteNote" }, decls: 7, vars: 6, consts: [[1, "entry-list"], ["iconShape", "note", "displayType", "muted", 4, "vdrIfPermissions"], [3, "displayType", "iconShape", "createdAt", "name", "featured", 4, "ngFor", "ngForOf"], [3, "isLast"], ["iconShape", "note", "displayType", "muted"], [1, "note-entry"], ["name", "note", 1, "note", 3, "ngModel", "ngModelChange"], [1, "btn", "btn-secondary", 3, "disabled", "click"], [3, "displayType", "iconShape", "createdAt", "name", "featured"], [3, "ngSwitch"], [4, "ngSwitchCase"], [1, "title"], [4, "ngIf", "ngIfElse"], ["namedStrategy", ""], [1, "flex"], [3, "value"], [1, "address-string"], [3, "label"], [1, "note-text"], [1, "flex-spacer"], ["vdrDropdownTrigger", "", 1, "icon-button"], ["shape", "ellipsis-vertical"], ["vdrPosition", "bottom-right"], ["vdrDropdownItem", "", 1, "button", 3, "disabled", "click"], ["shape", "edit"], [1, "dropdown-divider"], ["shape", "trash", 1, "is-danger"]], template: function CustomerHistoryComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h4");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 0);
        ɵngcc0.ɵɵtemplate(4, CustomerHistoryComponent_vdr_timeline_entry_4_Template, 6, 5, "vdr-timeline-entry", 1);
        ɵngcc0.ɵɵtemplate(5, CustomerHistoryComponent_vdr_timeline_entry_5_Template, 16, 20, "vdr-timeline-entry", 2);
        ɵngcc0.ɵɵelement(6, "vdr-timeline-entry", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 4, "customer.customer-history"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", "UpdateCustomer");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.history);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("isLast", true);
    } }, directives: [ɵngcc1.IfPermissionsDirective, ɵngcc2.NgForOf, ɵngcc1.TimelineEntryComponent, ɵngcc1.FormFieldControlDirective, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc2.NgIf, ɵngcc1.HistoryEntryDetailComponent, ɵngcc1.ObjectTreeComponent, ɵngcc1.LabeledDataComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc5.ClrIconCustomTag, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective], pipes: [ɵngcc3.TranslatePipe, ɵngcc1.HasPermissionPipe], styles: [".entry-list[_ngcontent-%COMP%]{margin-top:24px;margin-left:24px;margin-right:12px}.note-entry[_ngcontent-%COMP%]{display:flex;align-items:center}.note-entry[_ngcontent-%COMP%]   .note[_ngcontent-%COMP%]{flex:1}.note-entry[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:0}textarea.note[_ngcontent-%COMP%]{flex:1;height:36px;border-radius:3px;margin-right:6px}.note-text[_ngcontent-%COMP%]{color:var(--color-text-100);white-space:pre-wrap}.address-string[_ngcontent-%COMP%]{font-size:smaller;color:var(--color-text-200)}"], changeDetection: 0 });
CustomerHistoryComponent.propDecorators = {
    customer: [{ type: Input }],
    history: [{ type: Input }],
    addNote: [{ type: Output }],
    updateNote: [{ type: Output }],
    deleteNote: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerHistoryComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-customer-history',
                template: "<h4>{{ 'customer.customer-history' | translate }}</h4>\r\n<div class=\"entry-list\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" *vdrIfPermissions=\"'UpdateCustomer'\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToCustomer()\">\r\n                {{ 'order.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry\r\n        *ngFor=\"let entry of history\"\r\n        [displayType]=\"getDisplayType(entry)\"\r\n        [iconShape]=\"getTimelineIcon(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"getName(entry)\"\r\n        [featured]=\"isFeatured(entry)\"\r\n    >\r\n        <ng-container [ngSwitch]=\"entry.type\">\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REGISTERED\">\r\n                <div class=\"title\">\r\n                    {{ 'customer.history-customer-registered' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\r\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\r\n                </ng-container>\r\n                <ng-template #namedStrategy>\r\n                    {{\r\n                    'customer.history-using-external-auth-strategy'\r\n                        | translate: { strategy: entry.data.strategy }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_VERIFIED\">\r\n                <div class=\"title\">\r\n                    {{ 'customer.history-customer-verified' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\r\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\r\n                </ng-container>\r\n                <ng-template #namedStrategy>\r\n                    {{\r\n                        'customer.history-using-external-auth-strategy'\r\n                            | translate: { strategy: entry.data.strategy }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_DETAIL_UPDATED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-detail-updated' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDED_TO_GROUP\">\r\n                {{\r\n                    'customer.history-customer-added-to-group'\r\n                        | translate: { groupName: entry.data.groupName }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REMOVED_FROM_GROUP\">\r\n                {{\r\n                    'customer.history-customer-removed-from-group'\r\n                        | translate: { groupName: entry.data.groupName }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_CREATED\">\r\n                {{ 'customer.history-customer-address-created' | translate }}\r\n                <div class=\"flex\">\r\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_UPDATED\">\r\n                {{ 'customer.history-customer-address-updated' | translate }}\r\n                <div class=\"flex\">\r\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_DELETED\">\r\n                {{ 'customer.history-customer-address-deleted' | translate }}\r\n                <div class=\"address-string\">{{ entry.data.address }}</div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_UPDATED\">\r\n                {{ 'customer.history-customer-password-updated' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\">\r\n                {{ 'customer.history-customer-password-reset-requested' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\">\r\n                {{ 'customer.history-customer-password-reset-verified' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-email-update-requested' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\r\n                            entry.data.oldEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\r\n                            entry.data.newEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-email-update-verified' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\r\n                            entry.data.oldEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\r\n                            entry.data.newEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_NOTE\">\r\n                <div class=\"flex\">\r\n                    <div class=\"note-text\">\r\n                        {{ entry.data.note }}\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <vdr-dropdown>\r\n                        <button class=\"icon-button\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"updateNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </button>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"deleteNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry [isLast]=\"true\"></vdr-timeline-entry>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".entry-list{margin-top:24px;margin-left:24px;margin-right:12px}.note-entry{display:flex;align-items:center}.note-entry .note{flex:1}.note-entry button{margin:0}textarea.note{flex:1;height:36px;border-radius:3px;margin-right:6px}.note-text{color:var(--color-text-100);white-space:pre-wrap}.address-string{font-size:smaller;color:var(--color-text-200)}\n"]
            }]
    }], function () { return []; }, { addNote: [{
            type: Output
        }], updateNote: [{
            type: Output
        }], deleteNote: [{
            type: Output
        }], customer: [{
            type: Input
        }], history: [{
            type: Input
        }] }); })();

class CustomerListComponent extends BaseListComponent {
    constructor(dataService, router, route, modalService, notificationService) {
        super(router, route);
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.searchTerm = new FormControl('');
        super.setQueryFn((...args) => this.dataService.customer.getCustomerList(...args).refetchOnChannelChange(), data => data.customers, (skip, take) => ({
            options: {
                skip,
                take,
                filter: {
                    emailAddress: {
                        contains: this.searchTerm.value,
                    },
                    lastName: {
                        contains: this.searchTerm.value,
                    },
                    postalCode: {
                        contains: this.searchTerm.value,
                    },
                },
                filterOperator: LogicalOperator.OR,
                sort: {
                    createdAt: SortOrder$1.DESC,
                },
            },
        }));
    }
    ngOnInit() {
        super.ngOnInit();
        this.searchTerm.valueChanges
            .pipe(filter(value => 2 < value.length || value.length === 0), debounceTime(250), takeUntil(this.destroy$))
            .subscribe(() => this.refresh());
    }
    deleteCustomer(customer) {
        return this.modalService
            .dialog({
            title: marker('catalog.confirm-delete-customer'),
            body: `${customer.firstName} ${customer.lastName}`,
            buttons: [
                { type: 'secondary', label: marker('common.cancel') },
                { type: 'danger', label: marker('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomer(customer.id) : EMPTY)))
            .subscribe(() => {
            this.notificationService.success(marker('common.notify-delete-success'), {
                entity: 'Customer',
            });
            this.refresh();
        }, err => {
            this.notificationService.error(marker('common.notify-delete-error'), {
                entity: 'Customer',
            });
        });
    }
}
CustomerListComponent.ɵfac = function CustomerListComponent_Factory(t) { return new (t || CustomerListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService)); };
CustomerListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CustomerListComponent, selectors: [["vdr-customer-list"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 24, vars: 28, consts: [["type", "text", "name", "emailSearchTerm", 1, "search-input", "ml3", 3, "formControl", "placeholder"], ["locationId", "customer-list"], ["class", "btn btn-primary", 3, "routerLink", 4, "vdrIfPermissions"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "pageChange", "itemsPerPageChange"], [3, "expand"], [1, "btn", "btn-primary", 3, "routerLink"], ["shape", "plus"], [1, "left", "align-middle"], [3, "customer"], [1, "right", "align-middle"], ["iconShape", "edit", 3, "label", "linkTo"], ["type", "button", "vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm"], ["shape", "caret down"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "trash", 1, "is-danger"]], template: function CustomerListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelement(2, "input", 0);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵtemplate(6, CustomerListComponent_a_6_Template, 4, 5, "a", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "vdr-data-table", 3);
        ɵngcc0.ɵɵlistener("pageChange", function CustomerListComponent_Template_vdr_data_table_pageChange_7_listener($event) { return ctx.setPageNumber($event); })("itemsPerPageChange", function CustomerListComponent_Template_vdr_data_table_itemsPerPageChange_7_listener($event) { return ctx.setItemsPerPage($event); });
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵpipe(10, "async");
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵelementStart(12, "vdr-dt-column", 4);
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "vdr-dt-column", 4);
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "vdr-dt-column");
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(21, "vdr-dt-column");
        ɵngcc0.ɵɵelement(22, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(23, CustomerListComponent_ng_template_23_Template, 21, 20, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formControl", ctx.searchTerm)("placeholder", ɵngcc0.ɵɵpipeBind1(3, 12, "customer.search-customers-by-email-last-name-postal-code"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("vdrIfPermissions", "CreateCustomer");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(8, 14, ctx.items$))("itemsPerPage", ɵngcc0.ɵɵpipeBind1(9, 16, ctx.itemsPerPage$))("totalItems", ɵngcc0.ɵɵpipeBind1(10, 18, ctx.totalItems$))("currentPage", ɵngcc0.ɵɵpipeBind1(11, 20, ctx.currentPage$));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("expand", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(14, 22, "customer.name"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("expand", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 24, "customer.email-address"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 26, "customer.customer-type"));
    } }, directives: function () { return [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc1.FormFieldControlDirective, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlDirective, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc1.IfPermissionsDirective, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc7.RouterLinkWithHref, ɵngcc5.ClrIconCustomTag, CustomerStatusLabelComponent, ɵngcc1.TableRowActionComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc1.DropdownMenuComponent, ɵngcc1.DropdownItemDirective]; }, pipes: function () { return [ɵngcc3.TranslatePipe, ɵngcc2.AsyncPipe, ɵngcc1.HasPermissionPipe]; }, styles: [".search-input[_ngcontent-%COMP%]{margin-top:6px;min-width:300px}"] });
CustomerListComponent.ctorParameters = () => [
    { type: DataService },
    { type: Router },
    { type: ActivatedRoute },
    { type: ModalService },
    { type: NotificationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-customer-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"emailSearchTerm\"\r\n            [formControl]=\"searchTerm\"\r\n            [placeholder]=\"'customer.search-customers-by-email-last-name-postal-code' | translate\"\r\n            class=\"search-input ml3\"\r\n        />\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateCustomer'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-customer' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'customer.customer-type' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-customer=\"item\">\r\n        <td class=\"left align-middle\">\r\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\r\n        </td>\r\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-customer-status-label [customer]=\"customer\"></vdr-customer-status-label>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', customer.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteCustomer(customer)\"\r\n                        [disabled]=\"!('DeleteCustomer' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                styles: [".search-input{margin-top:6px;min-width:300px}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc7.Router }, { type: ɵngcc7.ActivatedRoute }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }]; }, null); })();

class CustomerStatusLabelComponent {
}
CustomerStatusLabelComponent.ɵfac = function CustomerStatusLabelComponent_Factory(t) { return new (t || CustomerStatusLabelComponent)(); };
CustomerStatusLabelComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CustomerStatusLabelComponent, selectors: [["vdr-customer-status-label"]], inputs: { customer: "customer" }, decls: 2, vars: 2, consts: [[4, "ngIf"], ["shape", "check-circle", 1, "verified-user-icon"], ["shape", "check-circle", 1, "registered-user-icon"]], template: function CustomerStatusLabelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CustomerStatusLabelComponent_vdr_chip_0_Template, 3, 2, "vdr-chip", 0);
        ɵngcc0.ɵɵtemplate(1, CustomerStatusLabelComponent_vdr_chip_1_Template, 3, 3, "vdr-chip", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.customer.user == null ? null : ctx.customer.user.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.customer.user == null ? null : ctx.customer.user.id));
    } }, directives: [ɵngcc2.NgIf, ɵngcc1.ChipComponent, ɵngcc5.ClrIconCustomTag], pipes: [ɵngcc3.TranslatePipe], styles: [".registered-user-icon[_ngcontent-%COMP%]{color:var(--color-grey-300)}.verified-user-icon[_ngcontent-%COMP%]{color:var(--color-success-500)}"], changeDetection: 0 });
CustomerStatusLabelComponent.propDecorators = {
    customer: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerStatusLabelComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-customer-status-label',
                template: "<vdr-chip *ngIf=\"customer.user?.id\">\r\n    <ng-container *ngIf=\"customer.user?.verified\">\r\n        <clr-icon shape=\"check-circle\" class=\"verified-user-icon\"></clr-icon>\r\n        {{ 'customer.verified' | translate }}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!customer.user?.verified\">\r\n        <clr-icon shape=\"check-circle\" class=\"registered-user-icon\"></clr-icon>\r\n        {{ 'customer.registered' | translate }}\r\n    </ng-container>\r\n</vdr-chip>\r\n<vdr-chip *ngIf=\"!customer.user?.id\">{{ 'customer.guest' | translate }}</vdr-chip>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".registered-user-icon{color:var(--color-grey-300)}.verified-user-icon{color:var(--color-success-500)}\n"]
            }]
    }], null, { customer: [{
            type: Input
        }] }); })();

class CustomerResolver extends BaseEntityResolver {
    constructor(router, dataService) {
        super(router, {
            __typename: 'Customer',
            id: '',
            createdAt: '',
            updatedAt: '',
            title: '',
            firstName: '',
            lastName: '',
            emailAddress: '',
            phoneNumber: null,
            addresses: null,
            user: null,
        }, id => dataService.customer.getCustomer(id).mapStream(data => data.customer));
    }
}
CustomerResolver.ɵfac = function CustomerResolver_Factory(t) { return new (t || CustomerResolver)(ɵngcc0.ɵɵinject(ɵngcc7.Router), ɵngcc0.ɵɵinject(ɵngcc1.DataService)); };
CustomerResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function CustomerResolver_Factory() { return new CustomerResolver(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.DataService)); }, token: CustomerResolver, providedIn: "root" });
CustomerResolver.ctorParameters = () => [
    { type: Router },
    { type: DataService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerResolver, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc7.Router }, { type: ɵngcc1.DataService }]; }, null); })();

const ɵ0 = {
    breadcrumb: marker('breadcrumb.customers'),
}, ɵ1 = {
    breadcrumb: customerBreadcrumb,
}, ɵ2 = {
    breadcrumb: marker('breadcrumb.customer-groups'),
};
const customerRoutes = [
    {
        path: 'customers',
        component: CustomerListComponent,
        pathMatch: '',
        data: ɵ0,
    },
    {
        path: 'customers/:id',
        component: CustomerDetailComponent,
        resolve: createResolveData(CustomerResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ1,
    },
    {
        path: 'groups',
        component: CustomerGroupListComponent,
        data: ɵ2,
    },
];
function customerBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.customers',
        getName: (customer) => `${customer.firstName} ${customer.lastName}`,
        route: 'customers',
    });
}

class CustomerModule {
}
CustomerModule.ɵfac = function CustomerModule_Factory(t) { return new (t || CustomerModule)(); };
CustomerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CustomerModule });
CustomerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[SharedModule, RouterModule.forChild(customerRoutes)]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomerModule, [{
        type: NgModule,
        args: [{
                imports: [SharedModule, RouterModule.forChild(customerRoutes)],
                declarations: [
                    CustomerListComponent,
                    CustomerDetailComponent,
                    CustomerStatusLabelComponent,
                    AddressCardComponent,
                    CustomerGroupListComponent,
                    CustomerGroupDetailDialogComponent,
                    AddCustomerToGroupDialogComponent,
                    CustomerGroupMemberListComponent,
                    SelectCustomerGroupDialogComponent,
                    CustomerHistoryComponent,
                    AddressDetailDialogComponent,
                ],
                exports: [AddressCardComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CustomerModule, { declarations: function () { return [CustomerListComponent, CustomerDetailComponent, CustomerStatusLabelComponent, AddressCardComponent, CustomerGroupListComponent, CustomerGroupDetailDialogComponent, AddCustomerToGroupDialogComponent, CustomerGroupMemberListComponent, SelectCustomerGroupDialogComponent, CustomerHistoryComponent, AddressDetailDialogComponent]; }, imports: function () { return [SharedModule, ɵngcc7.RouterModule]; }, exports: function () { return [AddressCardComponent]; } }); })();

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { AddCustomerToGroupDialogComponent, AddressCardComponent, AddressDetailDialogComponent, CustomerDetailComponent, CustomerGroupDetailDialogComponent, CustomerGroupListComponent, CustomerGroupMemberListComponent, CustomerHistoryComponent, CustomerListComponent, CustomerModule, CustomerResolver, CustomerStatusLabelComponent, SelectCustomerGroupDialogComponent, customerBreadcrumb, customerRoutes, ɵ0, ɵ1, ɵ2 };

//# sourceMappingURL=vendure-admin-ui-customer.js.map