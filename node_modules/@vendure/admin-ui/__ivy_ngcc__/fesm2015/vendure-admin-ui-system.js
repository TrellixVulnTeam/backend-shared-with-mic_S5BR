import { Component, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';
import { HealthCheckService, BaseListComponent, SortOrder, DataService, ModalService, NotificationService, JobState, SharedModule } from '@vendure/admin-ui/core';
import { FormControl } from '@angular/forms';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { timer } from 'rxjs';
import { takeUntil, filter, map } from 'rxjs/operators';
import { marker } from '@biesbjerg/ngx-translate-extract-marker';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@vendure/admin-ui/core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@clr/angular';
import * as ɵngcc4 from '@ngx-translate/core';
import * as ɵngcc5 from '@angular/router';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@ng-select/ng-select';

function HealthCheckComponent_div_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "system.health-all-systems-up"), " ");
} }
function HealthCheckComponent_div_2_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 1, "system.health-error"), " ");
} }
const _c0 = function (a0, a1) { return { "is-success": a0, "is-danger": a1 }; };
function HealthCheckComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵelement(2, "clr-icon", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 10);
    ɵngcc0.ɵɵtemplate(4, HealthCheckComponent_div_2_ng_container_4_Template, 3, 3, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(5, HealthCheckComponent_div_2_ng_template_5_Template, 2, 3, "ng-template", null, 12, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(7, "div", 13);
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵpipe(10, "localeDate");
    ɵngcc0.ɵɵpipe(11, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const status_r2 = ctx.ngIf;
    const _r4 = ɵngcc0.ɵɵreference(6);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(13, _c0, status_r2 === "ok", status_r2 !== "ok"));
    ɵngcc0.ɵɵattribute("shape", status_r2 === "ok" ? "check-circle" : "exclamation-circle");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", status_r2 === "ok")("ngIfElse", _r4);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(9, 6, "system.health-last-checked"), ": ", ɵngcc0.ɵɵpipeBind2(10, 8, ɵngcc0.ɵɵpipeBind1(11, 11, ctx_r0.healthCheckService.lastCheck$), "mediumTime"), " ");
} }
function HealthCheckComponent_tr_23_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "clr-icon", 17);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "system.health-status-up"), " ");
} }
function HealthCheckComponent_tr_23_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-icon", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "system.health-status-down"), " ");
} }
function HealthCheckComponent_tr_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelementStart(1, "td", 14);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "td", 14);
    ɵngcc0.ɵɵelementStart(4, "vdr-chip", 15);
    ɵngcc0.ɵɵtemplate(5, HealthCheckComponent_tr_23_ng_container_5_Template, 4, 3, "ng-container", 11);
    ɵngcc0.ɵɵtemplate(6, HealthCheckComponent_tr_23_ng_template_6_Template, 3, 3, "ng-template", null, 16, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "td", 14);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r6 = ctx.$implicit;
    const _r8 = ɵngcc0.ɵɵreference(7);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(row_r6.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("colorType", row_r6.result.status === "up" ? "success" : "error");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", row_r6.result.status === "up")("ngIfElse", _r8);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(row_r6.result.message);
} }
function JobListComponent_ng_template_16_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "system.all-job-queues"), " ");
} }
function JobListComponent_ng_template_16_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-chip", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵproperty("colorFrom", item_r2.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r2.name);
} }
function JobListComponent_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, JobListComponent_ng_template_16_ng_container_0_Template, 3, 3, "ng-container", 6);
    ɵngcc0.ɵɵtemplate(1, JobListComponent_ng_template_16_ng_template_1_Template, 2, 2, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const item_r2 = ctx.item;
    const _r4 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵproperty("ngIf", item_r2.name === "all")("ngIfElse", _r4);
} }
function JobListComponent_ng_template_40_vdr_dropdown_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(1, "button", 15);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelement(3, "clr-icon", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "vdr-dropdown-menu");
    ɵngcc0.ɵɵelementStart(5, "div", 17);
    ɵngcc0.ɵɵelement(6, "vdr-object-tree", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const job_r7 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 2, "system.job-data"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("value", job_r7.data);
} }
function JobListComponent_ng_template_40_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const job_r7 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" after ", job_r7.attempts, " attempts ");
} }
function JobListComponent_ng_template_40_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const job_r7 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" attempting ", job_r7.attempts + 1, " of ", job_r7.retries, " ");
} }
function JobListComponent_ng_template_40_vdr_dropdown_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(1, "button", 20);
    ɵngcc0.ɵɵelement(2, "clr-icon", 16);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "vdr-dropdown-menu");
    ɵngcc0.ɵɵelementStart(6, "div", 17);
    ɵngcc0.ɵɵelement(7, "vdr-object-tree", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const job_r7 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "system.job-result"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("value", job_r7.result);
} }
function JobListComponent_ng_template_40_vdr_dropdown_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(1, "button", 20);
    ɵngcc0.ɵɵelement(2, "clr-icon", 21);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "vdr-dropdown-menu");
    ɵngcc0.ɵɵelementStart(6, "div", 17);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const job_r7 = ɵngcc0.ɵɵnextContext().item;
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "system.job-error"), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", job_r7.error, " ");
} }
const _c1 = function () { return ["DeleteSettings", "DeleteSystem"]; };
function JobListComponent_ng_template_40_vdr_dropdown_20_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "vdr-dropdown");
    ɵngcc0.ɵɵelementStart(1, "button", 22);
    ɵngcc0.ɵɵelement(2, "clr-icon", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "vdr-dropdown-menu", 24);
    ɵngcc0.ɵɵelementStart(4, "button", 25);
    ɵngcc0.ɵɵlistener("click", function JobListComponent_ng_template_40_vdr_dropdown_20_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r21); const job_r7 = ɵngcc0.ɵɵnextContext().item; const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.cancelJob(job_r7.id); });
    ɵngcc0.ɵɵpipe(5, "hasPermission");
    ɵngcc0.ɵɵelement(6, "clr-icon", 26);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", !ɵngcc0.ɵɵpipeBind1(5, 2, ɵngcc0.ɵɵpureFunction0(6, _c1)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 4, "common.cancel"), " ");
} }
function JobListComponent_ng_template_40_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 9);
    ɵngcc0.ɵɵelement(1, "vdr-entity-info", 10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "td", 9);
    ɵngcc0.ɵɵtemplate(3, JobListComponent_ng_template_40_vdr_dropdown_3_Template, 7, 4, "vdr-dropdown", 11);
    ɵngcc0.ɵɵelementStart(4, "vdr-chip", 8);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "td", 9);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "timeAgo");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "td", 9);
    ɵngcc0.ɵɵelement(10, "vdr-job-state-label", 12);
    ɵngcc0.ɵɵtemplate(11, JobListComponent_ng_template_40_div_11_Template, 2, 1, "div", 13);
    ɵngcc0.ɵɵtemplate(12, JobListComponent_ng_template_40_div_12_Template, 2, 2, "div", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "td", 9);
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "duration");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "td", 9);
    ɵngcc0.ɵɵtemplate(17, JobListComponent_ng_template_40_vdr_dropdown_17_Template, 8, 4, "vdr-dropdown", 11);
    ɵngcc0.ɵɵtemplate(18, JobListComponent_ng_template_40_vdr_dropdown_18_Template, 8, 4, "vdr-dropdown", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "td", 14);
    ɵngcc0.ɵɵtemplate(20, JobListComponent_ng_template_40_vdr_dropdown_20_Template, 9, 7, "vdr-dropdown", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const job_r7 = ctx.item;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("entity", job_r7);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", job_r7.data);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("colorFrom", job_r7.queueName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(job_r7.queueName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 12, job_r7.createdAt));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("job", job_r7);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", job_r7.state === "FAILED");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", job_r7.state === "RUNNING" || job_r7.state === "RETRYING");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 14, job_r7.duration));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.hasResult(job_r7));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", job_r7.error);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !job_r7.isSettled && job_r7.state !== "FAILED");
} }
function JobStateLabelComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "percent");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.job.progress / 100), " ");
} }
class HealthCheckComponent {
    constructor(healthCheckService) {
        this.healthCheckService = healthCheckService;
    }
}
HealthCheckComponent.ɵfac = function HealthCheckComponent_Factory(t) { return new (t || HealthCheckComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HealthCheckService)); };
HealthCheckComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: HealthCheckComponent, selectors: [["vdr-health-check"]], decls: 25, vars: 18, consts: [["class", "system-status-header", 4, "ngIf"], ["locationId", "system-status"], [1, "btn", "btn-secondary", 3, "click"], ["shape", "refresh"], [1, "table"], [1, "left"], [4, "ngFor", "ngForOf"], [1, "system-status-header"], [1, "status-icon"], ["size", "48", 3, "ngClass"], [1, "status-detail"], [4, "ngIf", "ngIfElse"], ["error", ""], [1, "last-checked"], [1, "align-middle", "left"], [3, "colorType"], ["down", ""], ["shape", "check-circle"], ["shape", "exclamation-circle"]], template: function HealthCheckComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵtemplate(2, HealthCheckComponent_div_2_Template, 12, 16, "div", 0);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "vdr-ab-right");
        ɵngcc0.ɵɵelement(5, "vdr-action-bar-items", 1);
        ɵngcc0.ɵɵelementStart(6, "button", 2);
        ɵngcc0.ɵɵlistener("click", function HealthCheckComponent_Template_button_click_6_listener() { return ctx.healthCheckService.refresh(); });
        ɵngcc0.ɵɵelement(7, "clr-icon", 3);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "table", 4);
        ɵngcc0.ɵɵelementStart(11, "thead");
        ɵngcc0.ɵɵelementStart(12, "tr");
        ɵngcc0.ɵɵelementStart(13, "th", 5);
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "th", 5);
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "th", 5);
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "tbody");
        ɵngcc0.ɵɵtemplate(23, HealthCheckComponent_tr_23_Template, 10, 5, "tr", 6);
        ɵngcc0.ɵɵpipe(24, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(3, 6, ctx.healthCheckService.status$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 8, "system.health-refresh"), " ");
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(15, 10, "common.name"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 12, "system.health-status"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 14, "system.health-message"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(24, 16, ctx.healthCheckService.details$));
    } }, directives: [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc2.NgIf, ɵngcc1.ActionBarRightComponent, ɵngcc1.ActionBarItemsComponent, ɵngcc3.ClrIconCustomTag, ɵngcc2.NgForOf, ɵngcc2.NgClass, ɵngcc1.ChipComponent], pipes: [ɵngcc2.AsyncPipe, ɵngcc4.TranslatePipe, ɵngcc1.LocaleDatePipe], styles: [".system-status-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:flex-start}.system-status-header[_ngcontent-%COMP%]   .status-detail[_ngcontent-%COMP%]{font-weight:bold}.system-status-header[_ngcontent-%COMP%]   .last-checked[_ngcontent-%COMP%]{font-weight:normal;color:var(--color-grey-500)}"], changeDetection: 0 });
HealthCheckComponent.ctorParameters = () => [
    { type: HealthCheckService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HealthCheckComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-health-check',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"system-status-header\" *ngIf=\"healthCheckService.status$ | async as status\">\r\n            <div class=\"status-icon\">\r\n                <clr-icon\r\n                    [attr.shape]=\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\"\r\n                    [ngClass]=\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\"\r\n                    size=\"48\"\r\n                ></clr-icon>\r\n            </div>\r\n            <div class=\"status-detail\">\r\n                <ng-container *ngIf=\"status === 'ok'; else error\">\r\n                    {{ 'system.health-all-systems-up' | translate }}\r\n                </ng-container>\r\n                <ng-template #error>\r\n                    {{ 'system.health-error' | translate }}\r\n                </ng-template>\r\n                <div class=\"last-checked\">\r\n                    {{ 'system.health-last-checked' | translate }}:\r\n                    {{ healthCheckService.lastCheck$ | async | localeDate: 'mediumTime' }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"system-status\"></vdr-action-bar-items>\r\n        <button class=\"btn btn-secondary\" (click)=\"healthCheckService.refresh()\">\r\n            <clr-icon shape=\"refresh\"></clr-icon> {{ 'system.health-refresh' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<table class=\"table\">\r\n    <thead>\r\n        <tr>\r\n            <th class=\"left\">\r\n                {{ 'common.name' | translate }}\r\n            </th>\r\n            <th class=\"left\">\r\n                {{ 'system.health-status' | translate }}\r\n            </th>\r\n            <th class=\"left\">\r\n                {{ 'system.health-message' | translate }}\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let row of healthCheckService.details$ | async\">\r\n            <td class=\"align-middle left\">{{ row.key }}</td>\r\n            <td class=\"align-middle left\">\r\n                <vdr-chip [colorType]=\"row.result.status === 'up' ? 'success' : 'error'\">\r\n                    <ng-container *ngIf=\"row.result.status === 'up'; else down\">\r\n                        <clr-icon shape=\"check-circle\"></clr-icon>\r\n                        {{ 'system.health-status-up' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #down>\r\n                        <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                        {{ 'system.health-status-down' | translate }}\r\n                    </ng-template>\r\n                </vdr-chip>\r\n            </td>\r\n            <td class=\"align-middle left\">{{ row.result.message }}</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".system-status-header{display:flex;justify-content:space-between;align-items:flex-start}.system-status-header .status-detail{font-weight:bold}.system-status-header .last-checked{font-weight:normal;color:var(--color-grey-500)}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.HealthCheckService }]; }, null); })();

class JobListComponent extends BaseListComponent {
    constructor(dataService, modalService, notificationService, router, route) {
        super(router, route);
        this.dataService = dataService;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.liveUpdate = new FormControl(true);
        this.hideSettled = new FormControl(true);
        this.queueFilter = new FormControl('all');
        super.setQueryFn((...args) => this.dataService.settings.getAllJobs(...args), data => data.jobs, (skip, take) => {
            const queueFilter = this.queueFilter.value === 'all' ? null : { queueName: { eq: this.queueFilter.value } };
            const hideSettled = this.hideSettled.value;
            return {
                options: {
                    skip,
                    take,
                    filter: Object.assign(Object.assign({}, queueFilter), (hideSettled ? { isSettled: { eq: false } } : {})),
                    sort: {
                        createdAt: SortOrder.DESC,
                    },
                },
            };
        });
    }
    ngOnInit() {
        super.ngOnInit();
        timer(5000, 2000)
            .pipe(takeUntil(this.destroy$), filter(() => this.liveUpdate.value))
            .subscribe(() => {
            this.refresh();
        });
        this.queues$ = this.dataService.settings
            .getJobQueues()
            .mapStream(res => res.jobQueues)
            .pipe(map(queues => {
            return [{ name: 'all', running: true }, ...queues];
        }));
    }
    hasResult(job) {
        const result = job.result;
        if (result == null) {
            return false;
        }
        if (typeof result === 'object') {
            return Object.keys(result).length > 0;
        }
        return true;
    }
    cancelJob(id) {
        this.dataService.settings.cancelJob(id).subscribe(() => this.refresh());
    }
}
JobListComponent.ɵfac = function JobListComponent_Factory(t) { return new (t || JobListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ModalService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ActivatedRoute)); };
JobListComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: JobListComponent, selectors: [["vdr-job-list"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 41, vars: 45, consts: [["type", "checkbox", "clrCheckbox", "", "name", "live-update", 3, "formControl"], ["type", "checkbox", "clrCheckbox", "", "name", "hide-settled", 3, "formControl", "change"], ["bindValue", "name", 3, "addTag", "items", "hideSelected", "multiple", "markFirst", "clearable", "searchable", "formControl", "change"], ["ng-label-tmp", "", "ng-option-tmp", ""], ["locationId", "job-list"], [3, "items", "itemsPerPage", "totalItems", "currentPage", "pageChange", "itemsPerPageChange"], [4, "ngIf", "ngIfElse"], ["others", ""], [3, "colorFrom"], [1, "left", "align-middle"], [3, "entity"], [4, "ngIf"], [3, "job"], ["class", "retry-info", 4, "ngIf"], [1, "right", "align-middle"], ["vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-icon", 3, "title"], ["shape", "details"], [1, "result-detail"], [3, "value"], [1, "retry-info"], ["vdrDropdownTrigger", "", 1, "btn", "btn-link", "btn-sm", "details-button"], ["shape", "exclamation-circle"], ["vdrDropdownTrigger", "", 1, "icon-button"], ["shape", "ellipsis-vertical"], ["vdrPosition", "bottom-right"], ["type", "button", "vdrDropdownItem", "", 1, "delete-button", 3, "disabled", "click"], ["shape", "ban", 1, "is-danger"]], template: function JobListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-action-bar");
        ɵngcc0.ɵɵelementStart(1, "vdr-ab-left");
        ɵngcc0.ɵɵelementStart(2, "clr-checkbox-container");
        ɵngcc0.ɵɵelementStart(3, "clr-checkbox-wrapper");
        ɵngcc0.ɵɵelement(4, "input", 0);
        ɵngcc0.ɵɵelementStart(5, "label");
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "clr-checkbox-wrapper");
        ɵngcc0.ɵɵelementStart(9, "input", 1);
        ɵngcc0.ɵɵlistener("change", function JobListComponent_Template_input_change_9_listener() { return ctx.refresh(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "label");
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "vdr-ab-right");
        ɵngcc0.ɵɵelementStart(14, "ng-select", 2);
        ɵngcc0.ɵɵlistener("change", function JobListComponent_Template_ng_select_change_14_listener() { return ctx.refresh(); });
        ɵngcc0.ɵɵpipe(15, "async");
        ɵngcc0.ɵɵtemplate(16, JobListComponent_ng_template_16_Template, 3, 2, "ng-template", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(17, "vdr-action-bar-items", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "vdr-data-table", 5);
        ɵngcc0.ɵɵlistener("pageChange", function JobListComponent_Template_vdr_data_table_pageChange_18_listener($event) { return ctx.setPageNumber($event); })("itemsPerPageChange", function JobListComponent_Template_vdr_data_table_itemsPerPageChange_18_listener($event) { return ctx.setItemsPerPage($event); });
        ɵngcc0.ɵɵpipe(19, "async");
        ɵngcc0.ɵɵpipe(20, "async");
        ɵngcc0.ɵɵpipe(21, "async");
        ɵngcc0.ɵɵpipe(22, "async");
        ɵngcc0.ɵɵelement(23, "vdr-dt-column");
        ɵngcc0.ɵɵelementStart(24, "vdr-dt-column");
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "vdr-dt-column");
        ɵngcc0.ɵɵtext(28);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "vdr-dt-column");
        ɵngcc0.ɵɵtext(31);
        ɵngcc0.ɵɵpipe(32, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(33, "vdr-dt-column");
        ɵngcc0.ɵɵtext(34);
        ɵngcc0.ɵɵpipe(35, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(36, "vdr-dt-column");
        ɵngcc0.ɵɵtext(37);
        ɵngcc0.ɵɵpipe(38, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(39, "vdr-dt-column");
        ɵngcc0.ɵɵtemplate(40, JobListComponent_ng_template_40_Template, 21, 16, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formControl", ctx.liveUpdate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 21, "common.live-update"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("formControl", ctx.hideSettled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(12, 23, "system.hide-settled-jobs"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("addTag", false)("items", ɵngcc0.ɵɵpipeBind1(15, 25, ctx.queues$))("hideSelected", true)("multiple", false)("markFirst", false)("clearable", false)("searchable", false)("formControl", ctx.queueFilter);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(19, 27, ctx.items$))("itemsPerPage", ɵngcc0.ɵɵpipeBind1(20, 29, ctx.itemsPerPage$))("totalItems", ɵngcc0.ɵɵpipeBind1(21, 31, ctx.totalItems$))("currentPage", ɵngcc0.ɵɵpipeBind1(22, 33, ctx.currentPage$));
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(26, 35, "system.job-queue-name"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(29, 37, "common.created-at"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(32, 39, "system.job-state"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(35, 41, "system.job-duration"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(38, 43, "system.job-result"));
    } }, directives: function () { return [ɵngcc1.ActionBarComponent, ɵngcc1.ActionBarLeftComponent, ɵngcc3.ClrCheckboxContainer, ɵngcc3.ClrCheckboxWrapper, ɵngcc1.FormFieldControlDirective, ɵngcc6.CheckboxControlValueAccessor, ɵngcc3.ClrCheckbox, ɵngcc6.NgControlStatus, ɵngcc6.FormControlDirective, ɵngcc3.ClrLabel, ɵngcc1.ActionBarRightComponent, ɵngcc7.NgSelectComponent, ɵngcc7.ɵh, ɵngcc7.ɵf, ɵngcc1.ActionBarItemsComponent, ɵngcc1.DataTableComponent, ɵngcc1.DataTableColumnComponent, ɵngcc2.NgIf, ɵngcc1.ChipComponent, ɵngcc1.EntityInfoComponent, JobStateLabelComponent, ɵngcc1.DropdownComponent, ɵngcc1.DropdownTriggerDirective, ɵngcc3.ClrIconCustomTag, ɵngcc1.DropdownMenuComponent, ɵngcc1.ObjectTreeComponent, ɵngcc1.DropdownItemDirective]; }, pipes: function () { return [ɵngcc4.TranslatePipe, ɵngcc2.AsyncPipe, ɵngcc1.TimeAgoPipe, ɵngcc1.DurationPipe, ɵngcc1.HasPermissionPipe]; }, styles: [".result-detail[_ngcontent-%COMP%]{margin:0 12px}.retry-info[_ngcontent-%COMP%]{margin-left:6px;color:var(--color-grey-400)}"], changeDetection: 0 });
JobListComponent.ctorParameters = () => [
    { type: DataService },
    { type: ModalService },
    { type: NotificationService },
    { type: Router },
    { type: ActivatedRoute }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JobListComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-job-list',
                template: "<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <clr-checkbox-container>\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [formControl]=\"liveUpdate\" name=\"live-update\"/>\r\n                <label>{{ 'common.live-update' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <clr-checkbox-wrapper>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrCheckbox\r\n                    [formControl]=\"hideSettled\"\r\n                    name=\"hide-settled\"\r\n                    (change)=\"refresh()\"\r\n                />\r\n                <label>{{ 'system.hide-settled-jobs' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n        </clr-checkbox-container>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <ng-select\r\n            [addTag]=\"false\"\r\n            [items]=\"queues$ | async\"\r\n            [hideSelected]=\"true\"\r\n            [multiple]=\"false\"\r\n            [markFirst]=\"false\"\r\n            [clearable]=\"false\"\r\n            [searchable]=\"false\"\r\n            bindValue=\"name\"\r\n            [formControl]=\"queueFilter\"\r\n            (change)=\"refresh()\"\r\n        >\r\n            <ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\r\n                <ng-container *ngIf=\"item.name === 'all'; else others\">\r\n                    {{ 'system.all-job-queues' | translate }}\r\n                </ng-container>\r\n                <ng-template #others>\r\n                    <vdr-chip [colorFrom]=\"item.name\">{{ item.name }}</vdr-chip>\r\n                </ng-template>\r\n            </ng-template>\r\n        </ng-select>\r\n        <vdr-action-bar-items locationId=\"job-list\"></vdr-action-bar-items>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column>{{ 'system.job-queue-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.created-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'system.job-state' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'system.job-duration' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'system.job-result' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-job=\"item\">\r\n        <td class=\"left align-middle\">\r\n            <vdr-entity-info [entity]=\"job\"></vdr-entity-info>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-dropdown *ngIf=\"job.data\">\r\n                <button\r\n                    class=\"btn btn-link btn-icon\"\r\n                    vdrDropdownTrigger\r\n                    [title]=\"'system.job-data' | translate\"\r\n                >\r\n                    <clr-icon shape=\"details\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu>\r\n                    <div class=\"result-detail\">\r\n                        <vdr-object-tree [value]=\"job.data\"></vdr-object-tree>\r\n                    </div>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n            <vdr-chip [colorFrom]=\"job.queueName\">{{ job.queueName }}</vdr-chip>\r\n        </td>\r\n\r\n        <td class=\"left align-middle\">{{ job.createdAt | timeAgo }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-job-state-label [job]=\"job\"></vdr-job-state-label>\r\n            <div *ngIf=\"job.state === 'FAILED'\" class=\"retry-info\">\r\n                after {{ job.attempts }} attempts\r\n            </div>\r\n            <div *ngIf=\"job.state === 'RUNNING' || job.state === 'RETRYING'\"  class=\"retry-info\">\r\n                attempting {{ job.attempts + 1 }} of {{ job.retries }}\r\n            </div>\r\n        </td>\r\n        <td class=\"left align-middle\">{{ job.duration | duration }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-dropdown *ngIf=\"hasResult(job)\">\r\n                <button class=\"btn btn-link btn-sm details-button\" vdrDropdownTrigger>\r\n                    <clr-icon shape=\"details\"></clr-icon>\r\n                    {{ 'system.job-result' | translate }}\r\n                </button>\r\n                <vdr-dropdown-menu>\r\n                    <div class=\"result-detail\">\r\n                        <vdr-object-tree [value]=\"job.result\"></vdr-object-tree>\r\n                    </div>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n            <vdr-dropdown *ngIf=\"job.error\">\r\n                <button class=\"btn btn-link btn-sm details-button\" vdrDropdownTrigger>\r\n                    <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                    {{ 'system.job-error' | translate }}\r\n                </button>\r\n                <vdr-dropdown-menu>\r\n                    <div class=\"result-detail\">\r\n                        {{ job.error }}\r\n                    </div>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown *ngIf=\"!job.isSettled && job.state !== 'FAILED'\">\r\n                <button class=\"icon-button\" vdrDropdownTrigger>\r\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"cancelJob(job.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"ban\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.cancel' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".result-detail{margin:0 12px}.retry-info{margin-left:6px;color:var(--color-grey-400)}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.DataService }, { type: ɵngcc1.ModalService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc5.Router }, { type: ɵngcc5.ActivatedRoute }]; }, null); })();

class JobStateLabelComponent {
    get iconShape() {
        switch (this.job.state) {
            case JobState.COMPLETED:
                return 'check-circle';
            case JobState.FAILED:
                return 'exclamation-circle';
            case JobState.CANCELLED:
                return 'ban';
            case JobState.PENDING:
            case JobState.RETRYING:
                return 'hourglass';
            case JobState.RUNNING:
                return 'sync';
        }
    }
    get colorType() {
        switch (this.job.state) {
            case JobState.COMPLETED:
                return 'success';
            case JobState.FAILED:
            case JobState.CANCELLED:
                return 'error';
            case JobState.PENDING:
            case JobState.RETRYING:
                return '';
            case JobState.RUNNING:
                return 'warning';
        }
    }
}
JobStateLabelComponent.ɵfac = function JobStateLabelComponent_Factory(t) { return new (t || JobStateLabelComponent)(); };
JobStateLabelComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: JobStateLabelComponent, selectors: [["vdr-job-state-label"]], inputs: { job: "job" }, decls: 5, vars: 6, consts: [[3, "colorType"], [1, "mr1"], ["class", "progress", 4, "ngIf"], [1, "progress"]], template: function JobStateLabelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "vdr-chip", 0);
        ɵngcc0.ɵɵelement(1, "clr-icon", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "titlecase");
        ɵngcc0.ɵɵtemplate(4, JobStateLabelComponent_span_4_Template, 3, 3, "span", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("colorType", ctx.colorType);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("shape", ctx.iconShape);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx.job.state), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.job.state === "RUNNING");
    } }, directives: [ɵngcc1.ChipComponent, ɵngcc3.ClrIconCustomTag, ɵngcc2.NgIf], pipes: [ɵngcc2.TitleCasePipe, ɵngcc2.PercentPipe], styles: [".progress[_ngcontent-%COMP%]{margin-left:3px}clr-icon[_ngcontent-%COMP%]{min-width:12px}"], changeDetection: 0 });
JobStateLabelComponent.propDecorators = {
    job: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JobStateLabelComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-job-state-label',
                template: "<vdr-chip [colorType]=\"colorType\">\r\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\r\n    {{ job.state | titlecase }}\r\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\r\n        {{ (job.progress / 100) | percent }}\r\n    </span>\r\n</vdr-chip>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".progress{margin-left:3px}clr-icon{min-width:12px}\n"]
            }]
    }], null, { job: [{
            type: Input
        }] }); })();

const ɵ0 = {
    breadcrumb: marker('breadcrumb.job-queue'),
}, ɵ1 = {
    breadcrumb: marker('breadcrumb.system-status'),
};
const systemRoutes = [
    {
        path: 'jobs',
        component: JobListComponent,
        data: ɵ0,
    },
    {
        path: 'system-status',
        component: HealthCheckComponent,
        data: ɵ1,
    },
];

class SystemModule {
}
SystemModule.ɵfac = function SystemModule_Factory(t) { return new (t || SystemModule)(); };
SystemModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SystemModule });
SystemModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[SharedModule, RouterModule.forChild(systemRoutes)]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SystemModule, [{
        type: NgModule,
        args: [{
                declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent],
                imports: [SharedModule, RouterModule.forChild(systemRoutes)]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SystemModule, { declarations: function () { return [HealthCheckComponent, JobListComponent, JobStateLabelComponent]; }, imports: function () { return [SharedModule, ɵngcc5.RouterModule]; } }); })();

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { HealthCheckComponent, JobListComponent, JobStateLabelComponent, SystemModule, systemRoutes, ɵ0, ɵ1 };

//# sourceMappingURL=vendure-admin-ui-system.js.map