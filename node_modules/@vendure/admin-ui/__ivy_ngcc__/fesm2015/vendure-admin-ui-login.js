import * as i0 from '@angular/core';
import { Component, Injectable, NgModule } from '@angular/core';
import * as i1 from '@angular/router';
import { Router, RouterModule } from '@angular/router';
import * as i2 from '@vendure/admin-ui/core';
import { ADMIN_UI_VERSION, getAppConfig, AUTH_REDIRECT_PARAM, AuthService, SharedModule } from '@vendure/admin-ui/core';
import { map } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@vendure/admin-ui/core';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@clr/angular';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@ngx-translate/core';

function LoginComponent_span_22_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "-");
    ɵngcc0.ɵɵelementEnd();
} }
function LoginComponent_span_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, LoginComponent_span_22_span_2_Template, 2, 0, "span", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r0.brand, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.hideVendureBranding || !ctx_r0.hideVersion);
} }
function LoginComponent_span_23_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "vendure");
    ɵngcc0.ɵɵelementEnd();
} }
function LoginComponent_span_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("v", ctx_r2.version, "");
} }
class LoginComponent {
    constructor(authService, router) {
        this.authService = authService;
        this.router = router;
        this.username = '';
        this.password = '';
        this.rememberMe = false;
        this.version = ADMIN_UI_VERSION;
        this.brand = getAppConfig().brand;
        this.hideVendureBranding = getAppConfig().hideVendureBranding;
        this.hideVersion = getAppConfig().hideVersion;
    }
    logIn() {
        this.errorMessage = undefined;
        this.authService.logIn(this.username, this.password, this.rememberMe).subscribe(result => {
            switch (result.__typename) {
                case 'CurrentUser':
                    const redirect = this.getRedirectRoute();
                    this.router.navigateByUrl(redirect ? redirect : '/');
                    break;
                case 'InvalidCredentialsError':
                case 'NativeAuthStrategyError':
                    this.errorMessage = result.message;
                    break;
            }
        });
    }
    /**
     * Attempts to read a redirect param from the current url and parse it into a
     * route from which the user was redirected after a 401 error.
     */
    getRedirectRoute() {
        let redirectTo;
        const re = new RegExp(`${AUTH_REDIRECT_PARAM}=(.*)`);
        try {
            const redirectToParam = window.location.search.match(re);
            if (redirectToParam && 1 < redirectToParam.length) {
                redirectTo = atob(decodeURIComponent(redirectToParam[1]));
            }
        }
        catch (e) {
            // ignore
        }
        return redirectTo;
    }
}
LoginComponent.ɵfac = function LoginComponent_Factory(t) { return new (t || LoginComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AuthService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Router)); };
LoginComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LoginComponent, selectors: [["vdr-login"]], decls: 25, vars: 24, consts: [[1, "login-wrapper"], [1, "login"], [1, "title"], ["src", "assets/logo-300px.png"], [1, "login-group"], ["type", "text", "name", "username", "id", "login_username", 1, "username", 3, "ngModel", "placeholder", "ngModelChange"], ["name", "password", "type", "password", "id", "login_password", 1, "password", 3, "ngModel", "placeholder", "ngModelChange"], [1, "login-error", 3, "clrAlertType", "clrAlertClosable"], [1, "alert-text"], ["type", "checkbox", "clrCheckbox", "", "id", "rememberme", "name", "rememberme", 3, "ngModel", "ngModelChange"], ["type", "submit", 1, "btn", "btn-primary", 3, "disabled", "click"], [1, "version"], [4, "ngIf"]], template: function LoginComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵelementStart(2, "label", 2);
        ɵngcc0.ɵɵelement(3, "img", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "input", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function LoginComponent_Template_input_ngModelChange_5_listener($event) { return ctx.username = $event; });
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "input", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function LoginComponent_Template_input_ngModelChange_7_listener($event) { return ctx.password = $event; });
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "clr-alert", 7);
        ɵngcc0.ɵɵelementStart(10, "clr-alert-item");
        ɵngcc0.ɵɵelementStart(11, "span", 8);
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "clr-checkbox-wrapper");
        ɵngcc0.ɵɵelementStart(14, "input", 9);
        ɵngcc0.ɵɵlistener("ngModelChange", function LoginComponent_Template_input_ngModelChange_14_listener($event) { return ctx.rememberMe = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "label");
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "button", 10);
        ɵngcc0.ɵɵlistener("click", function LoginComponent_Template_button_click_18_listener() { return ctx.logIn(); });
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 11);
        ɵngcc0.ɵɵtemplate(22, LoginComponent_span_22_Template, 3, 2, "span", 12);
        ɵngcc0.ɵɵtemplate(23, LoginComponent_span_23_Template, 2, 0, "span", 12);
        ɵngcc0.ɵɵtemplate(24, LoginComponent_span_24_Template, 2, 1, "span", 12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngModel", ctx.username)("placeholder", ɵngcc0.ɵɵpipeBind1(6, 16, "common.username"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.password)("placeholder", ɵngcc0.ɵɵpipeBind1(8, 18, "common.password"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("visible", ctx.errorMessage);
        ɵngcc0.ɵɵproperty("clrAlertType", "danger")("clrAlertClosable", false);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.errorMessage, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.rememberMe);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 20, "common.remember-me"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.username || !ctx.password);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 22, "common.login"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.brand);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hideVendureBranding);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hideVersion);
    } }, directives: [ɵngcc3.ɵNgNoValidate, ɵngcc3.NgControlStatusGroup, ɵngcc3.NgForm, ɵngcc4.ClrLabel, ɵngcc1.FormFieldControlDirective, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc4.ClrAlert, ɵngcc4.ClrAlertItem, ɵngcc4.ClrAlertText, ɵngcc4.ClrCheckboxWrapper, ɵngcc3.CheckboxControlValueAccessor, ɵngcc4.ClrCheckbox, ɵngcc5.NgIf], pipes: [ɵngcc6.TranslatePipe], styles: [".login-wrapper[_ngcontent-%COMP%]{background:var(--login-page-bg);background-size:auto;justify-content:center}.title[_ngcontent-%COMP%]{text-align:center}.version[_ngcontent-%COMP%]{flex:1;display:flex;align-items:flex-end;justify-content:center;color:var(--color-grey-300)}.version[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] + span[_ngcontent-%COMP%]{margin-left:5px}.login-error[_ngcontent-%COMP%]{max-height:0;overflow:hidden}.login-error.visible[_ngcontent-%COMP%]{max-height:46px;transition:max-height .2s;animation:shake .82s cubic-bezier(.36,.07,.19,.97) both;animation-delay:.2s;transform:translate(0);-webkit-backface-visibility:hidden;backface-visibility:hidden;perspective:1000px}@keyframes shake{10%,90%{transform:translate(-1px)}20%,80%{transform:translate(2px)}30%,50%,70%{transform:translate(-4px)}40%,60%{transform:translate(4px)}}"] });
LoginComponent.ctorParameters = () => [
    { type: AuthService },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoginComponent, [{
        type: Component,
        args: [{
                selector: 'vdr-login',
                template: "<div class=\"login-wrapper\">\r\n    <form class=\"login\">\r\n        <label class=\"title\"><img src=\"assets/logo-300px.png\" /></label>\r\n        <div class=\"login-group\">\r\n            <input\r\n                class=\"username\"\r\n                type=\"text\"\r\n                name=\"username\"\r\n                id=\"login_username\"\r\n                [(ngModel)]=\"username\"\r\n                [placeholder]=\"'common.username' | translate\"\r\n            />\r\n            <input\r\n                class=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                id=\"login_password\"\r\n                [(ngModel)]=\"password\"\r\n                [placeholder]=\"'common.password' | translate\"\r\n            />\r\n            <clr-alert [clrAlertType]=\"'danger'\"  [clrAlertClosable]=\"false\" [class.visible]=\"errorMessage\" class=\"login-error\">\r\n                <clr-alert-item>\r\n                    <span class=\"alert-text\">\r\n                        {{ errorMessage }}\r\n                    </span>\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <clr-checkbox-wrapper>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrCheckbox\r\n                    id=\"rememberme\"\r\n                    name=\"rememberme\"\r\n                    [(ngModel)]=\"rememberMe\"\r\n                />\r\n                <label>{{ 'common.remember-me' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <button\r\n                type=\"submit\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"logIn()\"\r\n                [disabled]=\"!username || !password\"\r\n            >\r\n                {{ 'common.login' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"version\">\r\n            <span *ngIf=\"brand\">{{ brand }} <span *ngIf=\"!hideVendureBranding || !hideVersion\">-</span></span>\r\n            <span *ngIf=\"!hideVendureBranding\">vendure</span>\r\n            <span *ngIf=\"!hideVersion\">v{{ version }}</span>\r\n        </div>\r\n    </form>\r\n</div>\r\n",
                styles: [".login-wrapper{background:var(--login-page-bg);background-size:auto;justify-content:center}.title{text-align:center}.version{flex:1;display:flex;align-items:flex-end;justify-content:center;color:var(--color-grey-300)}.version span+span{margin-left:5px}.login-error{max-height:0;overflow:hidden}.login-error.visible{max-height:46px;transition:max-height .2s;animation:shake .82s cubic-bezier(.36,.07,.19,.97) both;animation-delay:.2s;transform:translate(0);-webkit-backface-visibility:hidden;backface-visibility:hidden;perspective:1000px}@keyframes shake{10%,90%{transform:translate(-1px)}20%,80%{transform:translate(2px)}30%,50%,70%{transform:translate(-4px)}40%,60%{transform:translate(4px)}}\n"]
            }]
    }], function () { return [{ type: ɵngcc1.AuthService }, { type: ɵngcc2.Router }]; }, null); })();

/**
 * This guard prevents loggen-in users from navigating to the login screen.
 */
class LoginGuard {
    constructor(router, authService) {
        this.router = router;
        this.authService = authService;
    }
    canActivate(route) {
        return this.authService.checkAuthenticatedStatus().pipe(map(authenticated => {
            if (authenticated) {
                this.router.navigate(['/']);
            }
            return !authenticated;
        }));
    }
}
LoginGuard.ɵfac = function LoginGuard_Factory(t) { return new (t || LoginGuard)(ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc1.AuthService)); };
LoginGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoginGuard_Factory() { return new LoginGuard(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService)); }, token: LoginGuard, providedIn: "root" });
LoginGuard.ctorParameters = () => [
    { type: Router },
    { type: AuthService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoginGuard, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc2.Router }, { type: ɵngcc1.AuthService }]; }, null); })();

const loginRoutes = [
    {
        path: '',
        component: LoginComponent,
        pathMatch: 'full',
        canActivate: [LoginGuard],
    },
];

class LoginModule {
}
LoginModule.ɵfac = function LoginModule_Factory(t) { return new (t || LoginModule)(); };
LoginModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LoginModule });
LoginModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[SharedModule, RouterModule.forChild(loginRoutes)]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoginModule, [{
        type: NgModule,
        args: [{
                imports: [SharedModule, RouterModule.forChild(loginRoutes)],
                exports: [],
                declarations: [LoginComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoginModule, { declarations: function () { return [LoginComponent]; }, imports: function () { return [SharedModule, ɵngcc2.RouterModule]; } }); })();

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { LoginComponent, LoginGuard, LoginModule, loginRoutes };

//# sourceMappingURL=vendure-admin-ui-login.js.map