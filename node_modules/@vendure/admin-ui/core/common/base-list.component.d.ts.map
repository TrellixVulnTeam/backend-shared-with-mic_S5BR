{"version":3,"file":"base-list.component.d.ts","sources":["base-list.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, QueryParamsHandling, Router } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { QueryResult } from '../data/query-result';\r\nexport declare type ListQueryFn<R> = (take: number, skip: number, ...args: any[]) => QueryResult<R, any>;\r\nexport declare type MappingFn<T, R> = (result: R) => {\r\n    items: T[];\r\n    totalItems: number;\r\n};\r\nexport declare type OnPageChangeFn<V> = (skip: number, take: number) => V;\r\n/**\r\n * @description\r\n * This is a base class which implements the logic required to fetch and manipulate\r\n * a list of data from a query which returns a PaginatedList type.\r\n *\r\n * @example\r\n * ```TypeScript\r\n * \\@Component({\r\n *   selector: 'my-entity-list',\r\n *   templateUrl: './my-entity-list.component.html',\r\n *   styleUrls: ['./my-entity-list.component.scss'],\r\n *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n * })\r\n * export class MyEntityListComponent extends BaseListComponent<GetMyEntityList.Query, GetMyEntityList.Items> {\r\n *   constructor(\r\n *     private dataService: DataService,\r\n *     router: Router,\r\n *     route: ActivatedRoute,\r\n *   ) {\r\n *     super(router, route);\r\n *     super.setQueryFn(\r\n *       (...args: any[]) => this.dataService.query<GetMyEntityList.Query>(GET_MY_ENTITY_LIST),\r\n *       data => data.myEntities,\r\n *     );\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The template for the component will typically use the {@link DataTableComponent} to display the results.\r\n *\r\n * @example\r\n * ```HTML\r\n * <vdr-action-bar>\r\n *   <vdr-ab-right>\r\n *     <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\">\r\n *       <clr-icon shape=\"plus\"></clr-icon>\r\n *       Create new my entity\r\n *     </a>\r\n *   </vdr-ab-right>\r\n * </vdr-action-bar>\r\n *\r\n * <vdr-data-table\r\n *   [items]=\"items$ | async\"\r\n *   [itemsPerPage]=\"itemsPerPage$ | async\"\r\n *   [totalItems]=\"totalItems$ | async\"\r\n *   [currentPage]=\"currentPage$ | async\"\r\n *   (pageChange)=\"setPageNumber($event)\"\r\n *   (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n * >\r\n *   <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n *   <vdr-dt-column></vdr-dt-column>\r\n *   <ng-template let-myEntity=\"item\">\r\n *     <td class=\"left align-middle\">{{ myEntity.name }}</td>\r\n *     <td class=\"right align-middle\">\r\n *       <vdr-table-row-action\r\n *         iconShape=\"edit\"\r\n *         [label]=\"'common.edit' | translate\"\r\n *         [linkTo]=\"['./', myEntity.id]\"\r\n *       ></vdr-table-row-action>\r\n *     </td>\r\n *   </ng-template>\r\n * </vdr-data-table>\r\n * ```\r\n *\r\n * @docsCategory list-detail-views\r\n */\r\nexport declare class BaseListComponent<ResultType, ItemType, VariableType = any> implements OnInit, OnDestroy {\r\n    protected router: Router;\r\n    protected route: ActivatedRoute;\r\n    result$: Observable<ResultType>;\r\n    items$: Observable<ItemType[]>;\r\n    totalItems$: Observable<number>;\r\n    itemsPerPage$: Observable<number>;\r\n    currentPage$: Observable<number>;\r\n    protected destroy$: Subject<void>;\r\n    private listQuery;\r\n    private listQueryFn;\r\n    private mappingFn;\r\n    private onPageChangeFn;\r\n    private refresh$;\r\n    private defaults;\r\n    constructor(router: Router, route: ActivatedRoute);\r\n    /**\r\n     * @description\r\n     * Sets the fetch function for the list being implemented.\r\n     */\r\n    setQueryFn(listQueryFn: ListQueryFn<ResultType>, mappingFn: MappingFn<ItemType, ResultType>, onPageChangeFn?: OnPageChangeFn<VariableType>, defaults?: {\r\n        take: number;\r\n        skip: number;\r\n    }): void;\r\n    /** @internal */\r\n    ngOnInit(): void;\r\n    /** @internal */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * @description\r\n     * Sets the current page number in the url.\r\n     */\r\n    setPageNumber(page: number): void;\r\n    /**\r\n     * @description\r\n     * Sets the number of items per page in the url.\r\n     */\r\n    setItemsPerPage(perPage: number): void;\r\n    /**\r\n     * @description\r\n     * Re-fetch the current page of results.\r\n     */\r\n    refresh(): void;\r\n    protected setQueryParam(hash: {\r\n        [key: string]: any;\r\n    }, options?: {\r\n        replaceUrl?: boolean;\r\n        queryParamsHandling?: QueryParamsHandling;\r\n    }): any;\r\n    protected setQueryParam(key: string, value: any, options?: {\r\n        replaceUrl?: boolean;\r\n        queryParamsHandling?: QueryParamsHandling;\r\n    }): any;\r\n}\r\n"]}