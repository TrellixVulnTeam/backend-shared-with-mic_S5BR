{"version":3,"file":"interceptor.d.ts","sources":["interceptor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injector } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../../providers/auth/auth.service';\r\nimport { LocalStorageService } from '../../providers/local-storage/local-storage.service';\r\nimport { DataService } from '../providers/data.service';\r\nexport declare const AUTH_REDIRECT_PARAM = \"redirectTo\";\r\n/**\r\n * The default interceptor examines all HTTP requests & responses and automatically updates the requesting state\r\n * and shows error notifications.\r\n */\r\nexport declare class DefaultInterceptor implements HttpInterceptor {\r\n    private dataService;\r\n    private injector;\r\n    private authService;\r\n    private router;\r\n    private localStorageService;\r\n    private readonly tokenMethod;\r\n    private readonly authTokenHeaderKey;\r\n    constructor(dataService: DataService, injector: Injector, authService: AuthService, router: Router, localStorageService: LocalStorageService);\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\r\n    private notifyOnError;\r\n    private extractErrorFromHttpResponse;\r\n    /**\r\n     * We need to lazily inject the NotificationService since it depends on the I18nService which\r\n     * eventually depends on the HttpClient (used to load messages from json files). If we were to\r\n     * directly inject NotificationService into the constructor, we get a cyclic dependency.\r\n     */\r\n    private displayErrorNotification;\r\n    /**\r\n     * If the server is configured to use the \"bearer\" tokenMethod, each response should be checked\r\n     * for the existence of an auth token.\r\n     */\r\n    private checkForAuthToken;\r\n}\r\n"]}