{"version":3,"file":"data.service.d.ts","sources":["data.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { MutationUpdaterFn, WatchQueryFetchPolicy } from '@apollo/client/core';\r\nimport { DocumentNode } from 'graphql';\r\nimport { Observable } from 'rxjs';\r\nimport { QueryResult } from '../query-result';\r\nimport { AdministratorDataService } from './administrator-data.service';\r\nimport { AuthDataService } from './auth-data.service';\r\nimport { BaseDataService } from './base-data.service';\r\nimport { ClientDataService } from './client-data.service';\r\nimport { CollectionDataService } from './collection-data.service';\r\nimport { CustomerDataService } from './customer-data.service';\r\nimport { FacetDataService } from './facet-data.service';\r\nimport { OrderDataService } from './order-data.service';\r\nimport { ProductDataService } from './product-data.service';\r\nimport { PromotionDataService } from './promotion-data.service';\r\nimport { SettingsDataService } from './settings-data.service';\r\nimport { ShippingMethodDataService } from './shipping-method-data.service';\r\n/**\r\n * @description\r\n * Used to interact with the Admin API via GraphQL queries. Internally this service uses the\r\n * Apollo Client, which means it maintains a normalized entity cache. For this reason, it is\r\n * advisable to always select the `id` field of any entity, which will allow the returned data\r\n * to be effectively cached.\r\n *\r\n * @docsCategory providers\r\n * @docsPage DataService\r\n * @docsWeight 0\r\n */\r\nexport declare class DataService {\r\n    private baseDataService;\r\n    /** @internal */ promotion: PromotionDataService;\r\n    /** @internal */ administrator: AdministratorDataService;\r\n    /** @internal */ auth: AuthDataService;\r\n    /** @internal */ collection: CollectionDataService;\r\n    /** @internal */ product: ProductDataService;\r\n    /** @internal */ client: ClientDataService;\r\n    /** @internal */ facet: FacetDataService;\r\n    /** @internal */ order: OrderDataService;\r\n    /** @internal */ settings: SettingsDataService;\r\n    /** @internal */ customer: CustomerDataService;\r\n    /** @internal */ shippingMethod: ShippingMethodDataService;\r\n    /** @internal */\r\n    constructor(baseDataService: BaseDataService);\r\n    /**\r\n     * @description\r\n     * Perform a GraphQL query. Returns a {@link QueryResult} which allows further control over\r\n     * they type of result returned, e.g. stream of values, single value etc.\r\n     *\r\n     * @example\r\n     * ```TypeScript\r\n     * const result$ = this.dataService.query(gql`\r\n     *   query MyQuery($id: ID!) {\r\n     *     product(id: $id) {\r\n     *       id\r\n     *       name\r\n     *       slug\r\n     *     }\r\n     *   },\r\n     *   { id: 123 },\r\n     * ).mapSingle(data => data.product);\r\n     * ```\r\n     */\r\n    query<T, V = Record<string, any>>(query: DocumentNode, variables?: V, fetchPolicy?: WatchQueryFetchPolicy): QueryResult<T, V>;\r\n    /**\r\n     * @description\r\n     * Perform a GraphQL mutation.\r\n     *\r\n     * @example\r\n     * ```TypeScript\r\n     * const result$ = this.dataService.mutate(gql`\r\n     *   mutation MyMutation($input: UpdateEntityInput!) {\r\n     *     updateEntity(input: $input) {\r\n     *       id\r\n     *       name\r\n     *     }\r\n     *   },\r\n     *   { input: updateEntityInput },\r\n     * );\r\n     * ```\r\n     */\r\n    mutate<T, V = Record<string, any>>(mutation: DocumentNode, variables?: V, update?: MutationUpdaterFn<T>): Observable<T>;\r\n}\r\n"]}