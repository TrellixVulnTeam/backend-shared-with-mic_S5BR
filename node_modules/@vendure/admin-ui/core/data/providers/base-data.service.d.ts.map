{"version":3,"file":"base-data.service.d.ts","sources":["base-data.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { MutationUpdaterFn, WatchQueryFetchPolicy } from '@apollo/client/core';\r\nimport { Apollo } from 'apollo-angular';\r\nimport { DocumentNode } from 'graphql/language/ast';\r\nimport { Observable } from 'rxjs';\r\nimport { LocalStorageService } from '../../providers/local-storage/local-storage.service';\r\nimport { QueryResult } from '../query-result';\r\nimport { ServerConfigService } from '../server-config';\r\nexport declare class BaseDataService {\r\n    private apollo;\r\n    private httpClient;\r\n    private localStorageService;\r\n    private serverConfigService;\r\n    constructor(apollo: Apollo, httpClient: HttpClient, localStorageService: LocalStorageService, serverConfigService: ServerConfigService);\r\n    private get customFields();\r\n    /**\r\n     * Performs a GraphQL watch query\r\n     */\r\n    query<T, V = Record<string, any>>(query: DocumentNode, variables?: V, fetchPolicy?: WatchQueryFetchPolicy): QueryResult<T, V>;\r\n    /**\r\n     * Performs a GraphQL mutation\r\n     */\r\n    mutate<T, V = Record<string, any>>(mutation: DocumentNode, variables?: V, update?: MutationUpdaterFn<T>): Observable<T>;\r\n    private prepareCustomFields;\r\n}\r\n"]}