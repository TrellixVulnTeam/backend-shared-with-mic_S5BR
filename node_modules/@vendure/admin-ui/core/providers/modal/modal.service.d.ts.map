{"version":3,"file":"modal.service.d.ts","sources":["modal.service.d.ts"],"names":[],"mappingssourcesContent":["import { ComponentFactoryResolver } from '@angular/core';\r\nimport { Type } from '@vendure/common/lib/shared-types';\r\nimport { Observable } from 'rxjs';\r\nimport { OverlayHostService } from '../overlay-host/overlay-host.service';\r\n/**\r\n * @description\r\n * Any component intended to be used with the ModalService.fromComponent() method must implement\r\n * this interface.\r\n *\r\n * @docsCategory providers\r\n * @docsPage ModalService\r\n */\r\nexport interface Dialog<R = any> {\r\n    /**\r\n     * @description\r\n     * Function to be invoked in order to close the dialog when the action is complete.\r\n     * The Observable returned from the .fromComponent() method will emit the value passed\r\n     * to this method and then complete.\r\n     */\r\n    resolveWith: (result?: R) => void;\r\n}\r\nexport interface DialogButtonConfig<T> {\r\n    label: string;\r\n    type: 'secondary' | 'primary' | 'danger';\r\n    returnValue?: T;\r\n}\r\n/**\r\n * @description\r\n * Configures a generic modal dialog.\r\n *\r\n * @docsCategory providers\r\n * @docsPage ModalService\r\n */\r\nexport interface DialogConfig<T> {\r\n    title: string;\r\n    body?: string;\r\n    translationVars?: {\r\n        [key: string]: string | number;\r\n    };\r\n    buttons: Array<DialogButtonConfig<T>>;\r\n}\r\n/**\r\n * @description\r\n * Options to configure the behaviour of the modal.\r\n *\r\n * @docsCategory providers\r\n * @docsPage ModalService\r\n */\r\nexport interface ModalOptions<T> {\r\n    /**\r\n     * @description\r\n     * Sets the width of the dialog\r\n     */\r\n    size?: 'sm' | 'md' | 'lg' | 'xl';\r\n    /**\r\n     * @description\r\n     * Sets the vertical alignment of the dialog\r\n     */\r\n    verticalAlign?: 'top' | 'center' | 'bottom';\r\n    /**\r\n     * @description\r\n     * When true, the \"x\" icon is shown\r\n     * and clicking it or the mask will close the dialog\r\n     */\r\n    closable?: boolean;\r\n    /**\r\n     * @description\r\n     * Values to be passed directly to the component being instantiated inside the dialog.\r\n     */\r\n    locals?: Partial<T>;\r\n}\r\n/**\r\n * @description\r\n * This service is responsible for instantiating a ModalDialog component and\r\n * embedding the specified component within.\r\n *\r\n * @docsCategory providers\r\n * @docsPage ModalService\r\n * @docsWeight 0\r\n */\r\nexport declare class ModalService {\r\n    private componentFactoryResolver;\r\n    private overlayHostService;\r\n    constructor(componentFactoryResolver: ComponentFactoryResolver, overlayHostService: OverlayHostService);\r\n    /**\r\n     * @description\r\n     * Create a modal from a component. The component must implement the {@link Dialog} interface.\r\n     * Additionally, the component should include templates for the title and the buttons to be\r\n     * displayed in the modal dialog. See example:\r\n     *\r\n     * @example\r\n     * ```HTML\r\n     * class MyDialog implements Dialog {\r\n     *  resolveWith: (result?: any) => void;\r\n     *\r\n     *  okay() {\r\n     *    doSomeWork().subscribe(result => {\r\n     *      this.resolveWith(result);\r\n     *    })\r\n     *  }\r\n     *\r\n     *  cancel() {\r\n     *    this.resolveWith(false);\r\n     *  }\r\n     * }\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```HTML\r\n     * <ng-template vdrDialogTitle>Title of the modal</ng-template>\r\n     *\r\n     * <p>\r\n     *   My Content\r\n     * </p>\r\n     *\r\n     * <ng-template vdrDialogButtons>\r\n     *   <button type=\"button\"\r\n     *           class=\"btn\"\r\n     *           (click)=\"cancel()\">Cancel</button>\r\n     *   <button type=\"button\"\r\n     *           class=\"btn btn-primary\"\r\n     *           (click)=\"okay()\">Okay</button>\r\n     * </ng-template>\r\n     * ```\r\n     */\r\n    fromComponent<T extends Dialog<any>, R>(component: Type<T> & Type<Dialog<R>>, options?: ModalOptions<T>): Observable<R | undefined>;\r\n    /**\r\n     * @description\r\n     * Displays a modal dialog with the provided title, body and buttons.\r\n     */\r\n    dialog<T>(config: DialogConfig<T>): Observable<T | undefined>;\r\n}\r\n"]}