{"version":3,"file":"notification.service.d.ts","sources":["notification.service.d.ts"],"names":[],"mappingssourcesContent":["import { ComponentFactoryResolver } from '@angular/core';\r\nimport { I18nService } from '../i18n/i18n.service';\r\nimport { OverlayHostService } from '../overlay-host/overlay-host.service';\r\n/**\r\n * @description\r\n * The types of notification available.\r\n *\r\n * @docsCategory providers\r\n * @docsPage NotificationService\r\n */\r\nexport declare type NotificationType = 'info' | 'success' | 'error' | 'warning';\r\n/**\r\n * @description\r\n * Configuration for a toast notification.\r\n *\r\n * @docsCategory providers\r\n * @docsPage NotificationService\r\n */\r\nexport interface ToastConfig {\r\n    message: string;\r\n    translationVars?: {\r\n        [key: string]: string | number;\r\n    };\r\n    type?: NotificationType;\r\n    duration?: number;\r\n}\r\n/**\r\n * @description\r\n * Provides toast notification functionality.\r\n *\r\n * @example\r\n * ```TypeScript\r\n * class MyComponent {\r\n *   constructor(private notificationService: NotificationService) {}\r\n *\r\n *   save() {\r\n *     this.notificationService\r\n *         .success(_('asset.notify-create-assets-success'), {\r\n *           count: successCount,\r\n *         });\r\n *   }\r\n * }\r\n *\r\n * @docsCategory providers\r\n * @docsPage NotificationService\r\n * @docsWeight 0\r\n */\r\nexport declare class NotificationService {\r\n    private i18nService;\r\n    private resolver;\r\n    private overlayHostService;\r\n    private get hostView();\r\n    private openToastRefs;\r\n    constructor(i18nService: I18nService, resolver: ComponentFactoryResolver, overlayHostService: OverlayHostService);\r\n    /**\r\n     * @description\r\n     * Display a success toast notification\r\n     */\r\n    success(message: string, translationVars?: {\r\n        [key: string]: string | number;\r\n    }): void;\r\n    /**\r\n     * @description\r\n     * Display an info toast notification\r\n     */\r\n    info(message: string, translationVars?: {\r\n        [key: string]: string | number;\r\n    }): void;\r\n    /**\r\n     * @description\r\n     * Display a warning toast notification\r\n     */\r\n    warning(message: string, translationVars?: {\r\n        [key: string]: string | number;\r\n    }): void;\r\n    /**\r\n     * @description\r\n     * Display an error toast notification\r\n     */\r\n    error(message: string, translationVars?: {\r\n        [key: string]: string | number;\r\n    }): void;\r\n    /**\r\n     * @description\r\n     * Display a toast notification.\r\n     */\r\n    notify(config: ToastConfig): void;\r\n    /**\r\n     * Load a ToastComponent into the DOM host location.\r\n     */\r\n    private createToast;\r\n    /**\r\n     * Returns a function which will destroy the toast component and\r\n     * remove it from the openToastRefs array.\r\n     */\r\n    private createDismissFunction;\r\n    /**\r\n     * Calculate and set the top offsets for each of the open toasts.\r\n     */\r\n    private calculatePositions;\r\n    private translateTranslationVars;\r\n}\r\n"]}