{"version":3,"file":"nav-builder.service.d.ts","sources":["nav-builder.service.d.ts"],"names":[],"mappingssourcesContent":["import { Provider } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { ActionBarItem, NavMenuBadgeType, NavMenuItem, NavMenuSection, RouterLinkDefinition } from './nav-builder-types';\r\n/**\r\n * @description\r\n * Add a section to the main nav menu. Providing the `before` argument will\r\n * move the section before any existing section with the specified id. If\r\n * omitted (or if the id is not found) the section will be appended to the\r\n * existing set of sections.\r\n * This should be used in the NgModule `providers` array of your ui extension module.\r\n *\r\n * @example\r\n * ```TypeScript\r\n * \\@NgModule({\r\n *   imports: [SharedModule],\r\n *   providers: [\r\n *     addNavMenuSection({\r\n *       id: 'reports',\r\n *       label: 'Reports',\r\n *       items: [{\r\n *           // ...\r\n *       }],\r\n *     },\r\n *     'settings'),\r\n *   ],\r\n * })\r\n * export class MyUiExtensionModule {}\r\n * ```\r\n * @docsCategory nav-menu\r\n */\r\nexport declare function addNavMenuSection(config: NavMenuSection, before?: string): Provider;\r\n/**\r\n * @description\r\n * Add a menu item to an existing section specified by `sectionId`. The id of the section\r\n * can be found by inspecting the DOM and finding the `data-section-id` attribute.\r\n * Providing the `before` argument will move the item before any existing item with the specified id.\r\n * If omitted (or if the name is not found) the item will be appended to the\r\n * end of the section.\r\n *\r\n * This should be used in the NgModule `providers` array of your ui extension module.\r\n *\r\n * @example\r\n * ```TypeScript\r\n * \\@NgModule({\r\n *   imports: [SharedModule],\r\n *   providers: [\r\n *     addNavMenuItem({\r\n *       id: 'reviews',\r\n *       label: 'Product Reviews',\r\n *       routerLink: ['/extensions/reviews'],\r\n *       icon: 'star',\r\n *     },\r\n *     'marketing'),\r\n *   ],\r\n * })\r\n * export class MyUiExtensionModule {}\r\n * ``\r\n *\r\n * @docsCategory nav-menu\r\n */\r\nexport declare function addNavMenuItem(config: NavMenuItem, sectionId: string, before?: string): Provider;\r\n/**\r\n * @description\r\n * Adds a button to the ActionBar at the top right of each list or detail view. The locationId can\r\n * be determined by inspecting the DOM and finding the <vdr-action-bar> element and its\r\n * `data-location-id` attribute.\r\n *\r\n * This should be used in the NgModule `providers` array of your ui extension module.\r\n *\r\n * @example\r\n * ```TypeScript\r\n * \\@NgModule({\r\n *   imports: [SharedModule],\r\n *   providers: [\r\n *     addActionBarItem({\r\n *      id: 'print-invoice'\r\n *      label: 'Print Invoice',\r\n *      locationId: 'order-detail',\r\n *      routerLink: ['/extensions/invoicing'],\r\n *     }),\r\n *   ],\r\n * })\r\n * export class MyUiExtensionModule {}\r\n * ```\r\n * @docsCategory action-bar\r\n */\r\nexport declare function addActionBarItem(config: ActionBarItem): Provider;\r\n/**\r\n * This service is used to define the contents of configurable menus in the application.\r\n */\r\nexport declare class NavBuilderService {\r\n    navMenuConfig$: Observable<NavMenuSection[]>;\r\n    actionBarConfig$: Observable<ActionBarItem[]>;\r\n    sectionBadges: {\r\n        [sectionId: string]: Observable<NavMenuBadgeType>;\r\n    };\r\n    private initialNavMenuConfig$;\r\n    private addedNavMenuSections;\r\n    private addedNavMenuItems;\r\n    private addedActionBarItems;\r\n    constructor();\r\n    /**\r\n     * Used to define the initial sections and items of the main nav menu.\r\n     */\r\n    defineNavMenuSections(config: NavMenuSection[]): void;\r\n    /**\r\n     * Add a section to the main nav menu. Providing the `before` argument will\r\n     * move the section before any existing section with the specified id. If\r\n     * omitted (or if the id is not found) the section will be appended to the\r\n     * existing set of sections.\r\n     *\r\n     * Providing the `id` of an existing section will replace that section.\r\n     */\r\n    addNavMenuSection(config: NavMenuSection, before?: string): void;\r\n    /**\r\n     * Add a menu item to an existing section specified by `sectionId`. The id of the section\r\n     * can be found by inspecting the DOM and finding the `data-section-id` attribute.\r\n     * Providing the `before` argument will move the item before any existing item with the specified id.\r\n     * If omitted (or if the name is not found) the item will be appended to the\r\n     * end of the section.\r\n     *\r\n     * Providing the `id` of an existing item in that section will replace\r\n     * that item.\r\n     */\r\n    addNavMenuItem(config: NavMenuItem, sectionId: string, before?: string): void;\r\n    /**\r\n     * Adds a button to the ActionBar at the top right of each list or detail view. The locationId can\r\n     * be determined by inspecting the DOM and finding the <vdr-action-bar> element and its\r\n     * `data-location-id` attribute.\r\n     */\r\n    addActionBarItem(config: ActionBarItem): void;\r\n    getRouterLink(config: {\r\n        routerLink?: RouterLinkDefinition;\r\n    }, route: ActivatedRoute): string[] | null;\r\n    private setupStreams;\r\n}\r\n"]}