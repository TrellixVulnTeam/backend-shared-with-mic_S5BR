{"version":3,"file":"custom-field-component.service.d.ts","sources":["custom-field-component.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Type } from '@vendure/common/lib/shared-types';\r\nimport { FormInputComponent } from '../../common/component-registry-types';\r\nimport { CustomFields, CustomFieldsFragment } from '../../common/generated-types';\r\nimport { ComponentRegistryService } from '../component-registry/component-registry.service';\r\nexport declare type CustomFieldConfigType = CustomFieldsFragment;\r\nexport interface CustomFieldControl extends FormInputComponent<CustomFieldConfigType> {\r\n}\r\nexport declare type CustomFieldEntityName = Exclude<keyof CustomFields, '__typename'>;\r\n/**\r\n * This service allows the registration of custom controls for customFields.\r\n *\r\n * @deprecated The ComponentRegistryService now handles custom field components directly.\r\n */\r\nexport declare class CustomFieldComponentService {\r\n    private componentRegistryService;\r\n    constructor(componentRegistryService: ComponentRegistryService);\r\n    /**\r\n     * Register a CustomFieldControl component to be used with the specified customField and entity.\r\n     */\r\n    registerCustomFieldComponent(entity: CustomFieldEntityName, fieldName: string, component: Type<CustomFieldControl>): void;\r\n    /**\r\n     * Checks whether a custom component is registered for the given entity custom field,\r\n     * and if so returns the ID of that component.\r\n     */\r\n    customFieldComponentExists(entity: CustomFieldEntityName, fieldName: string): string | undefined;\r\n    private generateId;\r\n}\r\n"]}