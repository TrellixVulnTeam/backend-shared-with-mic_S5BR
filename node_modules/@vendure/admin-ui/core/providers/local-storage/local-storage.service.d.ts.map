{"version":3,"file":"local-storage.service.d.ts","sources":["local-storage.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Location } from '@angular/common';\r\nimport { LanguageCode } from '../../common/generated-types';\r\nimport { WidgetLayoutDefinition } from '../dashboard-widget/dashboard-widget-types';\r\nexport declare type LocalStorageTypeMap = {\r\n    activeChannelToken: string;\r\n    authToken: string;\r\n    uiLanguageCode: LanguageCode;\r\n    uiLocale: string | undefined;\r\n    contentLanguageCode: LanguageCode;\r\n    orderListLastCustomFilters: any;\r\n    dashboardWidgetLayout: WidgetLayoutDefinition;\r\n    activeTheme: string;\r\n};\r\nexport declare type LocalStorageLocationBasedTypeMap = {\r\n    shippingTestOrder: any;\r\n    shippingTestAddress: any;\r\n};\r\n/**\r\n * Wrapper around the browser's LocalStorage / SessionStorage object, for persisting data to the browser.\r\n */\r\nexport declare class LocalStorageService {\r\n    private location;\r\n    constructor(location: Location);\r\n    /**\r\n     * Set a key-value pair in the browser's LocalStorage\r\n     */\r\n    set<K extends keyof LocalStorageTypeMap>(key: K, value: LocalStorageTypeMap[K]): void;\r\n    /**\r\n     * Set a key-value pair specific to the current location (url)\r\n     */\r\n    setForCurrentLocation<K extends keyof LocalStorageLocationBasedTypeMap>(key: K, value: LocalStorageLocationBasedTypeMap[K]): void;\r\n    /**\r\n     * Set a key-value pair in the browser's SessionStorage\r\n     */\r\n    setForSession<K extends keyof LocalStorageTypeMap>(key: K, value: LocalStorageTypeMap[K]): void;\r\n    /**\r\n     * Get the value of the given key from the SessionStorage or LocalStorage.\r\n     */\r\n    get<K extends keyof LocalStorageTypeMap>(key: K): LocalStorageTypeMap[K] | null;\r\n    /**\r\n     * Get the value of the given key for the current location (url)\r\n     */\r\n    getForCurrentLocation<K extends keyof LocalStorageLocationBasedTypeMap>(key: K): LocalStorageLocationBasedTypeMap[K];\r\n    remove(key: keyof LocalStorageTypeMap): void;\r\n    private getLocationBasedKey;\r\n    private keyName;\r\n}\r\n"]}