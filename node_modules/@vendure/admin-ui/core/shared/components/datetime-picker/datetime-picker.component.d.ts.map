{"version":3,"file":"datetime-picker.component.d.ts","sources":["datetime-picker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { DropdownComponent } from '../dropdown/dropdown.component';\r\nimport { DatetimePickerService } from './datetime-picker.service';\r\nimport { CalendarView, DayCell, DayOfWeek } from './types';\r\nexport declare type CurrentView = {\r\n    date: Date;\r\n    month: number;\r\n    year: number;\r\n};\r\n/**\r\n * @description\r\n * A form input for selecting datetime values.\r\n *\r\n * @example\r\n * ```HTML\r\n * <vdr-datetime-picker [(ngModel)]=\"startDate\"></vdr-datetime-picker>\r\n * ```\r\n *\r\n * @docsCategory components\r\n */\r\nexport declare class DatetimePickerComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnDestroy {\r\n    private changeDetectorRef;\r\n    private datetimePickerService;\r\n    /**\r\n     * @description\r\n     * The range above and below the current year which is selectable from\r\n     * the year select control. If a min or max value is set, these will\r\n     * override the yearRange.\r\n     */\r\n    yearRange: any;\r\n    /**\r\n     * @description\r\n     * The day that the week should start with in the calendar view.\r\n     */\r\n    weekStartDay: DayOfWeek;\r\n    /**\r\n     * @description\r\n     * The granularity of the minutes time picker\r\n     */\r\n    timeGranularityInterval: number;\r\n    /**\r\n     * @description\r\n     * The minimum date as an ISO string\r\n     */\r\n    min: string | null;\r\n    /**\r\n     * @description\r\n     * The maximum date as an ISO string\r\n     */\r\n    max: string | null;\r\n    /**\r\n     * @description\r\n     * Sets the readonly state\r\n     */\r\n    readonly: boolean;\r\n    dropdownComponent: DropdownComponent;\r\n    datetimeInput: ElementRef<HTMLInputElement>;\r\n    calendarTable: ElementRef<HTMLTableElement>;\r\n    disabled: boolean;\r\n    calendarView$: Observable<CalendarView>;\r\n    current$: Observable<CurrentView>;\r\n    selected$: Observable<Date | null>;\r\n    selectedHours$: Observable<number | null>;\r\n    selectedMinutes$: Observable<number | null>;\r\n    years: number[];\r\n    weekdays: string[];\r\n    hours: number[];\r\n    minutes: number[];\r\n    private onChange;\r\n    private onTouch;\r\n    private subscription;\r\n    constructor(changeDetectorRef: ChangeDetectorRef, datetimePickerService: DatetimePickerService);\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    writeValue(value: string | null): void;\r\n    prevMonth(): void;\r\n    nextMonth(): void;\r\n    selectToday(): void;\r\n    setYear(event: Event): void;\r\n    setMonth(event: Event): void;\r\n    selectDay(day: DayCell): void;\r\n    clearValue(): void;\r\n    handleCalendarKeydown(event: KeyboardEvent): void;\r\n    setHour(event: Event): void;\r\n    setMinute(event: Event): void;\r\n    closeDatepicker(): void;\r\n    private populateYearsSelection;\r\n    private populateWeekdays;\r\n    private populateHours;\r\n    private populateMinutes;\r\n}\r\n"]}