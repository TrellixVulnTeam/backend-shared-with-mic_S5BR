{"version":3,"file":"facet-value-selector.component.d.ts","sources":["facet-value-selector.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { FacetValue, FacetWithValues } from '../../../common/generated-types';\r\nimport { DataService } from '../../../data/providers/data.service';\r\nexport declare type FacetValueSeletorItem = {\r\n    name: string;\r\n    facetName: string;\r\n    id: string;\r\n    value: FacetValue.Fragment;\r\n};\r\n/**\r\n * @description\r\n * A form control for selecting facet values.\r\n *\r\n * @example\r\n * ```HTML\r\n * <vdr-facet-value-selector\r\n *   [facets]=\"facets\"\r\n *   (selectedValuesChange)=\"selectedValues = $event\"\r\n * ></vdr-facet-value-selector>\r\n * ```\r\n * The `facets` input should be provided from the parent component\r\n * like this:\r\n *\r\n * @example\r\n * ```TypeScript\r\n * this.facets = this.dataService\r\n *   .facet.getAllFacets()\r\n *   .mapSingle(data => data.facets.items);\r\n * ```\r\n * @docsCategory components\r\n */\r\nexport declare class FacetValueSelectorComponent implements OnInit, ControlValueAccessor {\r\n    private dataService;\r\n    selectedValuesChange: EventEmitter<import(\"../../../common/generated-types\").FacetValueFragment[]>;\r\n    facets: FacetWithValues.Fragment[];\r\n    readonly: boolean;\r\n    private ngSelect;\r\n    facetValues: FacetValueSeletorItem[];\r\n    onChangeFn: (val: any) => void;\r\n    onTouchFn: () => void;\r\n    disabled: boolean;\r\n    value: string[];\r\n    constructor(dataService: DataService);\r\n    ngOnInit(): void;\r\n    onChange(selected: FacetValueSeletorItem[]): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    focus(): void;\r\n    writeValue(obj: string | FacetValue.Fragment[] | Array<string | number> | null): void;\r\n    private toSelectorItem;\r\n}\r\n"]}