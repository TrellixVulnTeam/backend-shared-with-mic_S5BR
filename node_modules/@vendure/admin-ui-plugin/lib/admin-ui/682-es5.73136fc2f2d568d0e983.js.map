{"version":3,"mappings":"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","names":["e","V","constructor","n","this","a","method","transactionId","ngOnInit","paymentMethods$","dataService","settings","getPaymentMethods","mapSingle","paymentMethods","items","submit","form","value","resolveWith","cancel","selectors","B","t","cancellationReasons","g","reasons","map","o","i18nService","translate","Object","values","lineQuantities","reduce","order","lines","id","quantity","radioChanged","cancelAll","_step","_step2","checkIfAllSelected","_Object$entries$_i","i","find","l","_i","entries","select","orderId","getLineInputs","reason","cancelShipping","active","orderLineId","_ref2","filter","W","getGlobalSettings","single$","subscribe","globalSettings","fulfillmentQuantities","getFulfillableCount","trackInventory","_defineProperty","fulfillCount","max","changeDetector","markForCheck","shippingMethod","getShippingMethodOperations","fulfillmentHandlers","fulfillmentHandlerDef","code","shippingLines","fulfillmentHandlerCode","fulfillmentHandler","s","fulfillmentHandlerControl","patchValue","productVariant","_n$productVariant","stockOnHand","c","getUnfulfilledCount","Math","min","fulfillment","canSubmit","_ref4","valid","_ref6","handler","X","chipColorType","state","q","J","customFieldConfig","serverConfigService","getCustomFieldsFor","ngOnChanges","buildCustomFieldsFormGroup","fulfillments","fulfillmentId","Map","orderItems","_step3","_step4","includes","get","name","set","Array","from","_ref8","customFields","_step5","customFieldFormGroup","addControl","customFieldIsObject","isArray","U","oxw","transitionState","z","nextSuggestedState","nextStates","nextOtherStates","E","line","fulfilledCount","getDeliveredCount","fulfillmentStatus","getFulfillmentStatus","length","getFulfillments","_step6","_ref10","count","L","getRefundedCount","payments","_toConsumableArray","refunds","refundId","cancelled","ee","getModifiedLines","added","_this$getModifiedLine","removed","addedItems","removedItems","getSurcharge","surcharges","getAddedItems","_ref12","getRemovedItems","_ref14","modification","_step7","getOrderLineAndItem","item","x","u","_step8","te","customFieldForm","formBuilder","group","customFieldsConfig","_step9","control","customFieldValues","onUpdateClick","updateClick","emit","markAsPristine","editable","Fe","R","Ie","isCancellable","node","to","active$","next","getPos","arguments","elementRef","nativeElement","getBoundingClientRect","querySelector","height","y","index","getStyle","ne","asObservable","pipe","nn","activeTarget$","abs","sqrt","transform","re","nodes","setActiveState$","initialState","activeState$","We","populateNodes","ngAfterViewInit","setTimeout","populateEdges","onMouseOver","onMouseOut","getNodeFor","nodeComponents","states","_step10","_step12","_","push","_loop2","_step13","_iterator14","_step14","edges","oe","getOrderProcessStates","ie","refund","proratedUnitPriceWithTax","refundShipping","shippingWithTax","adjustment","settledPayments","amount","lineCanBeRefundedOrCancelled","selectedPayment","handleZeroQuantity","isRefunding","isCancelling","refundTotal","settledPaymentsTotal","getOrderLineInput","shipping","paymentId","_ref16","_ref18","le","Ln","call","In","super","error","be","notifier","we","_unsubscribe","errors","notifyNext","ae","selectedState","F","transitionToPreModifyingState","getPreModifyingState","h","message","cancellable","retry","transitionToStateOrThrow","bn","manuallyTransitionToState","r","modalService","fromComponent","locals","closable","size","Y","Error","Fn","Ce","getOrderHistory","type","eq","sort","createdAt","I","history","data","transitionToState","transitionOrderToState","__typename","notificationService","transitionError","factory","ɵfac","H","orderLineCustomFieldsVisible","orderLineCustomFields","getLineCustomFields","toggleOrderLineCustomFields","getLineDiscounts","discounts","config","formGroup","customFieldsForLine","_loop3","getPromotionLink","adjustmentSource","split","getCouponCodeForAdjustment","promotions","couponCode","$","updateNote","deleteNote","ce","getDisplayType","getTimelineIcon","isFeatured","getFulfillment","getPayment","getCancelledItems","orderItemIds","_step16","_step17","_ref21","getModification","modifications","getName","administrator","firstName","lastName","customer","addNoteToOrder","addNote","note","isPublic","noteIsPrivate","de","se","settleRefund","ue","refundHasMetadata","keys","metadata","payment","pe","init","entity$","router","navigate","relativeTo","route","getCustomFieldConfig","history$","fetchHistory","Be","mapStream","nextStates$","defaultStates","ngOnDestroy","destroy","openStateDiagram","activeState","success","orderTransitionService","transitionToModifying","updateCustomFields","updateOrderCustomFields","entity","getOrderAddressLines","settlePayment","getOrder","transitionPaymentState","transitionPaymentToState","canAddFulfillment","every","hasUnsettledModifications","outstandingPaymentAmount","isSettled","getOutstandingModificationAmount","_step18","M","totalWithTax","addManualPayment","outstandingAmount","currencyCode","addManualPaymentToOrder","Le","refetchOrder","result","fulfillOrder","createFulfillment","j","addFulfillmentToOrder","fulfillmentHandlerError","JSON","stringify","transitionFulfillment","transitionFulfillmentToState","cancelOrRefund","orderHasSettledPayments","refundOrder","cancelOrder","displayPrivacyControls","updateOrderNote","noteId","isPrivate","dialog","title","body","buttons","label","returnValue","deleteOrderNote","qe","setFormValues","T","me","priceDifference","originalTotalWithTax","refundNote","modifyOrderInput","Cancel","Payment","Refund","refundPaymentId","PriceUnchanged","_e","dryRun","addItems","adjustOrderLines","updateShippingAddress","updateBillingAddress","addedVariants","productVariantId","price","priceWithTax","promotion","getPromotions","addressCustomFields","snapshot","paramMap","ye","destroy$","couponCodes","couponCodesControl","setValue","surchargeForm","description","sku","priceIncludesTax","taxRate","taxDescription","shippingAddressForm","fullName","shippingAddress","company","streetLine1","streetLine2","city","province","postalCode","countryCode","phoneNumber","addAddressCustomFieldsFormGroup","billingAddressForm","P","billingAddress","S","Ne","Ue","Je","Qe","De","ke","Ee","orderLineCustomFieldsFormArray","Ae","Ye","_step20","Te","valueChanges","Oe","si","_loop4","availableCouponCodes$","so","couponCodeInput$","rt","contains","promotionName","addItemCustomFieldsFormArray","addItemCustomFieldsForm","_step21","availableCountries$","getAvailableCountries","countries","uo","take","previousState","transitionToPriorState","canPreviewChanges","_this$modifyOrderInpu","dirty","isLineModified","updateLineQuantity","splice","indexOf","updateAddedItemQuantity","trackByProductVariantId","getSelectedItemPrice","addItemToOrder","isMatchingAddItemRow","_i2","_Object$entries2$_i","reset","addItemSelectedVariant","removeAddedItem","removeAt","getSurchargePrices","round","addSurcharge","removeSurcharge","previewAndModify","options","recalculateShipping","modifyOrder","_step22","_iterator22","ge","orderStates","getOrders","skip","refetchOnChannelChange","orders","createQueryOptions","searchOrderCodeControl","searchLastNameControl","queryParamMap","localStorageService","setQueryParam","replaceUrl","activePreset$","Xo","refresh","customFilterForm","getAll","placedAtStart","placedAtEnd","selectFilterPreset","page","applyCustomFilters","filterPresets","in","orderPlacedAt","between","start","end","after","before","customerLastName","updatedAt","getShippingNames","join","w","total","it","path","component","breadcrumb","resolve","canDeactivate","Se","lt","breadcrumbKey","slice","link","concat","fe","C"],"sources":["webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.html","webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.ts","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.html","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.html","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.html","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.ts","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.html","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.ts","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.html","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.ts","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.html","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.ts","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.html","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.ts","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.html","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.ts","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.html","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.ts","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.html","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.ts","webpack:///src/lib/order/src/components/order-process-graph/constants.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.ts","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.html","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.ts","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.html","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.ts","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.html","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/retryWhen.js","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.html","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.ts","webpack:///src/lib/order/src/providers/order-transition.service.ts","webpack:///src/lib/order/src/components/order-table/order-table.component.html","webpack:///src/lib/order/src/components/order-table/order-table.component.ts","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.html","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.ts","webpack:///src/lib/order/src/components/order-history/order-history.component.html","webpack:///src/lib/order/src/components/order-history/order-history.component.ts","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.html","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.ts","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.html","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.ts","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.html","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.ts","webpack:///src/lib/order/src/components/order-detail/order-detail.component.html","webpack:///src/lib/order/src/components/order-detail/order-detail.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.ts","webpack:///src/lib/order/src/components/order-list/order-list.component.html","webpack:///src/lib/order/src/components/order-list/order-list.component.ts","webpack:///src/lib/order/src/providers/routing/order-resolver.ts","webpack:///src/lib/order/src/order.routes.ts","webpack:///src/lib/order/src/order.module.ts"],"sourcesContent":["<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\r\n        <ng-select\r\n            [items]=\"paymentMethods$ | async\"\r\n            bindLabel=\"code\"\r\n            autofocus\r\n            bindValue=\"code\"\r\n            [addTag]=\"true\"\r\n            formControlName=\"method\"\r\n        ></ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\r\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\r\n    </vdr-form-field>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\r\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    Dialog,\r\n    GetPaymentMethodList,\r\n    ManualPaymentInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-add-manual-payment-dialog',\r\n    templateUrl: './add-manual-payment-dialog.component.html',\r\n    styleUrls: ['./add-manual-payment-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddManualPaymentDialogComponent implements OnInit, Dialog<Omit<ManualPaymentInput, 'orderId'>> {\r\n    // populated by ModalService call\r\n    outstandingAmount: number;\r\n    currencyCode: CurrencyCode;\r\n\r\n    resolveWith: (result?: Omit<ManualPaymentInput, 'orderId'>) => void;\r\n    form = new FormGroup({\r\n        method: new FormControl('', Validators.required),\r\n        transactionId: new FormControl('', Validators.required),\r\n    });\r\n    paymentMethods$: Observable<GetPaymentMethodList.Items[]>;\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.paymentMethods$ = this.dataService.settings\r\n            .getPaymentMethods(999)\r\n            .mapSingle(data => data.paymentMethods.items);\r\n    }\r\n\r\n    submit() {\r\n        const formValue = this.form.value;\r\n        this.resolveWith({\r\n            method: formValue.method,\r\n            transactionId: formValue.transactionId,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-lines\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.is-disabled]=\"cancelAll\"\r\n                [class.is-cancelled]=\"line.quantity === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\r\n                        [(ngModel)]=\"lineQuantities[line.id]\"\r\n                        (input)=\"checkIfAllSelected()\"\r\n                        [disabled]=\"cancelAll\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                    />\r\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"cancellation-details\">\r\n        <ng-container *ngIf=\"order.active !== true\">\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"true\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-entire-order' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"false\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-specified-items' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n        </ng-container>\r\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\r\n        <ng-select\r\n            [items]=\"reasons\"\r\n            bindLabel=\"name\"\r\n            autofocus\r\n            bindValue=\"id\"\r\n            [addTag]=\"true\"\r\n            [(ngModel)]=\"reason\"\r\n        ></ng-select>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-container *ngIf=\"!order.active\">\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"order.active\">\r\n            {{ 'order.cancel-order' | translate }}\r\n        </ng-container>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CancelOrderInput,\r\n    Dialog,\r\n    getAppConfig,\r\n    I18nService,\r\n    OrderDetailFragment,\r\n    OrderLineInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-cancel-order-dialog',\r\n    templateUrl: './cancel-order-dialog.component.html',\r\n    styleUrls: ['./cancel-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CancelOrderDialogComponent implements OnInit, Dialog<CancelOrderInput> {\r\n    order: OrderDetailFragment;\r\n    cancelAll = true;\r\n    resolveWith: (result?: CancelOrderInput) => void;\r\n    reason: string;\r\n    lineQuantities: { [lineId: string]: number } = {};\r\n    reasons: string[] = getAppConfig().cancellationReasons ?? [\r\n        _('order.cancel-reason-customer-request'),\r\n        _('order.cancel-reason-not-available'),\r\n    ];\r\n\r\n    get selectionCount(): number {\r\n        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);\r\n    }\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\r\n            return { ...result, [line.id]: line.quantity };\r\n        }, {});\r\n    }\r\n\r\n    radioChanged() {\r\n        if (this.cancelAll) {\r\n            for (const line of this.order.lines) {\r\n                this.lineQuantities[line.id] = line.quantity;\r\n            }\r\n        } else {\r\n            for (const line of this.order.lines) {\r\n                this.lineQuantities[line.id] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfAllSelected() {\r\n        for (const [lineId, quantity] of Object.entries(this.lineQuantities)) {\r\n            const quantityInOrder = this.order.lines.find(line => line.id === lineId)?.quantity;\r\n            if (quantityInOrder && quantity < quantityInOrder) {\r\n                return;\r\n            }\r\n        }\r\n        // If we got here, all of the selected quantities are equal to the order\r\n        // line quantities, i.e. everything is selected.\r\n        this.cancelAll = true;\r\n    }\r\n\r\n    select() {\r\n        this.resolveWith({\r\n            orderId: this.order.id,\r\n            lines: this.getLineInputs(),\r\n            reason: this.reason,\r\n            cancelShipping: this.cancelAll,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getLineInputs(): OrderLineInput[] | undefined {\r\n        if (this.order.active) {\r\n            return;\r\n        }\r\n        return Object.entries(this.lineQuantities)\r\n            .map(([orderLineId, quantity]) => ({\r\n                orderLineId,\r\n                quantity,\r\n            }))\r\n            .filter(l => 0 < l.quantity);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\r\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                    <th>{{ 'order.fulfill' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\r\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\r\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\r\n                        type=\"number\"\r\n                        [max]=\"fulfillmentQuantities[line.id].max\"\r\n                        min=\"0\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"shipping-details\">\r\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\r\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\r\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\r\n        <vdr-configurable-input\r\n            [operationDefinition]=\"fulfillmentHandlerDef\"\r\n            [operation]=\"fulfillmentHandler\"\r\n            [formControl]=\"fulfillmentHandlerControl\"\r\n            [removable]=\"false\"\r\n        ></vdr-configurable-input>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        {{ 'order.create-fulfillment' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport {\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    configurableOperationValueIsValid,\r\n    DataService,\r\n    Dialog,\r\n    FulfillOrderInput,\r\n    GlobalFlag,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    toConfigurableOperationInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfill-order-dialog',\r\n    templateUrl: './fulfill-order-dialog.component.html',\r\n    styleUrls: ['./fulfill-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillOrderDialogComponent implements Dialog<FulfillOrderInput>, OnInit {\r\n    resolveWith: (result?: FulfillOrderInput) => void;\r\n    fulfillmentHandlerDef: ConfigurableOperationDefinition;\r\n    fulfillmentHandler: ConfigurableOperation;\r\n    fulfillmentHandlerControl = new FormControl();\r\n    fulfillmentQuantities: { [lineId: string]: { fulfillCount: number; max: number } } = {};\r\n\r\n    // Provided by modalService.fromComponent() call\r\n    order: OrderDetailFragment;\r\n\r\n    constructor(private dataService: DataService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {\r\n            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {\r\n                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);\r\n                return {\r\n                    ...result,\r\n                    [line.id]: { fulfillCount, max: fulfillCount },\r\n                };\r\n            }, {});\r\n            this.changeDetector.markForCheck();\r\n        });\r\n\r\n        this.dataService.shippingMethod\r\n            .getShippingMethodOperations()\r\n            .mapSingle(data => data.fulfillmentHandlers)\r\n            .subscribe(handlers => {\r\n                this.fulfillmentHandlerDef =\r\n                    handlers.find(\r\n                        h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode,\r\n                    ) || handlers[0];\r\n                this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);\r\n                this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);\r\n                this.changeDetector.markForCheck();\r\n            });\r\n    }\r\n\r\n    getFulfillableCount(line: OrderDetail.Lines, globalTrackInventory: boolean): number {\r\n        const { trackInventory, stockOnHand } = line.productVariant;\r\n        const effectiveTracInventory =\r\n            trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;\r\n\r\n        const unfulfilledCount = this.getUnfulfilledCount(line);\r\n        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;\r\n    }\r\n\r\n    getUnfulfilledCount(line: OrderDetail.Lines): number {\r\n        const fulfilled = line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\r\n        return line.quantity - fulfilled;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        const totalCount = Object.values(this.fulfillmentQuantities).reduce(\r\n            (total, { fulfillCount }) => total + fulfillCount,\r\n            0,\r\n        );\r\n        const formIsValid =\r\n            configurableOperationValueIsValid(\r\n                this.fulfillmentHandlerDef,\r\n                this.fulfillmentHandlerControl.value,\r\n            ) && this.fulfillmentHandlerControl.valid;\r\n        return formIsValid && 0 < totalCount;\r\n    }\r\n\r\n    select() {\r\n        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({\r\n            orderLineId,\r\n            quantity: fulfillCount,\r\n        }));\r\n        this.resolveWith({\r\n            lines,\r\n            handler: toConfigurableOperationInput(\r\n                this.fulfillmentHandler,\r\n                this.fulfillmentHandlerControl.value,\r\n            ),\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-state-label',\r\n    templateUrl: './fulfillment-state-label.component.html',\r\n    styleUrls: ['./fulfillment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n            case 'Shipped':\r\n                return 'warning';\r\n            case 'Delivered':\r\n                return 'success';\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<div class=\"items-list\">\r\n    <ul>\r\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\r\n            <div class=\"quantity\">{{ item.quantity }}</div>\r\n            <clr-icon shape=\"times\" size=\"12\"></clr-icon>\r\n            {{ item.name }}\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-simple-item-list',\r\n    templateUrl: './simple-item-list.component.html',\r\n    styleUrls: ['./simple-item-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SimpleItemListComponent {\r\n    @Input() items: Array<{ name: string; quantity: number }>;\r\n}\r\n","<vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n    {{ fulfillment?.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\r\n    {{ fulfillment?.trackingCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<ng-container *ngFor=\"let customField of customFieldConfig\">\r\n    <vdr-custom-field-control\r\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\r\n        [readonly]=\"true\"\r\n        [compact]=\"true\"\r\n        [customField]=\"customField\"\r\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\r\n    ></vdr-custom-field-control>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, OrderDetail, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { isObject } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-detail',\r\n    templateUrl: './fulfillment-detail.component.html',\r\n    styleUrls: ['./fulfillment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentDetailComponent implements OnInit, OnChanges {\r\n    @Input() fulfillmentId: string;\r\n    @Input() order: OrderDetail.Fragment;\r\n\r\n    customFieldConfig: CustomFieldConfig[] = [];\r\n    customFieldFormGroup = new FormGroup({});\r\n\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldConfig = this.serverConfigService.getCustomFieldsFor('Fulfillment');\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.buildCustomFieldsFormGroup();\r\n    }\r\n\r\n    get fulfillment(): OrderDetail.Fulfillments | undefined | null {\r\n        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);\r\n    }\r\n\r\n    get items(): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        const fulfillmentItemIds = this.fulfillment?.orderItems.map(i => i.id);\r\n        for (const line of this.order.lines) {\r\n            for (const item of line.items) {\r\n                if (fulfillmentItemIds?.includes(item.id)) {\r\n                    const count = itemMap.get(line.productVariant.name);\r\n                    if (count != null) {\r\n                        itemMap.set(line.productVariant.name, count + 1);\r\n                    } else {\r\n                        itemMap.set(line.productVariant.name, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    buildCustomFieldsFormGroup() {\r\n        const customFields = (this.fulfillment as any).customFields;\r\n        for (const fieldDef of this.serverConfigService.getCustomFieldsFor('Fulfillment')) {\r\n            this.customFieldFormGroup.addControl(fieldDef.name, new FormControl(customFields[fieldDef.name]));\r\n        }\r\n    }\r\n\r\n    customFieldIsObject(customField: unknown) {\r\n        return Array.isArray(customField) || isObject(customField);\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header fulfillment-header\">\r\n        <div>{{ 'order.fulfillment' | translate }}</div>\r\n        <div class=\"fulfillment-state\">\r\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-fulfillment-detail\r\n            *ngIf=\"!!fulfillment\"\r\n            [fulfillmentId]=\"fulfillment?.id\"\r\n            [order]=\"order\"\r\n        ></vdr-fulfillment-detail>\r\n    </div>\r\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\r\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\r\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\r\n            </button>\r\n        </ng-container>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionState.emit(nextState)\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-fulfillment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Fulfillment, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-card',\r\n    templateUrl: './fulfillment-card.component.html',\r\n    styleUrls: ['./fulfillment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentCardComponent {\r\n    @Input() fulfillment: Fulfillment.Fragment | undefined;\r\n    @Input() order: OrderDetail.Fragment;\r\n    @Output() transitionState = new EventEmitter<string>();\r\n\r\n    nextSuggestedState(): string | undefined {\r\n        if (!this.fulfillment) {\r\n            return;\r\n        }\r\n        const { nextStates } = this.fulfillment;\r\n        const namedStateOrDefault = (targetState: string) =>\r\n            nextStates.includes(targetState) ? targetState : nextStates[0];\r\n        switch (this.fulfillment?.state) {\r\n            case 'Pending':\r\n                return namedStateOrDefault('Shipped');\r\n            case 'Shipped':\r\n                return namedStateOrDefault('Delivered');\r\n            default:\r\n                return nextStates.find(s => s !== 'Cancelled');\r\n        }\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.fulfillment) {\r\n            return [];\r\n        }\r\n        const suggested = this.nextSuggestedState();\r\n        return this.fulfillment.nextStates.filter(s => s !== suggested);\r\n    }\r\n}\r\n","<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\r\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'partial'\"\r\n            class=\"item-partially-fulfilled\"\r\n            shape=\"check-circle\"\r\n        ></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'none'\"\r\n            class=\"item-not-fulfilled\"\r\n            shape=\"exclamation-circle\"\r\n        ></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\r\n            {{ 'order.line-fulfillment-all' | translate }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\r\n            {{\r\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\r\n            }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\r\n            {{ 'order.line-fulfillment-none' | translate }}\r\n        </label>\r\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\r\n            <div class=\"fulfillment-title\">\r\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\r\n                    'order.item-count' | translate: { count: item.count }\r\n                }})\r\n            </div>\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n                {{ item.fulfillment.method }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                *ngIf=\"item.fulfillment.trackingCode\"\r\n                [label]=\"'order.tracking-code' | translate\"\r\n            >\r\n                {{ item.fulfillment.trackingCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport type FulfillmentStatus = 'full' | 'partial' | 'none';\r\n\r\n@Component({\r\n    selector: 'vdr-line-fulfillment',\r\n    templateUrl: './line-fulfillment.component.html',\r\n    styleUrls: ['./line-fulfillment.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineFulfillmentComponent implements OnChanges {\r\n    @Input() line: OrderDetail.Lines;\r\n    @Input() orderState: string;\r\n    fulfilledCount = 0;\r\n    fulfillmentStatus: FulfillmentStatus;\r\n    fulfillments: Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> = [];\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.line) {\r\n            this.fulfilledCount = this.getDeliveredCount(this.line);\r\n            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.items.length);\r\n            this.fulfillments = this.getFulfillments(this.line);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in an OrderLine which are fulfilled.\r\n     */\r\n    private getDeliveredCount(line: OrderDetail.Lines): number {\r\n        return line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\r\n    }\r\n\r\n    private getFulfillmentStatus(fulfilledCount: number, lineQuantity: number): FulfillmentStatus {\r\n        if (fulfilledCount === lineQuantity) {\r\n            return 'full';\r\n        }\r\n        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {\r\n            return 'partial';\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n    private getFulfillments(\r\n        line: OrderDetail.Lines,\r\n    ): Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> {\r\n        const counts: { [fulfillmentId: string]: number } = {};\r\n\r\n        for (const item of line.items) {\r\n            if (item.fulfillment) {\r\n                if (counts[item.fulfillment.id] === undefined) {\r\n                    counts[item.fulfillment.id] = 1;\r\n                } else {\r\n                    counts[item.fulfillment.id]++;\r\n                }\r\n            }\r\n        }\r\n        const all = line.items.reduce((fulfillments, item) => {\r\n            return item.fulfillment ? [...fulfillments, item.fulfillment] : fulfillments;\r\n        }, [] as OrderDetail.Fulfillments[]);\r\n\r\n        return Object.entries(counts).map(([id, count]) => {\r\n            return {\r\n                count,\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                fulfillment: all.find(f => f.id === id)!,\r\n            };\r\n        });\r\n    }\r\n}\r\n","<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-line-refunds',\r\n    templateUrl: './line-refunds.component.html',\r\n    styleUrls: ['./line-refunds.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineRefundsComponent {\r\n    @Input() line: OrderDetail.Lines;\r\n    @Input() payments: OrderDetail.Payments[];\r\n\r\n    getRefundedCount(): number {\r\n        const refunds =\r\n            this.payments?.reduce(\r\n                (all, payment) => [...all, ...payment.refunds],\r\n                [] as OrderDetail.Refunds[],\r\n            ) ?? [];\r\n        return this.line.items.filter(i => {\r\n            if (i.refundId === null && !i.cancelled) {\r\n                return false;\r\n            }\r\n            if (i.refundId) {\r\n                const refund = refunds.find(r => r.id === i.refundId);\r\n                if (refund?.state === 'Failed') {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }).length;\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-modification-detail',\r\n    templateUrl: './modification-detail.component.html',\r\n    styleUrls: ['./modification-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModificationDetailComponent implements OnChanges {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() modification: OrderDetail.Modifications;\r\n    private addedItems = new Map<OrderDetail.Lines, number>();\r\n    private removedItems = new Map<OrderDetail.Lines, number>();\r\n\r\n    ngOnChanges(): void {\r\n        const { added, removed } = this.getModifiedLines();\r\n        this.addedItems = added;\r\n        this.removedItems = removed;\r\n    }\r\n\r\n    getSurcharge(id: string) {\r\n        return this.order.surcharges.find(m => m.id === id);\r\n    }\r\n\r\n    getAddedItems() {\r\n        return [...this.addedItems.entries()].map(([line, count]) => {\r\n            return { name: line.productVariant.name, quantity: count };\r\n        });\r\n    }\r\n\r\n    getRemovedItems() {\r\n        return [...this.removedItems.entries()].map(([line, count]) => {\r\n            return { name: line.productVariant.name, quantity: count };\r\n        });\r\n    }\r\n\r\n    private getModifiedLines() {\r\n        const added = new Map<OrderDetail.Lines, number>();\r\n        const removed = new Map<OrderDetail.Lines, number>();\r\n        for (const _item of this.modification.orderItems || []) {\r\n            const result = this.getOrderLineAndItem(_item.id);\r\n            if (result) {\r\n                const { line, item } = result;\r\n                if (item.cancelled) {\r\n                    const count = removed.get(line) ?? 0;\r\n                    removed.set(line, count + 1);\r\n                } else {\r\n                    const count = added.get(line) ?? 0;\r\n                    added.set(line, count + 1);\r\n                }\r\n            }\r\n        }\r\n        return { added, removed };\r\n    }\r\n\r\n    private getOrderLineAndItem(itemId: string) {\r\n        for (const line of this.order.lines) {\r\n            const item = line.items.find(i => i.id === itemId);\r\n            if (item) {\r\n                return { line, item };\r\n            }\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\r\n    <div class=\"card-header\">\r\n        {{ 'common.custom-fields' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\r\n            <ng-container *ngFor=\"let customField of customFieldsConfig\">\r\n                <vdr-custom-field-control\r\n                    entityName=\"Order\"\r\n                    [customFieldsFormGroup]=\"customFieldForm\"\r\n                    [compact]=\"true\"\r\n                    [readonly]=\"customField.readonly || !editable\"\r\n                    [customField]=\"customField\"\r\n                ></vdr-custom-field-control>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\r\n            <clr-icon shape=\"pencil\"></clr-icon>\r\n            {{ 'common.edit' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            (click)=\"onUpdateClick()\"\r\n            *ngIf=\"editable\"\r\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\r\n        >\r\n            <clr-icon shape=\"check\"></clr-icon>\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-custom-fields-card',\r\n    templateUrl: './order-custom-fields-card.component.html',\r\n    styleUrls: ['./order-custom-fields-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderCustomFieldsCardComponent implements OnInit {\r\n    @Input() customFieldsConfig: CustomFieldConfig[] = [];\r\n    @Input() customFieldValues: { [name: string]: any } = {};\r\n    @Output() updateClick = new EventEmitter<any>();\r\n    customFieldForm: FormGroup;\r\n    editable = false;\r\n    constructor(private formBuilder: FormBuilder) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldForm = this.formBuilder.group({});\r\n        for (const field of this.customFieldsConfig) {\r\n            this.customFieldForm.addControl(\r\n                field.name,\r\n                this.formBuilder.control(this.customFieldValues[field.name]),\r\n            );\r\n        }\r\n    }\r\n\r\n    onUpdateClick() {\r\n        this.updateClick.emit(this.customFieldForm.value);\r\n        this.customFieldForm.markAsPristine();\r\n        this.editable = false;\r\n    }\r\n}\r\n","export const NODE_HEIGHT = 72;\r\n","<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\r\n    <div\r\n        class=\"node\"\r\n        [class.active-target]=\"activeTarget$ | async\"\r\n    >\r\n        {{ node.name | stateI18nToken | translate }}\r\n    </div>\r\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\r\n        <div class=\"cancelled-edge\">\r\n        </div>\r\n        <clr-icon shape=\"dot-circle\"></clr-icon>\r\n        <div class=\"cancelled-node\">\r\n            {{ cancelledState | stateI18nToken | translate }}\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-node',\r\n    templateUrl: './order-process-node.component.html',\r\n    styleUrls: ['./order-process-node.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessNodeComponent implements OnChanges {\r\n    @Input() node: StateNode;\r\n    @Input() index: number;\r\n    @Input() active: boolean;\r\n    active$ = new BehaviorSubject<boolean>(false);\r\n    activeTarget$ = new BehaviorSubject<boolean>(false);\r\n    isCancellable = false;\r\n    // We use a class field here to prevent the\r\n    // i18n extractor from extracting a \"Cancelled\" key\r\n    cancelledState = 'Cancelled';\r\n\r\n    constructor(private elementRef: ElementRef<HTMLDivElement>) {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');\r\n        if (changes.active) {\r\n            this.active$.next(this.active);\r\n        }\r\n    }\r\n\r\n    getPos(origin: 'top' | 'bottom' = 'top'): { x: number; y: number } {\r\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n        const nodeHeight =\r\n            this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;\r\n        return {\r\n            x: 10,\r\n            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),\r\n        };\r\n    }\r\n\r\n    getStyle() {\r\n        const pos = this.getPos();\r\n        return {\r\n            'top.px': pos.y,\r\n            'left.px': pos.x,\r\n        };\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-edge',\r\n    templateUrl: './order-process-edge.component.html',\r\n    styleUrls: ['./order-process-edge.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessEdgeComponent implements OnInit {\r\n    @Input() from: OrderProcessNodeComponent;\r\n    @Input() to: OrderProcessNodeComponent;\r\n    @Input() index: number;\r\n    active$: Observable<boolean>;\r\n\r\n    ngOnInit() {\r\n        this.active$ = this.from.active$\r\n            .asObservable()\r\n            .pipe(tap((active) => this.to.activeTarget$.next(active)));\r\n    }\r\n\r\n    getStyle() {\r\n        const direction = this.from.index < this.to.index ? 'down' : 'up';\r\n        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');\r\n        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');\r\n        const dX = Math.abs(startPos.x - endPos.x);\r\n        const dY = Math.abs(startPos.y - endPos.y);\r\n        const length = Math.sqrt(dX ** 2 + dY ** 2);\r\n        return {\r\n            'top.px': startPos.y,\r\n            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,\r\n            'height.px': length,\r\n            'width.px': 1,\r\n            ...(direction === 'up'\r\n                ? {\r\n                      transform: 'rotateZ(180deg)',\r\n                      'transform-origin': 'top',\r\n                  }\r\n                : {}),\r\n        };\r\n    }\r\n}\r\n","<ng-container *ngFor=\"let state of nodes; let i = index\">\r\n    <vdr-order-process-node\r\n        [node]=\"state\"\r\n        [index]=\"i\"\r\n        [active]=\"(activeState$ | async) === state.name\"\r\n        (mouseenter)=\"onMouseOver(state.name)\"\r\n        (mouseleave)=\"onMouseOut()\"\r\n    ></vdr-order-process-node>\r\n</ng-container>\r\n<ng-container *ngFor=\"let edge of edges\">\r\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\r\n</ng-container>\r\n","<div\r\n    [attr.data-from]=\"from.node.name\"\r\n    [attr.data-to]=\"to.node.name\"\r\n    [ngStyle]=\"getStyle()\"\r\n    [class.active]=\"active$ | async\"\r\n    class=\"edge\">\r\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\r\n</div>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    HostBinding,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    QueryList,\r\n    SimpleChanges,\r\n    ViewChildren,\r\n} from '@angular/core';\r\nimport { OrderProcessState } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph',\r\n    templateUrl: './order-process-graph.component.html',\r\n    styleUrls: ['./order-process-graph.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphComponent implements OnInit, OnChanges, AfterViewInit {\r\n    @Input() states: OrderProcessState[];\r\n    @Input() initialState?: string;\r\n    setActiveState$ = new BehaviorSubject<string | undefined>(undefined);\r\n    activeState$: Observable<string | undefined>;\r\n    nodes: StateNode[] = [];\r\n    edges: Array<{ from: OrderProcessNodeComponent; to: OrderProcessNodeComponent; index: number }> = [];\r\n\r\n    @ViewChildren(OrderProcessNodeComponent) nodeComponents: QueryList<OrderProcessNodeComponent>;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    @HostBinding('style.height.px')\r\n    get outerHeight(): number {\r\n        return this.nodes.length * NODE_HEIGHT;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setActiveState$.next(this.initialState);\r\n        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.populateNodes();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.populateEdges());\r\n    }\r\n\r\n    onMouseOver(stateName: string) {\r\n        this.setActiveState$.next(stateName);\r\n    }\r\n\r\n    onMouseOut() {\r\n        this.setActiveState$.next(this.initialState);\r\n    }\r\n\r\n    getNodeFor(state: string): OrderProcessNodeComponent | undefined {\r\n        if (this.nodeComponents) {\r\n            return this.nodeComponents.find((n) => n.node.name === state);\r\n        }\r\n    }\r\n\r\n    private populateNodes() {\r\n        const stateNodeMap = new Map<string, StateNode>();\r\n        for (const state of this.states) {\r\n            stateNodeMap.set(state.name, {\r\n                name: state.name,\r\n                to: [],\r\n            });\r\n        }\r\n\r\n        for (const [name, stateNode] of stateNodeMap.entries()) {\r\n            const targets = this.states.find((s) => s.name === name)?.to ?? [];\r\n            for (const target of targets) {\r\n                const targetNode = stateNodeMap.get(target);\r\n                if (targetNode) {\r\n                    stateNode.to.push(targetNode);\r\n                }\r\n            }\r\n        }\r\n        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');\r\n    }\r\n\r\n    private populateEdges() {\r\n        for (const node of this.nodes) {\r\n            const nodeCmp = this.getNodeFor(node.name);\r\n            let index = 0;\r\n            for (const to of node.to) {\r\n                const toCmp = this.getNodeFor(to.name);\r\n                if (nodeCmp && toCmp && nodeCmp !== toCmp) {\r\n                    this.edges.push({\r\n                        to: toCmp,\r\n                        from: nodeCmp,\r\n                        index,\r\n                    });\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n        this.edges = [...this.edges];\r\n        this.changeDetector.markForCheck();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\r\n\r\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport {\r\n    CancelOrderInput,\r\n    DataService,\r\n    Dialog,\r\n    OrderProcessState,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph-dialog',\r\n    templateUrl: './order-process-graph-dialog.component.html',\r\n    styleUrls: ['./order-process-graph-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphDialogComponent implements OnInit, Dialog<void> {\r\n    activeState: string;\r\n    states: OrderProcessState[] = [];\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.states = this.serverConfigService.getOrderProcessStates();\r\n    }\r\n\r\n    resolveWith: (result: void | undefined) => void;\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"refund-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.prorated-unit-price' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.refund' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr *ngFor=\"let line of order.lines\" class=\"order-line\">\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.quantity }}\r\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    <div class=\"prorated-wrapper\">\r\n                        {{ line.proratedUnitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                        <ng-container *ngIf=\"line.discounts as discounts\">\r\n                            <vdr-dropdown *ngIf=\"discounts.length\">\r\n                                <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                                    <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\r\n                                </div>\r\n                                <vdr-dropdown-menu>\r\n                                    <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                        {{ discount.description }}\r\n                                        <div class=\"promotion-amount\">\r\n                                            {{\r\n                                                discount.amount / 100 / line.quantity\r\n                                                    | number: '1.0-2'\r\n                                                    | currency: order.currencyCode\r\n                                            }}\r\n                                        </div>\r\n                                    </div>\r\n                                </vdr-dropdown-menu>\r\n                            </vdr-dropdown>\r\n                        </ng-container>\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle quantity-col\">\r\n                    <input\r\n                        *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                        [(ngModel)]=\"lineQuantities[line.id].quantity\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                        (input)=\"handleZeroQuantity(lineQuantities[line.id])\"\r\n                    />\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <div class=\"cancel-checkbox-wrapper\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].refund\"\r\n                        />\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <div class=\"cancel-checkbox-wrapper\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\r\n                        />\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"refund-details mt4\" [class.faded]=\"!isRefunding() && !isCancelling()\">\r\n        <div>\r\n            <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n            <ng-select\r\n                [disabled]=\"!isRefunding() && !isCancelling()\"\r\n                [items]=\"reasons\"\r\n                bindLabel=\"name\"\r\n                autofocus\r\n                [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\r\n                bindValue=\"id\"\r\n                [addTag]=\"true\"\r\n                [(ngModel)]=\"reason\"\r\n            ></ng-select>\r\n        </div>\r\n\r\n        <div>\r\n            <clr-select-container>\r\n                <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n                <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\" [disabled]=\"!isRefunding()\">\r\n                    <option\r\n                        *ngFor=\"let payment of settledPayments\"\r\n                        [ngValue]=\"payment\"\r\n                        [disabled]=\"payment.state !== 'Settled'\"\r\n                    >\r\n                        #{{ payment.id }} {{ payment.method }}:\r\n                        {{ payment.amount | localeCurrency: order.currencyCode }}\r\n                    </option>\r\n                </select>\r\n            </clr-select-container>\r\n\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"refundShipping\" [disabled]=\"!isRefunding()\" />\r\n                <label>\r\n                    {{ 'order.refund-shipping' | translate }} ({{\r\n                        order.shippingWithTax | localeCurrency: order.currencyCode\r\n                    }})\r\n                </label>\r\n            </clr-checkbox-wrapper>\r\n            <clr-input-container>\r\n                <label>{{ 'order.refund-adjustment' | translate }}</label>\r\n                <vdr-currency-input\r\n                    clrInput\r\n                    [disabled]=\"!isRefunding()\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [(ngModel)]=\"adjustment\"\r\n                ></vdr-currency-input>\r\n            </clr-input-container>\r\n            <div class=\"totals\" [class.disabled]=\"!isRefunding()\">\r\n                <div class=\"order-total\">\r\n                    {{ 'order.payment-amount' | translate }}:\r\n                    {{ selectedPayment.amount | localeCurrency: order.currencyCode }}\r\n                </div>\r\n                <div class=\"refund-total\">\r\n                    {{ 'order.refund-total' | translate }}:\r\n                    {{ refundTotal | localeCurrency: order.currencyCode }}\r\n                </div>\r\n                <div class=\"refund-total-error\" *ngIf=\"refundTotal < 0 || settledPaymentsTotal < refundTotal\">\r\n                    {{\r\n                        'order.refund-total-error'\r\n                            | translate\r\n                                : {\r\n                                      min: 0 | currency: order.currencyCode,\r\n                                      max: settledPaymentsTotal | localeCurrency: order.currencyCode\r\n                                  }\r\n                    }}\r\n                </div>\r\n                <div class=\"refund-total-warning\" *ngIf=\"selectedPayment.amount < refundTotal\">\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        <ng-container *ngIf=\"isRefunding(); else cancelling\">\r\n            {{\r\n                'order.refund-with-amount'\r\n                    | translate: { amount: refundTotal | localeCurrency: order.currencyCode }\r\n            }}\r\n        </ng-container>\r\n        <ng-template #cancelling>\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CancelOrderInput,\r\n    Dialog,\r\n    getAppConfig,\r\n    I18nService,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    OrderLineInput,\r\n    RefundOrderInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { summate } from '@vendure/common/lib/shared-utils';\r\n\r\ntype SelectionLine = { quantity: number; refund: boolean; cancel: boolean };\r\n\r\n@Component({\r\n    selector: 'vdr-refund-order-dialog',\r\n    templateUrl: './refund-order-dialog.component.html',\r\n    styleUrls: ['./refund-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundOrderDialogComponent\r\n    implements OnInit, Dialog<{ cancel: CancelOrderInput; refund: RefundOrderInput }>\r\n{\r\n    order: OrderDetailFragment;\r\n    resolveWith: (result?: { cancel: CancelOrderInput; refund: RefundOrderInput }) => void;\r\n    reason: string;\r\n    settledPayments: OrderDetail.Payments[];\r\n    selectedPayment: OrderDetail.Payments;\r\n    lineQuantities: { [lineId: string]: SelectionLine } = {};\r\n    refundShipping = false;\r\n    adjustment = 0;\r\n    reasons = getAppConfig().cancellationReasons ?? [\r\n        _('order.refund-reason-customer-request'),\r\n        _('order.refund-reason-not-available'),\r\n    ];\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    get refundTotal(): number {\r\n        const itemTotal = this.order.lines.reduce((total, line) => {\r\n            const lineRef = this.lineQuantities[line.id];\r\n            const refundCount = (lineRef.refund && lineRef.quantity) || 0;\r\n            return total + line.proratedUnitPriceWithTax * refundCount;\r\n        }, 0);\r\n        return itemTotal + (this.refundShipping ? this.order.shippingWithTax : 0) + this.adjustment;\r\n    }\r\n\r\n    get settledPaymentsTotal(): number {\r\n        return this.settledPayments\r\n            .map(payment => {\r\n                const paymentTotal = payment.amount;\r\n                const alreadyRefundedTotal = summate(\r\n                    payment.refunds.filter(r => r.state !== 'Failed') as Array<Required<OrderDetail.Refunds>>,\r\n                    'total',\r\n                );\r\n                return paymentTotal - alreadyRefundedTotal;\r\n            })\r\n            .reduce((sum, amount) => sum + amount, 0);\r\n    }\r\n\r\n    lineCanBeRefundedOrCancelled(line: OrderDetail.Lines): boolean {\r\n        const refunds =\r\n            this.order.payments?.reduce(\r\n                (all, payment) => [...all, ...payment.refunds],\r\n                [] as OrderDetail.Refunds[],\r\n            ) ?? [];\r\n\r\n        const refundable = line.items.filter(i => {\r\n            if (i.cancelled) {\r\n                return false;\r\n            }\r\n            if (i.refundId == null) {\r\n                return true;\r\n            }\r\n            const refund = refunds.find(r => r.id === i.refundId);\r\n            return refund?.state === 'Failed';\r\n        });\r\n        return 0 < refundable.length;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\r\n            return {\r\n                ...result,\r\n                [line.id]: {\r\n                    quantity: 0,\r\n                    refund: false,\r\n                    cancel: false,\r\n                },\r\n            };\r\n        }, {});\r\n        this.settledPayments = (this.order.payments || []).filter(p => p.state === 'Settled');\r\n        if (this.settledPayments.length) {\r\n            this.selectedPayment = this.settledPayments[0];\r\n        }\r\n    }\r\n\r\n    handleZeroQuantity(line?: SelectionLine) {\r\n        if (line?.quantity === 0) {\r\n            line.cancel = false;\r\n            line.refund = false;\r\n        }\r\n    }\r\n\r\n    isRefunding(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce((isRefunding, line) => {\r\n            return isRefunding || (0 < line.quantity && line.refund);\r\n        }, false);\r\n        return result;\r\n    }\r\n\r\n    isCancelling(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce((isCancelling, line) => {\r\n            return isCancelling || (0 < line.quantity && line.cancel);\r\n        }, false);\r\n        return result;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        if (this.isRefunding()) {\r\n            return !!(\r\n                this.selectedPayment &&\r\n                this.reason &&\r\n                0 < this.refundTotal &&\r\n                this.refundTotal <= this.settledPaymentsTotal\r\n            );\r\n        } else if (this.isCancelling()) {\r\n            return !!this.reason;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    select() {\r\n        const payment = this.selectedPayment;\r\n        if (payment) {\r\n            const refundLines = this.getOrderLineInput(line => line.refund);\r\n            const cancelLines = this.getOrderLineInput(line => line.cancel);\r\n\r\n            this.resolveWith({\r\n                refund: {\r\n                    lines: refundLines,\r\n                    reason: this.reason,\r\n                    shipping: this.refundShipping ? this.order.shippingWithTax : 0,\r\n                    adjustment: this.adjustment,\r\n                    paymentId: payment.id,\r\n                },\r\n                cancel: {\r\n                    lines: cancelLines,\r\n                    orderId: this.order.id,\r\n                    reason: this.reason,\r\n                    cancelShipping: this.refundShipping,\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getOrderLineInput(filterFn: (line: SelectionLine) => boolean): OrderLineInput[] {\r\n        return Object.entries(this.lineQuantities)\r\n            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))\r\n            .map(([orderLineId, line]) => ({\r\n                orderLineId,\r\n                quantity: line.quantity,\r\n            }));\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\r\n<p class=\"instruction\">\r\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\r\n</p>\r\n<clr-input-container>\r\n    <label>{{ 'order.transaction-id' | translate }}</label>\r\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\r\n</clr-input-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\r\n        {{ 'order.settle-refund' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-settle-refund-dialog',\r\n    templateUrl: './settle-refund-dialog.component.html',\r\n    styleUrls: ['./settle-refund-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SettleRefundDialogComponent implements Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    transactionId = '';\r\n    refund: OrderDetail.Refunds;\r\n\r\n    submit() {\r\n        this.resolveWith(this.transactionId);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\r\n<p>{{ message | translate }}</p>\r\n<clr-select-container>\r\n    <select clrSelect name=\"state\" [(ngModel)]=\"selectedState\">\r\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\r\n            {{ state | stateI18nToken | translate }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\r\n        {{ 'common.cancel' | translate }}\r\n    </button>\r\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\r\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-state-select-dialog',\n    templateUrl: './order-state-select-dialog.component.html',\n    styleUrls: ['./order-state-select-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderStateSelectDialogComponent implements Dialog<string> {\n    resolveWith: (result?: string) => void;\n    nextStates: string[] = [];\n    message = '';\n    cancellable: boolean;\n    selectedState = '';\n\n    select() {\n        if (this.selectedState) {\n            this.resolveWith(this.selectedState);\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    HistoryEntryType,\n    I18nService,\n    ModalService,\n    NotificationService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\n\nimport { OrderStateSelectDialogComponent } from '../components/order-state-select-dialog/order-state-select-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderTransitionService {\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private i18nService: I18nService,\n    ) {}\n\n    /**\n     * Attempts to transition the Order to the last state it was in before it was transitioned\n     * to the \"Modifying\" state. If this fails, a manual prompt is used.\n     */\n    transitionToPreModifyingState(orderId: string, nextStates: string[]) {\n        return this.getPreModifyingState(orderId).pipe(\n            switchMap(state => {\n                const manualTransitionOptions = {\n                    orderId,\n                    nextStates,\n                    message: this.i18nService.translate(\n                        _('order.unable-to-transition-to-state-try-another'),\n                        { state },\n                    ),\n                    cancellable: false,\n                    retry: 10,\n                };\n                if (state) {\n                    return this.transitionToStateOrThrow(orderId, state).pipe(\n                        catchError(err => this.manuallyTransitionToState(manualTransitionOptions)),\n                    );\n                } else {\n                    return this.manuallyTransitionToState(manualTransitionOptions);\n                }\n            }),\n        );\n    }\n\n    /**\n     * Displays a modal for manually selecting the next state.\n     */\n    manuallyTransitionToState(options: {\n        orderId: string;\n        nextStates: string[];\n        message: string;\n        cancellable: boolean;\n        retry: number;\n    }) {\n        return this.modalService\n            .fromComponent(OrderStateSelectDialogComponent, {\n                locals: {\n                    nextStates: options.nextStates,\n                    cancellable: options.cancellable,\n                    message: options.message,\n                },\n                closable: false,\n                size: 'md',\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.transitionToStateOrThrow(options.orderId, result);\n                    } else {\n                        if (!options.cancellable) {\n                            throw new Error(`An order state must be selected`);\n                        } else {\n                            return EMPTY;\n                        }\n                    }\n                }),\n                retryWhen(errors => errors.pipe(delay(2000), take(options.retry))),\n            );\n    }\n\n    /**\n     * Attempts to get the last state the Order was in before it was transitioned\n     * to the \"Modifying\" state.\n     */\n    private getPreModifyingState(orderId: string) {\n        return this.dataService.order\n            .getOrderHistory(orderId, {\n                filter: {\n                    type: {\n                        eq: HistoryEntryType.ORDER_STATE_TRANSITION,\n                    },\n                },\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n            })\n            .mapSingle(result => result.order)\n            .pipe(\n                map(result => {\n                    const item = result?.history.items.find(i => i.data.to === 'Modifying');\n                    if (item) {\n                        return item.data.from as string;\n                    } else {\n                        return;\n                    }\n                }),\n            );\n    }\n\n    private transitionToStateOrThrow(orderId: string, state: string) {\n        return this.dataService.order.transitionToState(orderId, state).pipe(\n            map(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        return transitionOrderToState?.state;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState?.transitionError);\n                        throw new Error(transitionOrderToState?.transitionError);\n                }\n            }),\n        );\n    }\n}\n","<table class=\"order-table table\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'order.product-name' | translate }}</th>\r\n            <th>{{ 'order.product-sku' | translate }}</th>\r\n            <th>{{ 'order.unit-price' | translate }}</th>\r\n            <th>{{ 'order.quantity' | translate }}</th>\r\n            <th>{{ 'order.total' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <ng-container *ngFor=\"let line of order.lines\">\r\n            <tr class=\"order-line\" [class.is-cancelled]=\"line.quantity === 0\">\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle unit-price\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ line.unitPrice | localeCurrency: order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.quantity }}\r\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                    <vdr-line-fulfillment [line]=\"line\" [orderState]=\"order.state\"></vdr-line-fulfillment>\r\n                </td>\r\n                <td class=\"align-middle total\">\r\n                    {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ line.linePrice | localeCurrency: order.currencyCode }}\r\n                    </div>\r\n\r\n                    <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\r\n                        <vdr-dropdown *ngIf=\"discounts.length\">\r\n                            <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                                {{ 'order.promotions-applied' | translate }}\r\n                            </div>\r\n                            <vdr-dropdown-menu>\r\n                                <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                    <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\r\n                                        discount.description\r\n                                    }}</a>\r\n                                    <div class=\"promotion-amount\">\r\n                                        {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\r\n                                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                            {{ discount.amount | localeCurrency: order.currencyCode }}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </ng-container>\r\n                </td>\r\n            </tr>\r\n            <ng-container *ngIf=\"customFieldsForLine[line.id] as customFields\">\r\n                <tr *ngIf=\"customFields.length\">\r\n                    <td colspan=\"6\" class=\"custom-fields-row\">\r\n                        <div class=\"order-line-custom-fields\">\r\n                            <div class=\"custom-field\" *ngFor=\"let field of customFields\">\r\n                                <vdr-custom-field-control\r\n                                    [compact]=\"true\"\r\n                                    [readonly]=\"true\"\r\n                                    [customField]=\"field.config\"\r\n                                    [customFieldsFormGroup]=\"field.formGroup\"\r\n                                ></vdr-custom-field-control>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n        </ng-container>\r\n        <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n            <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n            <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n            <td class=\"align-middle\" colspan=\"2\"></td>\r\n            <td class=\"align-middle total\">\r\n                {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ surcharge.price | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <ng-container *ngFor=\"let discount of order.discounts\">\r\n            <tr class=\"order-adjustment\" *ngIf=\"discount.type !== 'OTHER'\">\r\n            <td colspan=\"5\" class=\"left clr-align-middle\">\r\n                <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\r\n                <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\r\n                    couponCode\r\n                }}</vdr-chip>\r\n            </td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ discount.amount | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n            </tr>\r\n        </ng-container>\r\n        <tr class=\"sub-total\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.sub-total' | translate }}</td>\r\n            <td colspan=\"4\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.subTotalWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.subTotal | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"shipping\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\r\n            <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\r\n            <td colspan=\"3\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.shipping | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"total\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.total' | translate }}</td>\r\n            <td colspan=\"4\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.totalWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.total | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { AdjustmentType, CustomFieldConfig, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-table',\r\n    templateUrl: './order-table.component.html',\r\n    styleUrls: ['./order-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderTableComponent implements OnInit {\r\n    @Input() order: OrderDetail.Fragment;\r\n    @Input() orderLineCustomFields: CustomFieldConfig[];\r\n    orderLineCustomFieldsVisible = false;\r\n    customFieldsForLine: {\r\n        [lineId: string]: Array<{ config: CustomFieldConfig; formGroup: FormGroup; value: any }>;\r\n    } = {};\r\n\r\n    get visibleOrderLineCustomFields(): CustomFieldConfig[] {\r\n        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];\r\n    }\r\n\r\n    get showElided(): boolean {\r\n        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;\r\n        this.getLineCustomFields();\r\n    }\r\n\r\n    toggleOrderLineCustomFields() {\r\n        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;\r\n    }\r\n\r\n    getLineDiscounts(line: OrderDetail.Lines) {\r\n        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);\r\n    }\r\n\r\n    private getLineCustomFields() {\r\n        for (const line of this.order.lines) {\r\n            const formGroup = new FormGroup({});\r\n            const result = this.orderLineCustomFields\r\n                .map(config => {\r\n                    const value = (line as any).customFields[config.name];\r\n                    formGroup.addControl(config.name, new FormControl(value));\r\n                    return {\r\n                        config,\r\n                        formGroup,\r\n                        value,\r\n                    };\r\n                })\r\n                .filter(field => {\r\n                    return this.orderLineCustomFieldsVisible ? true : field.value != null;\r\n                });\r\n            this.customFieldsForLine[line.id] = result;\r\n        }\r\n    }\r\n\r\n    getPromotionLink(promotion: OrderDetail.Discounts): any[] {\r\n        const id = promotion.adjustmentSource.split(':')[1];\r\n        return ['/marketing', 'promotions', id];\r\n    }\r\n\r\n    getCouponCodeForAdjustment(\r\n        order: OrderDetail.Fragment,\r\n        promotionAdjustment: OrderDetail.Discounts,\r\n    ): string | undefined {\r\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\r\n        const promotion = order.promotions.find(p => p.id === id);\r\n        if (promotion) {\r\n            return promotion.couponCode || undefined;\r\n        }\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n    {{ payment.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ payment.amount | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\r\n    {{ payment.errorMessage }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ payment.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { CurrencyCode, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-detail',\r\n    templateUrl: './payment-detail.component.html',\r\n    styleUrls: ['./payment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentDetailComponent {\r\n    @Input() payment: OrderDetail.Payments;\r\n    @Input() currencyCode: CurrencyCode;\r\n}\r\n","<h4>{{ 'order.order-history' | translate }}</h4>\r\n<div class=\"entry-list\" [class.expanded]=\"expanded\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\r\n                {{ 'common.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"visibility-select\">\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\r\n                <label>{{ 'order.note-is-private' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\r\n                {{ 'order.note-only-visible-to-administrators' | translate }}\r\n            </span>\r\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\r\n                {{ 'order.note-visible-to-customer' | translate }}\r\n            </span>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry\r\n        *ngFor=\"let entry of history\"\r\n        [displayType]=\"getDisplayType(entry)\"\r\n        [iconShape]=\"getTimelineIcon(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"getName(entry)\"\r\n        [featured]=\"isFeatured(entry)\"\r\n        [collapsed]=\"!expanded && !isFeatured(entry)\"\r\n        (expandClick)=\"expanded = !expanded\"\r\n    >\r\n        <ng-container [ngSwitch]=\"entry.type\">\r\n            <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\r\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\r\n                    {{ 'order.history-order-fulfilled' | translate }}\r\n                </div>\r\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\r\n                    {{ 'order.history-order-cancelled' | translate }}\r\n                </div>\r\n                <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\r\n                    {{\r\n                        'order.history-order-transition'\r\n                            | translate: { from: entry.data.from, to: entry.data.to }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\r\n                <div class=\"title\">\r\n                    {{ 'order.history-order-modified' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"getModification(entry.data.modificationId) as modification\">\r\n                    {{ 'order.modify-order-price-difference' | translate }}:\r\n                    <strong>{{ modification.priceChange | localeCurrency: order.currencyCode }}</strong>\r\n                    <vdr-chip colorType=\"success\" *ngIf=\"modification.isSettled\">{{\r\n                        'order.modification-settled' | translate\r\n                    }}</vdr-chip>\r\n                    <vdr-chip colorType=\"error\" *ngIf=\"!modification.isSettled\">{{\r\n                        'order.modification-not-settled' | translate\r\n                    }}</vdr-chip>\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-modification-detail\r\n                            [order]=\"order\"\r\n                            [modification]=\"modification\"\r\n                        ></vdr-modification-detail>\r\n                    </vdr-history-entry-detail>\r\n                </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\r\n                <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-payment-settled' | translate }}\r\n                    </div>\r\n                    {{ 'order.transaction-id' | translate }}: {{ getPayment(entry)?.transactionId }}\r\n                    <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\r\n                        <vdr-payment-detail\r\n                            [payment]=\"payment\"\r\n                            [currencyCode]=\"order.currencyCode\"\r\n                        ></vdr-payment-detail>\r\n                    </vdr-history-entry-detail>\r\n                </ng-container>\r\n                <ng-template #regularPaymentTransition>\r\n                    {{\r\n                        'order.history-payment-transition'\r\n                            | translate\r\n                                : {\r\n                                      from: entry.data.from,\r\n                                      to: entry.data.to,\r\n                                      id: getPayment(entry)?.transactionId\r\n                                  }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\r\n                {{\r\n                    'order.history-refund-transition'\r\n                        | translate: { from: entry.data.from, to: entry.data.to, id: entry.data.refundId }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\r\n                {{ 'order.history-items-cancelled' | translate: { count: entry.data.orderItemIds.length } }}\r\n                <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry) as items\">\r\n                    <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                        {{ entry.data.reason }}\r\n                    </vdr-labeled-data>\r\n                    <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                        <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n                    </vdr-labeled-data>\r\n                    <vdr-labeled-data [label]=\"'order.shipping-cancelled' | translate\">\r\n                        {{ entry.data.shippingCancelled }}\r\n                    </vdr-labeled-data>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\r\n                {{ 'order.history-fulfillment-created' | translate }}\r\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                    <vdr-fulfillment-detail\r\n                        [fulfillmentId]=\"fulfillment.id\"\r\n                        [order]=\"order\"\r\n                    ></vdr-fulfillment-detail>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\r\n                <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-fulfillment-delivered' | translate }}\r\n                    </div>\r\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-fulfillment-shipped' | translate }}\r\n                    </div>\r\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\r\n                    {{\r\n                        'order.history-fulfillment-transition'\r\n                            | translate: { from: entry.data.from, to: entry.data.to }\r\n                    }}\r\n                </ng-container>\r\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                    <vdr-fulfillment-detail\r\n                        [fulfillmentId]=\"fulfillment.id\"\r\n                        [order]=\"order\"\r\n                    ></vdr-fulfillment-detail>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\r\n                <div class=\"flex\">\r\n                    <div class=\"note-text\">\r\n                        <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\r\n                            'common.public' | translate\r\n                        }}</span>\r\n                        <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\r\n                            'common.private' | translate\r\n                        }}</span>\r\n                        {{ entry.data.note }}\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <vdr-dropdown>\r\n                        <button class=\"icon-button\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"updateNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </button>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"deleteNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\r\n                {{ 'order.history-coupon-code-applied' | translate }}:\r\n                <vdr-chip>\r\n                    <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\r\n                        entry.data.couponCode\r\n                    }}</a>\r\n                </vdr-chip>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\r\n                {{ 'order.history-coupon-code-removed' | translate }}:\r\n                <vdr-chip\r\n                    ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\r\n                >\r\n            </ng-container>\r\n        </ng-container>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\r\n        <div class=\"title\">\r\n            {{ 'order.history-order-created' | translate }}\r\n        </div>\r\n    </vdr-timeline-entry>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport {\r\n    GetOrderHistory,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    TimelineDisplayType,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-history',\r\n    templateUrl: './order-history.component.html',\r\n    styleUrls: ['./order-history.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderHistoryComponent {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() history: GetOrderHistory.Items[];\r\n    @Output() addNote = new EventEmitter<{ note: string; isPublic: boolean }>();\r\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\r\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\r\n    note = '';\r\n    noteIsPrivate = true;\r\n    expanded = false;\r\n    readonly type = HistoryEntryType;\r\n\r\n    getDisplayType(entry: GetOrderHistory.Items): TimelineDisplayType {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {\r\n            return 'error';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\r\n            return 'warning';\r\n        }\r\n        return 'default';\r\n    }\r\n\r\n    getTimelineIcon(entry: GetOrderHistory.Items) {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return ['success-standard', 'is-solid'];\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'ban';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Settled') {\r\n                return 'credit-card';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_NOTE) {\r\n            return 'note';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {\r\n            return 'pencil';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Shipped') {\r\n                return 'truck';\r\n            }\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'truck';\r\n            }\r\n        }\r\n    }\r\n\r\n    isFeatured(entry: GetOrderHistory.Items): boolean {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.ORDER_STATE_TRANSITION: {\r\n                return (\r\n                    entry.data.to === 'Delivered' ||\r\n                    entry.data.to === 'Cancelled' ||\r\n                    entry.data.to === 'Settled'\r\n                );\r\n            }\r\n            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:\r\n                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';\r\n            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:\r\n                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';\r\n            case HistoryEntryType.ORDER_NOTE:\r\n            case HistoryEntryType.ORDER_MODIFIED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getFulfillment(entry: GetOrderHistory.Items): OrderDetail.Fulfillments | undefined {\r\n        if (\r\n            (entry.type === HistoryEntryType.ORDER_FULFILLMENT ||\r\n                entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&\r\n            this.order.fulfillments\r\n        ) {\r\n            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);\r\n        }\r\n    }\r\n\r\n    getPayment(entry: GetOrderHistory.Items): OrderDetail.Payments | undefined {\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {\r\n            return this.order.payments.find(p => p.id === entry.data.paymentId);\r\n        }\r\n    }\r\n\r\n    getCancelledItems(entry: GetOrderHistory.Items): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        const cancelledItemIds: string[] = entry.data.orderItemIds;\r\n        for (const line of this.order.lines) {\r\n            for (const item of line.items) {\r\n                if (cancelledItemIds.includes(item.id)) {\r\n                    const count = itemMap.get(line.productVariant.name);\r\n                    if (count != null) {\r\n                        itemMap.set(line.productVariant.name, count + 1);\r\n                    } else {\r\n                        itemMap.set(line.productVariant.name, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    getModification(id: string) {\r\n        return this.order.modifications.find(m => m.id === id);\r\n    }\r\n\r\n    getName(entry: GetOrderHistory.Items): string {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        } else {\r\n            const customer = this.order.customer;\r\n            if (customer) {\r\n                return `${customer.firstName} ${customer.lastName}`;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    addNoteToOrder() {\r\n        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });\r\n        this.note = '';\r\n        this.noteIsPrivate = true;\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-state-label',\r\n    templateUrl: './payment-state-label.component.html',\r\n    styleUrls: ['./payment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Authorized':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Declined':\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-refund-state-label',\r\n    templateUrl: './refund-state-label.component.html',\r\n    styleUrls: ['./refund-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Failed':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header payment-header\">\r\n        <div>\r\n            {{ 'order.payment' | translate }}\r\n            <ng-container *ngIf=\"payment.transactionId\">#{{ payment.transactionId }}</ng-container>\r\n        </div>\r\n        <div class=\"payment-state\">\r\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\r\n    </div>\r\n    <ng-container *ngFor=\"let refund of payment.refunds\">\r\n        <div class=\"card-header payment-header\">\r\n            <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\r\n            {{ 'order.refund' | translate }} #{{ refund.id }}\r\n            <div class=\"clr-flex-fill\"></div>\r\n            <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\r\n        </div>\r\n        <div class=\"card-block\">\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ refund.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\r\n                {{ refund.total | localeCurrency: currencyCode }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\r\n                {{ refund.transactionId }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\r\n                {{ refund.reason }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-metadata' | translate\" *ngIf=\"refundHasMetadata(refund)\">\r\n                <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n            </vdr-labeled-data>\r\n        </div>\r\n        <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\r\n                {{ 'order.settle-refund' | translate }}\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            *ngIf=\"payment.nextStates.includes('Settled')\"\r\n            (click)=\"settlePayment.emit(payment)\"\r\n        >\r\n            {{ 'order.settle-payment' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{\r\n                                'order.transition-to-state'\r\n                                    | translate: { state: (nextState | stateI18nToken | translate) }\r\n                            }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-payment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-payment-card',\r\n    templateUrl: './order-payment-card.component.html',\r\n    styleUrls: ['./order-payment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderPaymentCardComponent {\r\n    @Input() payment: OrderDetail.Payments;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() settlePayment = new EventEmitter<OrderDetail.Payments>();\r\n    @Output() transitionPaymentState = new EventEmitter<{ payment: OrderDetail.Payments; state: string }>();\r\n    @Output() settleRefund = new EventEmitter<OrderDetail.Refunds>();\r\n\r\n    refundHasMetadata(refund?: OrderDetail.Refunds): boolean {\r\n        return !!refund && Object.keys(refund.metadata).length > 0;\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.payment) {\r\n            return [];\r\n        }\r\n        return this.payment.nextStates.filter(s => s !== 'Settled');\r\n    }\r\n}\r\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\">\r\n                <button\r\n                    class=\"icon-button\"\r\n                    (click)=\"openStateDiagram()\"\r\n                    [title]=\"'order.order-state-diagram' | translate\"\r\n                >\r\n                    <clr-icon shape=\"list\"></clr-icon>\r\n                </button>\r\n            </vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"\r\n                (order.state === 'ArrangingPayment' || order.state === 'ArrangingAdditionalPayment') &&\r\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\r\n            \"\r\n            (click)=\"addManualPayment(order)\"\r\n        >\r\n            {{ 'order.add-payment-to-order' | translate }}\r\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\r\n        </button>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"\r\n                order.active === false &&\r\n                order.state !== 'ArrangingAdditionalPayment' &&\r\n                0 < outstandingPaymentAmount(order)\r\n            \"\r\n            (click)=\"transitionToState('ArrangingAdditionalPayment')\"\r\n        >\r\n            {{ 'order.arrange-additional-payment' | translate }}\r\n        </button>\r\n        <button class=\"btn btn-primary\" (click)=\"fulfillOrder()\" [disabled]=\"!canAddFulfillment(order)\">\r\n            {{ 'order.fulfill-order' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngIf=\"order.nextStates.includes('Modifying')\">\r\n                    <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"transitionToModifying()\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'order.modify-order' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                </ng-container>\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"btn\"\r\n                    vdrDropdownItem\r\n                    *ngIf=\"order.nextStates.includes('Cancelled')\"\r\n                    (click)=\"cancelOrRefund(order)\"\r\n                >\r\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\r\n                        {{ 'order.refund-and-cancel-order' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #cancelOnly>\r\n                        {{ 'order.cancel-order' | translate }}\r\n                    </ng-template>\r\n                </button>\r\n\r\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        *ngFor=\"let nextState of nextStates$ | async\"\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionToState(nextState)\"\r\n                    >\r\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                        {{\r\n                            'order.transition-to-state'\r\n                                | translate: { state: (nextState | stateI18nToken | translate) }\r\n                        }}\r\n                    </button>\r\n                </ng-container>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\r\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\r\n                    {{ 'order.manually-transition-to-state' | translate }}\r\n                </button>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n            ></vdr-order-table>\r\n            <h4>{{ 'order.tax-summary' | translate }}</h4>\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{{ 'common.description' | translate }}</th>\r\n                        <th>{{ 'order.tax-rate' | translate }}</th>\r\n                        <th>{{ 'order.tax-base' | translate }}</th>\r\n                        <th>{{ 'order.tax-total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let row of order.taxSummary\">\r\n                        <td>{{ row.description }}</td>\r\n                        <td>{{ row.taxRate / 100 | percent }}</td>\r\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\r\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"order-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n\r\n            <vdr-order-history\r\n                [order]=\"order\"\r\n                [history]=\"history$ | async\"\r\n                (addNote)=\"addNote($event)\"\r\n                (updateNote)=\"updateNote($event)\"\r\n                (deleteNote)=\"deleteNote($event)\"\r\n            ></vdr-order-history>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <vdr-order-custom-fields-card\r\n                [customFieldsConfig]=\"customFields\"\r\n                [customFieldValues]=\"order.customFields\"\r\n                (updateClick)=\"updateCustomFields($event)\"\r\n            ></vdr-order-custom-fields-card>\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.customer' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card-text\">\r\n                        <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.shippingAddress).length\">\r\n                            {{ 'order.shipping-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.billingAddress).length\">\r\n                            {{ 'order.billing-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.billingAddress\"></vdr-formatted-address>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ng-container *ngIf=\"order.payments && order.payments.length\">\r\n                <vdr-order-payment-card\r\n                    *ngFor=\"let payment of order.payments\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [payment]=\"payment\"\r\n                    (settlePayment)=\"settlePayment($event)\"\r\n                    (transitionPaymentState)=\"transitionPaymentState($event)\"\r\n                    (settleRefund)=\"settleRefund($event)\"\r\n                ></vdr-order-payment-card>\r\n            </ng-container>\r\n            <ng-container *ngFor=\"let fulfillment of order.fulfillments\">\r\n                <vdr-fulfillment-card\r\n                    [fulfillment]=\"fulfillment\"\r\n                    [order]=\"order\"\r\n                    (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\r\n                ></vdr-fulfillment-card>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CancelOrder,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    EditNoteDialogComponent,\r\n    GetOrderHistory,\r\n    GetOrderQuery,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    ModalService,\r\n    NotificationService,\r\n    Order,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    OrderLineFragment,\r\n    Refund,\r\n    RefundOrder,\r\n    ServerConfigService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { assertNever, summate } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, merge, Observable, of, Subject } from 'rxjs';\r\nimport { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';\r\nimport { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';\r\nimport { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';\r\nimport { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';\r\nimport { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';\r\nimport { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-detail',\r\n    templateUrl: './order-detail.component.html',\r\n    styleUrls: ['./order-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderDetailComponent\r\n    extends BaseDetailComponent<OrderDetail.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    detailForm = new FormGroup({});\r\n    history$: Observable<GetOrderHistory.Items[] | undefined>;\r\n    nextStates$: Observable<string[]>;\r\n    fetchHistory = new Subject<void>();\r\n    customFields: CustomFieldConfig[];\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    private readonly defaultStates = [\r\n        'AddingItems',\r\n        'ArrangingPayment',\r\n        'PaymentAuthorized',\r\n        'PaymentSettled',\r\n        'PartiallyShipped',\r\n        'Shipped',\r\n        'PartiallyDelivered',\r\n        'Delivered',\r\n        'Cancelled',\r\n        'Modifying',\r\n        'ArrangingAdditionalPayment',\r\n    ];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.entity$.pipe(take(1)).subscribe(order => {\r\n            if (order.state === 'Modifying') {\r\n                this.router.navigate(['./', 'modify'], { relativeTo: this.route });\r\n            }\r\n        });\r\n        this.customFields = this.getCustomFieldConfig('Order');\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.history$ = this.fetchHistory.pipe(\r\n            startWith(null),\r\n            switchMap(() => {\r\n                return this.dataService.order\r\n                    .getOrderHistory(this.id, {\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    })\r\n                    .mapStream(data => data.order?.history.items);\r\n            }),\r\n        );\r\n        this.nextStates$ = this.entity$.pipe(\r\n            map(order => {\r\n                const isInCustomState = !this.defaultStates.includes(order.state);\r\n                return isInCustomState\r\n                    ? order.nextStates\r\n                    : order.nextStates.filter(s => !this.defaultStates.includes(s));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    openStateDiagram() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order =>\r\n                    this.modalService.fromComponent(OrderProcessGraphDialogComponent, {\r\n                        closable: true,\r\n                        locals: {\r\n                            activeState: order.state,\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToState(state: string) {\r\n        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {\r\n            switch (transitionOrderToState?.__typename) {\r\n                case 'Order':\r\n                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                    this.notificationService.error(transitionOrderToState.transitionError);\r\n            }\r\n        });\r\n    }\r\n\r\n    manuallyTransitionToState(order: OrderDetailFragment) {\r\n        this.orderTransitionService\r\n            .manuallyTransitionToState({\r\n                orderId: order.id,\r\n                nextStates: order.nextStates,\r\n                cancellable: true,\r\n                message: _('order.manually-transition-to-state-message'),\r\n                retry: 0,\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToModifying() {\r\n        this.dataService.order\r\n            .transitionToState(this.id, 'Modifying')\r\n            .subscribe(({ transitionOrderToState }) => {\r\n                switch (transitionOrderToState?.__typename) {\r\n                    case 'Order':\r\n                        this.router.navigate(['./modify'], { relativeTo: this.route });\r\n                        break;\r\n                    case 'OrderStateTransitionError':\r\n                        this.notificationService.error(transitionOrderToState.transitionError);\r\n                }\r\n            });\r\n    }\r\n\r\n    updateCustomFields(customFieldsValue: any) {\r\n        this.dataService.order\r\n            .updateOrderCustomFields({\r\n                id: this.id,\r\n                customFields: customFieldsValue,\r\n            })\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });\r\n            });\r\n    }\r\n\r\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\r\n        if (!orderAddress) {\r\n            return [];\r\n        }\r\n        return Object.values(orderAddress)\r\n            .filter(val => val !== 'OrderAddress')\r\n            .filter(line => !!line);\r\n    }\r\n\r\n    settlePayment(payment: OrderDetail.Payments) {\r\n        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {\r\n            switch (settlePayment.__typename) {\r\n                case 'Payment':\r\n                    if (settlePayment.state === 'Settled') {\r\n                        this.notificationService.success(_('order.settle-payment-success'));\r\n                    } else {\r\n                        this.notificationService.error(_('order.settle-payment-error'));\r\n                    }\r\n                    this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                case 'PaymentStateTransitionError':\r\n                case 'SettlePaymentError':\r\n                    this.notificationService.error(settlePayment.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    transitionPaymentState({ payment, state }: { payment: OrderDetail.Payments; state: string }) {\r\n        this.dataService.order\r\n            .transitionPaymentToState(payment.id, state)\r\n            .subscribe(({ transitionPaymentToState }) => {\r\n                switch (transitionPaymentToState.__typename) {\r\n                    case 'Payment':\r\n                        this.notificationService.success(_('order.transitioned-payment-to-state-success'), {\r\n                            state,\r\n                        });\r\n                        this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                        this.fetchHistory.next();\r\n                        break;\r\n                    case 'PaymentStateTransitionError':\r\n                        this.notificationService.error(transitionPaymentToState.message);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    canAddFulfillment(order: OrderDetail.Fragment): boolean {\r\n        const allItemsFulfilled = order.lines\r\n            .reduce((items, line) => [...items, ...line.items], [] as OrderLineFragment['items'])\r\n            .every(item => !!item.fulfillment || item.cancelled);\r\n        return (\r\n            !allItemsFulfilled &&\r\n            !this.hasUnsettledModifications(order) &&\r\n            this.outstandingPaymentAmount(order) === 0 &&\r\n            (order.nextStates.includes('Shipped') ||\r\n                order.nextStates.includes('PartiallyShipped') ||\r\n                order.nextStates.includes('Delivered'))\r\n        );\r\n    }\r\n\r\n    hasUnsettledModifications(order: OrderDetailFragment): boolean {\r\n        return 0 < order.modifications.filter(m => !m.isSettled).length;\r\n    }\r\n\r\n    getOutstandingModificationAmount(order: OrderDetailFragment): number {\r\n        return summate(\r\n            order.modifications.filter(m => !m.isSettled),\r\n            'priceChange',\r\n        );\r\n    }\r\n\r\n    outstandingPaymentAmount(order: OrderDetailFragment): number {\r\n        const paymentIsValid = (p: OrderDetail.Payments): boolean =>\r\n            p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';\r\n\r\n        let amountCovered = 0;\r\n        for (const payment of order.payments?.filter(paymentIsValid) ?? []) {\r\n            const refunds = payment.refunds.filter(r => r.state !== 'Failed') ?? [];\r\n            const refundsTotal = summate(refunds as Array<Required<Refund>>, 'total');\r\n            amountCovered += payment.amount - refundsTotal;\r\n        }\r\n        return order.totalWithTax - amountCovered;\r\n    }\r\n\r\n    addManualPayment(order: OrderDetailFragment) {\r\n        const priorState = order.state;\r\n        this.modalService\r\n            .fromComponent(AddManualPaymentDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    outstandingAmount: this.outstandingPaymentAmount(order),\r\n                    currencyCode: order.currencyCode,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.addManualPaymentToOrder({\r\n                            orderId: this.id,\r\n                            transactionId: result.transactionId,\r\n                            method: result.method,\r\n                            metadata: result.metadata || {},\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n                switchMap(({ addManualPaymentToOrder }) => {\r\n                    switch (addManualPaymentToOrder.__typename) {\r\n                        case 'Order':\r\n                            this.notificationService.success(_('order.add-payment-to-order-success'));\r\n                            if (priorState === 'ArrangingAdditionalPayment') {\r\n                                return this.orderTransitionService.transitionToPreModifyingState(\r\n                                    order.id,\r\n                                    order.nextStates,\r\n                                );\r\n                            } else {\r\n                                return this.dataService.order\r\n                                    .transitionToState(this.id, 'PaymentSettled')\r\n                                    .pipe(mapTo('PaymentSettled'));\r\n                            }\r\n                        case 'ManualPaymentStateError':\r\n                            this.notificationService.error(addManualPaymentToOrder.message);\r\n                            return EMPTY;\r\n                        default:\r\n                            return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.refetchOrder({ result });\r\n                }\r\n            });\r\n    }\r\n\r\n    fulfillOrder() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order => {\r\n                    return this.modalService.fromComponent(FulfillOrderDialogComponent, {\r\n                        size: 'xl',\r\n                        locals: {\r\n                            order,\r\n                        },\r\n                    });\r\n                }),\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.createFulfillment(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result).pipe(mapTo(result))),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    const { addFulfillmentToOrder } = result;\r\n                    switch (addFulfillmentToOrder.__typename) {\r\n                        case 'Fulfillment':\r\n                            this.notificationService.success(_('order.create-fulfillment-success'));\r\n                            break;\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'InsufficientStockOnHandError':\r\n                        case 'ItemsAlreadyFulfilledError':\r\n                        case 'InvalidFulfillmentHandlerError':\r\n                            this.notificationService.error(addFulfillmentToOrder.message);\r\n                            break;\r\n                        case 'FulfillmentStateTransitionError':\r\n                            this.notificationService.error(addFulfillmentToOrder.transitionError);\r\n                            break;\r\n                        case 'CreateFulfillmentError':\r\n                            this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);\r\n                            break;\r\n                        case undefined:\r\n                            this.notificationService.error(JSON.stringify(addFulfillmentToOrder));\r\n                            break;\r\n                        default:\r\n                            assertNever(addFulfillmentToOrder);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    transitionFulfillment(id: string, state: string) {\r\n        this.dataService.order\r\n            .transitionFulfillmentToState(id, state)\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('order.successfully-updated-fulfillment'));\r\n            });\r\n    }\r\n\r\n    cancelOrRefund(order: OrderDetail.Fragment) {\r\n        const isRefundable = this.orderHasSettledPayments(order);\r\n        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {\r\n            this.cancelOrder(order);\r\n        } else {\r\n            this.refundOrder(order);\r\n        }\r\n    }\r\n\r\n    settleRefund(refund: OrderDetail.Refunds) {\r\n        this.modalService\r\n            .fromComponent(SettleRefundDialogComponent, {\r\n                size: 'md',\r\n                locals: {\r\n                    refund,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(transactionId => {\r\n                    if (transactionId) {\r\n                        return this.dataService.order.settleRefund(\r\n                            {\r\n                                transactionId,\r\n                                id: refund.id,\r\n                            },\r\n                            this.id,\r\n                        );\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                // switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.settle-refund-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    addNote(event: { note: string; isPublic: boolean }) {\r\n        const { note, isPublic } = event;\r\n        this.dataService.order\r\n            .addNoteToOrder({\r\n                id: this.id,\r\n                note,\r\n                isPublic,\r\n            })\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(result => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    updateNote(entry: HistoryEntry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    displayPrivacyControls: true,\r\n                    note: entry.data.note,\r\n                    noteIsPrivate: !entry.isPublic,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.updateOrderNote({\r\n                            noteId: entry.id,\r\n                            isPublic: !result.isPrivate,\r\n                            note: result.note,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-update-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    deleteNote(entry: HistoryEntry) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('common.confirm-delete-note'),\r\n                body: entry.data.note,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    orderHasSettledPayments(order: OrderDetail.Fragment): boolean {\r\n        return !!order.payments?.find(p => p.state === 'Settled');\r\n    }\r\n\r\n    private cancelOrder(order: OrderDetail.Fragment) {\r\n        this.modalService\r\n            .fromComponent(CancelOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.cancelOrder(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.cancelled-order-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    private refundOrder(order: OrderDetail.Fragment) {\r\n        this.modalService\r\n            .fromComponent(RefundOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (!input) {\r\n                        return of(undefined);\r\n                    }\r\n\r\n                    const operations: Array<Observable<RefundOrder.RefundOrder | CancelOrder.CancelOrder>> =\r\n                        [];\r\n                    if (input.refund.lines.length) {\r\n                        operations.push(\r\n                            this.dataService.order\r\n                                .refundOrder(input.refund)\r\n                                .pipe(map(res => res.refundOrder)),\r\n                        );\r\n                    }\r\n                    if (input.cancel.lines?.length) {\r\n                        operations.push(\r\n                            this.dataService.order\r\n                                .cancelOrder(input.cancel)\r\n                                .pipe(map(res => res.cancelOrder)),\r\n                        );\r\n                    }\r\n                    return merge(...operations);\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    switch (result.__typename) {\r\n                        case 'Order':\r\n                            this.refetchOrder(result).subscribe();\r\n                            this.notificationService.success(_('order.cancelled-order-success'));\r\n                            break;\r\n                        case 'Refund':\r\n                            this.refetchOrder(result).subscribe();\r\n                            if (result.state === 'Failed') {\r\n                                this.notificationService.error(_('order.refund-order-failed'));\r\n                            } else {\r\n                                this.notificationService.success(_('order.refund-order-success'));\r\n                            }\r\n                            break;\r\n                        case 'QuantityTooGreatError':\r\n                        case 'MultipleOrderError':\r\n                        case 'OrderStateTransitionError':\r\n                        case 'CancelActiveOrderError':\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'AlreadyRefundedError':\r\n                        case 'NothingToRefundError':\r\n                        case 'PaymentOrderMismatchError':\r\n                        case 'RefundOrderStateError':\r\n                        case 'RefundStateTransitionError':\r\n                            this.notificationService.error(result.message);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private refetchOrder(result: object | undefined): Observable<GetOrderQuery | undefined> {\r\n        this.fetchHistory.next();\r\n        if (result) {\r\n            return this.dataService.order.getOrder(this.id).single$;\r\n        } else {\r\n            return of(undefined);\r\n        }\r\n    }\r\n\r\n    protected setFormValues(entity: Order.Fragment): void {\r\n        // empty\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { CustomFieldConfig, Dialog, ModifyOrderInput, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\nexport enum OrderEditResultType {\r\n    Refund,\r\n    Payment,\r\n    PriceUnchanged,\r\n    Cancel,\r\n}\r\n\r\ninterface OrderEditsRefundResult {\r\n    result: OrderEditResultType.Refund;\r\n    refundPaymentId: string;\r\n    refundNote?: string;\r\n}\r\ninterface OrderEditsPaymentResult {\r\n    result: OrderEditResultType.Payment;\r\n}\r\ninterface OrderEditsPriceUnchangedResult {\r\n    result: OrderEditResultType.PriceUnchanged;\r\n}\r\ninterface OrderEditsCancelResult {\r\n    result: OrderEditResultType.Cancel;\r\n}\r\ntype OrderEditResult =\r\n    | OrderEditsRefundResult\r\n    | OrderEditsPaymentResult\r\n    | OrderEditsPriceUnchangedResult\r\n    | OrderEditsCancelResult;\r\n\r\n@Component({\r\n    selector: 'vdr-order-edits-preview-dialog',\r\n    templateUrl: './order-edits-preview-dialog.component.html',\r\n    styleUrls: ['./order-edits-preview-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditsPreviewDialogComponent implements OnInit, Dialog<OrderEditResult> {\r\n    // Passed in via the modalService\r\n    order: OrderDetail.Fragment;\r\n    originalTotalWithTax: number;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    modifyOrderInput: ModifyOrderInput;\r\n\r\n    selectedPayment?: OrderDetail.Payments;\r\n    refundNote: string;\r\n    resolveWith: (result?: OrderEditResult) => void;\r\n\r\n    get priceDifference(): number {\r\n        return this.order.totalWithTax - this.originalTotalWithTax;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.refundNote = this.modifyOrderInput.note || '';\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith({\r\n            result: OrderEditResultType.Cancel,\r\n        });\r\n    }\r\n\r\n    submit() {\r\n        if (0 < this.priceDifference) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Payment,\r\n            });\r\n        } else if (this.priceDifference < 0) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Refund,\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                refundPaymentId: this.selectedPayment!.id,\r\n                refundNote: this.refundNote,\r\n            });\r\n        } else {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.PriceUnchanged,\r\n            });\r\n        }\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\r\n\r\n<h4 class=\"h4\">\r\n    {{ 'order.modify-order-price-difference' | translate }}:\r\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\r\n</h4>\r\n<div *ngIf=\"priceDifference < 0\">\r\n<clr-select-container>\r\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\r\n        <option\r\n            *ngFor=\"let payment of order.payments\"\r\n            [ngValue]=\"payment\"\r\n        >\r\n            #{{ payment.id }} {{ payment.method }}:\r\n            {{ payment.amount | localeCurrency: order.currencyCode }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\r\n            {{ 'order.cancel-modification' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <table class=\"order-table table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>{{ 'order.product-name' | translate }}</th>\r\n                        <th>{{ 'order.product-sku' | translate }}</th>\r\n                        <th>{{ 'order.unit-price' | translate }}</th>\r\n                        <th>{{ 'order.quantity' | translate }}</th>\r\n                        <th *ngIf=\"orderLineCustomFields.length\">{{ 'common.custom-fields' | translate }}</th>\r\n                        <th>{{ 'order.total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr\r\n                        *ngFor=\"let line of order.lines; let i = index\"\r\n                        class=\"order-line\"\r\n                        [class.is-cancelled]=\"line.quantity === 0\"\r\n                        [class.modified]=\"isLineModified(line)\"\r\n                    >\r\n                        <td class=\"align-middle thumb\">\r\n                            <img\r\n                                *ngIf=\"line.featuredAsset\"\r\n                                [src]=\"line.featuredAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                        <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                        <td class=\"align-middle unit-price\">\r\n                            {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.unitPrice | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"align-middle quantity\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                [value]=\"line.quantity\"\r\n                                (input)=\"updateLineQuantity(line, $event.target.value)\"\r\n                            />\r\n                            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                            <vdr-line-fulfillment\r\n                                [line]=\"line\"\r\n                                [orderState]=\"order.state\"\r\n                            ></vdr-line-fulfillment>\r\n                        </td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\r\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                                <vdr-custom-field-control\r\n                                    [customField]=\"customField\"\r\n                                    [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.get([i])\"\r\n                                    entityName=\"OrderLine\"\r\n                                    [compact]=\"true\"\r\n                                ></vdr-custom-field-control>\r\n                            </ng-container>\r\n                        </td>\r\n                        <td class=\"align-middle total\">\r\n                            {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.linePrice | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr\r\n                        *ngFor=\"let addedLine of addedLines; trackBy: trackByProductVariantId; let i = index\"\r\n                        class=\"modified\"\r\n                    >\r\n                        <td class=\"align-middle thumb\">\r\n                            <img\r\n                                *ngIf=\"addedLine.productAsset\"\r\n                                [src]=\"addedLine.productAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"align-middle name\">{{ addedLine.productVariantName }}</td>\r\n                        <td class=\"align-middle sku\">{{ addedLine.sku }}</td>\r\n                        <td class=\"align-middle unit-price\">\r\n                            {{ addedLine.priceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ addedLine.price | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"align-middle quantity\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                [value]=\"addedLine.quantity\"\r\n                                (input)=\"updateAddedItemQuantity(addedLine, $event.target.value)\"\r\n                            />\r\n                            <button class=\"icon-button\" (click)=\"removeAddedItem(i)\">\r\n                                <clr-icon shape=\"trash\"></clr-icon>\r\n                            </button>\r\n                        </td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\r\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                                <vdr-custom-field-control\r\n                                    [customField]=\"customField\"\r\n                                    [customFieldsFormGroup]=\"addItemCustomFieldsFormArray.get([i])\"\r\n                                    entityName=\"OrderLine\"\r\n                                    [compact]=\"true\"\r\n                                ></vdr-custom-field-control>\r\n                            </ng-container>\r\n                        </td>\r\n                        <td class=\"align-middle total\">\r\n                            {{\r\n                                (addedLine.priceWithTax * addedLine.quantity) / 100\r\n                                    | currency: order.currencyCode\r\n                            }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{\r\n                                    (addedLine.price * addedLine.quantity) / 100\r\n                                        | currency: order.currencyCode\r\n                                }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n                        <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                        <td class=\"align-middle\"></td>\r\n                        <td></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"align-middle total\">\r\n                            {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ surcharge.price | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr\r\n                        class=\"surcharge modified\"\r\n                        *ngFor=\"let surcharge of modifyOrderInput.surcharges; let i = index\"\r\n                    >\r\n                        <td class=\"align-middle name left\" colspan=\"2\">\r\n                            {{ surcharge.description }}\r\n                            <button class=\"icon-button\" (click)=\"removeSurcharge(i)\">\r\n                                <clr-icon shape=\"trash\"></clr-icon>\r\n                            </button>\r\n                        </td>\r\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                        <td class=\"align-middle\"></td>\r\n                        <td></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"align-middle total\">\r\n                            <ng-container *ngIf=\"getSurchargePrices(surcharge) as surchargePrice\">\r\n                                {{ surchargePrice.priceWithTax | localeCurrency: order.currencyCode }}\r\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                    {{ surchargePrice.price | localeCurrency: order.currencyCode }}\r\n                                </div>\r\n                            </ng-container>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"shipping\">\r\n                        <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\r\n                        <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\r\n                        <td colspan=\"3\"></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"clr-align-middle\">\r\n                            {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ order.shipping | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <h4 class=\"mb2\">{{ 'order.modifications' | translate }}</h4>\r\n            <clr-accordion>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.add-item-to-order' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-product-selector class=\"mb4\" (productSelected)=\"addItemSelectedVariant = $event\">\r\n                        </vdr-product-selector>\r\n                        <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb4\">\r\n                            <img\r\n                                *ngIf=\"addItemSelectedVariant.productAsset as asset\"\r\n                                [src]=\"asset | assetPreview: 'tiny'\"\r\n                                class=\"mr4\"\r\n                            />\r\n                            <div>\r\n                                <strong class=\"mr4\">{{ addItemSelectedVariant.productVariantName }}</strong>\r\n                                <small>{{ addItemSelectedVariant.sku }}</small>\r\n                                <div>\r\n                                    {{\r\n                                        getSelectedItemPrice(addItemSelectedVariant)\r\n                                            | localeCurrency: order.currencyCode\r\n                                    }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                            <vdr-custom-field-control\r\n                                [readonly]=\"!addItemSelectedVariant\"\r\n                                [customField]=\"customField\"\r\n                                [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\r\n                                entityName=\"OrderLine\"\r\n                                [compact]=\"true\"\r\n                            ></vdr-custom-field-control>\r\n                        </ng-container>\r\n                        <button\r\n                            class=\"btn btn-secondary\"\r\n                            [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\r\n                            (click)=\"addItemToOrder(addItemSelectedVariant)\"\r\n                        >\r\n                            {{ 'order.add-item-to-order' | translate }}\r\n                        </button>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.set-coupon-codes' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <ng-select\r\n                            [items]=\"availableCouponCodes$ | async\"\r\n                            appendTo=\"body\"\r\n                            bindLabel=\"code\"\r\n                            bindValue=\"code\"\r\n                            [addTag]=\"false\"\r\n                            [multiple]=\"true\"\r\n                            [hideSelected]=\"true\"\r\n                            [minTermLength]=\"2\"\r\n                            typeToSearchText=\"\"\r\n                            [typeahead]=\"couponCodeInput$\"\r\n                            [formControl]=\"couponCodesControl\"\r\n                        >\r\n                            <ng-template ng-option-tmp let-item=\"item\">\r\n                                <vdr-chip>{{ item.code }}</vdr-chip> {{ item.promotionName }}\r\n                            </ng-template>\r\n                        </ng-select>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.add-surcharge' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\r\n                            <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\r\n                                ><input id=\"description\" type=\"text\" formControlName=\"description\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\r\n                                ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\"\r\n                                ><vdr-currency-input\r\n                                    [currencyCode]=\"order.currencyCode\"\r\n                                    id=\"price\"\r\n                                    formControlName=\"price\"\r\n                                ></vdr-currency-input\r\n                            ></vdr-form-field>\r\n                            <vdr-form-field\r\n                                [label]=\"\r\n                                    'catalog.price-includes-tax-at'\r\n                                        | translate: { rate: surchargeForm.get('taxRate')?.value }\r\n                                \"\r\n                                for=\"priceIncludesTax\"\r\n                                ><input\r\n                                    id=\"priceIncludesTax\"\r\n                                    type=\"checkbox\"\r\n                                    clrCheckbox\r\n                                    formControlName=\"priceIncludesTax\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\"\r\n                                ><vdr-affixed-input suffix=\"%\"\r\n                                    ><input\r\n                                        id=\"taxRate\"\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        max=\"100\"\r\n                                        formControlName=\"taxRate\" /></vdr-affixed-input\r\n                            ></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\r\n                                ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\r\n                            /></vdr-form-field>\r\n                            <button\r\n                                class=\"btn btn-secondary\"\r\n                                [disabled]=\"\r\n                                    surchargeForm.invalid ||\r\n                                    surchargeForm.pristine ||\r\n                                    surchargeForm.get('price')?.value === 0\r\n                                \"\r\n                            >\r\n                                {{ 'order.add-surcharge' | translate }}\r\n                            </button>\r\n                        </form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.edit-shipping-address' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-address-form\r\n                            [formGroup]=\"shippingAddressForm\"\r\n                            [availableCountries]=\"availableCountries$ | async\"\r\n                            [customFields]=\"addressCustomFields\"\r\n                        ></vdr-address-form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.edit-billing-address' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-address-form\r\n                            [formGroup]=\"billingAddressForm\"\r\n                            [availableCountries]=\"availableCountries$ | async\"\r\n                            [customFields]=\"addressCustomFields\"\r\n                        ></vdr-address-form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n            </clr-accordion>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.modification-summary' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <ul>\r\n                        <li *ngIf=\"modifyOrderInput.addItems?.length\">\r\n                            {{\r\n                                'order.modification-adding-items'\r\n                                    | translate: { count: modifyOrderInput.addItems?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"modifyOrderInput.adjustOrderLines?.length\">\r\n                            {{\r\n                                'order.modification-adjusting-lines'\r\n                                    | translate: { count: modifyOrderInput.adjustOrderLines?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"modifyOrderInput.surcharges?.length\">\r\n                            {{\r\n                                'order.modification-adding-surcharges'\r\n                                    | translate: { count: modifyOrderInput.surcharges?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"shippingAddressForm.dirty\">\r\n                            {{ 'order.modification-updating-shipping-address' | translate }}\r\n                        </li>\r\n                        <li *ngIf=\"billingAddressForm.dirty\">\r\n                            {{ 'order.modification-updating-billing-address' | translate }}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <label class=\"clr-control-label\">{{ 'order.note' | translate }}</label>\r\n                    <textarea [(ngModel)]=\"note\" name=\"note\" clrTextarea required></textarea>\r\n                    <clr-checkbox-wrapper class=\"\">\r\n                        <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"recalculateShipping\" />\r\n                        <label>{{ 'order.modification-recalculate-shipping' | translate }}</label>\r\n                    </clr-checkbox-wrapper>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                    <button\r\n                        class=\"btn btn-primary\"\r\n                        [disabled]=\"!canPreviewChanges()\"\r\n                        (click)=\"previewAndModify(order)\"\r\n                    >\r\n                        {{ 'order.preview-changes' | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    AddItemInput,\r\n    AdjustOrderLineInput,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    ErrorResult,\r\n    GetAvailableCountries,\r\n    HistoryEntryType,\r\n    LanguageCode,\r\n    ModalService,\r\n    ModifyOrderInput,\r\n    NotificationService,\r\n    OrderAddressFragment,\r\n    OrderDetail,\r\n    ProductSelectorSearch,\r\n    ServerConfigService,\r\n    SortOrder,\r\n    SurchargeInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { concat, EMPTY, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    distinctUntilChanged,\r\n    map,\r\n    mapTo,\r\n    shareReplay,\r\n    startWith,\r\n    switchMap,\r\n    takeUntil,\r\n} from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport {\r\n    OrderEditResultType,\r\n    OrderEditsPreviewDialogComponent,\r\n} from '../order-edits-preview-dialog/order-edits-preview-dialog.component';\r\n\r\ninterface AddedLine {\r\n    productVariantId: string;\r\n    productAsset?: ProductSelectorSearch.ProductAsset | null;\r\n    productVariantName: string;\r\n    sku: string;\r\n    priceWithTax: number;\r\n    price: number;\r\n    quantity: number;\r\n}\r\n\r\ntype ModifyOrderData = Omit<ModifyOrderInput, 'addItems' | 'adjustOrderLines'> & {\r\n    addItems: Array<AddItemInput & { customFields?: any }>;\r\n    adjustOrderLines: Array<AdjustOrderLineInput & { customFields?: any }>;\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-order-editor',\r\n    templateUrl: './order-editor.component.html',\r\n    styleUrls: ['./order-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditorComponent\r\n    extends BaseDetailComponent<OrderDetail.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    availableCouponCodes$: Observable<Array<{ code: string; promotionName: string }>>;\r\n    couponCodeInput$ = new Subject<string>();\r\n    addressCustomFields: CustomFieldConfig[];\r\n    detailForm = new FormGroup({});\r\n    couponCodesControl = new FormControl();\r\n    orderLineCustomFieldsFormArray: FormArray;\r\n    addItemCustomFieldsFormArray: FormArray;\r\n    addItemCustomFieldsForm: FormGroup;\r\n    addItemSelectedVariant: ProductSelectorSearch.Items | undefined;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    modifyOrderInput: ModifyOrderData = {\r\n        dryRun: true,\r\n        orderId: '',\r\n        addItems: [],\r\n        adjustOrderLines: [],\r\n        surcharges: [],\r\n        note: '',\r\n        updateShippingAddress: {},\r\n        updateBillingAddress: {},\r\n    };\r\n    surchargeForm: FormGroup;\r\n    shippingAddressForm: FormGroup;\r\n    billingAddressForm: FormGroup;\r\n    note = '';\r\n    recalculateShipping = true;\r\n    previousState: string;\r\n    private addedVariants = new Map<string, ProductSelectorSearch.Items>();\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n    }\r\n\r\n    get addedLines(): AddedLine[] {\r\n        const getSinglePriceValue = (price: ProductSelectorSearch.Price) =>\r\n            price.__typename === 'SinglePrice' ? price.value : 0;\r\n        return (this.modifyOrderInput.addItems || [])\r\n            .map(row => {\r\n                const variantInfo = this.addedVariants.get(row.productVariantId);\r\n                if (variantInfo) {\r\n                    return {\r\n                        ...variantInfo,\r\n                        price: getSinglePriceValue(variantInfo.price),\r\n                        priceWithTax: getSinglePriceValue(variantInfo.priceWithTax),\r\n                        quantity: row.quantity,\r\n                    };\r\n                }\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.dataService.promotion.getPromotions();\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id') as string;\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.entity$.pipe(takeUntil(this.destroy$)).subscribe(order => {\r\n            if (order.couponCodes.length) {\r\n                this.couponCodesControl.setValue(order.couponCodes);\r\n            }\r\n            this.surchargeForm = new FormGroup({\r\n                description: new FormControl('', Validators.required),\r\n                sku: new FormControl(''),\r\n                price: new FormControl(0, Validators.required),\r\n                priceIncludesTax: new FormControl(true),\r\n                taxRate: new FormControl(0),\r\n                taxDescription: new FormControl(''),\r\n            });\r\n            if (!this.shippingAddressForm) {\r\n                this.shippingAddressForm = new FormGroup({\r\n                    fullName: new FormControl(order.shippingAddress?.fullName),\r\n                    company: new FormControl(order.shippingAddress?.company),\r\n                    streetLine1: new FormControl(order.shippingAddress?.streetLine1),\r\n                    streetLine2: new FormControl(order.shippingAddress?.streetLine2),\r\n                    city: new FormControl(order.shippingAddress?.city),\r\n                    province: new FormControl(order.shippingAddress?.province),\r\n                    postalCode: new FormControl(order.shippingAddress?.postalCode),\r\n                    countryCode: new FormControl(order.shippingAddress?.countryCode),\r\n                    phoneNumber: new FormControl(order.shippingAddress?.phoneNumber),\r\n                });\r\n                this.addAddressCustomFieldsFormGroup(this.shippingAddressForm, order.shippingAddress);\r\n            }\r\n            if (!this.billingAddressForm) {\r\n                this.billingAddressForm = new FormGroup({\r\n                    fullName: new FormControl(order.billingAddress?.fullName),\r\n                    company: new FormControl(order.billingAddress?.company),\r\n                    streetLine1: new FormControl(order.billingAddress?.streetLine1),\r\n                    streetLine2: new FormControl(order.billingAddress?.streetLine2),\r\n                    city: new FormControl(order.billingAddress?.city),\r\n                    province: new FormControl(order.billingAddress?.province),\r\n                    postalCode: new FormControl(order.billingAddress?.postalCode),\r\n                    countryCode: new FormControl(order.billingAddress?.countryCode),\r\n                    phoneNumber: new FormControl(order.billingAddress?.phoneNumber),\r\n                });\r\n                this.addAddressCustomFieldsFormGroup(this.billingAddressForm, order.billingAddress);\r\n            }\r\n            this.orderLineCustomFieldsFormArray = new FormArray([]);\r\n            for (const line of order.lines) {\r\n                const formGroup = new FormGroup({});\r\n                for (const { name } of this.orderLineCustomFields) {\r\n                    formGroup.addControl(name, new FormControl((line as any).customFields[name]));\r\n                }\r\n                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(\r\n                        l => l.orderLineId === line.id,\r\n                    );\r\n                    if (!modifyRow) {\r\n                        modifyRow = {\r\n                            orderLineId: line.id,\r\n                            quantity: line.quantity,\r\n                        };\r\n                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);\r\n                    }\r\n                    if (this.orderLineCustomFields.length) {\r\n                        modifyRow.customFields = value;\r\n                    }\r\n                });\r\n                this.orderLineCustomFieldsFormArray.push(formGroup);\r\n            }\r\n        });\r\n        this.availableCouponCodes$ = concat(\r\n            this.couponCodeInput$.pipe(\r\n                distinctUntilChanged(),\r\n                switchMap(\r\n                    term =>\r\n                        this.dataService.promotion.getPromotions(10, 0, {\r\n                            couponCode: { contains: term },\r\n                        }).single$,\r\n                ),\r\n                map(({ promotions }) =>\r\n                    // tslint:disable-next-line:no-non-null-assertion\r\n                    promotions.items.map(p => ({ code: p.couponCode!, promotionName: p.name })),\r\n                ),\r\n                startWith([]),\r\n            ),\r\n        );\r\n        this.addItemCustomFieldsFormArray = new FormArray([]);\r\n        this.addItemCustomFieldsForm = new FormGroup({});\r\n        for (const customField of this.orderLineCustomFields) {\r\n            this.addItemCustomFieldsForm.addControl(customField.name, new FormControl());\r\n        }\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n        this.dataService.order\r\n            .getOrderHistory(this.id, {\r\n                take: 1,\r\n                sort: {\r\n                    createdAt: SortOrder.DESC,\r\n                },\r\n                filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },\r\n            })\r\n            .single$.subscribe(({ order }) => {\r\n                this.previousState = order?.history.items[0].data.from;\r\n            });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    transitionToPriorState(order: OrderDetail.Fragment) {\r\n        this.orderTransitionService\r\n            .transitionToPreModifyingState(order.id, order.nextStates)\r\n            .subscribe(result => {\r\n                this.router.navigate(['..'], { relativeTo: this.route });\r\n            });\r\n    }\r\n\r\n    canPreviewChanges(): boolean {\r\n        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;\r\n        return (\r\n            !!addItems?.length ||\r\n            !!surcharges?.length ||\r\n            !!adjustOrderLines?.length ||\r\n            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||\r\n            (this.billingAddressForm.dirty && this.billingAddressForm.valid) ||\r\n            this.couponCodesControl.dirty\r\n        );\r\n    }\r\n\r\n    isLineModified(line: OrderDetail.Lines): boolean {\r\n        return !!this.modifyOrderInput.adjustOrderLines?.find(\r\n            l => l.orderLineId === line.id && l.quantity !== line.quantity,\r\n        );\r\n    }\r\n\r\n    updateLineQuantity(line: OrderDetail.Lines, quantity: string) {\r\n        const { adjustOrderLines } = this.modifyOrderInput;\r\n        let row = adjustOrderLines?.find(l => l.orderLineId === line.id);\r\n        if (row && +quantity === line.quantity) {\r\n            // Remove the modification if the quantity is the same as\r\n            // the original order\r\n            adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);\r\n        }\r\n        if (!row) {\r\n            row = { orderLineId: line.id, quantity: +quantity };\r\n            adjustOrderLines?.push(row);\r\n        }\r\n        row.quantity = +quantity;\r\n    }\r\n\r\n    updateAddedItemQuantity(item: AddedLine, quantity: string) {\r\n        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariantId);\r\n        if (row) {\r\n            row.quantity = +quantity;\r\n        }\r\n    }\r\n\r\n    trackByProductVariantId(index: number, item: AddedLine) {\r\n        return item.productVariantId;\r\n    }\r\n\r\n    getSelectedItemPrice(result: ProductSelectorSearch.Items | undefined): number {\r\n        switch (result?.priceWithTax.__typename) {\r\n            case 'SinglePrice':\r\n                return result.priceWithTax.value;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    addItemToOrder(result: ProductSelectorSearch.Items | undefined) {\r\n        if (!result) {\r\n            return;\r\n        }\r\n        const customFields = this.orderLineCustomFields.length\r\n            ? this.addItemCustomFieldsForm.value\r\n            : undefined;\r\n        let row = this.modifyOrderInput.addItems?.find(l =>\r\n            this.isMatchingAddItemRow(l, result, customFields),\r\n        );\r\n        if (!row) {\r\n            row = { productVariantId: result.productVariantId, quantity: 1 };\r\n            if (customFields) {\r\n                row.customFields = customFields;\r\n            }\r\n            this.modifyOrderInput.addItems?.push(row);\r\n        } else {\r\n            row.quantity++;\r\n        }\r\n        if (customFields) {\r\n            const formGroup = new FormGroup({});\r\n            for (const [key, value] of Object.entries(customFields)) {\r\n                formGroup.addControl(key, new FormControl(value));\r\n            }\r\n            this.addItemCustomFieldsFormArray.push(formGroup);\r\n            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                if (row) {\r\n                    row.customFields = value;\r\n                }\r\n            });\r\n        }\r\n        this.addItemCustomFieldsForm.reset({});\r\n        this.addItemSelectedVariant = undefined;\r\n        this.addedVariants.set(result.productVariantId, result);\r\n    }\r\n\r\n    private isMatchingAddItemRow(\r\n        row: ModifyOrderData['addItems'][number],\r\n        result: ProductSelectorSearch.Items,\r\n        customFields: any,\r\n    ): boolean {\r\n        return (\r\n            row.productVariantId === result.productVariantId &&\r\n            JSON.stringify(row.customFields) === JSON.stringify(customFields)\r\n        );\r\n    }\r\n\r\n    removeAddedItem(index: number) {\r\n        this.modifyOrderInput.addItems.splice(index, 1);\r\n        if (-1 < index) {\r\n            this.addItemCustomFieldsFormArray.removeAt(index);\r\n        }\r\n    }\r\n\r\n    getSurchargePrices(surcharge: SurchargeInput) {\r\n        const priceWithTax = surcharge.priceIncludesTax\r\n            ? surcharge.price\r\n            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));\r\n        const price = surcharge.priceIncludesTax\r\n            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))\r\n            : surcharge.price;\r\n        return {\r\n            price,\r\n            priceWithTax,\r\n        };\r\n    }\r\n\r\n    addSurcharge(value: any) {\r\n        this.modifyOrderInput.surcharges?.push(value);\r\n        this.surchargeForm.reset({\r\n            price: 0,\r\n            priceIncludesTax: true,\r\n            taxRate: 0,\r\n        });\r\n    }\r\n\r\n    removeSurcharge(index: number) {\r\n        this.modifyOrderInput.surcharges?.splice(index, 1);\r\n    }\r\n\r\n    previewAndModify(order: OrderDetail.Fragment) {\r\n        const input: ModifyOrderInput = {\r\n            ...this.modifyOrderInput,\r\n            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),\r\n            ...(this.shippingAddressForm.dirty\r\n                ? { updateShippingAddress: this.shippingAddressForm.value }\r\n                : {}),\r\n            dryRun: true,\r\n            couponCodes: this.couponCodesControl.dirty ? this.couponCodesControl.value : undefined,\r\n            note: this.note ?? '',\r\n            options: {\r\n                recalculateShipping: this.recalculateShipping,\r\n            },\r\n        };\r\n        const originalTotalWithTax = order.totalWithTax;\r\n        this.dataService.order\r\n            .modifyOrder(input)\r\n            .pipe(\r\n                switchMap(({ modifyOrder }) => {\r\n                    switch (modifyOrder.__typename) {\r\n                        case 'Order':\r\n                            return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {\r\n                                size: 'xl',\r\n                                closable: false,\r\n                                locals: {\r\n                                    originalTotalWithTax,\r\n                                    order: modifyOrder,\r\n                                    orderLineCustomFields: this.orderLineCustomFields,\r\n                                    modifyOrderInput: input,\r\n                                },\r\n                            });\r\n                        case 'InsufficientStockError':\r\n                        case 'NegativeQuantityError':\r\n                        case 'NoChangesSpecifiedError':\r\n                        case 'OrderLimitError':\r\n                        case 'OrderModificationStateError':\r\n                        case 'PaymentMethodMissingError':\r\n                        case 'RefundPaymentIdMissingError':\r\n                        case 'CouponCodeLimitError':\r\n                        case 'CouponCodeExpiredError':\r\n                        case 'CouponCodeInvalidError': {\r\n                            this.notificationService.error(modifyOrder.message);\r\n                            return of(false as const);\r\n                        }\r\n                        case null:\r\n                        case undefined:\r\n                            return of(false as const);\r\n                        default:\r\n                            assertNever(modifyOrder);\r\n                    }\r\n                }),\r\n                switchMap(result => {\r\n                    if (!result || result.result === OrderEditResultType.Cancel) {\r\n                        // re-fetch so that the preview values get overwritten in the cache.\r\n                        return this.dataService.order.getOrder(this.id).mapSingle(() => false);\r\n                    } else {\r\n                        // Do the modification\r\n                        const wetRunInput = {\r\n                            ...input,\r\n                            dryRun: false,\r\n                        };\r\n                        if (result.result === OrderEditResultType.Refund) {\r\n                            wetRunInput.refund = {\r\n                                paymentId: result.refundPaymentId,\r\n                                reason: result.refundNote,\r\n                            };\r\n                        }\r\n                        return this.dataService.order.modifyOrder(wetRunInput).pipe(\r\n                            switchMap(({ modifyOrder }) => {\r\n                                if (modifyOrder.__typename === 'Order') {\r\n                                    const priceDelta = modifyOrder.totalWithTax - originalTotalWithTax;\r\n                                    const nextState =\r\n                                        0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;\r\n\r\n                                    return this.dataService.order\r\n                                        .transitionToState(order.id, nextState)\r\n                                        .pipe(mapTo(true));\r\n                                } else {\r\n                                    this.notificationService.error((modifyOrder as ErrorResult).message);\r\n                                    return EMPTY;\r\n                                }\r\n                            }),\r\n                        );\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.router.navigate(['../'], { relativeTo: this.route });\r\n                }\r\n            });\r\n    }\r\n\r\n    private addAddressCustomFieldsFormGroup(\r\n        parentFormGroup: FormGroup,\r\n        address?: OrderAddressFragment | null,\r\n    ) {\r\n        if (address && this.addressCustomFields.length) {\r\n            const addressCustomFieldsFormGroup = new FormGroup({});\r\n            for (const customFieldDef of this.addressCustomFields) {\r\n                const name = customFieldDef.name;\r\n                const value = (address as any).customFields?.[name];\r\n                addressCustomFieldsFormGroup.addControl(name, new FormControl(value));\r\n            }\r\n            parentFormGroup.addControl('customFields', addressCustomFieldsFormGroup);\r\n        }\r\n    }\r\n\r\n    protected setFormValues(entity: OrderDetail.Fragment, languageCode: LanguageCode): void {\r\n        /* not used */\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"search-form\">\r\n            <div class=\"btn-group btn-outline-primary\" *ngIf=\"activePreset$ | async as activePreset\">\r\n                <button\r\n                    class=\"btn\"\r\n                    *ngFor=\"let preset of filterPresets\"\r\n                    [class.btn-primary]=\"activePreset === preset.name\"\r\n                    (click)=\"selectFilterPreset(preset.name)\"\r\n                >\r\n                    {{ preset.label | translate }}\r\n                </button>\r\n                <button\r\n                    class=\"btn\"\r\n                    [class.btn-primary]=\"activePreset === 'custom'\"\r\n                    (click)=\"selectFilterPreset('custom')\"\r\n                >\r\n                    {{ 'order.filter-custom' | translate }}\r\n                    <clr-icon shape=\"angle down\"></clr-icon>\r\n                </button>\r\n            </div>\r\n\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"searchOrderCodeControl\"\r\n                [placeholder]=\"'order.search-by-order-code' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"searchLastNameControl\"\r\n                [placeholder]=\"'order.search-by-customer-last-name' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n        </div>\r\n        <div class=\"custom-filters\" [class.expanded]=\"(activePreset$ | async) === 'custom'\">\r\n            <form [formGroup]=\"customFilterForm\">\r\n                <div class=\"flex align-center\">\r\n                    <ng-select\r\n                        [items]=\"orderStates\"\r\n                        appendTo=\"body\"\r\n                        [addTag]=\"false\"\r\n                        [multiple]=\"true\"\r\n                        formControlName=\"states\"\r\n                        [placeholder]=\"'state.all-orders' | translate\"\r\n                        [clearable]=\"true\"\r\n                        [searchable]=\"false\"\r\n                    >\r\n                        <ng-template ng-option-tmp let-item=\"item\">{{ item | stateI18nToken | translate }}</ng-template>\r\n                        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                            <span class=\"ng-value-label\"> {{ item | stateI18nToken | translate }}</span>\r\n                            <span class=\"ng-value-icon right\" (click)=\"clear(item)\" aria-hidden=\"true\">×</span>\r\n                        </ng-template>\r\n                    </ng-select>\r\n                    <button\r\n                        class=\"btn btn-secondary\"\r\n                        [disabled]=\"customFilterForm.pristine\"\r\n                        (click)=\"applyCustomFilters()\"\r\n                    >\r\n                        {{ 'order.apply-filters' | translate }}\r\n                        <clr-icon shape=\"filter\"></clr-icon>\r\n                    </button>\r\n                </div>\r\n                <div class=\"flex\">\r\n                    <div>\r\n                        <label>{{ 'order.placed-at-start' | translate }}</label>\r\n                        <vdr-datetime-picker formControlName=\"placedAtStart\"></vdr-datetime-picker>\r\n                    </div>\r\n                    <div>\r\n                        <label>{{ 'order.placed-at-end' | translate }}</label>\r\n                        <vdr-datetime-picker formControlName=\"placedAtEnd\"></vdr-datetime-picker>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-list\"></vdr-action-bar-items>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.customer' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.placed-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.shipping' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-order=\"item\">\r\n        <td class=\"left align-middle\">{{ order.code }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </td>\r\n        <td class=\"left align-middle\">{{ order.total | localeCurrency: order.currencyCode }}</td>\r\n        <td class=\"left align-middle\">{{ order.updatedAt | timeAgo }}</td>\r\n        <td class=\"left align-middle\">{{ order.orderPlacedAt | localeDate: 'medium' }}</td>\r\n        <td class=\"left align-middle\">{{ getShippingNames(order) }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"shopping-cart\"\r\n                [label]=\"'common.open' | translate\"\r\n                [linkTo]=\"order.state === 'Modifying' ? ['./', order.id, 'modify'] : ['./', order.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetOrderList,\r\n    LocalStorageService,\r\n    OrderListOptions,\r\n    ServerConfigService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { Order } from '@vendure/common/lib/generated-types';\r\nimport { merge, Observable } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, map, skip, takeUntil, tap } from 'rxjs/operators';\r\n\r\ninterface OrderFilterConfig {\r\n    active?: boolean;\r\n    states?: string[];\r\n}\r\n\r\ninterface FilterPreset {\r\n    name: string;\r\n    label: string;\r\n    config: OrderFilterConfig;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-order-list',\r\n    templateUrl: './order-list.component.html',\r\n    styleUrls: ['./order-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderListComponent\r\n    extends BaseListComponent<GetOrderList.Query, GetOrderList.Items>\r\n    implements OnInit {\r\n    searchOrderCodeControl = new FormControl('');\r\n    searchLastNameControl = new FormControl('');\r\n    customFilterForm: FormGroup;\r\n    orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);\r\n    filterPresets: FilterPreset[] = [\r\n        {\r\n            name: 'open',\r\n            label: _('order.filter-preset-open'),\r\n            config: {\r\n                active: false,\r\n                states: this.orderStates.filter(\r\n                    s => s !== 'Delivered' && s !== 'Cancelled' && s !== 'Shipped',\r\n                ),\r\n            },\r\n        },\r\n        {\r\n            name: 'shipped',\r\n            label: _('order.filter-preset-shipped'),\r\n            config: {\r\n                active: false,\r\n                states: ['Shipped'],\r\n            },\r\n        },\r\n        {\r\n            name: 'completed',\r\n            label: _('order.filter-preset-completed'),\r\n            config: {\r\n                active: false,\r\n                states: ['Delivered', 'Cancelled'],\r\n            },\r\n        },\r\n        {\r\n            name: 'active',\r\n            label: _('order.filter-preset-active'),\r\n            config: {\r\n                active: true,\r\n            },\r\n        },\r\n    ];\r\n    activePreset$: Observable<string>;\r\n\r\n    constructor(\r\n        private serverConfigService: ServerConfigService,\r\n        private dataService: DataService,\r\n        private localStorageService: LocalStorageService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (take, skip) => this.dataService.order.getOrders({ take, skip }).refetchOnChannelChange(),\r\n            data => data.orders,\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (skip, take) =>\r\n                this.createQueryOptions(\r\n                    skip,\r\n                    take,\r\n                    this.searchOrderCodeControl.value,\r\n                    this.searchLastNameControl.value,\r\n                    this.route.snapshot.queryParamMap.get('filter') || 'open',\r\n                ),\r\n        );\r\n        const lastFilters = this.localStorageService.get('orderListLastCustomFilters');\r\n        if (lastFilters) {\r\n            this.setQueryParam(lastFilters, { replaceUrl: true });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.activePreset$ = this.route.queryParamMap.pipe(\r\n            map(qpm => qpm.get('filter') || 'open'),\r\n            distinctUntilChanged(),\r\n        );\r\n        const searchTerms$ = merge(\r\n            this.searchOrderCodeControl.valueChanges,\r\n            this.searchLastNameControl.valueChanges,\r\n        ).pipe(\r\n            filter(value => 2 < value.length || value.length === 0),\r\n            debounceTime(250),\r\n        );\r\n        merge(searchTerms$, this.route.queryParamMap)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(val => {\r\n                this.refresh();\r\n            });\r\n\r\n        const queryParamMap = this.route.snapshot.queryParamMap;\r\n        this.customFilterForm = new FormGroup({\r\n            states: new FormControl(queryParamMap.getAll('states') ?? []),\r\n            placedAtStart: new FormControl(queryParamMap.get('placedAtStart')),\r\n            placedAtEnd: new FormControl(queryParamMap.get('placedAtEnd')),\r\n        });\r\n    }\r\n\r\n    selectFilterPreset(presetName: string) {\r\n        const lastCustomFilters = this.localStorageService.get('orderListLastCustomFilters') ?? {};\r\n        const emptyCustomFilters = { states: undefined, placedAtStart: undefined, placedAtEnd: undefined };\r\n        const filters = presetName === 'custom' ? lastCustomFilters : emptyCustomFilters;\r\n        this.setQueryParam(\r\n            {\r\n                filter: presetName,\r\n                page: 1,\r\n                ...filters,\r\n            },\r\n            { replaceUrl: true },\r\n        );\r\n    }\r\n\r\n    applyCustomFilters() {\r\n        const formValue = this.customFilterForm.value;\r\n        const customFilters = {\r\n            states: formValue.states,\r\n            placedAtStart: formValue.placedAtStart,\r\n            placedAtEnd: formValue.placedAtEnd,\r\n        };\r\n        this.setQueryParam({\r\n            filter: 'custom',\r\n            ...customFilters,\r\n        });\r\n        this.customFilterForm.markAsPristine();\r\n        this.localStorageService.set('orderListLastCustomFilters', customFilters);\r\n    }\r\n\r\n    private createQueryOptions(\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        skip: number,\r\n        take: number,\r\n        orderCodeSearchTerm: string,\r\n        customerNameSearchTerm: string,\r\n        activeFilterPreset?: string,\r\n    ): { options: OrderListOptions } {\r\n        const filterConfig = this.filterPresets.find(p => p.name === activeFilterPreset);\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        const filter: any = {};\r\n        if (filterConfig) {\r\n            if (filterConfig.config.active != null) {\r\n                filter.active = {\r\n                    eq: filterConfig.config.active,\r\n                };\r\n            }\r\n            if (filterConfig.config.states) {\r\n                filter.state = {\r\n                    in: filterConfig.config.states,\r\n                };\r\n            }\r\n        } else if (activeFilterPreset === 'custom') {\r\n            const queryParams = this.route.snapshot.queryParamMap;\r\n            const states = queryParams.getAll('states') ?? [];\r\n            const placedAtStart = queryParams.get('placedAtStart');\r\n            const placedAtEnd = queryParams.get('placedAtEnd');\r\n            if (states.length) {\r\n                filter.state = {\r\n                    in: states,\r\n                };\r\n            }\r\n            if (placedAtStart && placedAtEnd) {\r\n                filter.orderPlacedAt = {\r\n                    between: {\r\n                        start: placedAtStart,\r\n                        end: placedAtEnd,\r\n                    },\r\n                };\r\n            } else if (placedAtStart) {\r\n                filter.orderPlacedAt = {\r\n                    after: placedAtStart,\r\n                };\r\n            } else if (placedAtEnd) {\r\n                filter.orderPlacedAt = {\r\n                    before: placedAtEnd,\r\n                };\r\n            }\r\n        }\r\n        if (customerNameSearchTerm) {\r\n            filter.customerLastName = {\r\n                contains: customerNameSearchTerm,\r\n            };\r\n        }\r\n        if (orderCodeSearchTerm) {\r\n            filter.code = {\r\n                contains: orderCodeSearchTerm,\r\n            };\r\n        }\r\n        return {\r\n            options: {\r\n                skip,\r\n                take,\r\n                filter: {\r\n                    ...(filter ?? {}),\r\n                },\r\n                sort: {\r\n                    updatedAt: SortOrder.DESC,\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    getShippingNames(order: Order) {\r\n        if (order.shippingLines.length) {\r\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrderResolver extends BaseEntityResolver<OrderDetail.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Order',\r\n                id: '',\r\n                code: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                total: 0,\r\n            } as any,\r\n            id => dataService.order.getOrder(id).mapStream(data => data.order),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BreadcrumbLabelLinkPair,\r\n    CanDeactivateDetailGuard,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    OrderDetail,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\r\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\nimport { OrderResolver } from './providers/routing/order-resolver';\r\n\r\nexport const orderRoutes: Route[] = [\r\n    {\r\n        path: '',\r\n        component: OrderListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.orders'),\r\n        },\r\n    },\r\n    {\r\n        path: ':id',\r\n        component: OrderDetailComponent,\r\n        resolve: createResolveData(OrderResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: orderBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: ':id/modify',\r\n        component: OrderEditorComponent,\r\n        resolve: createResolveData(OrderResolver),\r\n        // canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: modifyingOrderBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function orderBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<OrderDetail.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.orders',\r\n        getName: order => order.code,\r\n        route: '',\r\n    });\r\n}\r\n\r\nexport function modifyingOrderBreadcrumb(data: any, params: any) {\r\n    return orderBreadcrumb(data, params).pipe(\r\n        map((breadcrumbs: BreadcrumbLabelLinkPair[]) => {\r\n            const modifiedBreadcrumbs = breadcrumbs.slice();\r\n            modifiedBreadcrumbs[0].link[0] = '../';\r\n            modifiedBreadcrumbs[1].link[0] = '../orders';\r\n            return modifiedBreadcrumbs.concat({ label: _('breadcrumb.modifying'), link: [''] });\r\n        }) as any,\r\n    );\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddManualPaymentDialogComponent } from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\nimport { CancelOrderDialogComponent } from './components/cancel-order-dialog/cancel-order-dialog.component';\nimport { FulfillOrderDialogComponent } from './components/fulfill-order-dialog/fulfill-order-dialog.component';\nimport { FulfillmentCardComponent } from './components/fulfillment-card/fulfillment-card.component';\nimport { FulfillmentDetailComponent } from './components/fulfillment-detail/fulfillment-detail.component';\nimport { FulfillmentStateLabelComponent } from './components/fulfillment-state-label/fulfillment-state-label.component';\nimport { LineFulfillmentComponent } from './components/line-fulfillment/line-fulfillment.component';\nimport { LineRefundsComponent } from './components/line-refunds/line-refunds.component';\nimport { ModificationDetailComponent } from './components/modification-detail/modification-detail.component';\nimport { OrderCustomFieldsCardComponent } from './components/order-custom-fields-card/order-custom-fields-card.component';\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\nimport { OrderEditsPreviewDialogComponent } from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\nimport { OrderListComponent } from './components/order-list/order-list.component';\nimport { OrderPaymentCardComponent } from './components/order-payment-card/order-payment-card.component';\nimport { OrderProcessGraphDialogComponent } from './components/order-process-graph-dialog/order-process-graph-dialog.component';\nimport { OrderProcessEdgeComponent } from './components/order-process-graph/order-process-edge.component';\nimport { OrderProcessGraphComponent } from './components/order-process-graph/order-process-graph.component';\nimport { OrderProcessNodeComponent } from './components/order-process-graph/order-process-node.component';\nimport { OrderStateSelectDialogComponent } from './components/order-state-select-dialog/order-state-select-dialog.component';\nimport { OrderTableComponent } from './components/order-table/order-table.component';\nimport { PaymentDetailComponent } from './components/payment-detail/payment-detail.component';\nimport { PaymentStateLabelComponent } from './components/payment-state-label/payment-state-label.component';\nimport { RefundOrderDialogComponent } from './components/refund-order-dialog/refund-order-dialog.component';\nimport { RefundStateLabelComponent } from './components/refund-state-label/refund-state-label.component';\nimport { SettleRefundDialogComponent } from './components/settle-refund-dialog/settle-refund-dialog.component';\nimport { SimpleItemListComponent } from './components/simple-item-list/simple-item-list.component';\nimport { orderRoutes } from './order.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(orderRoutes)],\n    declarations: [\n        OrderListComponent,\n        OrderDetailComponent,\n        FulfillOrderDialogComponent,\n        LineFulfillmentComponent,\n        RefundOrderDialogComponent,\n        CancelOrderDialogComponent,\n        PaymentStateLabelComponent,\n        LineRefundsComponent,\n        OrderPaymentCardComponent,\n        RefundStateLabelComponent,\n        SettleRefundDialogComponent,\n        OrderHistoryComponent,\n        FulfillmentDetailComponent,\n        PaymentDetailComponent,\n        SimpleItemListComponent,\n        OrderCustomFieldsCardComponent,\n        OrderProcessGraphComponent,\n        OrderProcessNodeComponent,\n        OrderProcessEdgeComponent,\n        OrderProcessGraphDialogComponent,\n        FulfillmentStateLabelComponent,\n        FulfillmentCardComponent,\n        OrderEditorComponent,\n        OrderTableComponent,\n        OrderEditsPreviewDialogComponent,\n        ModificationDetailComponent,\n        AddManualPaymentDialogComponent,\n        OrderStateSelectDialogComponent,\n    ],\n})\nexport class OrderModule {}\n"]}