{"version":3,"mappings":"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","names":["e","b","constructor","o","t","this","c","M","V","r","selectedMemberIds","indexOf","id","ngOnInit","membersCurrentPage$","route","paramMap","pipe","p","get","Q","W","membersItemsPerPage$","filterTermControl","valueChanges","ie","ae","setContentsPageNumber","X","refresh$","ce","destroy$","subscribe","n","a","l","fetchParamsChange","emit","filterTerm","skip","take","ngOnDestroy","next","complete","setParam","setContentsItemsPerPage","refresh","router","navigate","Object","snapshot","params","relativeTo","queryParamsHandling","areAllSelected","members","length","toggleSelectAll","selectionChange","map","toggleSelectMember","includes","filter","selectors","N","fetchGroupMembers$","g","_ref3","dataService","customer","getCustomerList","mapStream","customers","customers$","items","customersTotal$","totalItems","cancel","resolveWith","add","selectedCustomerIds","L","addressForm","changeDetector","markForCheck","save","S","value","dataDependenciesPopulated","te","le","editAddress","ngOnChanges","customFields","availableCountries","getCountryName","find","code","name","setAsDefaultBillingAddress","setAsDefaultBilling","markAsDirty","setAsDefaultShippingAddress","setAsDefaultShipping","delete","deleteAddress","modalService","fromComponent","locals","size","closable","F","groups$","getCustomerGroupList","customerGroups","selectedGroupIds","y","oxw","updateNote","deleteNote","O","d","getDisplayType","type","getTimelineIcon","isFeatured","getName","administrator","firstName","lastName","addNoteToCustomer","addNote","note","J","u","h","super","Set","getCustomFieldConfig","addressCustomFields","detailForm","formBuilder","group","title","phoneNumber","emailAddress","password","reduce","f","B","addresses","init","availableCountries$","settings","getAvailableCountries","mapSingle","countries","Ge","entity$","s","Ee","apply","concat","orderListUpdates$","orders$","orders","ordersCount$","history$","fetchHistory","getCustomerHistory","sort","createdAt","history","destroy","getAddressFormControls","controls","setDefaultBillingAddressId","defaultBillingAddressId","addressDefaultsUpdated","setDefaultShippingAddressId","defaultShippingAddressId","toggleDeleteAddress","addressesToDeleteIds","has","addAddress","fullName","company","streetLine1","streetLine2","city","province","postalCode","countryCode","defaultShippingAddress","defaultBillingAddress","_step","_iterator","addControl","push","setOrderItemsPerPage","ordersPerPage","fetchOrdersList","setOrderCurrentPage","currentOrdersPage","create","createCustomer","__typename","notificationService","success","m","entity","notify","message","translationVars","duration","markAsPristine","error","$e","dirty","updateCustomer","_step2","deleteCustomerAddress","updateCustomerAddress","createCustomerAddress","Me","_step3","getCustomer","single$","addToGroup","Pe","Z","ke","addCustomersToGroup","customerCount","groupName","removeFromGroup","dialog","buttons","label","returnValue","removeCustomersFromGroup","displayPrivacyControls","data","updateCustomerNote","noteId","body","deleteCustomerNote","setFormValues","patchValue","_step4","_iterator4","qe","country","_step5","_iterator5","fe","fo","Co","setControl","setCustomFieldFormValues","we","T","serverConfigService","getCustomFieldsFor","form","_step6","_iterator6","I","listIsEmpty$","activeGroup$","refreshActiveGroupMembers$","_ref10","_ref10$","getCustomerGroupWithCustomers","contains","customerGroup","_e","members$","membersTotal$","createCustomerGroup","customerIds","deleteCustomerGroup","result","errorMessage","update","updateCustomerGroup","closeMembers","contents","verticalAlign","eo","q","refetchOnChannelChange","options","searchTerm","filterOperator","mo","deleteCustomer","D","updatedAt","user","factory","ɵfac","ge","path","component","pathMatch","breadcrumb","resolve","canDeactivate","he","breadcrumbKey","w","C"],"sources":["webpack:///src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.html","webpack:///src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.ts","webpack:///src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.html","webpack:///src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.ts","webpack:///src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.html","webpack:///src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.ts","webpack:///src/lib/customer/src/components/address-card/address-card.component.html","webpack:///src/lib/customer/src/components/address-card/address-card.component.ts","webpack:///src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.html","webpack:///src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.ts","webpack:///src/lib/customer/src/components/customer-status-label/customer-status-label.component.html","webpack:///src/lib/customer/src/components/customer-status-label/customer-status-label.component.ts","webpack:///src/lib/customer/src/components/customer-history/customer-history.component.html","webpack:///src/lib/customer/src/components/customer-history/customer-history.component.ts","webpack:///src/lib/customer/src/components/customer-detail/customer-detail.component.html","webpack:///src/lib/customer/src/components/customer-detail/customer-detail.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/merge.js","webpack:///src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.html","webpack:///src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.ts","webpack:///src/lib/customer/src/components/customer-group-list/customer-group-list.component.html","webpack:///src/lib/customer/src/components/customer-group-list/customer-group-list.component.ts","webpack:///src/lib/customer/src/components/customer-list/customer-list.component.html","webpack:///src/lib/customer/src/components/customer-list/customer-list.component.ts","webpack:///src/lib/customer/src/providers/routing/customer-resolver.ts","webpack:///src/lib/customer/src/customer.routes.ts","webpack:///src/lib/customer/src/customer.module.ts"],"sourcesContent":["<input\r\n    type=\"text\"\r\n    name=\"searchTerm\"\r\n    [formControl]=\"filterTermControl\"\r\n    [placeholder]=\"'customer.search-customers-by-email' | translate\"\r\n    class=\"search-input\"\r\n/>\r\n\r\n<vdr-data-table\r\n    [items]=\"members\"\r\n    [itemsPerPage]=\"membersItemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems\"\r\n    [currentPage]=\"membersCurrentPage$ | async\"\r\n    (pageChange)=\"setContentsPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\r\n    [allSelected]=\"areAllSelected()\"\r\n    [isRowSelectedFn]=\"('UpdateCustomerGroup' | hasPermission) && isMemberSelected\"\r\n    (rowSelectChange)=\"toggleSelectMember($event)\"\r\n    (allSelectChange)=\"toggleSelectAll()\"\r\n>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-customer=\"item\">\r\n        <td class=\"left align-middle\">\r\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\r\n        </td>\r\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['/customer', 'customers', customer.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Customer, DataService, GetCustomerGroupWithCustomers } from '@vendure/admin-ui/core';\r\nimport { ZoneMember } from '@vendure/admin-ui/settings';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map, startWith, takeUntil, tap } from 'rxjs/operators';\r\n\r\nexport interface CustomerGroupMemberFetchParams {\r\n    skip: number;\r\n    take: number;\r\n    filterTerm: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-member-list',\r\n    templateUrl: './customer-group-member-list.component.html',\r\n    styleUrls: ['./customer-group-member-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupMemberListComponent implements OnInit, OnDestroy {\r\n    @Input() members: Array<\r\n        Pick<Customer, 'id' | 'createdAt' | 'updatedAt' | 'title' | 'firstName' | 'lastName' | 'emailAddress'>\r\n    >;\r\n    @Input() totalItems: number;\r\n    @Input() route: ActivatedRoute;\r\n    @Input() selectedMemberIds: string[] = [];\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @Output() fetchParamsChange = new EventEmitter<CustomerGroupMemberFetchParams>();\r\n\r\n    membersItemsPerPage$: Observable<number>;\r\n    membersCurrentPage$: Observable<number>;\r\n    filterTermControl = new FormControl('');\r\n    private refresh$ = new BehaviorSubject<boolean>(true);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private router: Router, private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.membersCurrentPage$ = this.route.paramMap.pipe(\r\n            map((qpm) => qpm.get('membersPage')),\r\n            map((page) => (!page ? 1 : +page)),\r\n            startWith(1),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.membersItemsPerPage$ = this.route.paramMap.pipe(\r\n            map((qpm) => qpm.get('membersPerPage')),\r\n            map((perPage) => (!perPage ? 10 : +perPage)),\r\n            startWith(10),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\r\n            debounceTime(250),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(''),\r\n        );\r\n\r\n        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {\r\n                const take = itemsPerPage;\r\n                const skip = (currentPage - 1) * itemsPerPage;\r\n                this.fetchParamsChange.emit({\r\n                    filterTerm,\r\n                    skip,\r\n                    take,\r\n                });\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setContentsPageNumber(page: number) {\r\n        this.setParam('membersPage', page);\r\n    }\r\n\r\n    setContentsItemsPerPage(perPage: number) {\r\n        this.setParam('membersPerPage', perPage);\r\n    }\r\n\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n\r\n    private setParam(key: string, value: any) {\r\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n        });\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        if (this.members) {\r\n            return this.selectedMemberIds.length === this.members.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectionChange.emit([]);\r\n        } else {\r\n            this.selectionChange.emit(this.members.map((v) => v.id));\r\n        }\r\n    }\r\n\r\n    toggleSelectMember(member: ZoneMember) {\r\n        if (this.selectedMemberIds.includes(member.id)) {\r\n            this.selectionChange.emit(this.selectedMemberIds.filter((id) => id !== member.id));\r\n        } else {\r\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\r\n        }\r\n    }\r\n\r\n    isMemberSelected = (member: ZoneMember): boolean => {\r\n        return -1 < this.selectedMemberIds.indexOf(member.id);\r\n    };\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\r\n</ng-template>\r\n\r\n<vdr-customer-group-member-list\r\n    [members]=\"customers$ | async\"\r\n    [totalItems]=\"customersTotal$ | async\"\r\n    [route]=\"route\"\r\n    [selectedMemberIds]=\"selectedCustomerIds\"\r\n    (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\r\n    (selectionChange)=\"selectedCustomerIds = $event\"\r\n>\r\n\r\n</vdr-customer-group-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedCustomerIds.length\" class=\"btn btn-primary\">\r\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\r\n\r\n@Component({\r\n    selector: 'vdr-add-customer-to-group-dialog',\r\n    templateUrl: './add-customer-to-group-dialog.component.html',\r\n    styleUrls: ['./add-customer-to-group-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddCustomerToGroupDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    group: GetCustomerGroups.Items;\r\n    route: ActivatedRoute;\r\n    selectedCustomerIds: string[] = [];\r\n    customers$: Observable<GetCustomerList.Items[]>;\r\n    customersTotal$: Observable<number>;\r\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\r\n        skip: 0,\r\n        take: 10,\r\n        filterTerm: '',\r\n    });\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        const customerResult$ = this.fetchGroupMembers$.pipe(\r\n            switchMap(({ skip, take, filterTerm }) => {\r\n                return this.dataService.customer\r\n                    .getCustomerList(take, skip, filterTerm)\r\n                    .mapStream((res) => res.customers);\r\n            }),\r\n        );\r\n\r\n        this.customers$ = customerResult$.pipe(map((res) => res.items));\r\n        this.customersTotal$ = customerResult$.pipe(map((res) => res.totalItems));\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedCustomerIds);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"addressForm.get('streetLine1')?.value as streetLine1\">{{ streetLine1 }},</span>\r\n    <span *ngIf=\"addressForm.get('countryCode')?.value as countryCode\"> {{ countryCode }}</span>\r\n</ng-template>\r\n\r\n<vdr-address-form\r\n    [formGroup]=\"addressForm\"\r\n    [availableCountries]=\"availableCountries\"\r\n    [customFields]=\"customFields\"\r\n></vdr-address-form>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"save()\"\r\n        [disabled]=\"!addressForm.valid || !addressForm.touched\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.update' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, Dialog, GetAvailableCountries } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-address-detail-dialog',\r\n    templateUrl: './address-detail-dialog.component.html',\r\n    styleUrls: ['./address-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddressDetailDialogComponent implements Dialog<FormGroup>, OnInit {\r\n    addressForm: FormGroup;\r\n    customFields: CustomFieldConfig;\r\n    availableCountries: GetAvailableCountries.Items[] = [];\r\n    resolveWith: (result?: FormGroup) => void;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.addressForm);\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"addressForm.value as address\">\r\n    <div class=\"card-header\">\r\n        <div class=\"address-title\">\r\n            <span class=\"street-line\" *ngIf=\"address.streetLine1\">{{ address.streetLine1 }},</span>\r\n            {{ address.countryCode }}\r\n        </div>\r\n        <div class=\"default-controls\">\r\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultShipping\">\r\n                <clr-icon shape=\"truck\"></clr-icon>\r\n                {{ 'customer.default-shipping-address' | translate }}\r\n            </vdr-chip>\r\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultBilling\">\r\n                <clr-icon shape=\"credit-card\"></clr-icon>\r\n                {{ 'customer.default-billing-address' | translate }}\r\n            </vdr-chip>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text\">\r\n            <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <vdr-entity-info [entity]=\"address\"></vdr-entity-info>\r\n        <ng-container *ngIf=\"editable\">\r\n            <button class=\"btn btn-sm btn-link\" (click)=\"editAddress()\">\r\n                {{ 'common.edit' | translate }}\r\n            </button>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-sm btn-link\" vdrDropdownTrigger>\r\n                    {{ 'common.more' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu>\r\n                    <button\r\n                        vdrDropdownItem\r\n                        class=\"button\"\r\n                        [disabled]=\"isDefaultShipping\"\r\n                        (click)=\"setAsDefaultShippingAddress()\"\r\n                    >\r\n                        {{ 'customer.set-as-default-shipping-address' | translate }}\r\n                    </button>\r\n                    <button\r\n                        vdrDropdownItem\r\n                        class=\"button\"\r\n                        [disabled]=\"isDefaultBilling\"\r\n                        (click)=\"setAsDefaultBillingAddress()\"\r\n                    >\r\n                        {{ 'customer.set-as-default-billing-address' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"delete()\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, GetAvailableCountries, ModalService } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\n\r\nimport { AddressDetailDialogComponent } from '../address-detail-dialog/address-detail-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-address-card',\r\n    templateUrl: './address-card.component.html',\r\n    styleUrls: ['./address-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddressCardComponent implements OnInit, OnChanges {\r\n    @Input() addressForm: FormGroup;\r\n    @Input() customFields: CustomFieldConfig;\r\n    @Input() availableCountries: GetAvailableCountries.Items[] = [];\r\n    @Input() isDefaultBilling: string;\r\n    @Input() isDefaultShipping: string;\r\n    @Input() editable = true;\r\n    @Output() setAsDefaultShipping = new EventEmitter<string>();\r\n    @Output() setAsDefaultBilling = new EventEmitter<string>();\r\n    @Output() deleteAddress = new EventEmitter<string>();\r\n    private dataDependenciesPopulated = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {\r\n        const streetLine1 = this.addressForm.get('streetLine1') as FormControl;\r\n        // Make the address dialog display automatically if there is no address line\r\n        // as is the case when adding a new address.\r\n        if (!streetLine1.value) {\r\n            this.dataDependenciesPopulated\r\n                .pipe(\r\n                    filter(value => value),\r\n                    take(1),\r\n                )\r\n                .subscribe(() => {\r\n                    this.editAddress();\r\n                });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (this.customFields != null && this.availableCountries != null) {\r\n            this.dataDependenciesPopulated.next(true);\r\n        }\r\n    }\r\n\r\n    getCountryName(countryCode: string) {\r\n        if (!this.availableCountries) {\r\n            return '';\r\n        }\r\n        const match = this.availableCountries.find(c => c.code === countryCode);\r\n        return match ? match.name : '';\r\n    }\r\n\r\n    setAsDefaultBillingAddress() {\r\n        this.setAsDefaultBilling.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n\r\n    setAsDefaultShippingAddress() {\r\n        this.setAsDefaultShipping.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n\r\n    delete() {\r\n        this.deleteAddress.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n\r\n    editAddress() {\r\n        this.modalService\r\n            .fromComponent(AddressDetailDialogComponent, {\r\n                locals: {\r\n                    addressForm: this.addressForm,\r\n                    customFields: this.customFields,\r\n                    availableCountries: this.availableCountries,\r\n                },\r\n                size: 'md',\r\n                closable: true,\r\n            })\r\n            .subscribe(() => {\r\n                this.changeDetector.markForCheck();\r\n            });\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'customer.add-customer-to-group' | translate }}\r\n</ng-template>\r\n\r\n<ng-select\r\n    [items]=\"groups$ | async\"\r\n    appendTo=\"body\"\r\n    [addTag]=\"false\"\r\n    [multiple]=\"true\"\r\n    bindValue=\"id\"\r\n    [(ngModel)]=\"selectedGroupIds\"\r\n    [clearable]=\"true\"\r\n    [searchable]=\"false\"\r\n>\r\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n        <span aria-hidden=\"true\" class=\"ng-value-icon left\" (click)=\"clear(item)\"> × </span>\r\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\r\n    </ng-template>\r\n    <ng-template ng-option-tmp let-item=\"item\">\r\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\r\n    </ng-template>\r\n</ng-select>\r\n\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedGroupIds.length\" class=\"btn btn-primary\">\r\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-select-customer-group-dialog',\r\n    templateUrl: './select-customer-group-dialog.component.html',\r\n    styleUrls: ['./select-customer-group-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectCustomerGroupDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    groups$: Observable<GetCustomerGroups.Items[]>;\r\n    selectedGroupIds: string[] = [];\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.groups$ = this.dataService.customer\r\n            .getCustomerGroupList()\r\n            .mapStream((res) => res.customerGroups.items);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedGroupIds);\r\n    }\r\n}\r\n","<vdr-chip *ngIf=\"customer.user?.id\">\r\n    <ng-container *ngIf=\"customer.user?.verified\">\r\n        <clr-icon shape=\"check-circle\" class=\"verified-user-icon\"></clr-icon>\r\n        {{ 'customer.verified' | translate }}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!customer.user?.verified\">\r\n        <clr-icon shape=\"check-circle\" class=\"registered-user-icon\"></clr-icon>\r\n        {{ 'customer.registered' | translate }}\r\n    </ng-container>\r\n</vdr-chip>\r\n<vdr-chip *ngIf=\"!customer.user?.id\">{{ 'customer.guest' | translate }}</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { Customer } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-status-label',\r\n    templateUrl: './customer-status-label.component.html',\r\n    styleUrls: ['./customer-status-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerStatusLabelComponent {\r\n    @Input() customer: Customer.Fragment;\r\n}\r\n","<h4>{{ 'customer.customer-history' | translate }}</h4>\r\n<div class=\"entry-list\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" *vdrIfPermissions=\"'UpdateCustomer'\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToCustomer()\">\r\n                {{ 'order.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry\r\n        *ngFor=\"let entry of history\"\r\n        [displayType]=\"getDisplayType(entry)\"\r\n        [iconShape]=\"getTimelineIcon(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"getName(entry)\"\r\n        [featured]=\"isFeatured(entry)\"\r\n    >\r\n        <ng-container [ngSwitch]=\"entry.type\">\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REGISTERED\">\r\n                <div class=\"title\">\r\n                    {{ 'customer.history-customer-registered' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\r\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\r\n                </ng-container>\r\n                <ng-template #namedStrategy>\r\n                    {{\r\n                    'customer.history-using-external-auth-strategy'\r\n                        | translate: { strategy: entry.data.strategy }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_VERIFIED\">\r\n                <div class=\"title\">\r\n                    {{ 'customer.history-customer-verified' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\r\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\r\n                </ng-container>\r\n                <ng-template #namedStrategy>\r\n                    {{\r\n                        'customer.history-using-external-auth-strategy'\r\n                            | translate: { strategy: entry.data.strategy }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_DETAIL_UPDATED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-detail-updated' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDED_TO_GROUP\">\r\n                {{\r\n                    'customer.history-customer-added-to-group'\r\n                        | translate: { groupName: entry.data.groupName }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REMOVED_FROM_GROUP\">\r\n                {{\r\n                    'customer.history-customer-removed-from-group'\r\n                        | translate: { groupName: entry.data.groupName }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_CREATED\">\r\n                {{ 'customer.history-customer-address-created' | translate }}\r\n                <div class=\"flex\">\r\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_UPDATED\">\r\n                {{ 'customer.history-customer-address-updated' | translate }}\r\n                <div class=\"flex\">\r\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_DELETED\">\r\n                {{ 'customer.history-customer-address-deleted' | translate }}\r\n                <div class=\"address-string\">{{ entry.data.address }}</div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_UPDATED\">\r\n                {{ 'customer.history-customer-password-updated' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\">\r\n                {{ 'customer.history-customer-password-reset-requested' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\">\r\n                {{ 'customer.history-customer-password-reset-verified' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-email-update-requested' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\r\n                            entry.data.oldEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\r\n                            entry.data.newEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-email-update-verified' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\r\n                            entry.data.oldEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\r\n                            entry.data.newEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_NOTE\">\r\n                <div class=\"flex\">\r\n                    <div class=\"note-text\">\r\n                        {{ entry.data.note }}\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <vdr-dropdown>\r\n                        <button class=\"icon-button\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"updateNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </button>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"deleteNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry [isLast]=\"true\"></vdr-timeline-entry>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport {\r\n    Customer,\r\n    GetCustomerHistory,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    TimelineDisplayType,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-history',\r\n    templateUrl: './customer-history.component.html',\r\n    styleUrls: ['./customer-history.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerHistoryComponent {\r\n    @Input() customer: Customer.Fragment;\r\n    @Input() history: GetCustomerHistory.Items[];\r\n    @Output() addNote = new EventEmitter<{ note: string }>();\r\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\r\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\r\n    note = '';\r\n    readonly type = HistoryEntryType;\r\n\r\n    getDisplayType(entry: GetCustomerHistory.Items): TimelineDisplayType {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:\r\n            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:\r\n                return 'success';\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n                return 'muted';\r\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\r\n                return 'error';\r\n            default:\r\n                return 'default';\r\n        }\r\n    }\r\n\r\n    getTimelineIcon(entry: GetCustomerHistory.Items): string | [string, string] | undefined {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n                return 'user';\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n                return ['assign-user', 'is-solid'];\r\n            case HistoryEntryType.CUSTOMER_NOTE:\r\n                return 'note';\r\n            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:\r\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\r\n                return 'users';\r\n        }\r\n    }\r\n\r\n    isFeatured(entry: GetCustomerHistory.Items): boolean {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getName(entry: GetCustomerHistory.Items): string {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        } else {\r\n            return `${this.customer.firstName} ${this.customer.lastName}`;\r\n        }\r\n    }\r\n\r\n    addNoteToCustomer() {\r\n        this.addNote.emit({ note: this.note });\r\n        this.note = '';\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-customer-status-label [customer]=\"entity$ | async\"></vdr-customer-status-label>\r\n            <div\r\n                class=\"last-login\"\r\n                *ngIf=\"(entity$ | async)?.user?.lastLogin as lastLogin\"\r\n                [title]=\"lastLogin | localeDate: 'medium'\"\r\n            >\r\n                {{ 'customer.last-login' | translate }}: {{ lastLogin | timeAgo }}\r\n            </div>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"'UpdateCustomer'\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm.get('customer')\">\r\n    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\" [readOnlyToggle]=\"!(isNew$ | async)\">\r\n        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.first-name' | translate\"\r\n        for=\"firstName\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.last-name' | translate\"\r\n        for=\"lastName\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.email-address' | translate\"\r\n        for=\"emailAddress\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.phone-number' | translate\"\r\n        for=\"phoneNumber\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'customer.password' | translate\" for=\"password\" *ngIf=\"isNew$ | async\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Customer\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get(['customer', 'customFields'])\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"customer-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n\r\n<div class=\"groups\" *ngIf=\"(entity$ | async)?.groups as groups\">\r\n    <label class=\"clr-control-label\">{{ 'customer.customer-groups' | translate }}</label>\r\n    <ng-container *ngIf=\"groups.length; else noGroups\">\r\n        <vdr-chip\r\n            *ngFor=\"let group of groups\"\r\n            [colorFrom]=\"group.id\"\r\n            icon=\"times\"\r\n            (iconClick)=\"removeFromGroup(group)\"\r\n            >{{ group.name }}</vdr-chip\r\n        >\r\n    </ng-container>\r\n    <ng-template #noGroups>\r\n        {{ 'customer.not-a-member-of-any-groups' | translate }}\r\n    </ng-template>\r\n    <div>\r\n        <button\r\n            class=\"btn btn-sm btn-secondary\"\r\n            (click)=\"addToGroup()\"\r\n            *vdrIfPermissions=\"'UpdateCustomerGroup'\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.add-customer-to-group' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\r\n    <div class=\"clr-col-md-4\">\r\n        <h3>{{ 'customer.addresses' | translate }}</h3>\r\n        <vdr-address-card\r\n            *ngFor=\"let addressForm of getAddressFormControls()\"\r\n            [class.to-delete]=\"addressesToDeleteIds.has(addressForm.value.id)\"\r\n            [availableCountries]=\"availableCountries$ | async\"\r\n            [isDefaultBilling]=\"defaultBillingAddressId === addressForm.value.id\"\r\n            [isDefaultShipping]=\"defaultShippingAddressId === addressForm.value.id\"\r\n            [addressForm]=\"addressForm\"\r\n            [customFields]=\"addressCustomFields\"\r\n            [editable]=\"(['UpdateCustomer'] | hasPermission) && !addressesToDeleteIds.has(addressForm.value.id)\"\r\n            (setAsDefaultBilling)=\"setDefaultBillingAddressId($event)\"\r\n            (setAsDefaultShipping)=\"setDefaultShippingAddressId($event)\"\r\n            (deleteAddress)=\"toggleDeleteAddress($event)\"\r\n        ></vdr-address-card>\r\n        <button class=\"btn btn-secondary\" (click)=\"addAddress()\" *vdrIfPermissions=\"'UpdateCustomer'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-address' | translate }}\r\n        </button>\r\n    </div>\r\n    <div class=\"clr-col-md-8\">\r\n        <h3>{{ 'customer.orders' | translate }}</h3>\r\n        <vdr-data-table\r\n            [items]=\"orders$ | async\"\r\n            [itemsPerPage]=\"ordersPerPage\"\r\n            [totalItems]=\"ordersCount$ | async\"\r\n            [currentPage]=\"currentOrdersPage\"\r\n            [emptyStateLabel]=\"'customer.no-orders-placed' | translate\"\r\n            (itemsPerPageChange)=\"setOrderItemsPerPage($event)\"\r\n            (pageChange)=\"setOrderCurrentPage($event)\"\r\n        >\r\n            <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column></vdr-dt-column>\r\n            <ng-template let-order=\"item\">\r\n                <td class=\"left\">{{ order.code }}</td>\r\n                <td class=\"left\">{{ order.state }}</td>\r\n                <td class=\"left\">{{ order.totalWithTax | localeCurrency: order.currencyCode }}</td>\r\n                <td class=\"left\">{{ order.updatedAt | localeDate: 'medium' }}</td>\r\n                <td class=\"right\">\r\n                    <vdr-table-row-action\r\n                        iconShape=\"shopping-cart\"\r\n                        [label]=\"'common.open' | translate\"\r\n                        [linkTo]=\"['/orders/', order.id]\"\r\n                    ></vdr-table-row-action>\r\n                </td>\r\n            </ng-template>\r\n        </vdr-data-table>\r\n    </div>\r\n</div>\r\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\r\n    <div class=\"clr-col-md-6\">\r\n        <vdr-customer-history\r\n            [customer]=\"entity$ | async\"\r\n            [history]=\"history$ | async\"\r\n            (addNote)=\"addNoteToCustomer($event)\"\r\n            (updateNote)=\"updateNote($event)\"\r\n            (deleteNote)=\"deleteNote($event)\"\r\n        ></vdr-customer-history>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateAddressInput,\r\n    CreateCustomerAddress,\r\n    CreateCustomerAddressMutation,\r\n    CreateCustomerInput,\r\n    Customer,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    DeleteCustomerAddress,\r\n    EditNoteDialogComponent,\r\n    GetAvailableCountries,\r\n    GetCustomer,\r\n    GetCustomerHistory,\r\n    GetCustomerQuery,\r\n    HistoryEntry,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    SortOrder,\r\n    UpdateCustomer,\r\n    UpdateCustomerAddress,\r\n    UpdateCustomerAddressMutation,\r\n    UpdateCustomerInput,\r\n    UpdateCustomerMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, forkJoin, from, Observable, Subject } from 'rxjs';\r\nimport {\r\n    concatMap,\r\n    filter,\r\n    map,\r\n    merge,\r\n    mergeMap,\r\n    shareReplay,\r\n    startWith,\r\n    switchMap,\r\n    take,\r\n} from 'rxjs/operators';\r\n\r\nimport { SelectCustomerGroupDialogComponent } from '../select-customer-group-dialog/select-customer-group-dialog.component';\r\n\r\ntype CustomerWithOrders = NonNullable<GetCustomerQuery['customer']>;\r\n\r\n@Component({\r\n    selector: 'vdr-customer-detail',\r\n    templateUrl: './customer-detail.component.html',\r\n    styleUrls: ['./customer-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerDetailComponent\r\n    extends BaseDetailComponent<CustomerWithOrders>\r\n    implements OnInit, OnDestroy\r\n{\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    addressCustomFields: CustomFieldConfig[];\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    orders$: Observable<GetCustomer.Items[]>;\r\n    ordersCount$: Observable<number>;\r\n    history$: Observable<GetCustomerHistory.Items[] | undefined>;\r\n    fetchHistory = new Subject<void>();\r\n    defaultShippingAddressId: string;\r\n    defaultBillingAddressId: string;\r\n    addressesToDeleteIds = new Set<string>();\r\n    addressDefaultsUpdated = false;\r\n    ordersPerPage = 10;\r\n    currentOrdersPage = 1;\r\n    private orderListUpdates$ = new Subject<CustomerWithOrders>();\r\n\r\n    constructor(\r\n        route: ActivatedRoute,\r\n        router: Router,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private formBuilder: FormBuilder,\r\n        protected dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n\r\n        this.customFields = this.getCustomFieldConfig('Customer');\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.detailForm = this.formBuilder.group({\r\n            customer: this.formBuilder.group({\r\n                title: '',\r\n                firstName: ['', Validators.required],\r\n                lastName: ['', Validators.required],\r\n                phoneNumber: '',\r\n                emailAddress: ['', [Validators.required, Validators.email]],\r\n                password: '',\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            addresses: new FormArray([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n\r\n        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));\r\n        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));\r\n        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));\r\n        this.history$ = this.fetchHistory.pipe(\r\n            startWith(null),\r\n            switchMap(() => {\r\n                return this.dataService.customer\r\n                    .getCustomerHistory(this.id, {\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    })\r\n                    .mapStream(data => data.customer?.history.items);\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n        this.orderListUpdates$.complete();\r\n    }\r\n\r\n    getAddressFormControls(): FormControl[] {\r\n        const formArray = this.detailForm.get(['addresses']) as FormArray;\r\n        return formArray.controls as FormControl[];\r\n    }\r\n\r\n    setDefaultBillingAddressId(id: string) {\r\n        this.defaultBillingAddressId = id;\r\n        this.addressDefaultsUpdated = true;\r\n    }\r\n\r\n    setDefaultShippingAddressId(id: string) {\r\n        this.defaultShippingAddressId = id;\r\n        this.addressDefaultsUpdated = true;\r\n    }\r\n\r\n    toggleDeleteAddress(id: string) {\r\n        if (this.addressesToDeleteIds.has(id)) {\r\n            this.addressesToDeleteIds.delete(id);\r\n        } else {\r\n            this.addressesToDeleteIds.add(id);\r\n        }\r\n    }\r\n\r\n    addAddress() {\r\n        const addressFormArray = this.detailForm.get('addresses') as FormArray;\r\n        const newAddress = this.formBuilder.group({\r\n            fullName: '',\r\n            company: '',\r\n            streetLine1: ['', Validators.required],\r\n            streetLine2: '',\r\n            city: '',\r\n            province: '',\r\n            postalCode: '',\r\n            countryCode: ['', Validators.required],\r\n            phoneNumber: '',\r\n            defaultShippingAddress: false,\r\n            defaultBillingAddress: false,\r\n        });\r\n        if (this.addressCustomFields.length) {\r\n            const customFieldsGroup = this.formBuilder.group({});\r\n            for (const fieldDef of this.addressCustomFields) {\r\n                customFieldsGroup.addControl(fieldDef.name, new FormControl(''));\r\n            }\r\n            newAddress.addControl('customFields', customFieldsGroup);\r\n        }\r\n        addressFormArray.push(newAddress);\r\n    }\r\n\r\n    setOrderItemsPerPage(itemsPerPage: number) {\r\n        this.ordersPerPage = +itemsPerPage;\r\n        this.fetchOrdersList();\r\n    }\r\n\r\n    setOrderCurrentPage(page: number) {\r\n        this.currentOrdersPage = +page;\r\n        this.fetchOrdersList();\r\n    }\r\n\r\n    create() {\r\n        const customerForm = this.detailForm.get('customer');\r\n        if (!customerForm) {\r\n            return;\r\n        }\r\n        const formValue = customerForm.value;\r\n        const customFields = customerForm.get('customFields')?.value;\r\n        const customer: CreateCustomerInput = {\r\n            title: formValue.title,\r\n            emailAddress: formValue.emailAddress,\r\n            firstName: formValue.firstName,\r\n            lastName: formValue.lastName,\r\n            phoneNumber: formValue.phoneNumber,\r\n            customFields,\r\n        };\r\n        this.dataService.customer\r\n            .createCustomer(customer, formValue.password)\r\n            .subscribe(({ createCustomer }) => {\r\n                switch (createCustomer.__typename) {\r\n                    case 'Customer':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Customer',\r\n                        });\r\n                        if (createCustomer.emailAddress && !formValue.password) {\r\n                            this.notificationService.notify({\r\n                                message: _('customer.email-verification-sent'),\r\n                                translationVars: { emailAddress: formValue.emailAddress },\r\n                                type: 'info',\r\n                                duration: 10000,\r\n                            });\r\n                        }\r\n                        this.detailForm.markAsPristine();\r\n                        this.addressDefaultsUpdated = false;\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'EmailAddressConflictError':\r\n                        this.notificationService.error(createCustomer.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    save() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const saveOperations: Array<\r\n                        Observable<\r\n                            | UpdateCustomer.UpdateCustomer\r\n                            | CreateCustomerAddress.CreateCustomerAddress\r\n                            | UpdateCustomerAddress.UpdateCustomerAddress\r\n                            | DeleteCustomerAddress.DeleteCustomerAddress\r\n                        >\r\n                    > = [];\r\n                    const customerForm = this.detailForm.get('customer');\r\n                    if (customerForm && customerForm.dirty) {\r\n                        const formValue = customerForm.value;\r\n                        const customFields = customerForm.get('customFields')?.value;\r\n                        const customer: UpdateCustomerInput = {\r\n                            id,\r\n                            title: formValue.title,\r\n                            emailAddress: formValue.emailAddress,\r\n                            firstName: formValue.firstName,\r\n                            lastName: formValue.lastName,\r\n                            phoneNumber: formValue.phoneNumber,\r\n                            customFields,\r\n                        };\r\n                        saveOperations.push(\r\n                            this.dataService.customer\r\n                                .updateCustomer(customer)\r\n                                .pipe(map(res => res.updateCustomer)),\r\n                        );\r\n                    }\r\n                    const addressFormArray = this.detailForm.get('addresses') as FormArray;\r\n                    if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {\r\n                        for (const addressControl of addressFormArray.controls) {\r\n                            if (addressControl.dirty || this.addressDefaultsUpdated) {\r\n                                const address = addressControl.value;\r\n                                const input: CreateAddressInput = {\r\n                                    fullName: address.fullName,\r\n                                    company: address.company,\r\n                                    streetLine1: address.streetLine1,\r\n                                    streetLine2: address.streetLine2,\r\n                                    city: address.city,\r\n                                    province: address.province,\r\n                                    postalCode: address.postalCode,\r\n                                    countryCode: address.countryCode,\r\n                                    phoneNumber: address.phoneNumber,\r\n                                    defaultShippingAddress: this.defaultShippingAddressId === address.id,\r\n                                    defaultBillingAddress: this.defaultBillingAddressId === address.id,\r\n                                    customFields: address.customFields,\r\n                                };\r\n                                if (!address.id) {\r\n                                    saveOperations.push(\r\n                                        this.dataService.customer\r\n                                            .createCustomerAddress(id, input)\r\n                                            .pipe(map(res => res.createCustomerAddress)),\r\n                                    );\r\n                                } else {\r\n                                    if (this.addressesToDeleteIds.has(address.id)) {\r\n                                        saveOperations.push(\r\n                                            this.dataService.customer\r\n                                                .deleteCustomerAddress(address.id)\r\n                                                .pipe(map(res => res.deleteCustomerAddress)),\r\n                                        );\r\n                                    } else {\r\n                                        saveOperations.push(\r\n                                            this.dataService.customer\r\n                                                .updateCustomerAddress({\r\n                                                    ...input,\r\n                                                    id: address.id,\r\n                                                })\r\n                                                .pipe(map(res => res.updateCustomerAddress)),\r\n                                        );\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return forkJoin(saveOperations);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    let notified = false;\r\n                    for (const result of data) {\r\n                        switch (result.__typename) {\r\n                            case 'Customer':\r\n                            case 'Address':\r\n                            case 'Success':\r\n                                if (!notified) {\r\n                                    this.notificationService.success(_('common.notify-update-success'), {\r\n                                        entity: 'Customer',\r\n                                    });\r\n                                    notified = true;\r\n                                    this.detailForm.markAsPristine();\r\n                                    this.addressDefaultsUpdated = false;\r\n                                    this.changeDetector.markForCheck();\r\n                                    this.fetchHistory.next();\r\n                                    this.dataService.customer.getCustomer(this.id).single$.subscribe();\r\n                                }\r\n                                break;\r\n                            case 'EmailAddressConflictError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    addToGroup() {\r\n        this.modalService\r\n            .fromComponent(SelectCustomerGroupDialogComponent, {\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)),\r\n                concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])),\r\n            )\r\n            .subscribe({\r\n                next: res => {\r\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\r\n                        customerCount: 1,\r\n                        groupName: res.addCustomersToGroup.name,\r\n                    });\r\n                },\r\n                complete: () => {\r\n                    this.dataService.customer.getCustomer(this.id, { take: 0 }).single$.subscribe();\r\n                    this.fetchHistory.next();\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromGroup(group: GetCustomer.Groups) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('customer.confirm-remove-customer-from-group'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])\r\n                        : EMPTY,\r\n                ),\r\n                switchMap(() => this.dataService.customer.getCustomer(this.id, { take: 0 }).single$),\r\n            )\r\n            .subscribe(result => {\r\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\r\n                    customerCount: 1,\r\n                    groupName: group.name,\r\n                });\r\n                this.fetchHistory.next();\r\n            });\r\n    }\r\n\r\n    addNoteToCustomer({ note }: { note: string }) {\r\n        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {\r\n            this.fetchHistory.next();\r\n            this.notificationService.success(_('common.notify-create-success'), {\r\n                entity: 'Note',\r\n            });\r\n        });\r\n    }\r\n\r\n    updateNote(entry: HistoryEntry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    displayPrivacyControls: false,\r\n                    note: entry.data.note,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.customer.updateCustomerNote({\r\n                            noteId: entry.id,\r\n                            note: result.note,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-update-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    deleteNote(entry: HistoryEntry) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('common.confirm-delete-note'),\r\n                body: entry.data.note,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: CustomerWithOrders): void {\r\n        const customerGroup = this.detailForm.get('customer');\r\n        if (customerGroup) {\r\n            customerGroup.patchValue({\r\n                title: entity.title,\r\n                firstName: entity.firstName,\r\n                lastName: entity.lastName,\r\n                phoneNumber: entity.phoneNumber,\r\n                emailAddress: entity.emailAddress,\r\n            });\r\n        }\r\n\r\n        if (entity.addresses) {\r\n            const addressesArray = new FormArray([]);\r\n            for (const address of entity.addresses) {\r\n                const { customFields, ...rest } = address as any;\r\n                const addressGroup = this.formBuilder.group({\r\n                    ...rest,\r\n                    countryCode: address.country.code,\r\n                });\r\n                addressesArray.push(addressGroup);\r\n                if (address.defaultShippingAddress) {\r\n                    this.defaultShippingAddressId = address.id;\r\n                }\r\n                if (address.defaultBillingAddress) {\r\n                    this.defaultBillingAddressId = address.id;\r\n                }\r\n\r\n                if (this.addressCustomFields.length) {\r\n                    const customFieldsGroup = this.formBuilder.group({});\r\n                    for (const fieldDef of this.addressCustomFields) {\r\n                        const key = fieldDef.name;\r\n                        const value = (address as any).customFields?.[key];\r\n                        const control = new FormControl(value);\r\n                        customFieldsGroup.addControl(key, control);\r\n                    }\r\n                    addressGroup.addControl('customFields', customFieldsGroup);\r\n                }\r\n            }\r\n            this.detailForm.setControl('addresses', addressesArray);\r\n        }\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customer', 'customFields']),\r\n                entity,\r\n            );\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    /**\r\n     * Refetch the customer with the current order list settings.\r\n     */\r\n    private fetchOrdersList() {\r\n        this.dataService.customer\r\n            .getCustomer(this.id, {\r\n                take: this.ordersPerPage,\r\n                skip: (this.currentOrdersPage - 1) * this.ordersPerPage,\r\n            })\r\n            .single$.pipe(\r\n                map(data => data.customer),\r\n                filter(notNullOrUndefined),\r\n            )\r\n            .subscribe(result => this.orderListUpdates$.next(result));\r\n    }\r\n}\r\n","import { merge as mergeStatic } from '../observable/merge';\nexport function merge(...observables) {\n    return (source) => source.lift.call(mergeStatic(source, ...observables));\n}\n","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\r\n    <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\r\n</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"CustomerGroup\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"form.get('customFields')\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!form.valid\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\r\n        <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n    CreateCustomerGroupInput,\r\n    CustomFieldConfig,\r\n    Dialog,\r\n    ServerConfigService,\r\n    UpdateCustomerGroupInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-detail-dialog',\r\n    templateUrl: './customer-group-detail-dialog.component.html',\r\n    styleUrls: ['./customer-group-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupDetailDialogComponent implements Dialog<CreateCustomerGroupInput>, OnInit {\r\n    group: { id?: string; name: string; customFields?: { [name: string]: any } };\r\n    resolveWith: (result?: CreateCustomerGroupInput) => void;\r\n    customFields: CustomFieldConfig[];\r\n    form: FormGroup;\r\n\r\n    constructor(private serverConfigService: ServerConfigService, private formBuilder: FormBuilder) {\r\n        this.customFields = this.serverConfigService.getCustomFieldsFor('CustomerGroup');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            name: [this.group.name, Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.form.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = this.group.customFields?.[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.form.value);\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left> </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-group-list\"></vdr-action-bar-items>\r\n        <button class=\"btn btn-primary\" *vdrIfPermissions=\"'CreateCustomerGroup'\" (click)=\"create()\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-customer-group' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"group-wrapper\">\r\n    <div class=\"group-list\">\r\n        <table\r\n            class=\"table mt0\"\r\n            [class.expanded]=\"activeGroup$ | async\"\r\n            *ngIf=\"!(listIsEmpty$ | async); else emptyPlaceholder\"\r\n        >\r\n            <tbody>\r\n                <tr\r\n                    *ngFor=\"let group of groups$ | async\"\r\n                    [class.active]=\"group.id === (activeGroup$ | async)?.id\"\r\n                >\r\n                    <td class=\"left align-middle\"><vdr-entity-info [entity]=\"group\"></vdr-entity-info></td>\r\n                    <td class=\"left align-middle\">\r\n                        <vdr-chip [colorFrom]=\"group.id\">{{ group.name }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"text-right align-middle\">\r\n                        <a\r\n                            class=\"btn btn-link btn-sm\"\r\n                            [routerLink]=\"['./', { contents: group.id }]\"\r\n                            queryParamsHandling=\"preserve\"\r\n                        >\r\n                            <clr-icon shape=\"view-list\"></clr-icon>\r\n                            {{ 'customer.view-group-members' | translate }}\r\n                        </a>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <button class=\"btn btn-link btn-sm\" (click)=\"update(group)\">\r\n                            <clr-icon shape=\"edit\"></clr-icon>\r\n                            {{ 'common.edit' | translate }}\r\n                        </button>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    class=\"button\"\r\n                                    vdrDropdownItem\r\n                                    (click)=\"delete(group.id)\"\r\n                                    [disabled]=\"!('DeleteCustomerGroup' | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <ng-template #emptyPlaceholder>\r\n        <vdr-empty-placeholder></vdr-empty-placeholder>\r\n    </ng-template>\r\n    <div class=\"group-members\" [class.expanded]=\"activeGroup$ | async\">\r\n        <ng-container *ngIf=\"activeGroup$ | async as activeGroup\">\r\n            <div class=\"flex\">\r\n                <div class=\"header-title-row\">{{ activeGroup.name }} ({{ membersTotal$ | async }})</div>\r\n                <div class=\"flex-spacer\"></div>\r\n                <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\r\n                    <clr-icon shape=\"close\"></clr-icon>\r\n                </button>\r\n            </div>\r\n            <div class=\"controls\">\r\n                <vdr-dropdown>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn btn-secondary btn-sm\"\r\n                        vdrDropdownTrigger\r\n                        [disabled]=\"selectedCustomerIds.length === 0\"\r\n                    >\r\n                        {{ 'common.with-selected' | translate }}\r\n                        <clr-icon shape=\"caret down\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"removeFromGroup(activeGroup, selectedCustomerIds)\"\r\n                            vdrDropdownItem\r\n                            [disabled]=\"!('UpdateCustomerGroup' | hasPermission)\"\r\n                        >\r\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'customer.remove-from-group' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <button class=\"btn btn-secondary btn-sm\" (click)=\"addToGroup(activeGroup)\">\r\n                    {{ 'customer.add-customers-to-group' | translate: { groupName: activeGroup.name } }}\r\n                </button>\r\n            </div>\r\n            <vdr-customer-group-member-list\r\n                [members]=\"members$ | async\"\r\n                [route]=\"route\"\r\n                [totalItems]=\"membersTotal$ | async\"\r\n                [selectedMemberIds]=\"selectedCustomerIds\"\r\n                (selectionChange)=\"selectedCustomerIds = $event\"\r\n                (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\r\n            ></vdr-customer-group-member-list>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetCustomerGroups,\r\n    GetCustomerGroupWithCustomers,\r\n    GetZones,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { AddCustomerToGroupDialogComponent } from '../add-customer-to-group-dialog/add-customer-to-group-dialog.component';\r\nimport { CustomerGroupDetailDialogComponent } from '../customer-group-detail-dialog/customer-group-detail-dialog.component';\r\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-list',\r\n    templateUrl: './customer-group-list.component.html',\r\n    styleUrls: ['./customer-group-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupListComponent implements OnInit {\r\n    activeGroup$: Observable<GetCustomerGroups.Items | undefined>;\r\n    groups$: Observable<GetCustomerGroups.Items[]>;\r\n    listIsEmpty$: Observable<boolean>;\r\n    members$: Observable<GetCustomerGroupWithCustomers.Items[]>;\r\n    membersTotal$: Observable<number>;\r\n    selectedCustomerIds: string[] = [];\r\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\r\n        skip: 0,\r\n        take: 0,\r\n        filterTerm: '',\r\n    });\r\n    private refreshActiveGroupMembers$ = new BehaviorSubject<void>(undefined);\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        public route: ActivatedRoute,\r\n        private router: Router,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.groups$ = this.dataService.customer\r\n            .getCustomerGroupList()\r\n            .mapStream(data => data.customerGroups.items);\r\n        const activeGroupId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n            tap(() => (this.selectedCustomerIds = [])),\r\n        );\r\n        this.listIsEmpty$ = this.groups$.pipe(map(groups => groups.length === 0));\r\n        this.activeGroup$ = combineLatest(this.groups$, activeGroupId$).pipe(\r\n            map(([groups, activeGroupId]) => {\r\n                if (activeGroupId) {\r\n                    return groups.find(g => g.id === activeGroupId);\r\n                }\r\n            }),\r\n        );\r\n        const membersResult$ = combineLatest(\r\n            this.activeGroup$,\r\n            this.fetchGroupMembers$,\r\n            this.refreshActiveGroupMembers$,\r\n        ).pipe(\r\n            switchMap(([activeGroup, { skip, take, filterTerm }]) => {\r\n                if (activeGroup) {\r\n                    return this.dataService.customer\r\n                        .getCustomerGroupWithCustomers(activeGroup.id, {\r\n                            skip,\r\n                            take,\r\n                            filter: {\r\n                                emailAddress: {\r\n                                    contains: filterTerm,\r\n                                },\r\n                            },\r\n                        })\r\n                        .mapStream(res => res.customerGroup?.customers);\r\n                } else {\r\n                    return of(undefined);\r\n                }\r\n            }),\r\n        );\r\n\r\n        this.members$ = membersResult$.pipe(map(res => res?.items ?? []));\r\n        this.membersTotal$ = membersResult$.pipe(map(res => res?.totalItems ?? 0));\r\n    }\r\n\r\n    create() {\r\n        this.modalService\r\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group: { name: '' } } })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result\r\n                        ? this.dataService.customer.createCustomerGroup({ ...result, customerIds: [] })\r\n                        : EMPTY,\r\n                ),\r\n                // refresh list\r\n                switchMap(() => this.dataService.customer.getCustomerGroupList().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    delete(groupId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('customer.confirm-delete-customer-group'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.customer.deleteCustomerGroup(groupId) : EMPTY,\r\n                ),\r\n\r\n                switchMap(result => {\r\n                    if (result.deleteCustomerGroup.result === DeletionResult.DELETED) {\r\n                        // refresh list\r\n                        return this.dataService.customer\r\n                            .getCustomerGroupList()\r\n                            .mapSingle(() => ({ errorMessage: false }));\r\n                    } else {\r\n                        return of({ errorMessage: result.deleteCustomerGroup.message });\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    if (typeof result.errorMessage === 'string') {\r\n                        this.notificationService.error(result.errorMessage);\r\n                    } else {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'CustomerGroup',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    update(group: GetCustomerGroups.Items) {\r\n        this.modalService\r\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group } })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result\r\n                        ? this.dataService.customer.updateCustomerGroup({ id: group.id, ...result })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeMembers() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    addToGroup(group: GetCustomerGroupWithCustomers.CustomerGroup) {\r\n        this.modalService\r\n            .fromComponent(AddCustomerToGroupDialogComponent, {\r\n                locals: {\r\n                    group,\r\n                    route: this.route,\r\n                },\r\n                size: 'md',\r\n                verticalAlign: 'top',\r\n            })\r\n            .pipe(\r\n                switchMap(customerIds =>\r\n                    customerIds\r\n                        ? this.dataService.customer\r\n                              .addCustomersToGroup(group.id, customerIds)\r\n                              .pipe(mapTo(customerIds))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe({\r\n                next: result => {\r\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\r\n                        customerCount: result.length,\r\n                        groupName: group.name,\r\n                    });\r\n                    this.refreshActiveGroupMembers$.next();\r\n                    this.selectedCustomerIds = [];\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromGroup(group: GetZones.Zones, customerIds: string[]) {\r\n        this.dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({\r\n            complete: () => {\r\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\r\n                    customerCount: customerIds.length,\r\n                    groupName: group.name,\r\n                });\r\n                this.refreshActiveGroupMembers$.next();\r\n                this.selectedCustomerIds = [];\r\n            },\r\n        });\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"emailSearchTerm\"\r\n            [formControl]=\"searchTerm\"\r\n            [placeholder]=\"'customer.search-customers-by-email-last-name-postal-code' | translate\"\r\n            class=\"search-input ml3\"\r\n        />\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateCustomer'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-customer' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'customer.customer-type' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-customer=\"item\">\r\n        <td class=\"left align-middle\">\r\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\r\n        </td>\r\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-customer-status-label [customer]=\"customer\"></vdr-customer-status-label>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', customer.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteCustomer(customer)\"\r\n                        [disabled]=\"!('DeleteCustomer' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetCustomerList,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\r\nimport { EMPTY } from 'rxjs';\r\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-list',\r\n    templateUrl: './customer-list.component.html',\r\n    styleUrls: ['./customer-list.component.scss'],\r\n})\r\nexport class CustomerListComponent\r\n    extends BaseListComponent<GetCustomerList.Query, GetCustomerList.Items>\r\n    implements OnInit\r\n{\r\n    searchTerm = new FormControl('');\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.customer.getCustomerList(...args).refetchOnChannelChange(),\r\n            data => data.customers,\r\n            (skip, take) => ({\r\n                options: {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        emailAddress: {\r\n                            contains: this.searchTerm.value,\r\n                        },\r\n                        lastName: {\r\n                            contains: this.searchTerm.value,\r\n                        },\r\n                        postalCode: {\r\n                            contains: this.searchTerm.value,\r\n                        },\r\n                    },\r\n                    filterOperator: LogicalOperator.OR,\r\n                    sort: {\r\n                        createdAt: SortOrder.DESC,\r\n                    },\r\n                },\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.searchTerm.valueChanges\r\n            .pipe(\r\n                filter(value => 2 < value.length || value.length === 0),\r\n                debounceTime(250),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(() => this.refresh());\r\n    }\r\n\r\n    deleteCustomer(customer: GetCustomerList.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-customer'),\r\n                body: `${customer.firstName} ${customer.lastName}`,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomer(customer.id) : EMPTY)))\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Customer } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CustomerResolver extends BaseEntityResolver<Customer.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Customer',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                title: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                emailAddress: '',\r\n                phoneNumber: null,\r\n                addresses: null,\r\n                user: null,\r\n            },\r\n            id => dataService.customer.getCustomer(id).mapStream(data => data.customer),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CanDeactivateDetailGuard,\r\n    createResolveData,\r\n    Customer,\r\n    detailBreadcrumb,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\r\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\r\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\r\nimport { CustomerResolver } from './providers/routing/customer-resolver';\r\n\r\nexport const customerRoutes: Route[] = [\r\n    {\r\n        path: 'customers',\r\n        component: CustomerListComponent,\r\n        pathMatch: '',\r\n        data: {\r\n            breadcrumb: _('breadcrumb.customers'),\r\n        },\r\n    },\r\n    {\r\n        path: 'customers/:id',\r\n        component: CustomerDetailComponent,\r\n        resolve: createResolveData(CustomerResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: customerBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'groups',\r\n        component: CustomerGroupListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.customer-groups'),\r\n        },\r\n    },\r\n];\r\n\r\nexport function customerBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Customer.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.customers',\r\n        getName: (customer) => `${customer.firstName} ${customer.lastName}`,\r\n        route: 'customers',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddCustomerToGroupDialogComponent } from './components/add-customer-to-group-dialog/add-customer-to-group-dialog.component';\r\nimport { AddressCardComponent } from './components/address-card/address-card.component';\r\nimport { AddressDetailDialogComponent } from './components/address-detail-dialog/address-detail-dialog.component';\r\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\r\nimport { CustomerGroupDetailDialogComponent } from './components/customer-group-detail-dialog/customer-group-detail-dialog.component';\r\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\r\nimport { CustomerGroupMemberListComponent } from './components/customer-group-member-list/customer-group-member-list.component';\r\nimport { CustomerHistoryComponent } from './components/customer-history/customer-history.component';\r\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\r\nimport { CustomerStatusLabelComponent } from './components/customer-status-label/customer-status-label.component';\r\nimport { SelectCustomerGroupDialogComponent } from './components/select-customer-group-dialog/select-customer-group-dialog.component';\r\nimport { customerRoutes } from './customer.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(customerRoutes)],\r\n    declarations: [\r\n        CustomerListComponent,\r\n        CustomerDetailComponent,\r\n        CustomerStatusLabelComponent,\r\n        AddressCardComponent,\r\n        CustomerGroupListComponent,\r\n        CustomerGroupDetailDialogComponent,\r\n        AddCustomerToGroupDialogComponent,\r\n        CustomerGroupMemberListComponent,\r\n        SelectCustomerGroupDialogComponent,\r\n        CustomerHistoryComponent,\r\n        AddressDetailDialogComponent,\r\n    ],\r\n    exports: [AddressCardComponent],\r\n})\r\nexport class CustomerModule {}\r\n"]}