{"version":3,"mappings":"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","names":["o","h","constructor","t","n","i","a","s","m","p","super","this","customFields","getCustomFieldConfig","detailForm","formBuilder","group","name","c","enabled","couponCode","perCustomerUsageLimit","startsAt","endsAt","conditions","array","actions","reduce","C","b","Object","ngOnInit","init","promotion$","entity$","dataService","promotion","getPromotionActionsAndConditions","single$","subscribe","allActions","promotionActions","allConditions","promotionConditions","changeDetector","markForCheck","ngOnDestroy","destroy","getAvailableConditions","filter","find","code","getConditionDefinition","getAvailableActions","getActionDefinition","saveButtonEnabled","dirty","valid","length","value","addCondition","addOperation","markAsDirty","addAction","removeCondition","removeOperation","removeAction","formArrayOf","get","create","mapOperationsToInputs","createPromotion","__typename","notificationService","success","l","entity","markAsPristine","router","navigate","id","relativeTo","route","error","message","save","pipe","Q","I","updatePromotion","setFormValues","patchValue","forEach","setCustomFieldFormValues","map","arguments","values","args","d","findIndex","_defineProperty","getDefaultArgValue","push","control","Error","removeAt","splice","selectors","v","getPromotions","refetchOnChannelChange","promotions","createQueryOptions","searchForm","to","valueChanges","eo","queryParamMap","io","destroy$","params","setPageNumber","refresh","deletePromotion","modalService","dialog","title","buttons","type","label","returnValue","ro","no","contains","options","skip","take","g","createdAt","updatedAt","getPromotion","mapStream","factory","Éµfac","N","path","component","data","breadcrumb","resolve","canDeactivate","q","e","breadcrumbKey","getName","Z","u"],"sources":["webpack:///src/lib/marketing/src/components/promotion-detail/promotion-detail.component.html","webpack:///src/lib/marketing/src/components/promotion-detail/promotion-detail.component.ts","webpack:///src/lib/marketing/src/components/promotion-list/promotion-list.component.html","webpack:///src/lib/marketing/src/components/promotion-list/promotion-list.component.ts","webpack:///src/lib/marketing/src/providers/routing/promotion-resolver.ts","webpack:///src/lib/marketing/src/marketing.routes.ts","webpack:///src/lib/marketing/src/marketing.module.ts"],"sourcesContent":["<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <clr-toggle-wrapper *vdrIfPermissions=\"'UpdatePromotion'\">\r\n                <input type=\"checkbox\" clrToggle name=\"enabled\" [formControl]=\"detailForm.get(['enabled'])\" />\r\n                <label>{{ 'common.enabled' | translate }}</label>\r\n            </clr-toggle-wrapper>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"promotion-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdatePromotion'\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'marketing.starts-at' | translate\" for=\"startsAt\">\r\n        <vdr-datetime-picker formControlName=\"startsAt\"></vdr-datetime-picker>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'marketing.ends-at' | translate\" for=\"endsAt\">\r\n        <vdr-datetime-picker formControlName=\"endsAt\"></vdr-datetime-picker>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'marketing.coupon-code' | translate\" for=\"couponCode\">\r\n        <input\r\n            id=\"couponCode\"\r\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n            type=\"text\"\r\n            formControlName=\"couponCode\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'marketing.per-customer-limit' | translate\" for=\"perCustomerUsageLimit\">\r\n        <input\r\n            id=\"perCustomerUsageLimit\"\r\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            max=\"999\"\r\n            formControlName=\"perCustomerUsageLimit\"\r\n        />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Promotion\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"promotion-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col\" formArrayName=\"conditions\">\r\n            <label class=\"clr-control-label\">{{ 'marketing.conditions' | translate }}</label>\r\n            <ng-container *ngFor=\"let condition of conditions; index as i\">\r\n                <vdr-configurable-input\r\n                    (remove)=\"removeCondition($event)\"\r\n                    [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n                    [operation]=\"condition\"\r\n                    [operationDefinition]=\"getConditionDefinition(condition)\"\r\n                    [formControlName]=\"i\"\r\n                ></vdr-configurable-input>\r\n            </ng-container>\r\n\r\n            <div>\r\n                <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'marketing.add-condition' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let condition of getAvailableConditions()\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"addCondition(condition)\"\r\n                        >\r\n                            {{ condition.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\" formArrayName=\"actions\">\r\n            <label class=\"clr-control-label\">{{ 'marketing.actions' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngFor=\"let action of actions; index as i\"\r\n                (remove)=\"removeAction($event)\"\r\n                [operation]=\"action\"\r\n                [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n                [operationDefinition]=\"getActionDefinition(action)\"\r\n                [formControlName]=\"i\"\r\n            ></vdr-configurable-input>\r\n            <div>\r\n                <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'marketing.add-action' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let action of getAvailableActions()\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"addAction(action)\"\r\n                        >\r\n                            {{ action.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    ConfigurableOperationInput,\r\n    CreatePromotionInput,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    getConfigArgValue,\r\n    getDefaultConfigArgValue,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Promotion,\r\n    ServerConfigService,\r\n    UpdatePromotionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-promotion-detail',\r\n    templateUrl: './promotion-detail.component.html',\r\n    styleUrls: ['./promotion-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PromotionDetailComponent\r\n    extends BaseDetailComponent<Promotion.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    promotion$: Observable<Promotion.Fragment>;\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    conditions: ConfigurableOperation[] = [];\r\n    actions: ConfigurableOperation[] = [];\r\n\r\n    private allConditions: ConfigurableOperationDefinition[] = [];\r\n    private allActions: ConfigurableOperationDefinition[] = [];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Promotion');\r\n        this.detailForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            enabled: true,\r\n            couponCode: null,\r\n            perCustomerUsageLimit: null,\r\n            startsAt: null,\r\n            endsAt: null,\r\n            conditions: this.formBuilder.array([]),\r\n            actions: this.formBuilder.array([]),\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.promotion$ = this.entity$;\r\n        this.dataService.promotion.getPromotionActionsAndConditions().single$.subscribe(data => {\r\n            this.allActions = data.promotionActions;\r\n            this.allConditions = data.promotionConditions;\r\n            this.changeDetector.markForCheck();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    getAvailableConditions(): ConfigurableOperationDefinition[] {\r\n        return this.allConditions.filter(o => !this.conditions.find(c => c.code === o.code));\r\n    }\r\n\r\n    getConditionDefinition(condition: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\r\n        return this.allConditions.find(c => c.code === condition.code);\r\n    }\r\n\r\n    getAvailableActions(): ConfigurableOperationDefinition[] {\r\n        return this.allActions.filter(o => !this.actions.find(a => a.code === o.code));\r\n    }\r\n\r\n    getActionDefinition(action: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\r\n        return this.allActions.find(c => c.code === action.code);\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return (\r\n            this.detailForm.dirty &&\r\n            this.detailForm.valid &&\r\n            (this.conditions.length !== 0 || this.detailForm.value.couponCode) &&\r\n            this.actions.length !== 0\r\n        );\r\n    }\r\n\r\n    addCondition(condition: ConfigurableOperation) {\r\n        this.addOperation('conditions', condition);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    addAction(action: ConfigurableOperation) {\r\n        this.addOperation('actions', action);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeCondition(condition: ConfigurableOperation) {\r\n        this.removeOperation('conditions', condition);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeAction(action: ConfigurableOperation) {\r\n        this.removeOperation('actions', action);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    formArrayOf(key: 'conditions' | 'actions'): FormArray {\r\n        return this.detailForm.get(key) as FormArray;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input: CreatePromotionInput = {\r\n            name: formValue.name,\r\n            enabled: true,\r\n            couponCode: formValue.couponCode,\r\n            perCustomerUsageLimit: formValue.perCustomerUsageLimit,\r\n            startsAt: formValue.startsAt,\r\n            endsAt: formValue.endsAt,\r\n            conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\r\n            actions: this.mapOperationsToInputs(this.actions, formValue.actions),\r\n            customFields: formValue.customFields,\r\n        };\r\n        this.dataService.promotion.createPromotion(input).subscribe(\r\n            ({ createPromotion }) => {\r\n                switch (createPromotion.__typename) {\r\n                    case 'Promotion':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Promotion',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', createPromotion.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'MissingConditionsError':\r\n                        this.notificationService.error(createPromotion.message);\r\n                        break;\r\n                }\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'Promotion',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.promotion$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(promotion => {\r\n                    const input: UpdatePromotionInput = {\r\n                        id: promotion.id,\r\n                        name: formValue.name,\r\n                        enabled: formValue.enabled,\r\n                        couponCode: formValue.couponCode,\r\n                        perCustomerUsageLimit: formValue.perCustomerUsageLimit,\r\n                        startsAt: formValue.startsAt,\r\n                        endsAt: formValue.endsAt,\r\n                        conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\r\n                        actions: this.mapOperationsToInputs(this.actions, formValue.actions),\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.promotion.updatePromotion(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Promotion',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Promotion',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: Promotion.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            name: entity.name,\r\n            enabled: entity.enabled,\r\n            couponCode: entity.couponCode,\r\n            perCustomerUsageLimit: entity.perCustomerUsageLimit,\r\n            startsAt: entity.startsAt,\r\n            endsAt: entity.endsAt,\r\n        });\r\n        entity.conditions.forEach(o => {\r\n            this.addOperation('conditions', o);\r\n        });\r\n        entity.actions.forEach(o => this.addOperation('actions', o));\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\r\n     */\r\n    private mapOperationsToInputs(\r\n        operations: ConfigurableOperation[],\r\n        formValueOperations: any,\r\n    ): ConfigurableOperationInput[] {\r\n        return operations.map((o, i) => {\r\n            return {\r\n                code: o.code,\r\n                arguments: Object.values<any>(formValueOperations[i].args).map((value, j) => ({\r\n                    name: o.args[j].name,\r\n                    value: encodeConfigArgValue(value),\r\n                })),\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a new condition or action to the promotion.\r\n     */\r\n    private addOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\r\n        const operationsArray = this.formArrayOf(key);\r\n        const collection = key === 'conditions' ? this.conditions : this.actions;\r\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\r\n        if (index === -1) {\r\n            const argsHash = operation.args.reduce(\r\n                (output, arg) => ({\r\n                    ...output,\r\n                    [arg.name]:\r\n                        getConfigArgValue(arg.value) ?? this.getDefaultArgValue(key, operation, arg.name),\r\n                }),\r\n                {},\r\n            );\r\n            operationsArray.push(\r\n                this.formBuilder.control({\r\n                    code: operation.code,\r\n                    args: argsHash,\r\n                }),\r\n            );\r\n            collection.push({\r\n                code: operation.code,\r\n                args: operation.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\r\n            });\r\n        }\r\n    }\r\n\r\n    private getDefaultArgValue(\r\n        key: 'conditions' | 'actions',\r\n        operation: ConfigurableOperation,\r\n        argName: string,\r\n    ) {\r\n        const def =\r\n            key === 'conditions'\r\n                ? this.allConditions.find(c => c.code === operation.code)\r\n                : this.allActions.find(a => a.code === operation.code);\r\n        if (def) {\r\n            const argDef = def.args.find(a => a.name === argName);\r\n            if (argDef) {\r\n                return getDefaultConfigArgValue(argDef);\r\n            }\r\n        }\r\n        throw new Error(`Could not determine default value for \"argName\"`);\r\n    }\r\n\r\n    /**\r\n     * Removes a condition or action from the promotion.\r\n     */\r\n    private removeOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\r\n        const operationsArray = this.formArrayOf(key);\r\n        const collection = key === 'conditions' ? this.conditions : this.actions;\r\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\r\n        if (index !== -1) {\r\n            operationsArray.removeAt(index);\r\n            collection.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <form class=\"search-form\" [formGroup]=\"searchForm\">\r\n            <input\r\n                type=\"text\"\r\n                formControlName=\"name\"\r\n                [placeholder]=\"'marketing.search-by-name' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                formControlName=\"couponCode\"\r\n                [placeholder]=\"'marketing.search-by-coupon-code' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n        </form>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"promotion-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\"\r\n           *vdrIfPermissions=\"'CreatePromotion'\"\r\n           [routerLink]=\"['./create']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'marketing.create-new-promotion' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'marketing.coupon-code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'marketing.starts-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'marketing.ends-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-promotion=\"item\">\r\n        <td class=\"left align-middle\">{{ promotion.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-chip *ngIf=\"promotion.couponCode\">\r\n                {{ promotion.couponCode }}\r\n            </vdr-chip>\r\n        </td>\r\n        <td class=\"left align-middle\">{{ promotion.startsAt | localeDate: 'longDate' }}</td>\r\n        <td class=\"left align-middle\">{{ promotion.endsAt | localeDate: 'longDate' }}</td>\r\n        <td class=\"align-middle\">\r\n            <vdr-chip *ngIf=\"!promotion.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', promotion.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deletePromotion(promotion.id)\"\r\n                        [disabled]=\"!('DeletePromotion' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseListComponent, PromotionFilterParameter, PromotionListOptions } from '@vendure/admin-ui/core';\r\nimport { GetPromotionList } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\nimport { EMPTY, merge } from 'rxjs';\r\nimport { debounceTime, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\nexport type PromotionSearchForm = {\r\n    name: string;\r\n    couponCode: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-promotion-list',\r\n    templateUrl: './promotion-list.component.html',\r\n    styleUrls: ['./promotion-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PromotionListComponent\r\n    extends BaseListComponent<GetPromotionList.Query, GetPromotionList.Items>\r\n    implements OnInit {\r\n    searchForm = new FormGroup({\r\n        name: new FormControl(''),\r\n        couponCode: new FormControl(''),\r\n    });\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.promotion.getPromotions(...args).refetchOnChannelChange(),\r\n            data => data.promotions,\r\n            (skip, take) => this.createQueryOptions(skip, take, this.searchForm.value),\r\n        );\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n\r\n        merge(this.searchForm.valueChanges.pipe(debounceTime(250)), this.route.queryParamMap)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(val => {\r\n                if (!val.params) {\r\n                    this.setPageNumber(1);\r\n                }\r\n                this.refresh();\r\n            });\r\n    }\r\n\r\n    deletePromotion(promotionId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-promotion'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.promotion.deletePromotion(promotionId) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Promotion',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Promotion',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private createQueryOptions(\r\n        skip: number,\r\n        take: number,\r\n        searchForm: PromotionSearchForm,\r\n    ): { options: PromotionListOptions } {\r\n        const filter: PromotionFilterParameter = {};\r\n\r\n        if (searchForm.couponCode) {\r\n            filter.couponCode = { contains: searchForm.couponCode };\r\n        }\r\n\r\n        if (searchForm.name) {\r\n            filter.name = { contains: searchForm.name };\r\n        }\r\n\r\n        return {\r\n            options: {\r\n                skip,\r\n                take,\r\n                filter,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, Promotion } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PromotionResolver extends BaseEntityResolver<Promotion.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Promotion',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                enabled: false,\r\n                conditions: [],\r\n                actions: [],\r\n            },\r\n            id => dataService.promotion.getPromotion(id).mapStream(data => data.promotion),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { CanDeactivateDetailGuard, createResolveData, detailBreadcrumb, Promotion } from '@vendure/admin-ui/core';\r\n\r\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\r\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\r\nimport { PromotionResolver } from './providers/routing/promotion-resolver';\r\n\r\nexport const marketingRoutes: Route[] = [\r\n    {\r\n        path: 'promotions',\r\n        component: PromotionListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.promotions'),\r\n        },\r\n    },\r\n    {\r\n        path: 'promotions/:id',\r\n        component: PromotionDetailComponent,\r\n        resolve: createResolveData(PromotionResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: promotionBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function promotionBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Promotion.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.promotions',\r\n        getName: promotion => promotion.name,\r\n        route: 'promotions',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\r\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\r\nimport { marketingRoutes } from './marketing.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(marketingRoutes)],\r\n    declarations: [PromotionListComponent, PromotionDetailComponent],\r\n})\r\nexport class MarketingModule {}\r\n"]}