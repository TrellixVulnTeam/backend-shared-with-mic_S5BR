{"version":3,"mappings":"q0EAKO,QACHA,YAAmBC,6DADVC,GAA2BC,uCAA3BD,EAA2BE,8CCAjC,QACHJ,YAAmBC,6DADVI,GAA6BF,uCAA7BE,EAA6BD,gKCHlCD,kCADJA,SACIA,gCACJA,8BADmBA,sFA8BPA,wEADJA,SACIA,gCAGJA,6CAFSA,kEAAgD,kEAX7DA,gBAA8BA,SAAiBA,QAC/CA,gBAA8BA,SAAiBA,QAC/CA,gBACIA,oBAIJA,QACAA,gBACIA,gCAKJA,uCAd8BA,uBACAA,uBAGtBA,uCACAA,yCAIWA,qGCjBpB,QANPH,cAOaM,aAAwB,GACxBA,uBAA8B,GAC7BA,qBAAkB,IAAIH,MAGhCG,gBAAa,GAqCbA,sBAAoBL,IACT,EAAKK,KAAKC,kBAAkBC,QAAQP,EAAOQ,IApCtDC,kBACI,GAAwB,KAApBJ,KAAKK,WAAmB,CACxB,MAAMV,EAAOK,KAAKK,WAAWC,oBAC7B,OAAON,KAAKO,QAAQC,OAChBC,GAAKA,EAAEC,KAAKJ,oBAAoBK,SAAShB,IAASc,EAAEG,KAAKN,oBAAoBK,SAAShB,IAG1F,OAAOK,KAAKO,QAIpBM,iBACI,QAAIb,KAAKO,SACEP,KAAKC,kBAAkBa,SAAWd,KAAKO,QAAQO,OAM9DC,kBACQf,KAAKa,iBACLb,KAAKgB,gBAAgBC,KAAK,IAE1BjB,KAAKgB,gBAAgBC,KAAKjB,KAAKO,QAAQW,IAAIvB,GAAKA,EAAEQ,KAI1DgB,mBAAmBxB,GACXK,KAAKC,kBAAkBU,SAAShB,EAAOQ,IACvCH,KAAKgB,gBAAgBC,KAAKjB,KAAKC,kBAAkBO,OAAOC,GAAMA,IAAOd,EAAOQ,KAE5EH,KAAKgB,gBAAgBC,KAAK,IAAIjB,KAAKC,kBAAmBN,EAAOQ,4CAvC5DiB,8BAAuBtB,qFAIlBC,EAA6B,WAC7BH,EAA2B,wjBDnB7CC,iBACIA,gCAGAA,mBAGIA,+EAHJA,QAKJA,QACAA,4BAIIA,2CAAmBY,yBAAnBZ,CAA8C,oCAC3BY,+CAEnBZ,yBAAeA,8BAA+BA,QAC9CA,yBAAeA,gCAA+BA,QAC9CA,0BAAeA,gCAAkCA,QACjDA,0BACAA,8BAiBJA,eArCmBA,wCAKXA,0EAA4D,wBAKhEA,4CAA2B,iCAA3BA,CAA2B,+DAMZA,0CACAA,2CACAA,unBEnBSA,sKAUxBA,oBAAkCA,4DAAmBA,8BAAiCA,QACtFA,oBAAsBA,yDAClBA,8BACJA,gCAHqDA,2CACfA,uDAClCA,2FCDD,QAOHH,YAAoBC,sBAJpBK,oBAAqC,GAErCA,uBAA8B,GAI9BqB,WACI,MAAM1B,EAAmBK,KAAKsB,eAAeJ,IAAIT,GAAKA,EAAEN,IACxDH,KAAKuB,oBAAsBvB,KAAKwB,YAAYC,SACvCC,aAAa,KACbC,UAAUlB,GAAQA,EAAKmB,UAAUC,OACjCC,QAAKC,KAAItB,GAAaA,EAAUD,OAAOwB,IAAMrC,EAAiBgB,SAASqB,EAAE7B,OAGlF8B,SACIjC,KAAKkC,cAGTC,MACInC,KAAKkC,YAAYlC,KAAKC,0DAtBjBmC,GAA+BvC,uCAA/BuC,EAA+BtC,uSDX5CD,+BAEAA,kCAGIA,oFAEJA,QAEAA,uCANIA,2DAAuC,oSEG3BA,oBAAwFA,sGACpFA,8BACJA,cADIA,gGAGRA,cACIA,+BAMIA,wGACHA,QACLA,kEATmDA,8CAG3CA,sCAAgC,eAAhCA,CAAgC,sBAAhCA,CAAgC,0GAX5CA,cACIA,gBACIA,eAAKA,kBAAQA,8BAA+BA,QAASA,QACrDA,iBAAOA,8BAAqCA,QAAQA,cACpDA,2BAGJA,QACAA,uBAUJA,4CAhBqBA,mCACNA,yCACEA,2DAIcA,yCCShC,QANPH,cASaM,eAAW,EACVA,sBAAmB,IAAIH,MAGjCwB,WACIrB,KAAKqC,YAGTC,cAAc3C,EAAoBc,GACzBT,KAAKuC,UACNvC,KAAKwC,iBAAiBvB,KAAK,CAAEwB,aAAYC,UAIjDC,UAAUhD,GACN,MAAMc,EAAQd,EAAKiD,KAAKZ,IAAMhC,KAAK6C,kBAAkBlC,SAASqB,EAAEtB,OAChE,UAAWsB,KAAOrC,EACdK,KAAKwC,iBAAiBvB,KAAK,CAAEwB,WAAYT,EAAItB,KAAMgC,UAInDL,kBACJ,MAAM5B,EAAa,IAAIqC,IACjBd,EAAkC,GAClCe,EAAS,2CACf,UAAWC,KAAOhD,KAAKiD,sBAEnB,GADeF,EAAOG,KAAKF,EAAItC,MACnB,CACR,MAAMyC,EAAkC,QAAtBxD,IAAIe,KAAK0C,MAAML,UAAO,eAAG,GAC3C,GAAII,EAAW,CACX,MAAME,EAAW5C,EAAW6C,IAAIH,GAC5BE,EACAA,EAASE,KAAKP,GAEdvC,EAAW+C,IAAIL,EAAW,CAACH,UAG5BA,EAAIS,YACXzB,EAAQuB,KAAKP,GAGrBhD,KAAK0D,SAAW,IACT1B,EAAQd,IAAI8B,KACXW,MAAOX,EAAEtC,KACTkD,YAAaZ,EAAEY,YACfC,YAAa,CAACb,SAEfc,MAAMC,KAAKtD,EAAWuD,WAAW9C,IAAI,EAAE8B,EAAOiB,OAEzCN,QACAC,YAAa5D,KAAKkE,uBAAuBD,EAAK,IAC9CJ,YAAaI,MAMrBC,uBAAuBvE,GAC3B,OAAOA,EAAIiE,YAAYO,QAAQ,6BAA8B,gEA7DxDC,8BAAuBtE,6dDnBpCD,mBACIA,iBACIA,uBAmBJA,QACJA,eApBgCA,kSEIxBA,qBAGIA,4DAGAA,8BACJA,gCAHIA,8DAEAA,4FAGAA,qBAEIA,2DAIAA,8BACJA,iCAHIA,8DAEAA,yEANJA,gCAGKA,sEAkCbA,kDACIA,oBACJA,cAFuCA,oEAGvCA,kDAMIA,oBACJA,cALIA,8CAAyC,+CAM7CA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,gEAMJA,8BAPWA,kDAGHA,8CAA6B,yDAA7BA,CAA6B,wFAqBjCA,iBACIA,qBAEIA,mGAMAA,4DACJA,QACJA,8CANQA,2DAHAA,wBAIAA,yDAGAA,6DC/DT,iBACKwE,MAgBR3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BAhBZA,mBAAiC,GAEjCA,6BAAyE,GACzEA,uBAAmC,KAgB/BA,KAAKuE,aAAevE,KAAKwE,qBAAqB,iBAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrCC,aAAc,CAAC,GAAIC,eACnBC,UAAW,CAAC,GAAID,eAChBE,SAAU,CAAC,GAAIF,eACfG,SAAU,CAAC,IACXC,MAAO,CAAC,IACRV,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAtBvF2E,uBACI,OAAOD,OAAOE,OAAOtF,KAAKuF,yBA0B9BlE,WACIrB,KAAKwF,OACLxF,KAAKyF,eAAiBzF,KAAK0F,QAC3B1F,KAAK2F,UAAY3F,KAAKwB,YAAYoE,cAC7BC,SAAS,KACTlE,UAAUhC,GAAQA,EAAKsF,MAAMpD,MAAMrB,OAAOC,GAAKA,EAAEG,OAASkF,OAC/D9F,KAAKwB,YAAYuE,OAAOC,aAAaC,QAAQC,UAAU,EAAGF,iBACtD,IAAKrG,EAAWkE,YAAYlD,SAAS0D,2BAAiC,CAClE,MAAM5D,EAAcT,KAAKyE,WAAWnB,IAAI,SACpC7C,GACAA,EAAY0F,aAIxBnG,KAAKiD,sBAAwBjD,KAAKoG,oBAAoBC,2BAG1DC,cACItG,KAAKuG,UAGTC,aAAa7G,GACTK,KAAKyG,sBAGTC,mCACI,WAA8B1E,GAC1B,OAAOoD,OAAOpB,QAAQhC,GACjBxB,OAAO,EAAEuC,EAAYC,KAAYA,GACjC9B,IAAI,EAAE6B,EAAYC,KAAYD,GAEvC,GAAI/C,KAAK2G,mBACmB3G,KAAKuF,wBAAwBvF,KAAK2G,mBACrC,CAEjB,OAAOhH,EADeK,KAAKuF,wBAAwBvF,KAAK2G,mBAAmB9C,aAInF,MAAMpD,EAAW2E,OAAOE,OAAOtF,KAAKuF,yBACpC,OAAI,EAAI9E,EAASK,QACbd,KAAK2G,kBAAoBlG,EAAS,GAAGmG,UAC9BjH,EAAqBc,EAAS,GAAGoD,cAErC,GAGXgD,SACI,MAAMlH,EAAYK,KAAKyE,WAAW/B,MAC5BjC,EAA0C,CAC5CmE,aAAcjF,EAAUiF,aACxBE,UAAWnF,EAAUmF,UACrBC,SAAUpF,EAAUoF,SACpBC,SAAUrF,EAAUqF,SACpBT,aAAc5E,EAAU4E,aACxBuC,QAASnH,EAAUsF,MAAM/D,IAAIc,GAAQA,EAAK7B,KAE9CH,KAAKwB,YAAYoE,cAAcmB,oBAAoBtG,GAAeyF,UAC9DlE,IACIhC,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,kBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKsH,OAAOC,SAAS,CAAC,MAAOvF,EAAK+E,oBAAoB5G,IAAK,CAAEqH,WAAYxH,KAAKyH,SAElFzF,IACIhC,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,oBAMxBS,OACI3H,KAAKyF,eACA3D,QACG8F,KAAK,IACL,QAAS,EAAGzH,SACR,MAAMM,EAAYT,KAAKyE,WAAW/B,MAC5BV,EAA0C,CAC5C7B,KACAyE,aAAcnE,EAAUmE,aACxBE,UAAWrE,EAAUqE,UACrBC,SAAUtE,EAAUsE,SACpBC,SAAUvE,EAAUuE,SACpBT,aAAc9D,EAAU8D,aACxBuC,QAASrG,EAAUwE,MAAM/D,IAAI6B,GAAQA,EAAK5C,KAE9C,OAAOH,KAAKwB,YAAYoE,cAAciC,oBAAoB7F,MAGjEkE,UACGvG,IACIK,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,kBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,gBAExB1H,IACIK,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,oBAMlBY,cAAcnI,EAA8Bc,GAClDT,KAAKyE,WAAWsD,WAAW,CACvBnD,aAAcjF,EAAciF,aAC5BE,UAAWnF,EAAcmF,UACzBC,SAAUpF,EAAcoF,SACxBE,MAAOtF,EAAcqI,KAAK/C,QAE1BjF,KAAKuE,aAAazD,QAClBd,KAAKiI,yBACDjI,KAAKuE,aACLvE,KAAKyE,WAAWnB,IAAI,CAAC,iBACrB3D,GAGR,MAAMqC,EAAkBhC,KAAKyE,WAAWnB,IAAI,YACxCtB,IACKrC,EAAcQ,GAGf6B,EAAgBkG,cAAc,IAF9BlG,EAAgBkG,cAAc,CAACrD,iBAKvC7E,KAAKyG,sBAGDA,sBACJ,MAAM9G,EAAqBK,KAAKyE,WAAWnB,IAAI,SAC/C,GAAI3D,EAAoB,CACpB,MAAMc,EAAwBd,EAAmB+C,MAC3CV,EAA0B,IAAIc,IAC9BC,EAAmB,IAAID,IAE7B,UAAWE,KAAQvC,EACf,UAAWwD,KAAWjB,EAAKmF,SAAU,CAEjC,MAAM9E,EAAgBrB,EAD6BsB,IAAIW,EAAQ9D,KACnB,IAAIiI,IAEhDpF,EAAKa,YAAYwE,QAAQlD,GAAK9B,EAAclB,IAAIgD,IAChDnD,EAAwBwB,IAAIS,EAAQ9D,GAAIkD,GACxCN,EAAiBS,IAAIS,EAAQ9D,GAAI8D,EAAQrD,MAIjDZ,KAAKuF,wBAA0B,GAC/B,UAAWvC,KAAac,MAAMC,KAAK/B,EAAwBsG,QAAS,CAEhE,MAAMrE,EAAgBjC,EAAwBsB,IAAIN,GAC5CG,EAAkD,GACxD,UAAWE,KAAOrD,KAAKoG,oBAAoBC,2BACvClD,EAAgBE,EAAI3C,MAAQuD,EAAcsE,IAAIlF,EAAI3C,MAEtDV,KAAKuF,wBAAwBvC,GAAa,CAEtC4D,YACA4B,YAAazF,EAAiBO,IAAIN,GAClCa,YAAaV,6CA1MpBsF,IAAoB5I,mHAApB4I,GAAoB3I,kgDDlCjCD,0BACIA,uBACIA,8CACJA,QACAA,wBACIA,kCACAA,2CAQAA,0CAUJA,QACJA,QAEAA,mBACIA,mDACIA,8CAMJA,QACAA,mDACIA,8CAMJA,QACAA,mDACIA,+CAMJA,QACAA,sDAGAA,gFAQAA,8BASAA,gDAKAA,qBAAiCA,gCAAkCA,QACnEA,yBAKIA,kCAAUY,sCAEbZ,QAEDA,kBACIA,yBAYJA,QACAA,mCAKJA,+BAxGyBA,+CAMZA,4CAAsB,cAmBhBA,yCACCA,8DAKRA,+DAGQA,2DAKRA,+DAGQA,0DAKRA,+DAGSA,6CAIZA,kFAOkCA,6CAWnCA,oCAAmB,2BAGUA,8CAE7BA,iDAA2B,cAA3BA,CAA2B,mBASkCA,mDAc7DA,yEAAwD,gDAAxDA,CAAwD,kVEnGxDA,eACIA,sBACAA,8BACJA,eAH2BA,gCAEvBA,mJAmBJA,gBAA8BA,SAA6BA,QAC3DA,gBAA8BA,SAA4BA,QAC1DA,gBAA8BA,SAAgCA,QAC9DA,gBACIA,uDAKJA,QACAA,cACIA,yBACIA,qBACIA,gCACAA,uBACJA,QACAA,iCACIA,sBAGIA,iHAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,+BA7B8BA,4BACAA,2BACAA,+BAItBA,iDAAmC,4BAO/BA,sDAQIA,+DAIAA,sDC/BjB,iBAAyCwE,MAI5C3E,YACYC,EACRc,EACAuB,EACQe,EACAC,GAERsB,MAAM7D,EAAQuB,GANNhC,mBAGAA,oBACAA,2BAGRsE,MAAMoE,WACF,IAAIzE,IAAgBjE,KAAKwB,YAAYoE,cAAc+C,qBAAqB1E,GACvEA,GAASA,EAAK2E,gBAIvBC,oBAAoBlJ,GAChB,OAAOK,KAAK8I,aACPC,OAAO,CACJC,SAAOC,KAAE,wCACTC,KAAM,GAAGvJ,EAAcmF,aAAanF,EAAcoF,WAClDoE,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,MACG,QAAWrB,GACPA,EAAMT,KAAKwB,YAAYoE,cAAciD,oBAAoBlJ,EAAcQ,IAAMmJ,OAGpFpD,UACG,KACIlG,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,kBAEZlH,KAAKuJ,WAER9I,IACGT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,4DA1CnBsC,IAA0B3J,0FAA1B2J,GAA0B1J,0qBDlBvCD,0BACIA,wBACIA,kCACAA,sBAIJA,QACJA,QAEAA,4BAKIA,sCAAcY,oBAAdZ,CAAoC,wCACdY,2FAEtBZ,yBAAeA,gCAAuCA,QACtDA,0BAAeA,gCAAsCA,QACrDA,0BAAeA,gCAA0CA,QACzDA,0BACAA,0BACAA,iCAgCJA,eApDgEA,yDAQ5DA,4CAAwB,2CAAxBA,CAAwB,uCAAxBA,CAAwB,0CAOTA,mDACAA,kDACAA,wPEbXA,qBAGIA,4DAGAA,8BACJA,gCAHIA,yCAEAA,6FAGAA,qBAEIA,2DAIAA,8BACJA,iCAHIA,yCAEAA,oIANJA,iCAGKA,gEAiCLA,qBAA0DA,uCAA+BA,kCAA9CA,iBAAeA,wDAU1DA,qBACIA,4DACJA,kCAFqEA,iBACjEA,mFAuBJA,qBAA8DA,SAAeA,kCAAjCA,oBAAkBA,+CAGtEA,wBAKIA,0BACIA,mBACIA,8BACJA,QACJA,QACJA,eAPIA,6BAIQA,8FAaJA,qBAA8DA,SAAeA,kCAAjCA,oBAAkBA,+CAGtEA,wBAKIA,0BACIA,mBACIA,8BACJA,QACJA,QACJA,eAPIA,6BAIQA,mGAKZA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,gEAMJA,8BAPWA,kDAGHA,8CAA6B,yDAA7BA,CAA6B,4CCtGlC,iBACKwE,MAUR3E,YACIC,EACAc,EACUuB,EACFe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GANhChD,2BACFA,sBACEA,mBACFA,mBACAA,2BAXZA,mBAAgBoF,OAAOE,OAAOjB,OAErBrE,sBAAmB,CAACqE,iBAAuBA,oBAA0BA,qBAY1ErE,KAAKuE,aAAevE,KAAKwE,qBAAqB,WAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrC/D,KAAM,CAAC,GAAIiE,eACX4E,MAAO,CAAC,GAAI5E,eACZ6E,iBAAkB,EAAC,GACnBC,aAAc,CAAC,IACfC,sBAAuB,CAAC,GAAI/E,eAC5BgF,oBAAqB,GACrBC,iBAAkB,CAAC,GAAIjF,eACvBN,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAKvFW,WACIrB,KAAKwF,OACLxF,KAAK+J,OAAS/J,KAAKwB,YAAYC,SAASuI,WAAWC,UAAUtK,GAAQA,EAAKuK,OAC1ElK,KAAKmK,wBAA0BnK,KAAKoG,oBAAoBgE,wBAG5D9D,cACItG,KAAKuG,UAGT8D,oBACI,OAAOrK,KAAKyE,WAAW6F,OAAStK,KAAKyE,WAAW8F,MAGpD1D,SACI,IAAK7G,KAAKyE,WAAW6F,MACjB,OAEJ,MAAM3K,EAAYK,KAAKyE,WAAW/B,MAC5BjC,EAA4B,CAC9BG,KAAMjB,EAAUiB,KAChB6I,MAAO9J,EAAU8J,MACjBI,oBAAqBlK,EAAUkK,oBAC/BH,iBAAkB/J,EAAU+J,iBAC5BC,aAAchK,EAAUgK,aACxBC,sBAAuBjK,EAAUiK,sBACjCE,iBAAkBnK,EAAUmK,iBAC5BvF,aAAc5E,EAAU4E,cAE5BvE,KAAKwB,YAAYC,SACZ+I,cAAc/J,GACdqB,MACG,QAAS,EAAG0I,mBACRxK,KAAKwB,YAAYiJ,KAAKC,cAAczE,QAAQnE,MACxC,OAAI,EAAG6I,UACHA,KACAH,wBAIZI,MAAS,EAAGD,KAAIH,mBAEZxK,KAAKwB,YAAYuE,OAAO8E,mBAAmB7I,EAAImG,UAAUrG,MAAK,OAAI,IAAMiB,MAG/EmD,UAAUlE,IACP,OAAQA,EAAK8I,gBACJ,UACD9K,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKsH,OAAOC,SAAS,CAAC,MAAOvF,EAAK7B,IAAK,CAAEqH,WAAYxH,KAAKyH,QAC1D,UACC,4BACDzH,KAAKgH,oBAAoBU,MAAM1F,EAAK+I,YAMxDpD,OACI,IAAK3H,KAAKyE,WAAW6F,MACjB,OAEJ,MAAM3K,EAAYK,KAAKyE,WAAW/B,MAClC1C,KAAK0F,QACA5D,QACG8F,KAAK,IACL,QAASnH,IACL,MAAMuB,EAAQ,CACV7B,GAAIM,EAAQN,GACZS,KAAMjB,EAAUiB,KAChB6I,MAAO9J,EAAU8J,MACjBC,iBAAkB/J,EAAU+J,iBAC5BC,aAAchK,EAAUgK,aACxBC,sBAAuBjK,EAAUiK,sBACjCC,oBAAqBlK,EAAUkK,oBAC/BC,iBAAkBnK,EAAUmK,iBAC5BvF,aAAc5E,EAAU4E,cAE5B,OAAOvE,KAAKwB,YAAYC,SAASuJ,cAAchJ,MAGtDkE,UAAU,EAAG8E,oBACV,OAAQvK,EAAcqK,gBACb,UACD9K,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpB,UACC,4BACDrH,KAAKgH,oBAAoBU,MAAMjH,EAAcsK,YAQvDjD,cAAcnI,EAA0Bc,GAa9C,GAZAT,KAAKyE,WAAWsD,WAAW,CACvBnH,KAAMjB,EAAOiB,KACb6I,MAAO9J,EAAO8J,OAASzJ,KAAKiL,gBAC5BvB,iBAAkB/J,EAAO+J,iBACzBC,aAAchK,EAAOgK,aACrBC,sBAAuBjK,EAAOuL,oBAAsBvL,EAAOuL,oBAAoB/K,GAAK,GACpF0J,oBAAqBlK,EAAOkK,oBAC5BC,iBAAkBnK,EAAOwL,eAAiBxL,EAAOwL,eAAehL,GAAK,KAErEH,KAAKuE,aAAazD,QAClBd,KAAKiI,yBAAyBjI,KAAKuE,aAAcvE,KAAKyE,WAAWnB,IAAI,CAAC,iBAAkB3D,GAExFA,EAAOiB,OAASkF,KAAsB,CACtC,MAAM9D,EAAchC,KAAKyE,WAAWnB,IAAI,QACpCtB,GACAA,EAAYmE,WAKhB8E,gBACJ,MAAMtL,EAAe,IAAMyL,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAChE,MAAO,GAAG5L,MAAiBA,8CAlKtB6L,IAAsB3L,mHAAtB2L,GAAsB1L,qtDD1BnCD,0BACIA,uBACIA,8CACJA,QAEAA,wBACIA,kCACAA,4CAQAA,2CAUJA,QACJA,QAEAA,mBACIA,mDACIA,8CAMJA,QACAA,mDACIA,8CAMJA,QACAA,mDACIA,gDAMIA,6BACJA,QACJA,QACAA,oDACIA,gDAMIA,+CAGJA,QACJA,QACAA,oDACIA,+BACIA,+CAOJA,QACJA,QACAA,mDACIA,gDAMIA,sBACAA,+CACJA,QACJA,QACAA,gCAYAA,oDACIA,gDAMIA,sBACAA,+CACJA,QACJA,QACAA,gCAYAA,8BASAA,gDAKJA,+BAxIyBA,+CAOZA,4CAAsB,cAmBhBA,yCACCA,mDAIRA,4DAIQA,8DAIRA,4DAIQA,yDAKRA,+DAEyBA,0CAGjBA,+DAKRA,+DAEiCA,iEAKzBA,mEAOJA,+DAIIA,iEAKRA,+DAGyBA,gDAI5BA,qFAWWA,sEAKRA,+DAGyBA,gDAI5BA,0FAWkCA,6CAWnCA,oCAAmB,+aEpInBA,eACIA,sBACAA,8BACJA,eAH2BA,gCAEvBA,oMAUJA,gBACIA,+BACAA,4DACJA,QACAA,gBACIA,uDAKJA,QACAA,gBACIA,wBACIA,qBACIA,gCACAA,wBACJA,QACAA,iCACIA,sBAGIA,8GAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,yCA7BuBA,qCACnBA,sDAKIA,kDAAmC,4BAMkCA,sDACjEA,sDAQIA,sDAIAA,gHCxBjB,SAIHH,YACYC,EACAc,EACAuB,GAFAhC,mBACAA,oBACAA,2BALJA,cAAW,IAAIyL,MAOnBzL,KAAK0L,UAAY1L,KAAK2L,SAAS7J,MAC3B,QAAU,MACV8J,MAAU,IAAM5L,KAAKwB,YAAYC,SAASoK,cAAclK,UAAUoB,GAAQA,EAAKoF,YAIvF2D,iBAAiBnM,GACb,OAAOA,IAAgBmG,KAG3BiG,cAAcpM,GACVK,KAAK8I,aACAC,OAAO,CACJC,SAAOC,KAAE,kCACTE,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,MACG,QAAUrB,GAAaA,EAAWT,KAAKwB,YAAYC,SAASsK,cAAcpM,GAAM2J,SAChFsB,MAAS,IAAM5K,KAAKwB,YAAYiJ,KAAKC,cAAczE,UAEnD,QAASxF,GAAQT,KAAKwB,YAAYuE,OAAO8E,mBAAmBpK,EAAKkK,GAAIxC,YAExEjC,UACG,KACIlG,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAK2L,SAASK,KAAK,IAEvBvL,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,sDA3CnB+E,IAAoBpM,kEAApBoM,GAAoBnM,+lBDjBjCD,0BACIA,wBACIA,kCACAA,sBAIJA,QACJA,QAEAA,6CACIA,yBAAeA,8BAA+BA,QAC9CA,yBACAA,0BACAA,iCAiCJA,eA5CgEA,+CAOhDA,+CACGA,0PECXA,qBAGIA,4DAGAA,8BACJA,gCAHIA,8DAEAA,6FAGAA,qBAGIA,2DAGAA,8BACJA,iCAHIA,8DAEAA,6EANJA,iDAEKA,wEAsCbA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,gEAMJA,8BAPWA,kDAGHA,8CAA6B,yDAA7BA,CAA6B,4CCtClC,iBACKwE,MAQR3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BATHA,sBAAmB,CAACqE,qBAA2BA,qBAYpDrE,KAAKuE,aAAevE,KAAKwE,qBAAqB,WAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrC/D,KAAM,CAAC,GAAIiE,eACXnE,KAAM,CAAC,GAAImE,eACXqH,QAAS,EAAC,GACV3H,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAKvFW,WACIrB,KAAKwF,OACLxF,KAAKmM,SAAWnM,KAAK0F,QAGzBY,cACItG,KAAKuG,UAGTM,UACS7G,KAAKyE,WAAW6F,UAGrB8B,OAAcpM,KAAKmM,SAAUnM,KAAKqM,eAC7BvK,MACG,OAAK,IACL,QAAS,EAAEnC,EAASc,MAChB,MAAMuB,EAAYhC,KAAKyE,WAAW/B,MAC5BK,KAA4BsB,OAA0B,CACxDiI,aAAc3M,EACd4M,cAAevK,EACfwK,kBAAmBxM,KAAKuE,aACxBkI,eACAC,mBAAoB,CAChBhM,KAAMsB,EAAUtB,KAChB+L,kBAGR,OAAOzM,KAAKwB,YAAYC,SAASkL,cAAc5J,MAGtDmD,UACGvG,IACIK,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKsH,OAAOC,SAAS,CAAC,MAAO5H,EAAKgN,cAAcxM,IAAK,CAAEqH,WAAYxH,KAAKyH,SAE5E9H,IACIK,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,cAM5BS,UACIyE,OAAcpM,KAAKmM,SAAUnM,KAAKqM,eAC7BvK,MACG,OAAK,IACL,QAAS,EAAEnC,EAASc,MAChB,MAAMuB,EAAYhC,KAAKyE,WAAW/B,MAC5BK,KAA4BsB,OAA0B,CACxDiI,aAAc3M,EACd4M,cAAevK,EACfwK,kBAAmBxM,KAAKuE,aACxBkI,eACAC,mBAAoB,CAChBhM,KAAMsB,EAAUtB,KAChB+L,kBAGR,OAAOzM,KAAKwB,YAAYC,SAASmL,cAAc7J,MAGtDmD,UACGvG,IACIK,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,gBAExB1H,IACIK,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,cAMlBY,cAAcnI,EAAkBc,GACtC,MAAMuB,GAAqB,SAAgBrC,EAASc,GAEpDT,KAAKyE,WAAWsD,WAAW,CACvBnH,KAAMjB,EAAQiB,KACdF,KAAMsB,EAAqBA,EAAmBtB,KAAO,GACrDwL,QAASvM,EAAQuM,UAGjBlM,KAAKuE,aAAazD,QAClBd,KAAKiI,yBACDjI,KAAKuE,aACLvE,KAAKyE,WAAWnB,IAAI,CAAC,iBACrB3D,EACAqC,2CA/HH2I,IAAsB9K,mHAAtB8K,GAAsB7K,o9BD3BnCD,0BACIA,uBACIA,8CACAA,mCAIIA,8CAAsBY,sEACzBZ,QACLA,QACAA,wBACIA,kCACAA,8CAQAA,4CAUJA,QACJA,QAEAA,mBACIA,mDACIA,8CAMJA,QACAA,mDACIA,8CAMJA,QACAA,oDACIA,+BACIA,+CAOJA,QACJA,QACAA,8BASAA,gDAKJA,gCAzEyBA,+CAEbA,gDAA2B,2DAA3BA,CAA2B,mDAU1BA,6CAAsB,cAmBhBA,yCACCA,mDAKRA,4DAGQA,mDAKRA,4DAGQA,sDAOJA,+DAI2BA,6CAWnCA,oCAAmB,8SEtDnBA,eACIA,sBACAA,8BACJA,eAH2BA,gCAEvBA,mLAkBAA,gBACIA,uBAAkCA,SAAeA,QACrDA,kCAFGA,iDACWA,mCAAwBA,8JAJ1CA,gBAA8BA,SAAkBA,QAChDA,gBAA8BA,SAAkBA,QAChDA,gBACIA,sBAGJA,QACAA,gBACIA,oBAIJA,QACAA,iBACIA,yDAKJA,QACAA,kBACIA,yBACIA,sBACIA,gCACAA,wBACJA,QACAA,iCACIA,sBAGIA,8GAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,+BAvC8BA,uBACAA,uBAEuDA,kCAM7EA,uCACAA,yCAMAA,mDAAmC,4BAO/BA,sDASIA,sDAGAA,oHC/CjB,SAWHH,YACYC,EACAc,EACAuB,EACAe,GAHA/C,mBACAA,2BACAA,oBACAA,2BAdZA,gBAAa,IAAI6E,KAAY,IAMrB7E,eAAoC,GACpCA,cAAW,IAAIyL,MACfzL,cAAW,IAAIyL,MASvBpK,WACIrB,KAAK6M,iBAAmB7M,KAAKwB,YAAYuE,OACpC+G,UACAnL,UAAU,EAAGmL,aAAcrM,EAAQsM,iBAExC,MAAMpN,GAAa,SACfK,KAAK6M,iBACL7M,KAAKgN,WAAWC,aAAanL,MAAK,QAAU,QAC9CA,QACEC,KAAI,EAAEtB,EAAIuB,KAAUA,IACpB,QAAUvB,GAAQT,KAAKwB,YAAYC,SAASC,aAAa,IAAK,EAAGjB,GAAMwF,UACvE,QAAIxF,IACAT,KAAK4B,UAAYnB,EAAKmB,UAAUC,SAEpC,OAAIpB,GAAQA,EAAKmB,UAAUC,QAG/B7B,KAAK+J,OAAS/J,KAAKwB,YAAYC,SAASuI,WAAWrI,UAAUlB,GAAQA,EAAKyJ,OAE1ElK,KAAKkN,qBAAsB,SAAcvN,EAAYK,KAAK+J,QAAQjI,MAC9D,OAAI,EAAErB,EAAWuB,KACNvB,EAAUS,IAAI6B,GAAWqC,+BACzBrC,GAAO,CACVmH,MAAOlI,EAAMxB,OAAOwC,KAAOA,EAAEzC,QAAQ4M,KAAKlJ,GAAKA,EAAE9D,KAAO4C,EAAQ5C,UAK5EH,KAAKoN,oBAAsBpN,KAAKoG,oBAAoBgE,wBAGxD9D,cACItG,KAAKqN,SAASrB,UAAK,GACnBhM,KAAKqN,SAASC,WAGlBC,YAAY5N,GACRK,KAAKwB,YAAYuE,OAAOyH,mBAAmB7N,GAAMuG,YAGrDuH,cAAc9N,GACVK,KAAK8I,aACAC,OAAO,CACJC,SAAOC,KAAE,kCACTE,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,MACG,QAAUrB,GACNA,EAAWT,KAAKwB,YAAYC,SAASgM,cAAc9N,GAAa2J,OAGvEpD,UACGzF,IACQA,EAASgN,cAAcC,SAAWrJ,eAClCrE,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKwB,YAAYC,SAASC,aAAa,IAAK,GAAGuE,QAAQC,aAEvDlG,KAAKgH,oBAAoBU,MAAMjH,EAASgN,cAAc1C,SAAW,KAGzEtK,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,cAMpByG,OAAOhO,GACX,OAAOA,EAAMiO,eAAe,8CA5FvBC,IAAoBhO,+EAApBgO,GAAoB/N,+yBDvBjCD,0BACIA,uBACIA,wCAOAA,mCAGIA,8CAAsBY,qDACzBZ,QACLA,QAEAA,wBACIA,kCACAA,sBAIJA,QACJA,QAEAA,+CAGIA,0BAAeA,gCAA+BA,QAC9CA,4BAA+BA,gCAA+BA,QAC9DA,0BAAeA,gCAAiCA,QAChDA,0BAAeA,gCAAkCA,QACjDA,0BACAA,0BACAA,iCA0CJA,eAvEYA,2CAA0B,6DAK1BA,2EAAsD,sDAQFA,gDAQ5DA,2DAEeA,2CACAA,4BAAgBA,2CAChBA,6CACAA,iVE5BXA,qBAEIA,0DAIAA,8BACJA,gCAHIA,8DAEAA,6FAgBIA,mBAAiCA,0DAASkD,EAAT+K,MAASC,KAAW,KAAI/K,KACrDnD,kBACJA,QACAA,mBAA6BA,uCAA4CA,+BAA5CA,sEAG7BA,2HA+BZA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,gEAMJA,8BAPWA,kDAGHA,8CAA6B,yDAA7BA,CAA6B,4CC5ClC,iBAAsCwE,MAMzC3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BAVZA,mBAAgBoF,OAAOE,OAAOjB,OACrBrE,sBAAmB,CAACqE,qBAA2BA,4BAYpDrE,KAAKuE,aAAevE,KAAKwE,qBAAqB,kBAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrCqJ,mBAAoB,CAAC,IACrBC,gBAAgB,EAChBC,oBAAqB,CAAC,EAAGrJ,eACzBN,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAKvFW,WACIrB,KAAKwF,OACLxF,KAAKwB,YAAYuE,OAAOC,aAAaC,QAAQC,UAAU,EAAGF,iBACtD,IAAKrG,EAAWkE,YAAYlD,SAAS0D,sBAA4B,CAC7D,MAAM5D,EAAkBT,KAAKyE,WAAWnB,IAAI,sBACxC7C,GACAA,EAAgB0F,aAMhCwB,QACS3H,KAAKyE,WAAW6F,OAIrBtK,KAAKwB,YAAYC,SACZ0M,qBAAqBnO,KAAKyE,WAAW/B,OACrCZ,MACG,QAAI,EAAGqM,2BACH,OAAQxO,EAAqBmL,gBACpB,iBACD9K,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,aAEZ,UACC,8BACDlH,KAAKgH,oBAAoBU,MAAM/H,EAAqBoL,eAGhEa,MAAU,IAAM5L,KAAKoG,oBAAoBgI,0BACzC,QAAepO,KAAKwB,YAAYuE,OAAO+G,UAAU7G,UAEpDC,UAAU,GAAImI,mBAAoBvB,eAC/B,MAAM9K,EAAiBrC,EAAeqO,mBAClChM,EAAelB,SAAWkB,EAAerB,SAASF,EAAQsM,kBAC1D/M,KAAKwB,YAAYuE,OAAOyH,mBAAmBxL,EAAe,IAAIkE,cAKpE4B,cAAcnI,EAAwBc,GAC5CT,KAAKyE,WAAWsD,WAAW,CACvBiG,mBAAoBrO,EAAOqO,mBAC3BC,eAAgBtO,EAAOsO,eACvBC,oBAAqBvO,EAAOuO,sBAE5BlO,KAAKuE,aAAazD,QAClBd,KAAKiI,yBAAyBjI,KAAKuE,aAAcvE,KAAKyE,WAAWnB,IAAI,gBAAiB3D,2CA9ErF2O,IAAuBzO,mHAAvByO,GAAuBxO,+iCDtBpCD,0BACIA,wBACIA,kCACAA,2BAQJA,QACJA,QAEAA,kBACIA,iDACIA,uBAQIA,gCAMAA,gCAGJA,QACJA,QACAA,yEAKIA,8CAMJA,QACAA,yEAKIA,+BACIA,+CAOJA,QACJA,QACAA,8BASAA,gDAKJA,eAtEaA,sDAQMA,yCACCA,iEAERA,wCAAuB,YAAvBA,CAAuB,mBAmB3BA,8EAA8D,yEAQ1DA,4DAIJA,wEAAwD,0DAUhDA,+DAI2BA,6CAWnCA,oCAAmB,0cElEnBA,oBAIIA,4DAEAA,8BACJA,gCAJIA,8DAGAA,6FAGAA,oBAGIA,2DAGAA,8BACJA,iCAHIA,kFAEAA,6EANJA,gDACKA,wEAiDbA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,gEAMJA,+BAPWA,kDAGHA,8CAA6B,yDAA7BA,CAA6B,qFAe7BA,qCAKIA,8FAEHA,iCALGA,qCAA6B,kDAA7BA,CAA6B,qFAarBA,qBAIIA,uFAEAA,SACJA,oCADIA,iEAbhBA,eACIA,wBACIA,qBACIA,uBACAA,8BACJA,QACAA,gCACIA,4BAQJA,QACJA,QACJA,+BAbYA,mDAIwBA,+EAapCA,qCAKIA,8FAEHA,iCALGA,qCAA6B,kDAA7BA,CAA6B,qFAarBA,qBAIIA,uFAEAA,SACJA,oCADIA,iEAbhBA,eACIA,wBACIA,qBACIA,uBACAA,8BACJA,QACAA,gCACIA,4BAQJA,QACJA,QACJA,+BAbYA,mDAIwBA,+EAtGhDA,kBACIA,iDACIA,mBAKIA,4HALJA,QAOJA,QACAA,2EAKIA,6CAMJA,QACAA,oFAKAA,oDACIA,+BACIA,+CAOJA,QACJA,QACAA,8BAUAA,gDAMAA,mBACIA,mBACIA,qBAAiCA,gCAAwDA,QACzFA,6CAQAA,0BAkBJA,QACAA,mBACIA,qBAAiCA,gCAA4CA,QAC7EA,6CAQAA,0BAkBJA,QACJA,QACJA,gCAlHmBA,gCACCA,kDAKRA,2DAKJA,kDAAmC,iDAQ/BA,2DAKJA,4DAAgD,2CAGpCA,sDAMJA,+DAK2BA,6CAYnCA,oCAAmB,2BAMkBA,oEAE5BA,sEAOCA,wEAoB2BA,wDAE5BA,sEAOCA,yEC1FX,iBACKwE,MAaR3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BAfZA,cAA8C,GAC9CA,cAA8C,GAKrCA,sBAAmB,CAACqE,qBAA2BA,2BAYpDrE,KAAKuE,aAAevE,KAAKwE,qBAAqB,iBAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrC/D,KAAM,CAAC,GAAIiE,eACXnE,KAAM,CAAC,GAAImE,eACXjB,YAAa,GACbsI,QAAS,EAAC,EAAMrH,eAChB0J,QAAS,GACTC,QAAS,GACTjK,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAKvFW,WACIrB,KAAKwF,UACL4G,OAAc,CACVpM,KAAKwB,YAAYC,SAASgN,6BAA6BxI,QACvDjG,KAAK0F,QAAQ5D,QAAK8F,KAAK,MACxB1B,UAAU,EAAEvG,EAAMc,MACjBT,KAAK0O,SAAW/O,EAAKgP,iCACrB3O,KAAK4O,SAAWjP,EAAKkP,sBACrB7O,KAAKoH,eAAeC,eACpBrH,KAAK8O,0BAA4BnP,EAAKgP,iCAAiCxB,KACnEnL,GAAKA,EAAEpB,QAAUH,EAAO8N,SAAW9N,EAAO8N,QAAQ3N,OAEtDZ,KAAK+O,0BAA4BpP,EAAKkP,sBAAsB1B,KACxDnL,GAAKA,EAAEpB,QAAUH,EAAO+N,SAAW/N,EAAO+N,QAAQ5N,SAK9D0F,cACItG,KAAKuG,UAGTyI,WAAWrP,EAAqBc,GAC5B,IAAKd,EAAa,CACd,MAAMqC,EAAchC,KAAKyE,WAAWnB,IAAI,CAAC,SACrCtB,GAAeA,EAAYiN,UAC3BjN,EAAYkN,UAAS,QAAgBzO,EAAW,OAK5D0O,wBACI,MAAMxP,EAAkBK,KAAKyE,WAAWnB,IAAI,cAC5C,QAAK3D,GAGE,EAAIyF,OAAOkD,KAAK3I,EAAgByP,UAAUtO,OAGrDuO,cAAc1P,GACVK,KAAK8O,0BAA4BnP,EACjCK,KAAKsP,mBAAkBjL,OAAiC1E,GACxD,MAAMc,EAAcT,KAAKyE,WAAWnB,IAAI,WACpC7C,IACAA,EAAY8O,kBACZ9O,EAAY+O,uBAAuB,CAAEC,UAAU,IAC/ChP,EAAYsH,WAAW/H,KAAKsP,kBAEhCtP,KAAKyE,WAAWiL,cAGpBC,cAAchQ,GACVK,KAAK+O,0BAA4BpP,EACjCK,KAAK4P,mBAAkBvL,OAAiC1E,GACxD,MAAMc,EAAcT,KAAKyE,WAAWnB,IAAI,WACpC7C,IACAA,EAAY8O,kBACZ9O,EAAY+O,uBAAuB,CAAEC,UAAU,IAC/ChP,EAAYsH,WAAW/H,KAAK4P,kBAEhC5P,KAAKyE,WAAWiL,cAGpBG,gBACI7P,KAAKsP,gBAAkB,KACvBtP,KAAKyE,WAAWiL,cAGpBI,gBACI9P,KAAK4P,gBAAkB,KACvB5P,KAAKyE,WAAWiL,cAGpB7I,SACI,MAAMlH,EAAkBK,KAAKsP,gBACvB7O,EAAkBT,KAAK4P,iBACxBnP,GAGLT,KAAK0F,QACA5D,QACG8F,KAAK,IACL,QAAS,EAAGzH,SACR,MAAM4C,EAAY/C,KAAKyE,WAAW/B,MAC5BM,EAAkC,CACpCtC,KAAMqC,EAAUrC,KAChBE,KAAMmC,EAAUnC,KAChBgD,YAAab,EAAUa,YACvBsI,QAASnJ,EAAUmJ,QACnBqC,QAAS5O,GACH,SAA6BA,EAAiBoD,EAAUwL,SACxD,KACNC,SAAS,SAA6B/N,EAAiBsC,EAAUyL,SACjEjK,aAAcxB,EAAUwB,cAE5B,OAAOvE,KAAKwB,YAAYC,SAASsO,oBAAoB/M,MAG5DkD,UACGlE,IACIhC,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,kBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKsH,OAAOC,SAAS,CAAC,MAAOvF,EAAK+N,oBAAoB5P,IAAK,CAAEqH,WAAYxH,KAAKyH,SAElFzF,IACIhC,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,oBAM5BS,OACI,MAAMhI,EAAkBK,KAAKsP,gBACvB7O,EAAkBT,KAAK4P,iBACxBnP,GAGLT,KAAK0F,QACA5D,QACG8F,KAAK,IACL,QAAS,EAAGzH,SACR,MAAM4C,EAAY/C,KAAKyE,WAAW/B,MAC5BM,EAAkC,CACpC7C,KACAO,KAAMqC,EAAUrC,KAChBE,KAAMmC,EAAUnC,KAChBgD,YAAab,EAAUa,YACvBsI,QAASnJ,EAAUmJ,QACnBqC,QAAS5O,GACH,SAA6BA,EAAiBoD,EAAUwL,SACxD,KACNC,SAAS,SAA6B/N,EAAiBsC,EAAUyL,SACjEjK,aAAcxB,EAAUwB,cAE5B,OAAOvE,KAAKwB,YAAYC,SAASuO,oBAAoBhN,MAG5DkD,UACGlE,IACIhC,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,kBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,gBAExBrF,IACIhC,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,oBAMlBY,cAAcnI,GACpBK,KAAKyE,WAAWsD,WAAW,CACvBrH,KAAMf,EAAce,KACpBE,KAAMjB,EAAciB,KACpBgD,YAAajE,EAAciE,YAC3BsI,QAASvM,EAAcuM,QACvBqC,QAAS5O,EAAc4O,SAAW,GAClCC,QAAS7O,EAAc6O,SAAW,KAEjCxO,KAAKsP,kBACNtP,KAAKsP,gBAAkB3P,EAAc4O,SAAW,CAC5C3N,KAAMjB,EAAc4O,QAAQ3N,KAC5BqP,KAAMtQ,EAAc4O,QAAQ0B,KAAK/O,IAAIT,GAAK2E,+BAAM3E,GAAC,CAAEiC,OAAO,SAAkBjC,EAAEiC,YAGjF1C,KAAK4P,kBACN5P,KAAK4P,gBAAkBjQ,EAAc6O,SAAW,CAC5C5N,KAAMjB,EAAc6O,QAAQ5N,KAC5BqP,KAAMtQ,EAAc6O,QAAQyB,KAAK/O,IAAIT,GAAK2E,+BAAM3E,GAAC,CAAEiC,OAAO,SAAkBjC,EAAEiC,YAGlF1C,KAAKuE,aAAazD,QAClBd,KAAKiI,yBACDjI,KAAKuE,aACLvE,KAAKyE,WAAWnB,IAAI,gBACpB3D,2CA5NHuQ,IAA4BrQ,mHAA5BqQ,GAA4BpQ,4pDDhCzCD,0BACIA,uBACIA,8CACJA,QAEAA,wBACIA,kCACAA,4CAQAA,2CAUJA,QACJA,QAEAA,qEA1ByBA,8CAOZA,2CAAsB,cAmBUA,wUEzBrCA,eACIA,sBACAA,8BACJA,eAH2BA,gCAEvBA,qNAkBJA,gBAA8BA,SAAwBA,QACtDA,gBAA8BA,SAA2BA,QACzDA,gBACIA,uDAKJA,QACAA,gBACIA,wBACIA,oBACIA,gCACAA,uBACJA,QACAA,iCACIA,sBAGIA,oHAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,+BA5B8BA,uBACAA,0BAItBA,iDAAmC,4BAO/BA,qDAQIA,sDAIAA,0HC3BjB,iBAAyCwE,MAI5C3E,YACYC,EACRc,EACAuB,EACQe,EACAC,GAERsB,MAAM7D,EAAQuB,GANNhC,mBAGAA,oBACAA,2BAGRsE,MAAMoE,WACF,IAAIzE,IAAgBjE,KAAKwB,YAAYC,SAAS0O,qBAAqBlM,GAAMmM,yBACzEnM,GAAQA,EAAKoM,gBAIrBC,oBAAoB3Q,GAChBK,KAAKuQ,mBAAmB5Q,GACnBmC,MACG,QAAUrB,GACFA,EAASiN,SAAWrJ,cACb,EAAC,GAEDrE,KAAKuQ,mBAAmB5Q,EAAiBc,EAASsK,SAAW,IAAIjJ,QACpEC,KAAIC,GAAKA,EAAE0L,SAAWrJ,kBAKlC,QAAU,IAAMrE,KAAKwB,YAAYC,SAAS0O,kBAAkB,KAAKlK,UAEpEC,UACG,KACIlG,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,kBAEZlH,KAAKuJ,WAET9I,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,oBAMpBqJ,mBAAmB5Q,EAAyBc,GAChD,OAAOT,KAAK8I,aACPC,OAAO,CACJC,SAAOC,KAAE,0CACTC,KAAMzI,EACN0I,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,QACG8J,MAAU5J,GACNA,EAAMhC,KAAKwB,YAAYC,SAAS6O,oBAAoB3Q,IAAmBc,GAAW6I,OAEtF,OAAItH,GAAOA,EAAIsO,8CCxD3BzQ,kDACIA,oBACJA,cAFuCA,wEAMvCA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,uCAKJA,8BANWA,kDAGHA,8CAA6B,kGDhB5B2Q,IAA0B3Q,0FAA1B2Q,GAA0B1Q,4qBDpBvCD,0BACIA,wBACIA,kCACAA,sBAIJA,QACJA,QAEAA,4BAKIA,sCAAcY,oBAAdZ,CAAoC,wCACdY,2FAEtBZ,yBAAeA,gCAA+BA,QAC9CA,0BAAeA,gCAAkCA,QACjDA,0BACAA,0BACAA,iCA+BJA,eAlDgEA,gDAQ5DA,4CAAwB,0CAAxBA,CAAwB,uCAAxBA,CAAwB,0CAOTA,2CACAA,iLGIZ,iBACKwE,MAMR3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BAGRA,KAAKuE,aAAevE,KAAKwE,qBAAqB,iBAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrCC,aAAc,CAAC,GAAIC,eACnBC,UAAW,CAAC,GAAID,eAChBE,SAAU,CAAC,GAAIF,eACfG,SAAU,CAAC,IACXT,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAKvFW,WACIrB,KAAKwF,OAGTc,cACItG,KAAKuG,UAGToB,OACI3H,KAAK0F,QACA5D,QACG8F,KAAK,IACL,QAAS,EAAGzH,SACR,MAAMM,EAAYT,KAAKyE,WAAW/B,MAC5BV,EAAgD,CAClD4C,aAAcnE,EAAUmE,aACxBE,UAAWrE,EAAUqE,UACrBC,SAAUtE,EAAUsE,SACpBC,SAAUvE,EAAUuE,SACpBT,aAAc9D,EAAU8D,cAE5B,OAAOvE,KAAKwB,YAAYoE,cAAc6K,0BAA0BzO,MAGvEkE,UACGvG,IACIK,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,kBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,gBAExB1H,IACIK,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,oBAMlBY,cAAcnI,EAA8Bc,GAClDT,KAAKyE,WAAWsD,WAAW,CACvBnD,aAAcjF,EAAciF,aAC5BE,UAAWnF,EAAcmF,UACzBC,SAAUpF,EAAcoF,WAExB/E,KAAKuE,aAAazD,QAClBd,KAAKiI,yBACDjI,KAAKuE,aACLvE,KAAKyE,WAAWnB,IAAI,gBACpB3D,2CA/EH+Q,IAAgB7Q,mHAAhB6Q,GAAgB5Q,+zBDvB7BD,0BACIA,uBACIA,8CACJA,QACAA,wBACIA,kCACAA,oBAEIA,gCAASY,WAGTZ,8BACJA,QACJA,QACJA,QAEAA,kBACIA,mDACIA,oBACJA,QACAA,mDACIA,oBACJA,QACAA,mDACIA,oBACJA,QACAA,uDAGAA,oDACIA,qBACJA,QACAA,8BAQJA,eAtCyBA,+CAObA,uEAEAA,oDAKOA,yCACCA,8DAGAA,2DAGAA,0DAGCA,6CAGDA,yDAAyC,qBAGlBA,mQE1BnCA,qBAGIA,4DAGAA,8BACJA,gCAHIA,8DAEAA,6FAGAA,qBAEIA,2DAIAA,8BACJA,iCAHIA,8DAEAA,0EANJA,iCAGKA,gDCSV,iBAAkCwE,MAIrC3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BAGRA,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrC/D,KAAM,CAAC,GAAIiE,eACXjB,YAAa,CAAC,GAAIiB,eAClB8L,WAAY,GACZ9M,YAAa,KAIrBxC,WACIrB,KAAKwF,OACLxF,KAAK4Q,MAAQ5Q,KAAK0F,QAClB1F,KAAKiD,sBAAwBjD,KAAKoG,oBAAoBC,2BAG1DC,cACItG,KAAKuG,UAGTyI,WAAWrP,GACP,MAAMc,EAAcT,KAAKyE,WAAWnB,IAAI,CAAC,SACrC7C,GAAeA,EAAYwO,UAC3BxO,EAAYyO,UAAS,QAAgBvP,EAAW,MAIxD2C,cAAc3C,GACV,MAAMc,EAAqBT,KAAKyE,WAAWnB,IAAI,eAC/C,GAAI7C,EAAoB,CACpB,MAAMuB,EAAqBvB,EAAmBiC,MACxCK,GACe,IAAjBpD,EAAO+C,SACDmO,MAAO,IAAI7O,EAAoBrC,EAAO8C,aACtCT,EAAmBxB,OAAOwC,GAAKA,IAAMrD,EAAO8C,YACtDhC,EAAmByO,SAASnM,GAC5BtC,EAAmBiP,eAI3B7I,SAEI,MAAMpG,EADYT,KAAKyE,WAAW/B,MAElC1C,KAAKwB,YAAYoE,cAAckL,WAAWrQ,GAAMyF,UAC5ClE,IACIhC,KAAKgH,oBAAoBC,WAAQgC,KAAE,gCAAiC,CAAE/B,OAAQ,SAC9ElH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKsH,OAAOC,SAAS,CAAC,MAAOvF,EAAK8O,WAAW3Q,IAAK,CAAEqH,WAAYxH,KAAKyH,SAEzEzF,IACIhC,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,WAMxBS,OACI3H,KAAK4Q,MACA9O,QACG8F,KAAK,IACL,QAAS,EAAGzH,SACR,MAAMM,EAAYT,KAAKyE,WAAW/B,MAC5BV,EAAIoD,eAAsBjF,MAAOM,GACvC,OAAOT,KAAKwB,YAAYoE,cAAcmL,WAAW/O,MAGxDkE,UACGvG,IACIK,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAAEC,OAAQ,SAC9ElH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,gBAExB1H,IACIK,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,WAMlBY,cAAcnI,EAAYc,GAChCT,KAAKyE,WAAWsD,WAAW,CACvBnE,YAAajE,EAAKiE,YAClBhD,KAAMjB,EAAKiB,KACX+P,WAAYhR,EAAKwI,SAASjH,IAAIc,GAAKA,EAAE7B,IACrC0D,YAAalE,EAAKkE,cAKtB7D,KAAKoH,eAAe4J,wDAxGfC,IAAmBpR,mHAAnBoR,GAAmBnR,yuBD3BhCD,0BACIA,uBACIA,8CACJA,QACAA,wBACIA,kCACAA,4CAQAA,2CAUJA,QACJA,QAEAA,mBACIA,mDACIA,oBAKIA,iCAASY,yDALbZ,QAOJA,QACAA,6EAKIA,8CAMJA,QACAA,mDACIA,wEAIJA,QACAA,kBAAOA,gCAAwCA,QAC/CA,mCAGIA,4CAAoBY,+CAEvBZ,QACLA,qCA5DyBA,+CAMZA,4CAAsB,cAmBhBA,yCACCA,0DAKRA,+DAKJA,mDAAmC,qDAQ/BA,+DAGQA,wDAGRA,kEAGDA,oDAEHA,gEAA+C,2EAA/CA,CAA+C,2QEtD/CA,eACIA,sBACAA,8BACJA,eAH2BA,gCAEvBA,yFAqB0BA,gBAAmCA,SAAeA,mCAAfA,kDAGzDA,oBACIA,gCACAA,4DACJA,kCAFuBA,qCACnBA,gFAHRA,SACIA,8BAIJA,mCAJkCA,gEAQ9BA,oBAA6FA,SAAgBA,kCAAhBA,6CAMzFA,SACIA,sBACAA,SACJA,8CADIA,mFAGAA,gEAVRA,qBAGIA,+FAEAA,iCAIAA,4CAGJA,2DAPmBA,sEAA8D,yCAPrFA,SACIA,+CACAA,4BAaJA,6CAdqCA,6EAG5BA,mFAaLA,mBAAiCA,8BAA+CA,eAA/CA,yHAIrCA,mFAGIA,wCAAmC,qEAnC3CA,gBAA8BA,SAAsBA,QACpDA,gBAA8BA,yBAAyDA,QACvFA,gBACIA,iCAMJA,QACAA,gBACIA,iCAgBAA,2CAGJA,QACAA,iBACIA,2CAMJA,QACAA,iBACIA,yBACIA,sBACIA,gCACAA,wBACJA,QACAA,iCACIA,sBAGIA,2GAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,oDA1D8BA,8BACOA,2CAElBA,2CAQAA,2CAA4B,cAsBtCA,2CAQoEA,8CACjEA,sDAQIA,sDAIAA,sDC7DjB,iBAAgCwE,MAKnC3E,YACYC,EACAc,EACAuB,EACRe,EACAC,GAEAsB,MAAMvB,EAAQC,GANNhD,oBACAA,2BACAA,mBAPHA,kBAAe,EACxBA,kBAAyC,GAWrCsE,MAAMoE,WACF,IAAIzE,IAAgBjE,KAAKwB,YAAYoE,cAAcC,YAAY5B,GAC/DA,GAAQA,EAAKgB,OAIrB5D,WACIiD,MAAMjD,WACNrB,KAAKkR,cAAgBlR,KAAKmR,OAAOrP,QAC7BC,KAAIpC,GAASA,EAAMa,OAAOC,GAAQA,EAAKG,OAASkF,QAIxDsL,mBAAmBzR,GACXK,KAAKqR,aAAa1R,EAAKQ,MAAQR,EAAKkE,YAAY/C,OAChDd,KAAKqR,aAAa1R,EAAKQ,IAAMH,KAAKsR,aAElCtR,KAAKqR,aAAa1R,EAAKQ,IAAMR,EAAKkE,YAAY/C,OAItDyQ,cAAc5R,GACV,OAAOA,EAAKiB,OAASkF,MAAyBnG,EAAKiB,OAASkF,KAGhE0L,WAAW7R,GACPK,KAAK8I,aACAC,OAAO,CACJC,SAAOC,KAAE,gCACTE,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,MAAK,QAAUrB,GAAaA,EAAWT,KAAKwB,YAAYoE,cAAc4L,WAAW7R,GAAM2J,OACvFpD,UACG,KACIlG,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,SAEZlH,KAAKuJ,WAET9I,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,mDAzDnBuK,IAAiB5R,0FAAjB4R,GAAiB3R,s+BDlB9BD,0BACIA,wBACIA,kCACAA,sBAIJA,QACJA,QAEAA,4BAKIA,sCAAcY,oBAAdZ,CAAoC,wCACdY,2FAEtBZ,yBAAeA,gCAAsCA,QACrDA,0BAAeA,gCAA+BA,QAC9CA,0BAAeA,gCAAoCA,QACnDA,0BAAeA,gCAAwCA,QACvDA,0BACAA,0BACAA,iCA6DJA,eAlFgEA,yDAQ5DA,mDAA+B,2CAA/BA,CAA+B,uCAA/BA,CAA+B,0CAOhBA,kDACAA,2CACAA,gDACAA,sVEJPA,6DAAwCA,qDAbhDA,iBACIA,iBACIA,mDACIA,SACJA,QACAA,iBACIA,mDACIA,mCACJA,QACAA,qDACIA,qCACJA,QACJA,QACAA,sCACJA,QACJA,4CAdgCA,0CACNA,8DACdA,+BAGkBA,mDACdA,2DAEcA,6DACdA,mEAGUA,0DAG1BA,iBACIA,uBACAA,8BACJA,eADIA,4ECZD,SANPH,cAQaM,cAAU,EACVA,sBAAkB,EAEjBA,aAAU,IAAIH,8CALf6R,iCAAsC5R,ujBDVnDD,iBACIA,iBACIA,8BACJA,QACAA,0BAgBAA,wBAIAA,iBACIA,oBAAkCA,gCAASY,mBACvCZ,8BACJA,QACJA,QACJA,eA3BQA,0DAEsCA,uCAgBjBA,yEAKsCA,sCACvDA,sjBEXJA,iBACIA,iBACIA,kBACJA,QACAA,iBAA8BA,SAAeA,QAC7CA,iBAA6BA,SAAcA,QAC3CA,iBACIA,mCACJA,QACAA,kBACIA,qBACIA,yEAA2B,gEAD/BA,QAOAA,sBAA4BA,oFACxBA,wBACJA,QACJA,QACAA,kBACIA,qCACJA,QACJA,+CAtBaA,qDAEqBA,uBACDA,sBAEzBA,qEAIIA,qCAWJA,4GAjCZA,mBACIA,iBACIA,cACIA,cACAA,cAAIA,8BAAsCA,QAC1CA,cAAIA,8BAAqCA,QACzCA,eAAIA,gCAAoCA,QACxCA,eAAIA,gCAAkCA,QACtCA,eAAIA,gCAA+BA,QACvCA,QACJA,QACAA,0BAyBAA,iBACIA,iBAAiBA,gCAAmCA,QACpDA,eACAA,eACAA,eACAA,eACAA,eAAIA,qCAA6CA,QACrDA,QACJA,8BAxCgBA,gDACAA,gDACAA,gDACAA,8CACAA,2CAGSA,kCA0BAA,+CAKbA,+EAKRA,kBACIA,kBAAwBA,8BAAuDA,QAC/EA,uBACJA,eAF4BA,kEC7B7B,SAQHH,YAAoBC,EAAkCc,GAAlCT,mBAAkCA,2BAP5CA,sBAAmB,IAAIH,MACjCG,WAAyB,kBAGrB,OAAOA,KAAK2R,MAAMzM,OAAO,CAACvF,EAAKc,IAAMd,EAAMc,EAAEmR,iBAAmBnR,EAAEoR,SAAU,GAKhFxQ,WACIrB,KAAK2R,MAAQ3R,KAAK8R,uBACd9R,KAAK2R,OACL3R,KAAK+R,iBAAiB9Q,KAAKjB,KAAK2R,OAEpC3R,KAAKwB,YAAYC,SAASuQ,iBAAiB,eAAe/L,QAAQC,UAAUvG,IACxEK,KAAK2J,aAAehK,EAAOsS,cAActI,eAIjDuI,aAAavS,GACLA,GACAK,KAAKmS,WAAWxS,GAIhBwS,WAAWxS,WACVK,KAAK2R,MAAMxE,KAAKpK,GAAKA,EAAE5C,KAAOR,EAAOyS,oBACtCpS,KAAK2R,MAAMpO,KAAK,CACZpD,GAAIR,EAAOyS,iBACX1R,KAAMf,EAAO0S,mBACbC,QAAqC,QAA5BtQ,EAAmB,QAAnBvB,IAAO8R,oBAAY,eAAED,eAAO,QAAI,GACzCT,SAAU,EACVW,IAAK7S,EAAO6S,IACZZ,iBACwC,gBAAnCjS,EAAO8S,aAAa3H,YAAgCnL,EAAO8S,aAAa/P,OAAU,IAE3F1C,KAAK0S,wBACL1S,KAAK+R,iBAAiB9Q,KAAKjB,KAAK2R,QAIxCgB,iBACI3S,KAAK0S,wBACL1S,KAAK+R,iBAAiB9Q,KAAKjB,KAAK2R,OAGpCiB,WAAWjT,GACPK,KAAK2R,MAAQ3R,KAAK2R,MAAMnR,OAAOC,GAAKA,EAAEN,KAAOR,EAAKQ,IAClDH,KAAK0S,wBACL1S,KAAK+R,iBAAiB9Q,KAAKjB,KAAK2R,OAG5Be,wBACJ1S,KAAK6S,oBAAoBC,sBAAsB,oBAAqB9S,KAAK2R,OAGrEG,uBACJ,OAAO9R,KAAK6S,oBAAoBE,sBAAsB,sBAAwB,8BC5DlElT,oBACIA,SACJA,kCAF4DA,sBACxDA,uEDCXmT,IAAyBnT,qDAAzBmT,GAAyBlT,0xBDvBtCD,iBACIA,iBACIA,8BACJA,QACAA,4BA8CAA,2CAMAA,iBACIA,kCAAsBA,2CAAmBY,oBAAuBZ,QACpEA,QACJA,+BAzDQA,yDAE8BA,sCAAoB,8QGcnD,SAMHH,YACYC,EACAc,EACAuB,GAFAhC,mBACAA,mBACAA,2BARFA,mBAAgB,IAAIH,MAW9BwB,WACIrB,KAAKuB,oBAAsBvB,KAAKwB,YAAYC,SACvCwR,wBACAhJ,UAAUjI,GAAUA,EAAOJ,UAAUC,OAC1C,MACMpB,EADcT,KAAK6S,oBAAoBE,sBAAsB,wBAG7D,CACIG,KAAM,GACNC,YAAa,GACbC,WAAY,GACZC,SAAU,IAEpBrT,KAAKsT,cAAcrS,KAAKR,GAExBT,KAAKuT,KAAOvT,KAAK0E,YAAYC,MAAMlE,GACnCT,KAAKwT,aAAexT,KAAKuT,KAAKtG,aAAa/G,UAAUlE,IACjDhC,KAAK6S,oBAAoBC,sBAAsB,sBAAuB9Q,GACtEhC,KAAKsT,cAAcrS,KAAKe,KAIhCsE,cACQtG,KAAKwT,cACLxT,KAAKwT,aAAaC,qCCvCV5T,6CAKAA,6CAKAA,iDAKJA,mDAIIA,mCACJA,8BAJIA,yCAGAA,oIAEJA,mDAIIA,mCACJA,8BAJIA,kDAGAA,0IAGRA,mDAEIA,qID3BH6T,IAAwB7T,iEAAxB6T,GAAwB5T,kfDlBrCD,iBACIA,iBACIA,8BACJA,QACAA,iBACIA,kBACIA,+BACIA,iBAAOA,8BAAiCA,QACxCA,oBACJA,QACAA,gCACIA,kBAAOA,gCAAqCA,QAC5CA,oBACJA,QACAA,gCACIA,kBAAOA,gCAAwCA,QAC/CA,oBACJA,QACAA,gCACIA,kBAAOA,gCAAoCA,QAC3CA,qBACIA,8CAGJA,QACJA,QACJA,QACJA,QACJA,eA1BQA,2DAGMA,mCAESA,2CAIAA,iDAIAA,oDAIAA,gDAEyBA,mUGXzC,SANPH,cAQaM,cAAU,EACVA,sBAAkB,EAEjBA,aAAU,IAAIH,gDCFpBA,oBAGIA,4DAGAA,8BACJA,gCAHIA,yGAEAA,6FAGAA,oBAEIA,2DAMAA,8BACJA,iCALIA,yGAIAA,6EARJA,gDAGKA,wEA4CLA,qBACIA,SACJA,kCAFoDA,sBAChDA,6EAKZA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,gEAMJA,+BAPWA,kDAGHA,8CAA6B,yDAA7BA,CAA6B,qFAe7BA,qCAKIA,mEAA4B,gCAE/BA,iCALGA,qCAA6B,kDAA7BA,CAA6B,qFAarBA,qBAIIA,uFAEAA,SACJA,oCADIA,iEAbhBA,eACIA,wBACIA,qBACIA,uBACAA,8BACJA,QACAA,gCACIA,4BAQJA,QACJA,QACJA,+BAbYA,mDAIwBA,+EAapCA,qCAKIA,sEAA+B,gCAElCA,iCALGA,wCAAgC,qDAAhCA,CAAgC,qFAaxBA,qBAIIA,0FAEAA,SACJA,oCADIA,iEAbhBA,eACIA,wBACIA,qBACIA,uBACAA,8BACJA,QACAA,gCACIA,4BAQJA,QACJA,QACJA,+BAbYA,mDAI2BA,kFAvGnDA,mBACIA,kDACIA,oBAKIA,4HALJA,QAOJA,QACAA,2EAKIA,6CAMJA,QACAA,oFAKAA,oDACIA,gDAKIA,6BAGJA,QACJA,QAEAA,8BAUAA,gDAMAA,mBACIA,mBACIA,qBAAiCA,gCAAyDA,QAC1FA,6CAQAA,0BAkBJA,QACAA,mBACIA,qBAAiCA,gCAAgDA,QACjFA,6CAQAA,0BAkBJA,QACJA,QACJA,gCAnHmBA,gCACCA,kDAKRA,2DAKJA,kDAAmC,iDAQ/BA,2DAKJA,4DAAgD,2CAGpCA,oEAIRA,+DAE4BA,gDAMGA,6CAYnCA,oCAAmB,2BAMkBA,qEAE5BA,sEAOCA,wEAoB2BA,4DAE5BA,4EAOCA,wHAyBNA,iCACIA,kBACIA,kBACIA,qCACIA,oFACHA,QACLA,QACAA,kBACIA,oCACIA,8EACHA,QACDA,8CAKIA,iGACHA,QACLA,QACJA,QACJA,sCARgBA,yFAAuD,wEAAvDA,CAAuD,oCAAvDA,CAAuD,+ED9JtE8T,iCAAiC7T,mwBDV9CD,iBAQIA,iBACIA,8BACJA,QACAA,iBACIA,iBACIA,mDACIA,iBACIA,6BAKAA,8BAKAA,8BACJA,QACAA,UACJA,QACAA,kBACIA,uCAMAA,uCAMJA,QACAA,sCAIJA,QACJA,QACAA,mBACIA,sBAAkCA,gCAASY,mBACvCZ,gCACJA,QACJA,QACJA,eApDIA,sJAOIA,2DAG4BA,0CACNA,wDAKLA,qEAKAA,4EAE6BA,qCAEtCA,sEAKKA,0GAMAA,iHAMJA,qGAMkDA,sCACvDA,49BGZL,iBACKwE,MAoBR3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BAvBZA,cAA8C,GAC9CA,iBAAiD,GACjDA,yBAAyD,GAQzDA,sBAAkB,EAGTA,sBAAmB,CAACqE,qBAA2BA,4BAChDrE,sBAAmB,IAAIyL,MAY3BzL,KAAKuE,aAAevE,KAAKwE,qBAAqB,kBAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrC/D,KAAM,CAAC,GAAIiE,eACXnE,KAAM,CAAC,GAAImE,eACXjB,YAAa,GACbgQ,mBAAoB,CAAC,GAAI/O,eACzB0J,QAAS,GACTsF,WAAY,GACZtP,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAKvFW,WACIrB,KAAKwF,UACL4G,OAAc,CACVpM,KAAKwB,YAAYsS,eAAeC,8BAA8B9N,QAC9DjG,KAAK0F,QAAQ5D,QAAK8F,KAAK,MACxB1B,UAAU,EAAEvG,EAAMc,MACjBT,KAAK0O,SAAW/O,EAAKqU,4BACrBhU,KAAKiU,YAActU,EAAKuU,oBACxBlU,KAAKmU,oBAAsBxU,EAAKwU,oBAChCnU,KAAKoH,eAAeC,eACpBrH,KAAK8O,0BAA4BnP,EAAKqU,4BAA4B7G,KAC9DnL,GAAKA,EAAEpB,QAAUH,EAAO8N,SAAW9N,EAAO8N,QAAQ3N,OAEtDZ,KAAKoU,6BAA+BzU,EAAKuU,oBAAoB/G,KACzDnL,GAAKA,EAAEpB,QAAUH,EAAOoT,YAAcpT,EAAOoT,WAAWjT,SAIhEZ,KAAKqU,eAAiBrU,KAAKwB,YAAYC,SAClCuQ,mBACArQ,UAAUhC,GAAQA,EAAKsS,eAE5BjS,KAAKsU,YAActU,KAAKuU,iBAAiBzS,MACrC,QAAU,EAAEnC,EAASc,MACjB,IAAKT,KAAKsP,kBAAoBtP,KAAKwU,mBAC/B,SAAOC,YAAG,GAEd,MAAMzS,EAAYhC,KAAKyE,WAAW/B,MAC5BK,EAAiC,CACnC2R,gBAAetP,+BAAOzF,GAAO,CAAEgV,YAAa,SAC5ChD,MAAOlR,EAAMS,IAAI8B,KAAQoP,iBAAkBpP,EAAE7C,GAAI0R,SAAU7O,EAAE6O,YAC7DtD,SAAS,SAA6BvO,KAAKsP,gBAAiBtN,EAAUuM,SACtEsF,YAAY,SAA6B7T,KAAKwU,mBAAoBxS,EAAU6R,aAEhF,OAAO7T,KAAKwB,YAAYsS,eACnBc,mBAAmB7R,GACnBkH,UAAUjH,GAAUA,EAAO4R,0BAKxCC,MACI7U,KAAKyE,WAAWnB,IAAI,CAAC,YAAa2J,aAClCjN,KAAKyE,WAAWnB,IAAI,CAAC,eAAgB2J,cAEpCnL,QAAKgT,MAAU9U,KAAKqN,WACpBnH,UAAU,IAAOlG,KAAK+U,iBAAkB,GAIjDzO,cACItG,KAAKuG,UAGTyI,WAAWrP,EAAqBc,GAC5B,IAAKd,EAAa,CACd,MAAMqC,EAAchC,KAAKyE,WAAWnB,IAAI,CAAC,SACrCtB,GAAeA,EAAYiN,UAC3BjN,EAAYkN,UAAS,QAAgBzO,EAAW,OAK5D4O,cAAc1P,GACVK,KAAK8O,0BAA4BnP,EACjCK,KAAKsP,mBAAkBjL,OAAiC1E,GACxD,MAAMc,EAAcT,KAAKyE,WAAWnB,IAAI,WACpC7C,IACAA,EAAY8O,kBACZ9O,EAAY+O,uBAAuB,CAAEC,UAAU,IAC/ChP,EAAYsH,WAAW/H,KAAKsP,kBAEhCtP,KAAKyE,WAAWiL,cAGpBsF,iBAAiBrV,GACbK,KAAKoU,6BAA+BzU,EACpCK,KAAKwU,sBAAqBnQ,OAAiC1E,GAC3D,MAAMc,EAAcT,KAAKyE,WAAWnB,IAAI,cACpC7C,IACAA,EAAY8O,kBACZ9O,EAAY+O,uBAAuB,CAAEC,UAAU,IAC/ChP,EAAYsH,WAAW/H,KAAKwU,qBAEhCxU,KAAKyE,WAAWiL,cAGpB7I,SACI,MAAMlH,EAAkBK,KAAKsP,gBACvB7O,EAAqBT,KAAKwU,oBAC3B7U,IAAoBc,MAGzB2L,OAAc,CAACpM,KAAK0F,QAAS1F,KAAKqM,gBAC7BvK,MACG,OAAK,IACL,QAAS,EAAEE,EAAgBe,MACvB,MAAMC,EAAYhD,KAAKyE,WAAW/B,MAC5BuB,EAAKmB,+BACHpF,KAAKiV,yBACLjT,EACAhC,KAAKyE,WACL1B,IAC2B,CAC/BwL,SAAS,SAA6B5O,EAAiBqD,EAAUuL,SACjEsF,YAAY,SAA6BpT,EAAoBuC,EAAU6Q,cAE3E,OAAO7T,KAAKwB,YAAYsS,eAAeoB,qBAAqBjR,MAGnEiC,UACGlE,IACIhC,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,mBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKsH,OAAOC,SAAS,CAAC,MAAOvF,EAAKkT,qBAAqB/U,IAAK,CAAEqH,WAAYxH,KAAKyH,SAEnFzF,IACIhC,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,qBAM5BS,OACI,MAAMhI,EAAkBK,KAAKsP,gBACvB7O,EAAqBT,KAAKwU,oBAC3B7U,IAAoBc,MAGzB2L,OAAc,CAACpM,KAAK0F,QAAS1F,KAAKqM,gBAC7BvK,MACG,OAAK,IACL,QAAS,EAAEE,EAAgBe,MACvB,MAAMC,EAAYhD,KAAKyE,WAAW/B,MAC5BuB,EAAKmB,+BACHpF,KAAKiV,yBACLjT,EACAhC,KAAKyE,WACL1B,IAC2B,CAC/BwL,SAAS,SAA6B5O,EAAiBqD,EAAUuL,SACjEsF,YAAY,SAA6BpT,EAAoBuC,EAAU6Q,cAE3E,OAAO7T,KAAKwB,YAAYsS,eAAeqB,qBAAqBlR,MAGnEiC,UACGlE,IACIhC,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,mBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,gBAExBrF,IACIhC,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,qBAM5BkO,kBAAkBzV,GACdK,KAAKqV,eAAiB1V,EACtBK,KAAK+U,iBAAkB,EAG3BO,eAAe3V,GACXK,KAAKuV,YAAc5V,EACnBK,KAAK+U,iBAAkB,EAG3BS,qBACI,SACIxV,KAAKuV,aACLvV,KAAKqV,gBACLrV,KAAKqV,eAAevU,QACpBd,KAAKsP,iBACLtP,KAAKwU,oBAIbiB,UACIzV,KAAKuU,iBAAiBvI,KAAK,CAAChM,KAAKuV,YAAavV,KAAKqV,iBACnDrV,KAAK+U,iBAAkB,EAOnBE,yBACJtV,EACAc,EACAuB,GAEA,MAAMe,EAAYtC,EAAUiC,MACtBM,KAAQqB,OAA0B,CACpCiI,aAAc3M,EACd4M,cAAexJ,EACfyJ,kBAAmBxM,KAAKuE,aACxBkI,eACAC,mBAAoB,CAChBD,eACA/L,KAAMf,EAAee,MAAQ,GAC7BkD,YAAajE,EAAeiE,aAAe,MAGnD,sCAAYZ,GAAK,CAAE4Q,mBAAoB7Q,EAAU6Q,qBAG3C9L,cAAcnI,EAAyCc,eAC7D,MAAM0C,GAAqB,SAAgBxD,EAAgBc,GAC3DT,KAAKyE,WAAWsD,WAAW,CACvBrH,KAA8B,QAAxBsB,EAAkB,MAAlBmB,OAAkB,EAAlBA,EAAoBzC,YAAI,QAAI,GAClCkD,YAA4C,QAA/Bb,EAAkB,MAAlBI,OAAkB,EAAlBA,EAAoBS,mBAAW,QAAI,GAChDhD,KAAMjB,EAAeiB,KACrBgT,mBAAoBjU,EAAe+V,uBACnCnH,QAAS5O,EAAe4O,SAAW,GACnCsF,WAAYlU,EAAekU,YAAc,KAExC7T,KAAKsP,kBACNtP,KAAKsP,gBAAkB3P,EAAe4O,SAAW,CAC7C3N,KAAMjB,EAAe4O,QAAQ3N,KAC7BqP,KAAMtQ,EAAe4O,QAAQ0B,KAAK/O,IAAImC,GAAK+B,+BAAM/B,GAAC,CAAEX,OAAO,SAAkBW,EAAEX,YAGlF1C,KAAKwU,qBACNxU,KAAKwU,mBAAqB7U,EAAekU,YAAc,CACnDjT,KAA+B,QAAzBoC,IAAe6Q,kBAAU,eAAEjT,KACjCqP,KAA+B,QAAzBhM,IAAe4P,kBAAU,eAAE5D,KAAK/O,IAAImC,GAAK+B,+BAAM/B,GAAC,CAAEX,OAAO,SAAkBW,EAAEX,YAGvF1C,KAAKuE,aAAazD,QAClBd,KAAKiI,yBACDjI,KAAKuE,aACLvE,KAAKyE,WAAWnB,IAAI,CAAC,iBACrB3D,EACAwD,2CA/RHwS,IAA6B9V,mHAA7B8V,GAA6B7V,i9DDvC1CD,0BACIA,uBACIA,8CACAA,mCAIIA,8CAAsBY,sEACzBZ,QACLA,QAEAA,wBACIA,kCACAA,8CAQAA,4CAYJA,QACJA,QAEAA,8CAoHAA,kBACIA,0BACIA,gCACIA,gCAAqBA,gCAAiDA,QACtEA,2CAqBJA,QACJA,QACJA,gCAjLyBA,8CAEbA,gDAA2B,2DAA3BA,CAA2B,mDAW1BA,6CAAsB,cAqBUA,8CAuHZA,qiBEjJzBA,eAKIA,sBACAA,8BACJA,eALIA,gCAIAA,uNAkBJA,gBAA8BA,SAAyBA,QACvDA,gBAA8BA,SAAyBA,QACvDA,gBACIA,wDAKJA,QACAA,gBACIA,wBACIA,qBACIA,gCACAA,wBACJA,QACAA,iCACIA,sBAGIA,qHAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,+BA5B8BA,uBACAA,uBAItBA,iDAAmC,4BAO/BA,qDAQIA,sDAIAA,+FAYZA,iCACIA,kBACIA,kBACIA,qCACIA,oFACHA,QACLA,QACAA,kBACIA,oCACIA,8EACHA,QACDA,mDAKIA,iGACHA,QACLA,QACJA,QACJA,sCARgBA,yFAAuD,iCAAvDA,CAAuD,oCAAvDA,CAAuD,6GCvD5E,iBACKwE,MAWR3E,YACYC,EACAc,EACAuB,EACAe,EACRC,EACAiB,GAEAK,MAAMtB,EAAQiB,GAPNjE,oBACAA,2BACAA,mBACAA,2BAVZA,sBAAkB,EAIVA,sBAAmB,IAAIyL,MAW3BnH,MAAMoE,WACF,IAAIvF,IACAnD,KAAKwB,YAAYsS,eAAe8B,sBAAsBzS,GAAMiN,yBAChEjN,GAAQA,EAAK0S,iBAIrBxU,WACIiD,MAAMjD,WACNrB,KAAKsU,YAActU,KAAKuU,iBAAiBzS,MACrC,QAAU,EAAEnC,EAASc,MACjB,MAAMuB,EAA0C,CAC5C0S,gBAAetP,+BAAOzF,GAAO,CAAEgV,YAAa,SAC5ChD,MAAOlR,EAAMS,IAAI6B,KAAQqP,iBAAkBrP,EAAE5C,GAAI0R,SAAU9O,EAAE8O,aAEjE,OAAO7R,KAAKwB,YAAYsS,eACnBgC,4BAA4B9T,GAC5BiI,UAAUlH,GAAUA,EAAO+S,gCAGxC9V,KAAKqU,eAAiBrU,KAAKwB,YAAYC,SAClCuQ,mBACArQ,UAAUhC,GAAQA,EAAKsS,eAC5BjS,KAAKoN,oBAAsBpN,KAAKoG,oBAAoBgE,wBACpDpK,KAAK6M,iBAAmB7M,KAAKwB,YAAYuE,OACpC+G,UACAnL,UAAU,EAAGmL,aAAcnN,EAAQoN,iBACnCjL,MAAK,QAAI,IAAM9B,KAAKuJ,YAG7BwM,qBAAqBpW,GACjBK,KAAK8I,aACAC,OAAO,CACJC,SAAOC,KAAE,0CACTE,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,MACG,QAAUrB,GACNA,EAAWT,KAAKwB,YAAYsS,eAAeiC,qBAAqBpW,GAAM2J,OAG7EpD,UACG,KACIlG,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,mBAEZlH,KAAKuJ,WAET9I,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,qBAM5BkO,kBAAkBzV,GACdK,KAAKqV,eAAiB1V,EACtBK,KAAK+U,iBAAkB,EAG3BO,eAAe3V,GACXK,KAAKuV,YAAc5V,EACnBK,KAAK+U,iBAAkB,EAG3BS,qBACI,SAAUxV,KAAKuV,aAAevV,KAAKqV,gBAAkBrV,KAAKqV,eAAevU,QAG7E2U,UACIzV,KAAKuU,iBAAiBvI,KAAK,CAAChM,KAAKuV,YAAavV,KAAKqV,iBACnDrV,KAAK+U,iBAAkB,EAG3BxH,YAAY5N,GACRK,KAAKwB,YAAYuE,OAAOyH,mBAAmB7N,GAAMuG,sDCxHjDrG,qBAGIA,4DAGAA,8BACJA,gCAHIA,yCAEAA,6FAGAA,qBAEIA,2DAIAA,8BACJA,iCAJIA,yCAGAA,6EANJA,iDAIKA,wEA4BbA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,gEAMJA,8BAPWA,kDAGHA,8CAA6B,yDAA7BA,CAA6B,mFDzB5BmW,IAA2BnW,uGAA3BmW,GAA2BlW,06BD3BxCD,0BACIA,uBACIA,mCAGIA,8CAAsBY,qDACzBZ,QACLA,QACAA,wBACIA,kCACAA,sBAQJA,QACJA,QAEAA,4BAKIA,sCAAcY,oBAAdZ,CAAoC,wCACdY,8FAEtBZ,0BAAeA,gCAA+BA,QAC9CA,0BAAeA,gCAA+BA,QAC9CA,0BACAA,0BACAA,iCA+BJA,QAEAA,kBACIA,0BACIA,gCACIA,gCAAqBA,gCAAkDA,QACvEA,2CAqBJA,QACJA,QACJA,eA1FYA,2EAAsD,sDAUrDA,gDASTA,6CAAwB,4CAAxBA,CAAwB,wCAAxBA,CAAwB,2CAOTA,2CACAA,2CAuCcA,qTG7C1B,iBACKwE,MAWR3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BAZHA,sBAAmB,CAACqE,qBAA2BA,yBAepDrE,KAAKuE,aAAevE,KAAKwE,qBAAqB,eAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrCjE,KAAM,CAAC,GAAImE,eACXoR,WAAW,EACX1R,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAKvFW,WACIrB,KAAKwF,OACLxF,KAAKkW,aAAelW,KAAK0F,QAG7BY,cACItG,KAAKuG,UAGT8D,oBACI,OAAOrK,KAAKyE,WAAW6F,OAAStK,KAAKyE,WAAW8F,MAGpD1D,SACI,IAAK7G,KAAKyE,WAAW6F,MACjB,OAEJ,MAAM3K,EAAYK,KAAKyE,WAAW/B,MAC5BjC,EAAQ,CACVC,KAAMf,EAAUe,KAChBuV,UAAWtW,EAAUsW,UACrB1R,aAAc5E,EAAU4E,cAE5BvE,KAAKwB,YAAYC,SAAS0U,kBAAkB1V,GAAOyF,UAC/ClE,IACIhC,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,gBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKsH,OAAOC,SAAS,CAAC,MAAOvF,EAAKmU,kBAAkBhW,IAAK,CAAEqH,WAAYxH,KAAKyH,SAEhFzF,IACIhC,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,kBAMxBS,OACI,IAAK3H,KAAKyE,WAAW6F,MACjB,OAEJ,MAAM3K,EAAYK,KAAKyE,WAAW/B,MAClC1C,KAAKkW,aACApU,QACG8F,KAAK,IACL,QAASnH,IACL,MAAMuB,EAAQ,CACV7B,GAAIM,EAAYN,GAChBO,KAAMf,EAAUe,KAChBuV,UAAWtW,EAAUsW,UACrB1R,aAAc5E,EAAU4E,cAE5B,OAAOvE,KAAKwB,YAAYC,SAAS2U,kBAAkBpU,MAG1DkE,UACGzF,IACIT,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,gBAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,gBAExB5G,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,kBASlBY,cAAcnI,EAA8Bc,GAClDT,KAAKyE,WAAWsD,WAAW,CACvBrH,KAAMf,EAAOe,KACbuV,UAAWtW,EAAOsW,YAElBjW,KAAKuE,aAAazD,QAClBd,KAAKiI,yBAAyBjI,KAAKuE,aAAcvE,KAAKyE,WAAWnB,IAAI,gBAAiB3D,2CAnHrF0W,IAA0BxW,mHAA1BwW,GAA0BvW,szBDxBvCD,0BACIA,uBACIA,8CACJA,QAEAA,wBACIA,kCACAA,4CAQAA,2CAUJA,QACJA,QAEAA,mBACIA,mDACIA,8CAMJA,QACAA,mDACIA,+BACIA,8CAOJA,QACJA,QACAA,6BASAA,gDAKJA,+BA5DyBA,+CAOZA,4CAAsB,cAmBhBA,yCACCA,mDAKRA,4DAGQA,mEAMJA,+DAK2BA,6CAWnCA,oCAAmB,6QExDnBA,eACIA,sBACAA,8BACJA,eAH2BA,gCAEvBA,8FAaAA,oBAAwCA,8BAA+CA,eAA/CA,oMAF5CA,gBAA8BA,SAAsBA,QACpDA,gBACIA,6BACJA,QACAA,gBACIA,uDAKJA,QACAA,gBACIA,wBACIA,oBACIA,gCACAA,wBACJA,QACAA,iCACIA,sBAGIA,+GAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,+BA9B8BA,uBAEfA,mCAKPA,iDAAmC,4BAO/BA,qDAQIA,sDAIAA,wHCzBjB,SAIHH,YACYC,EACAc,EACAuB,GAFAhC,mBACAA,2BACAA,oBAERA,KAAKsW,YAActW,KAAKwB,YAAYC,SAAS8U,mBAC7CvW,KAAKwW,eAAiBxW,KAAKsW,YAAY3U,UAAUoB,GAAQA,EAAK0T,eAGlEC,kBAAkB/W,GACd,OAAOK,KAAK8I,aACPC,OAAO,CACJC,SAAOC,KAAE,wCACTC,KAAMvJ,EAAYe,KAClByI,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,QACG8J,MAAUnL,GAAQA,EAAMT,KAAKwB,YAAYC,SAASiV,kBAAkB/W,EAAYQ,IAAMmJ,SACtFvH,KAAItB,GAAOA,EAAIiW,oBAElBxQ,UACGzF,IACQA,EAAIiN,SAAWrJ,eACfrE,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKsW,YAAYK,IAAIC,WAErB5W,KAAKgH,oBAAoBU,MAAMjH,EAAIsK,UAAW,OAAE,8BAA+B,CAC3E7D,OAAQ,aAIpBzG,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,sDA1CnB2P,IAAwBhX,kEAAxBgX,GAAwB/W,4kBDjBrCD,0BACIA,wBACIA,kCACAA,sBAIJA,QACJA,QAEAA,6CACIA,yBAAeA,8BAA+BA,QAC9CA,yBACAA,0BACAA,0BACAA,iCAiCJA,eA7CgEA,+CAOhDA,oDACGA,+OEJXA,qBAGIA,4DAGAA,8BACJA,gCAHIA,yCAEAA,6FAGAA,qBAEIA,2DAIAA,8BACJA,iCAJIA,yCAGAA,6EANJA,iDAIKA,wEA8CLA,qBACIA,SACJA,kCAF2DA,oBACvDA,0DAWJA,qBAA8DA,SAAeA,kCAAjCA,oBAAkBA,kDAGtEA,sBACIA,iBAAOA,8BAAwCA,QAC/CA,gEAMJA,8BAPWA,kDAGHA,8CAA6B,yDAA7BA,CAA6B,4CCzDlC,iBACKwE,MAUR3E,YACIC,EACAc,EACAuB,EACQe,EACEC,EACFiB,EACAd,GAERmB,MAAM7D,EAAOd,EAAQqC,EAAqBgB,GALlChD,sBACEA,mBACFA,mBACAA,2BATHA,sBAAmB,CAACqE,qBAA2BA,qBAYpDrE,KAAKuE,aAAevE,KAAKwE,qBAAqB,WAC9CxE,KAAKyE,WAAazE,KAAK0E,YAAYC,MAAM,CACrCjE,KAAM,CAAC,GAAImE,eACXqH,QAAS,EAAC,GACVxJ,MAAO,CAAC,EAAGmC,eACXiS,cAAe,CAAC,IAChBC,OAAQ,CAAC,IACTC,gBAAiB,CAAC,IAClBzS,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAAC7B,EAAM8B,IAAUC,+BAAM/B,GAAI,EAAG8B,EAAMzE,MAAO,KAAO,OAKvFW,WACIrB,KAAKwF,OACLxF,KAAKwW,eAAiBxW,KAAKwB,YAAYC,SAClC8U,mBACAtM,UAAUtK,GAAQA,EAAK8W,eAC5BzW,KAAK+J,OAAS/J,KAAKwB,YAAYC,SAASuI,WAAWC,UAAUtK,GAAQA,EAAKuK,OAG9E5D,cACItG,KAAKuG,UAGT8D,oBACI,OAAOrK,KAAKyE,WAAW6F,OAAStK,KAAKyE,WAAW8F,MAGpD1D,SACI,IAAK7G,KAAKyE,WAAW6F,MACjB,OAEJ,MAAM3K,EAAYK,KAAKyE,WAAW/B,MAC5BjC,EAAQ,CACVC,KAAMf,EAAUe,KAChBwL,QAASvM,EAAUuM,QACnBxJ,MAAO/C,EAAU+C,MACjBuU,WAAYtX,EAAUmX,cACtBC,OAAQpX,EAAUoX,OAClBC,gBAAiBrX,EAAUqX,gBAC3BzS,aAAc5E,EAAU4E,cAE5BvE,KAAKwB,YAAYC,SAASyV,cAAczW,GAAOyF,UAC3ClE,IACIhC,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,eACpBrH,KAAKsH,OAAOC,SAAS,CAAC,MAAOvF,EAAKkV,cAAc/W,IAAK,CAAEqH,WAAYxH,KAAKyH,SAE5EzF,IACIhC,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,cAMxBS,OACI,IAAK3H,KAAKyE,WAAW6F,MACjB,OAEJ,MAAM3K,EAAYK,KAAKyE,WAAW/B,MAClC1C,KAAK0F,QACA5D,QACG8F,KAAK,IACL,QAASnH,IACL,MAAMuB,EAAQ,CACV7B,GAAIM,EAAQN,GACZO,KAAMf,EAAUe,KAChBwL,QAASvM,EAAUuM,QACnBxJ,MAAO/C,EAAU+C,MACjBuU,WAAYtX,EAAUmX,cACtBC,OAAQpX,EAAUoX,OAClBC,gBAAiBrX,EAAUqX,gBAC3BzS,aAAc5E,EAAU4E,cAE5B,OAAOvE,KAAKwB,YAAYC,SAAS0V,cAAcnV,MAGtDkE,UACGzF,IACIT,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKyE,WAAW0C,iBAChBnH,KAAKoH,eAAeC,gBAExB5G,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,cASlBY,cAAcnI,EAA0Bc,GAC9CT,KAAKyE,WAAWsD,WAAW,CACvBrH,KAAMf,EAAOe,KACbwL,QAASvM,EAAOuM,QAChBxJ,MAAO/C,EAAO+C,MACdoU,cAAenX,EAAOyX,SAAWzX,EAAOyX,SAASjX,GAAK,GACtD4W,OAAQpX,EAAO0X,KAAO1X,EAAO0X,KAAKlX,GAAK,GACvC6W,gBAAiBrX,EAAO2X,cAAgB3X,EAAO2X,cAAcnX,GAAK,KAElEH,KAAKuE,aAAazD,QAClBd,KAAKiI,yBAAyBjI,KAAKuE,aAAcvE,KAAKyE,WAAWnB,IAAI,gBAAiB3D,2CArIrF4X,IAAsB1X,mHAAtB0X,GAAsBzX,orCD5BnCD,0BACIA,uBACIA,8CACJA,QAEAA,wBACIA,kCACAA,4CAQAA,2CAUJA,QACJA,QAEAA,mBACIA,mDACIA,8CAMJA,QACAA,mDACIA,+BACIA,8CAOJA,QACJA,QACAA,mDACIA,iCACIA,+CAOJA,QACJA,QACAA,oDACIA,gDAMIA,+CAGJA,QACJA,QACAA,oDACIA,gDAMIA,+CACJA,QACJA,QACAA,8BASAA,gDAKJA,+BA7FyBA,+CAOZA,4CAAsB,cAmBhBA,yCACCA,mDAKRA,4DAGQA,sDAOJA,+DAIIA,qDAOJA,4DAIIA,6DAKRA,+DAEgCA,wDAKxBA,qDAKRA,+DAEyBA,gDAGMA,6CAWnCA,oCAAmB,iTEzFnBA,eACIA,sBACAA,8BACJA,eAH2BA,gCAEvBA,yMAoBJA,gBAA8BA,SAAkBA,QAChDA,gBAA8BA,SAA2BA,QACzDA,gBAA8BA,SAAuBA,QACrDA,gBAA8BA,SAAoBA,QAClDA,gBACIA,wDAKJA,QACAA,iBACIA,yBACIA,qBACIA,gCACAA,uBACJA,QACAA,iCACIA,sBAGIA,2GAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,+BA9B8BA,uBACAA,gCACAA,4BACAA,+BAItBA,kDAAmC,4BAO/BA,sDAQIA,sDAIAA,oHCjCjB,iBAAmCwE,MACtC3E,YACYC,EACAc,EACAuB,EACRe,EACAC,GAEAsB,MAAMvB,EAAQC,GANNhD,oBACAA,2BACAA,mBAKRsE,MAAMoE,WACF,IAAIzE,IAAgBjE,KAAKwB,YAAYC,SAAS+V,eAAevT,GAC7DA,GAAQA,EAAKwT,UAIrBC,cAAc/X,GACV,OAAOK,KAAK8I,aACPC,OAAO,CACJC,SAAOC,KAAE,oCACTC,KAAMvJ,EAAQe,KACdyI,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,QACG8J,MAAUnL,GAAQA,EAAMT,KAAKwB,YAAYC,SAASiW,cAAc/X,EAAQQ,IAAMmJ,SAC9EvH,KAAItB,GAAOA,EAAIiX,gBAElBxR,UACGzF,IACQA,EAAIiN,SAAWrJ,eACfrE,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,YAEZlH,KAAKuJ,WAELvJ,KAAKgH,oBAAoBU,MAAMjH,EAAIsK,UAAW,OAAE,8BAA+B,CAC3E7D,OAAQ,aAIpBzG,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,sCC7D5BrH,gBAAsBA,8BAAwCA,eAAxCA,0EACtBA,gBAAuBA,8BAAwCA,eAAxCA,6EADvBA,yBACAA,+CADOA,wBACAA,0DAsBHA,gBAAsBA,8BAAwCA,eAAxCA,0EACtBA,gBAAuBA,8BAAwCA,eAAxCA,4FAH3BA,oBAAkCA,4DAAmBA,8BAAiCA,QACtFA,oBAAsBA,0DAClBA,yBACAA,yBACJA,gCAJqDA,2CACdA,0CAC5BA,iCACAA,0EDPF8X,IAAoB9X,0FAApB8X,GAAoB7X,gqBDlBjCD,0BACIA,wBACIA,kCACAA,sBAIJA,QACJA,QAEAA,4BAKIA,sCAAcY,oBAAdZ,CAAoC,wCACdY,2FAEtBZ,yBAAeA,gCAA+BA,QAC9CA,0BAAeA,gCAAyCA,QACxDA,0BAAeA,gCAAiCA,QAChDA,0BAAeA,gCAAqCA,QACpDA,0BACAA,0BACAA,iCAiCJA,eAtDgEA,gDAQ5DA,4CAAwB,2CAAxBA,CAAwB,uCAAxBA,CAAwB,0CAOTA,2CACAA,qDACAA,6CACAA,+OGXZ,SAOHH,YAAoBC,EAAkDc,GAAlDT,2BAAkDA,mBAClEA,KAAKuE,aAAevE,KAAKoG,oBAAoBwR,mBAAmB,iBAGpEvW,iBAOI,GANArB,KAAKuT,KAAOvT,KAAK0E,YAAYC,MAAM,CAC/BjE,KAAM,CAACV,KAAKqX,KAAK3W,KAAMmE,eACvBN,aAAcvE,KAAK0E,YAAYC,MAC3B3E,KAAKuE,aAAaW,OAAO,CAACzE,EAAMuB,IAAUoD,+BAAM3E,GAAI,EAAGuB,EAAMtB,MAAO,KAAO,OAG/EV,KAAKuE,aAAazD,OAAQ,CAC1B,MAAML,EAAoBT,KAAKuT,KAAKjQ,IAAI,gBAExC,UAAWtB,KAAYhC,KAAKuE,aAAc,CACtC,MAAMxB,EAAMf,EAAStB,KACfsC,EAA8B,QAAtBrD,OAAK0X,KAAK9S,oBAAY,eAAGxB,GACjCkB,EAAUxD,EAAkB6C,IAAIP,GAClCkB,GACAA,EAAQ8D,WAAW/E,KAMnCf,SACIjC,KAAKkC,cAGTyF,OACI3H,KAAKkC,YAAYlC,KAAKuT,KAAK7Q,+CArCtBmV,IAAyBhY,oDAAzBgY,GAAyB/X,4aDVtCD,gCAIAA,kBACIA,iDACIA,4CAMJA,QACAA,+DAMJA,QAEAA,uCAjBMA,mCACcA,iDAKRA,oDAKJA,8CAA6B,mDAA7BA,CAA6B,iOEL7BA,oBAGIA,4DAEAA,uBACAA,8BACJA,cADIA,qOAQIA,+BAIIA,iBAA8BA,8BAAmDA,QACjFA,iBACIA,uBAAkCA,SAAeA,QACrDA,QACAA,iBACIA,gBAKIA,uBACAA,gCACJA,QACJA,QACAA,kBACIA,sBAAoCA,+EAChCA,wBACAA,gCACJA,QACJA,QACAA,kBACIA,yBACIA,sBACIA,gCACAA,wBACJA,QACAA,iCACIA,sBAGIA,4GAGAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,QACJA,oDAzCIA,uEAE+CA,2BAEjCA,mCAAwBA,uBAK9BA,4DAIAA,kEAMAA,mDAMIA,sDAQIA,sDAGAA,6LAgBpBA,eACIA,kBACIA,kBACIA,SACJA,QACAA,kBACAA,qBAA2CA,mEACvCA,uBACJA,QACJA,QACAA,kBACIA,wBACIA,qBAMIA,gCACAA,wBACJA,QACAA,iCACIA,sBAGIA,4IAIAA,wBACAA,gCACJA,QACJA,QACJA,QACAA,sBAAyCA,qFACrCA,gCACJA,QACJA,QACJA,+CAnCYA,sDAaIA,0DAEAA,2DASIA,qDAGAA,iEAKRA,4LAIZA,eACIA,wBACIA,qBACIA,8BACAA,uBACJA,QACAA,gCACIA,gBAKIA,uBACAA,+BACJA,QACAA,sBAGIA,oIAIAA,wBACAA,gCACJA,QACJA,QACJA,QACJA,iCAxBYA,oDAMIA,+CAIAA,kDAOAA,qDAGAA,2GApExBA,SACIA,mCAGIA,kFAEAA,2BAuCAA,2BA4BJA,QACJA,yCAxEQA,oCAA8B,qGClDvC,SAQHH,YACYC,EACAc,EACAuB,EACAe,EACAC,EACAiB,GALAjE,mBACAA,2BACAA,oBACAA,aACAA,cACAA,2BARZA,uBAA8B,GAW9BqB,WACI,MAAM1B,EAAgBK,KAAKwB,YAAYC,SAASuI,WAAW2M,IAC3D3W,KAAK+J,OAASpK,EAAcsN,aAAanL,MAAK,OAAIE,GAAQA,EAAK8V,KAAK5N,QACpE,MAAMzJ,EAAgBT,KAAKyH,MAAMsQ,SAASjW,MACtC,OAAIE,GAAMA,EAAGsB,IAAI,gBACjB0U,SACA,QAAI,IAAOhY,KAAKC,kBAAoB,KAExCD,KAAKiY,aAAc,SAAcjY,KAAK+J,OAAQtJ,GAAeqB,MACzD,OAAI,EAAEE,EAAOe,MACT,GAAIA,EACA,OAAOf,EAAMmL,KAAKnK,GAAKA,EAAE7C,KAAO4C,MAI5C/C,KAAKoN,oBAAsBpN,KAAKoG,oBAAoBgE,wBACpDpK,KAAK6M,iBAAmB7M,KAAKwB,YAAYuE,OACpC+G,UACAnL,UAAU,EAAGmL,aAAc9K,EAAQ+K,iBACnCjL,MAAK,QAAI,IAAMnC,EAAciX,YAGtCrJ,YAAY5N,GACRK,KAAKwB,YAAYuE,OAAOyH,mBAAmB7N,GAAMuG,YAGrDW,SACI7G,KAAK8I,aACAoP,cAAcL,GAA2B,CAAEM,OAAQ,CAAEd,KAAM,CAAE3W,KAAM,OACnEoB,MACG,QAAUnC,GACNA,EAASK,KAAKwB,YAAYC,SAAS2W,WAAUhT,+BAAMzF,GAAM,CAAE0Y,UAAW,MAAQ/O,SAGlFsC,MAAU,IAAM5L,KAAKwB,YAAYC,SAASuI,WAAW/D,UAExDC,UACG,KACIlG,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,UAGhBvH,IACIK,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,WAM5BoR,OAAO3Y,GACHK,KAAK8I,aACAC,OAAO,CACJC,SAAOC,KAAE,+BACTE,QAAS,CACL,CAAEC,KAAM,YAAazF,SAAOsF,KAAE,kBAC9B,CAAEG,KAAM,SAAUzF,OAAO,OAAE,iBAAkB0F,aAAa,MAGjEvH,MACG,QAAUrB,GAAaA,EAAWT,KAAKwB,YAAYC,SAAS8W,WAAW5Y,GAAU2J,OAEjF,QAAU7I,GACFA,EAAO8X,WAAW7K,SAAWrJ,cAEtBrE,KAAKwB,YAAYC,SACnBuI,WACAC,UAAU,MAASuO,cAAc,QAE/B/D,OAAG,CAAE+D,aAAc/X,EAAO8X,WAAWxN,YAIvD7E,UACGzF,IACuC,iBAAxBA,EAAO+X,aACdxY,KAAKgH,oBAAoBU,MAAMjH,EAAO+X,cAEtCxY,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,UAIpBzG,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,WAM5BuR,OAAO9Y,GACHK,KAAK8I,aACAoP,cAAcL,GAA2B,CAAEM,OAAQ,CAAEd,UACrDvV,QACG8J,MAAUnL,GACNA,EAAST,KAAKwB,YAAYC,SAASiX,WAAUtT,eAAGjF,GAAIR,EAAKQ,IAAOM,IAAY6I,OAGnFpD,UACG,KACIlG,KAAKgH,oBAAoBC,SAAQ,OAAE,gCAAiC,CAChEC,OAAQ,UAGhBzG,IACIT,KAAKgH,oBAAoBU,OAAM,OAAE,8BAA+B,CAC5DR,OAAQ,WAM5ByR,eACI,MAAMhZ,EAAMyF,iBAAQpF,KAAKyH,MAAMmR,SAASC,eACjClZ,EAAOmZ,SACd9Y,KAAKsH,OAAOC,SAAS,CAAC,KAAM5H,GAAS,CAAE6H,WAAYxH,KAAKyH,MAAOsR,oBAAqB,aAGxFC,UAAUrZ,GACNK,KAAK8I,aACAoP,cAAc9V,EAAiC,CAC5C+V,OAAQ,CACJc,SAAUtZ,EAAKe,KACfY,eAAgB3B,EAAKY,SAEzB2Y,KAAM,OAETpX,QACG8J,MAAUnL,GACNA,EACMT,KAAKwB,YAAYC,SACZ0X,iBAAiBxZ,EAAKQ,GAAIM,GAC1BqB,MAAK,QAAMrB,IAChB6I,OAGbpD,UAAU,CACP8F,KAAMvL,IACFT,KAAKgH,oBAAoBC,SAAQ,OAAE,0CAA2C,CAC1EmS,aAAc3Y,EAAOK,OACrBmY,SAAUtZ,EAAKe,QAGvBgH,MAAOjH,IACHT,KAAKgH,oBAAoBU,MAAMjH,MAK/C4Y,eAAe1Z,EAAsBc,GACjCT,KAAKwB,YAAYC,SAAS6X,sBAAsB3Z,EAAKQ,GAAIM,GAAWyF,UAAU,CAC1EoH,SAAU,KACNtN,KAAKgH,oBAAoBC,SAAQ,OAAE,+CAAgD,CAC/EmS,aAAc3Y,EAAUK,OACxBmY,SAAUtZ,EAAKe,kDA5KtB6Y,IAAiB1Z,uGAAjB0Z,GAAiBzZ,62CDxB9BD,0BACIA,uBACQA,mCAGIA,8CAAsBY,qDACzBZ,QACLA,QACJA,wBACIA,kCACAA,2BAQJA,QACJA,QACAA,iBACIA,iBACIA,oBACIA,kBACIA,4CA4CJA,QACJA,QACJA,QACAA,oCACIA,oDA2EJA,QACJA,eAjJgBA,0EAAsD,qDASzDA,gDAawBA,gDA8CPA,sDACPA,ylCE/DhB,iBAAoCwE,MACvC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,gBACZ3K,GAAI,GACJqZ,UAAW,GACXC,UAAW,GACX7U,aAAc,GACdE,UAAW,GACXC,SAAU,GACViD,KAAM,CAAE/C,MAAO,KAEnBjD,GAAMvB,EAAYmF,cAAc8T,iBAAiB1X,GAAIL,UAAUoB,GAAQA,EAAK6C,wDAd3E+T,IAAqB9Z,sDAArB8Z,GAAqBC,QAArBD,GAAqB,qBAFlB,SCMT,iBAA8BtV,MACjC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,UACZ3K,GAAI,GACJqZ,UAAW,GACXC,UAAW,GACX7Y,KAAM,GACN6I,MAAO,GACPC,kBAAkB,EAClBC,aAActF,UACdwF,uBAAqBxF,SACrB6G,oBAAqB,GACrBC,eAAgB,IAEnBnJ,GAAOvB,EAAYgB,SAASoY,WAAW7X,GAAIL,UAAWoB,GAASA,EAAK+W,kDAjBpEC,IAAela,sDAAfka,GAAeH,QAAfG,GAAe,qBAFZ,SCCT,iBAA8B1V,MACjC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,UACZ3K,GAAI,GACJqZ,UAAW,GACXC,UAAW,GACX7Y,KAAM,GACNF,KAAM,GACNwL,SAAS,EACT8N,aAAc,IAElBhY,GAAMvB,EAAYgB,SAASwY,WAAWjY,GAAIL,UAAUoB,GAAQA,EAAKmX,kDAdhEC,IAAeta,sDAAfsa,GAAeP,QAAfO,GAAe,qBAFZ,SCET,iBAAqC9V,MACxC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EAEA,GACA,IAAMc,EAAYgB,SAAS2Y,oBAAoBzY,UAAUK,GAAQA,EAAKqM,yDANrEgM,IAAsBxa,sDAAtBwa,GAAsBT,QAAtBS,GAAsB,qBAFnB,SCET,iBAAoChW,MACvC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,gBACZ3K,GAAI,GACJqZ,UAAW,GACXC,UAAW,GACX/Y,KAAM,GACNE,KAAM,GACNgD,YAAa,GACbsI,SAAS,EACTqC,aAAS,EACTC,aAAS,GAEbxM,GAAMvB,EAAYgB,SAAS6Y,iBAAiBtY,GAAIL,UAAUoB,GAAQA,EAAKwX,wDAhBtEC,IAAqB3a,sDAArB2a,GAAqBZ,QAArBY,GAAqB,qBAFlB,SCDT,iBAA8BnW,MACjC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,gBACZ3K,GAAI,GACJqZ,UAAW,GACXC,UAAW,GACX7U,aAAc,GACdE,UAAW,GACXC,SAAU,GACViD,KAAM,CAAE/C,MAAO,KAEnBjD,GACIvB,EAAYmF,cACP6U,yBACA9Y,UAAUoB,GAAQA,EAAK2X,8DAjB/BC,IAAe9a,sDAAf8a,GAAef,QAAfe,GAAe,qBAFZ,SCET,iBAA2BtW,MAC9B3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,OACZ3K,GAAI,GACJqZ,UAAW,GACXC,UAAW,GACX7Y,KAAM,GACNgD,YAAa,GACbC,YAAa,GACbsE,SAAU,IAEdnG,GAAMvB,EAAYmF,cAAcgV,QAAQ5Y,GAAIL,UAAUoB,GAAQA,EAAK8X,+CAdlEC,IAAYjb,sDAAZib,GAAYlB,QAAZkB,GAAY,qBAFT,SCKT,iBAAqCzW,MACxC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,iBACZ0O,UAAW,GACXC,UAAW,GACXtZ,GAAI,GACJS,KAAM,GACNF,KAAM,GACNkD,YAAa,GACb8R,4BAAwB,EACxBnH,aAAS,EACTsF,gBAAY,EACZmG,aAAc,IAElBhY,GAAMvB,EAAYqT,eAAeiH,kBAAkB/Y,GAAIL,UAAUoB,GAAQA,EAAK+Q,yDAjB7EkH,IAAsBnb,sDAAtBmb,GAAsBpB,QAAtBoB,GAAsB,qBAFnB,SCAT,iBAAkC3W,MACrC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,cACZ3K,GAAI,GACJqZ,UAAW,GACXC,UAAW,GACX/Y,KAAM,GACNuV,WAAW,GAEfjU,GAAMvB,EAAYgB,SAASwZ,eAAejZ,GAAIL,UAAUoB,GAAQA,EAAKmY,sDAZpEC,IAAmBtb,sDAAnBsb,GAAmBvB,QAAnBuB,GAAmB,qBAFhB,SCET,iBAA8B9W,MACjC3E,YAAYC,EAAgBc,GACxB6D,MACI3E,EACA,CACImL,WAAY,UACZ3K,GAAI,GACJqZ,UAAW,GACXC,UAAW,GACX/Y,KAAM,GACNgC,MAAO,EACPwJ,SAAS,EACTkL,SAAU,GACVC,KAAM,GACNC,cAAe,MAEnBtV,GAAMvB,EAAYgB,SAAS2Z,WAAWpZ,GAAIL,UAAUoB,GAAQA,EAAKsY,kDAhBhEC,IAAezb,sDAAfyb,GAAe1B,QAAf0B,GAAe,qBAFZ,SCqCT,MAAMC,GAA0B,CACnC,CACIC,KAAM,UACNC,UAAW/K,GACXgL,WAASrX,OAAkBsW,IAC3BgB,cAAe,CAACtX,OAChByT,KAAM,CACF8D,cAAY3S,KAAE,wBAGtB,CACIuS,KAAM,iBACNC,UAAWjS,GACXsO,KAAM,CACF8D,cAAY3S,KAAE,+BAGtB,CACIuS,KAAM,qBACNC,UAAWhT,GACXiT,WAASrX,OAAkBsV,IAC3BgC,cAAe,CAACtX,OAChByT,KAAM,CAAE8D,WAAYC,KAExB,CACIL,KAAM,WACNC,UAAWxP,GACX6L,KAAM,CACF8D,cAAY3S,KAAE,yBAGtB,CACIuS,KAAM,eACNC,UAAWjQ,GACXkQ,WAASrX,OAAkB0V,IAC3B4B,cAAe,CAACtX,OAChByT,KAAM,CAAE8D,WAAYE,KAExB,CACIN,KAAM,QACNC,UAAWhK,GACXqG,KAAM,CACF8D,cAAY3S,KAAE,sBAGtB,CACIuS,KAAM,YACNC,UAAWxK,GACXyK,WAASrX,OAAkByW,IAC3Ba,cAAe,CAACtX,OAChByT,KAAM,CAAE8D,WAAYG,KAExB,CACIP,KAAM,iBACNC,UAAW5E,GACXiB,KAAM,CACF8D,cAAY3S,KAAE,+BAGtB,CACIuS,KAAM,qBACNC,UAAWpF,GACXqF,WAASrX,OAAkB8W,IAC3BQ,cAAe,CAACtX,OAChByT,KAAM,CACF8D,WAAYI,KAGpB,CACIR,KAAM,YACNC,UAAW9D,GACXG,KAAM,CACF8D,cAAY3S,KAAE,0BAGtB,CACIuS,KAAM,gBACNC,UAAWlE,GACXmE,WAASrX,OAAkBiX,IAC3BK,cAAe,CAACtX,OAChByT,KAAM,CACF8D,WAAYK,KAGpB,CACIT,KAAM,YACNC,UAAW5N,GACXiK,KAAM,CACF8D,cAAY3S,KAAE,0BAGtB,CACIuS,KAAM,gBACNC,UAAW9Q,GACX+Q,WAASrX,OAAkB8V,IAC3BwB,cAAe,CAACtX,OAChByT,KAAM,CACF8D,WAAYM,KAGpB,CACIV,KAAM,QACNC,UAAWlC,GACXzB,KAAM,CACF8D,cAAY3S,KAAE,sBAGtB,CACIuS,KAAM,mBACNC,UAAWzF,GACX8B,KAAM,CACF8D,cAAY3S,KAAE,iCAGtB,CACIuS,KAAM,uBACNC,UAAW9F,GACX+F,WAASrX,OAAkB2W,IAC3BW,cAAe,CAACtX,OAChByT,KAAM,CACF8D,WAAYO,KAGpB,CACIX,KAAM,kBACNC,UAAWjL,GACXsH,KAAM,CACF8D,cAAY3S,KAAE,gCAGtB,CACIuS,KAAM,sBACNC,UAAWvL,GACXwL,WAASrX,OAAkBmW,IAC3BmB,cAAe,CAACtX,OAChByT,KAAM,CACF8D,WAAYQ,KAGpB,CACIZ,KAAM,kBACNC,UAAWnN,GACXoN,WAASrX,OAAkBgW,IAC3BsB,cAAe,CAACtX,OAChByT,KAAM,CACF8D,cAAY3S,KAAE,iCAKnB,YAAiCoT,EAAW1c,GAC/C,SAAO0E,OAAgC,CACnC6C,OAAQmV,EAAKnV,OACb/G,GAAIR,EAAOQ,GACXmc,cAAe,4BACfC,QAAS9b,GAAS,GAAGA,EAAMqE,aAAarE,EAAMsE,WAC9C0C,MAAO,mBAIR,YAA2B4U,EAAW1c,GACzC,SAAO0E,OAA0B,CAC7B6C,OAAQmV,EAAKnV,OACb/G,GAAIR,EAAOQ,GACXmc,cAAe,sBACfC,QAAS9b,GAAWA,EAAQG,KAC5B6G,MAAO,aAIR,YAAwB4U,EAAW1c,GACtC,SAAO0E,OAAuB,CAC1B6C,OAAQmV,EAAKnV,OACb/G,GAAIR,EAAOQ,GACXmc,cAAe,mBACfC,QAAS9b,GAAQA,EAAKmD,YACtB6D,MAAO,UAIR,YAA+B4U,EAAW1c,GAC7C,SAAO0E,OAAuC,CAC1C6C,OAAQmV,EAAKnV,OACb/G,GAAIR,EAAOQ,GACXmc,cAAe,4BACfC,QAAS9b,GAAYA,EAASC,KAC9B+G,MAAO,mBAIR,YAA2B4U,EAAW1c,GACzC,SAAO0E,OAAmC,CACtC6C,OAAQmV,EAAKnV,OACb/G,GAAIR,EAAOQ,GACXmc,cAAe,uBACfC,QAAS9b,GAAYA,EAASC,KAC9B+G,MAAO,cAIR,YAA2B4U,EAAW1c,GACzC,SAAO0E,OAAmC,CACtC6C,OAAQmV,EAAKnV,OACb/G,GAAIR,EAAOQ,GACXmc,cAAe,uBACfC,QAAS9b,GAAaA,EAAUC,KAChC+G,MAAO,cAIR,YAAkC4U,EAAW1c,GAChD,SAAO0E,OAA0C,CAC7C6C,OAAQmV,EAAKnV,OACb/G,GAAIR,EAAOQ,GACXmc,cAAe,8BACfC,QAAS9b,GAAUA,EAAOC,KAC1B+G,MAAO,qBAIR,YAAiC4U,EAAW1c,GAC/C,SAAO0E,OAA0C,CAC7C6C,OAAQmV,EAAKnV,OACb/G,GAAIR,EAAOQ,GACXmc,cAAe,6BACfC,QAAS9b,GAAUA,EAAOG,KAC1B6G,MAAO,oBC1MR,iDAAM+U,gEAjCA,CAACnY,MAAcoY,cAAsBlB","names":["constructor","n","Y","e","selectors","$","this","selectedMemberIds","indexOf","id","filteredMembers","filterTerm","toLocaleLowerCase","members","filter","t","name","includes","code","areAllSelected","length","toggleSelectAll","selectionChange","emit","map","toggleSelectMember","j","ngOnInit","currentMembers","availableCountries$","dataService","settings","getCountries","mapStream","countries","items","pipe","L","i","cancel","resolveWith","add","re","buildGrid","setPermission","readonly","permissionChange","permission","value","toggleAll","some","activePermissions","Map","r","l","permissionDefinitions","test","h","match","f","get","push","set","assignable","gridData","label","description","permissions","Array","from","entries","d","extractCrudDescription","replace","z","s","super","customFields","getCustomFieldConfig","detailForm","formBuilder","group","emailAddress","a","firstName","lastName","password","roles","reduce","y","Object","getAvailableChannels","values","selectedRolePermissions","init","administrator$","entity$","allRoles$","administrator","getRoles","se","client","userStatus","single$","subscribe","disable","serverConfigService","getPermissionDefinitions","ngOnDestroy","destroy","rolesChanged","buildPermissionsMap","getPermissionsForSelectedChannel","selectedChannelId","channelId","create","roleIds","createAdministrator","notificationService","success","entity","markAsPristine","changeDetector","markForCheck","router","navigate","relativeTo","route","error","save","F","updateAdministrator","setFormValues","patchValue","user","setCustomFieldFormValues","setValidators","channels","Set","forEach","keys","has","channelCode","ae","setQueryFn","getAdministrators","administrators","deleteAdministrator","modalService","dialog","title","c","body","buttons","type","returnValue","q","refresh","le","token","pricesIncludeTax","currencyCode","defaultShippingZoneId","defaultLanguageCode","defaultTaxZoneId","zones$","getZones","mapSingle","zones","availableLanguageCodes$","getAvailableLanguages","saveButtonEnabled","dirty","valid","createChannel","auth","currentUser","me","T","updateUserChannels","__typename","message","updateChannel","generateToken","defaultShippingZone","defaultTaxZone","Math","random","toString","substr","ce","Je","channels$","refresh$","b","getChannels","isDefaultChannel","deleteChannel","next","de","enabled","country$","O","languageCode$","translatable","updatedFields","customFieldConfig","languageCode","defaultTranslation","createCountry","updateCountry","contentLanguage$","uiState","contentLanguage","searchTerm","valueChanges","countriesWithZones$","find","availableLanguages$","destroy$","complete","setLanguage","setContentLanguage","deleteCountry","result","isZone","hasOwnProperty","ue","clear","call","availableLanguages","trackInventory","outOfStockThreshold","updateGlobalSettings","refreshGlobalSettings","globalSettings","pe","checker","handler","getPaymentMethodOperations","checkers","paymentMethodEligibilityCheckers","handlers","paymentMethodHandlers","selectedCheckerDefinition","selectedHandlerDefinition","updateCode","pristine","setValue","configArgsIsPopulated","controls","selectChecker","selectedChecker","clearValidators","updateValueAndValidity","onlySelf","markAsDirty","selectHandler","selectedHandler","removeChecker","removeHandler","createPaymentMethod","updatePaymentMethod","args","ge","getPaymentMethods","refetchOnChannelChange","paymentMethods","deletePaymentMethod","showModalAndDelete","_e","updateActiveAdministrator","he","channelIds","role$","kn","createRole","updateRole","detectChanges","fe","visibleRoles$","items$","toggleDisplayLimit","displayLimit","initialLimit","isDefaultRole","deleteRole","Ze","be","lines","unitPriceWithTax","quantity","loadFromLocalStorage","orderLinesChange","getActiveChannel","activeChannel","selectResult","addToLines","productVariantId","productVariantName","preview","productAsset","sku","priceWithTax","persistToLocalStorage","updateQuantity","removeLine","localStorageService","setForCurrentLocation","getForCurrentLocation","E","getAvailableCountries","city","countryCode","postalCode","province","addressChange","form","subscription","unsubscribe","H","ve","fulfillmentHandler","calculator","shippingMethod","getShippingMethodOperations","shippingEligibilityCheckers","calculators","shippingCalculators","fulfillmentHandlers","selectedCalculatorDefinition","activeChannel$","testResult$","fetchTestResult$","selectedCalculator","Ge","shippingAddress","streetLine1","testShippingMethod","eo","to","testDataUpdated","selectCalculator","getUpdatedShippingMethod","createShippingMethod","updateShippingMethod","setTestOrderLines","testOrderLines","setTestAddress","testAddress","allTestDataPresent","runTest","fulfillmentHandlerCode","Ce","getShippingMethods","shippingMethods","testEligibleShippingMethods","deleteShippingMethod","ye","isDefault","taxCategory$","createTaxCategory","updateTaxCategory","xe","queryResult","getTaxCategories","taxCategories$","taxCategories","deleteTaxCategory","ref","refetch","Te","taxCategoryId","zoneId","customerGroupId","categoryId","createTaxRate","updateTaxRate","category","zone","customerGroup","Ae","getTaxRates","taxRates","deleteTaxRate","Le","getCustomFieldsFor","G","data","paramMap","ui","activeZone$","fromComponent","locals","createZone","memberIds","delete","deleteZone","errorMessage","update","updateZone","closeMembers","snapshot","params","contents","queryParamsHandling","addToZone","zoneName","size","addMembersToZone","countryCount","removeFromZone","removeMembersFromZone","Fe","createdAt","updatedAt","getAdministrator","V","factory","getChannel","channel","B","translations","getCountry","country","K","getGlobalSettings","W","getPaymentMethod","paymentMethod","X","getActiveAdministrator","activeAdministrator","ee","getRole","role","te","getShippingMethod","ne","getTaxCategory","taxCategory","oe","getTaxRate","taxRate","ie","Ke","path","component","resolve","canDeactivate","breadcrumb","We","Xe","et","tt","nt","ot","it","rt","o","breadcrumbKey","getName","qe","g"],"sources":["webpack:///src/lib/settings/src/components/zone-member-list/zone-member-controls.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list-header.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.html","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.ts","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.html","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.ts","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.html","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.ts","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.html","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.ts","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.html","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.ts","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.html","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.ts","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.html","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.ts","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.html","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.ts","webpack:///src/lib/settings/src/components/country-list/country-list.component.html","webpack:///src/lib/settings/src/components/country-list/country-list.component.ts","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.html","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.ts","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.html","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.ts","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.html","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.ts","webpack:///src/lib/settings/src/components/profile/profile.component.html","webpack:///src/lib/settings/src/components/profile/profile.component.ts","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.html","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.ts","webpack:///src/lib/settings/src/components/role-list/role-list.component.html","webpack:///src/lib/settings/src/components/role-list/role-list.component.ts","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.ts","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.html","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.ts","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.html","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.ts","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.ts","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.html","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.ts","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.html","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.ts","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.html","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.ts","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.html","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.ts","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.html","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.ts","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.html","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.ts","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.html","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.ts","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.html","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.ts","webpack:///src/lib/settings/src/providers/routing/administrator-resolver.ts","webpack:///src/lib/settings/src/providers/routing/channel-resolver.ts","webpack:///src/lib/settings/src/providers/routing/country-resolver.ts","webpack:///src/lib/settings/src/providers/routing/global-settings-resolver.ts","webpack:///src/lib/settings/src/providers/routing/payment-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/profile-resolver.ts","webpack:///src/lib/settings/src/providers/routing/role-resolver.ts","webpack:///src/lib/settings/src/providers/routing/shipping-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-category-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-rate-resolver.ts","webpack:///src/lib/settings/src/settings.routes.ts","webpack:///src/lib/settings/src/settings.module.ts"],"sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[vdrZoneMemberControls]',\r\n})\r\nexport class ZoneMemberControlsDirective {\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[vdrZoneMemberListHeader]',\r\n})\r\nexport class ZoneMemberListHeaderDirective {\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","<div class=\"members-header\">\r\n    <ng-container *ngIf=\"headerTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"headerTemplate.templateRef\"></ng-container>\r\n    </ng-container>\r\n    <input\r\n        type=\"text\"\r\n        [placeholder]=\"'settings.filter-by-member-name' | translate\"\r\n        [(ngModel)]=\"filterTerm\"\r\n    />\r\n</div>\r\n<vdr-data-table\r\n    [items]=\"filteredMembers()\"\r\n    [allSelected]=\"areAllSelected()\"\r\n    [isRowSelectedFn]=\"(['UpdateSettings', 'UpdateZone'] | hasPermission) && isMemberSelected\"\r\n    (rowSelectChange)=\"toggleSelectMember($event)\"\r\n    (allSelectChange)=\"toggleSelectAll()\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-member=\"item\">\r\n        <td class=\"left align-middle\">{{ member.code }}</td>\r\n        <td class=\"left align-middle\">{{ member.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <clr-icon\r\n                [class.is-success]=\"member.enabled\"\r\n                [attr.shape]=\"member.enabled ? 'check' : 'times'\"\r\n            ></clr-icon>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <ng-container *ngIf=\"controlsTemplate\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"controlsTemplate.templateRef; context: { member: member }\"\r\n                ></ng-container>\r\n            </ng-container>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GetZones } from '@vendure/admin-ui/core';\r\n\r\nimport { ZoneMemberControlsDirective } from './zone-member-controls.directive';\r\nimport { ZoneMemberListHeaderDirective } from './zone-member-list-header.directive';\r\n\r\nexport type ZoneMember = { id: string; name: string; code: string };\r\n\r\n@Component({\r\n    selector: 'vdr-zone-member-list',\r\n    templateUrl: './zone-member-list.component.html',\r\n    styleUrls: ['./zone-member-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneMemberListComponent {\r\n    @Input() members: ZoneMember[] = [];\r\n    @Input() selectedMemberIds: string[] = [];\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @ContentChild(ZoneMemberListHeaderDirective) headerTemplate: ZoneMemberListHeaderDirective;\r\n    @ContentChild(ZoneMemberControlsDirective) controlsTemplate: ZoneMemberControlsDirective;\r\n    filterTerm = '';\r\n\r\n    filteredMembers(): ZoneMember[] {\r\n        if (this.filterTerm !== '') {\r\n            const term = this.filterTerm.toLocaleLowerCase();\r\n            return this.members.filter(\r\n                m => m.name.toLocaleLowerCase().includes(term) || m.code.toLocaleLowerCase().includes(term),\r\n            );\r\n        } else {\r\n            return this.members;\r\n        }\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        if (this.members) {\r\n            return this.selectedMemberIds.length === this.members.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectionChange.emit([]);\r\n        } else {\r\n            this.selectionChange.emit(this.members.map(v => v.id));\r\n        }\r\n    }\r\n\r\n    toggleSelectMember(member: ZoneMember) {\r\n        if (this.selectedMemberIds.includes(member.id)) {\r\n            this.selectionChange.emit(this.selectedMemberIds.filter(id => id !== member.id));\r\n        } else {\r\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\r\n        }\r\n    }\r\n\r\n    isMemberSelected = (member: ZoneMember): boolean => {\r\n        return -1 < this.selectedMemberIds.indexOf(member.id);\r\n    };\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\r\n\r\n<vdr-zone-member-list\r\n    [members]=\"availableCountries$ | async\"\r\n    [selectedMemberIds]=\"selectedMemberIds\"\r\n    (selectionChange)=\"selectedMemberIds = $event\"\r\n>\r\n</vdr-zone-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\r\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { DataService, Dialog, GetCountryList, GetZones } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-add-country-to-zone-dialog',\r\n    templateUrl: './add-country-to-zone-dialog.component.html',\r\n    styleUrls: ['./add-country-to-zone-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddCountryToZoneDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    zoneName: string;\r\n    currentMembers: GetZones.Members[] = [];\r\n    availableCountries$: Observable<GetCountryList.Items[]>;\r\n    selectedMemberIds: string[] = [];\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        const currentMemberIds = this.currentMembers.map(m => m.id);\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getCountries(999)\r\n            .mapStream(data => data.countries.items)\r\n            .pipe(map(countries => countries.filter(c => !currentMemberIds.includes(c.id))));\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedMemberIds);\r\n    }\r\n}\r\n","<table class=\"table\">\r\n    <tbody>\r\n        <tr *ngFor=\"let section of gridData\">\r\n            <td class=\"permission-group left\">\r\n                <div><strong>{{ section.label | translate }}</strong></div>\r\n                <small>{{ section.description | translate }}</small><br>\r\n                <button *ngIf=\"1 < section.permissions.length && !readonly\" class=\"btn btn-sm btn-link\" (click)=\"toggleAll(section.permissions)\">\r\n                    {{ 'common.toggle-all' | translate }}\r\n                </button>\r\n            </td>\r\n            <td *ngFor=\"let permission of section.permissions\" [attr.colspan]=\"section.permissions.length === 1 ? 4 : 1\">\r\n                <vdr-select-toggle\r\n                    size=\"small\"\r\n                    [title]=\"permission.description\"\r\n                    [label]=\"permission.name\"\r\n                    [disabled]=\"readonly\"\r\n                    [selected]=\"activePermissions?.includes(permission.name)\"\r\n                    (selectedChange)=\"setPermission(permission.name, $event)\"\r\n                ></vdr-select-toggle>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { PermissionDefinition } from '@vendure/admin-ui/core';\n\nexport interface PermissionGridRow {\n    label: string;\n    description: string;\n    permissions: PermissionDefinition[];\n}\n\n/**\n * A table showing and allowing the setting of all possible CRUD permissions.\n */\n@Component({\n    selector: 'vdr-permission-grid',\n    templateUrl: './permission-grid.component.html',\n    styleUrls: ['./permission-grid.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PermissionGridComponent implements OnInit {\n    @Input() permissionDefinitions: PermissionDefinition[];\n    @Input() activePermissions: string[];\n    @Input() readonly = false;\n    @Output() permissionChange = new EventEmitter<{ permission: string; value: boolean }>();\n    gridData: PermissionGridRow[];\n\n    ngOnInit() {\n        this.buildGrid();\n    }\n\n    setPermission(permission: string, value: boolean) {\n        if (!this.readonly) {\n            this.permissionChange.emit({ permission, value });\n        }\n    }\n\n    toggleAll(defs: PermissionDefinition[]) {\n        const value = defs.some(d => !this.activePermissions.includes(d.name));\n        for (const def of defs) {\n            this.permissionChange.emit({ permission: def.name, value });\n        }\n    }\n\n    private buildGrid() {\n        const crudGroups = new Map<string, PermissionDefinition[]>();\n        const nonCrud: PermissionDefinition[] = [];\n        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;\n        for (const def of this.permissionDefinitions) {\n            const isCrud = crudRe.test(def.name);\n            if (isCrud) {\n                const groupName = def.name.match(crudRe)?.[2];\n                if (groupName) {\n                    const existing = crudGroups.get(groupName);\n                    if (existing) {\n                        existing.push(def);\n                    } else {\n                        crudGroups.set(groupName, [def]);\n                    }\n                }\n            } else if (def.assignable) {\n                nonCrud.push(def);\n            }\n        }\n        this.gridData = [\n            ...nonCrud.map(d => ({\n                label: d.name,\n                description: d.description,\n                permissions: [d],\n            })),\n            ...Array.from(crudGroups.entries()).map(([label, defs]) => {\n                return {\n                    label,\n                    description: this.extractCrudDescription(defs[0]),\n                    permissions: defs,\n                };\n            }),\n        ];\n    }\n\n    private extractCrudDescription(def: PermissionDefinition): string {\n        return def.description.replace(/Grants permission to [\\w]+/, 'Grants permissions on');\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\r\n        <input\r\n            id=\"emailAddress\"\r\n            type=\"text\"\r\n            formControlName=\"emailAddress\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n        <input\r\n            id=\"firstName\"\r\n            type=\"text\"\r\n            formControlName=\"firstName\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n        <input\r\n            id=\"lastName\"\r\n            type=\"text\"\r\n            formControlName=\"lastName\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        *ngIf=\"!(isNew$ | async) && ('UpdateAdministrator' | hasPermission)\"\r\n        [label]=\"'settings.password' | translate\"\r\n        for=\"password\"\r\n        [readOnlyToggle]=\"true\"\r\n    >\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Administrator\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"administrator-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n    <label class=\"clr-control-label\">{{ 'settings.roles' | translate }}</label>\r\n    <ng-select\r\n        [items]=\"allRoles$ | async\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        formControlName=\"roles\"\r\n        (change)=\"rolesChanged($event)\"\r\n        bindLabel=\"description\"\r\n    ></ng-select>\r\n\r\n    <ul class=\"nav\" role=\"tablist\">\r\n        <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\r\n            <button\r\n                [id]=\"channel.channelId\"\r\n                (click)=\"selectedChannelId = channel.channelId\"\r\n                class=\"btn btn-link nav-link\"\r\n                [class.active]=\"selectedChannelId === channel.channelId\"\r\n                [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\r\n                type=\"button\"\r\n            >\r\n                {{ channel.channelCode | channelCodeToLabel | translate }}\r\n            </button>\r\n        </li>\r\n    </ul>\r\n    <vdr-permission-grid\r\n        [activePermissions]=\"getPermissionsForSelectedChannel()\"\r\n        [permissionDefinitions]=\"permissionDefinitions\"\r\n        [readonly]=\"true\"\r\n    ></vdr-permission-grid>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseDetailComponent, CustomFieldConfig, PermissionDefinition } from '@vendure/admin-ui/core';\r\nimport {\r\n    Administrator,\r\n    CreateAdministratorInput,\r\n    GetAdministrator,\r\n    LanguageCode,\r\n    Permission,\r\n    Role,\r\n    RoleFragment,\r\n    UpdateAdministratorInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { CUSTOMER_ROLE_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\nexport interface PermissionsByChannel {\r\n    channelId: string;\r\n    channelCode: string;\r\n    permissions: { [K in Permission]: boolean };\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-admin-detail',\r\n    templateUrl: './admin-detail.component.html',\r\n    styleUrls: ['./admin-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AdminDetailComponent\r\n    extends BaseDetailComponent<GetAdministrator.Administrator>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    administrator$: Observable<GetAdministrator.Administrator>;\r\n    permissionDefinitions: PermissionDefinition[];\r\n    allRoles$: Observable<Role.Fragment[]>;\r\n    selectedRoles: Role.Fragment[] = [];\r\n    detailForm: FormGroup;\r\n    selectedRolePermissions: { [channelId: string]: PermissionsByChannel } = {} as any;\r\n    selectedChannelId: string | null = null;\r\n\r\n    getAvailableChannels(): PermissionsByChannel[] {\r\n        return Object.values(this.selectedRolePermissions);\r\n    }\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Administrator');\r\n        this.detailForm = this.formBuilder.group({\r\n            emailAddress: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            password: [''],\r\n            roles: [[]],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.administrator$ = this.entity$;\r\n        this.allRoles$ = this.dataService.administrator\r\n            .getRoles(999)\r\n            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));\r\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\r\n            if (!userStatus.permissions.includes(Permission.UpdateAdministrator)) {\r\n                const rolesSelect = this.detailForm.get('roles');\r\n                if (rolesSelect) {\r\n                    rolesSelect.disable();\r\n                }\r\n            }\r\n        });\r\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    rolesChanged(roles: Role[]) {\r\n        this.buildPermissionsMap();\r\n    }\r\n\r\n    getPermissionsForSelectedChannel(): string[] {\r\n        function getActivePermissions(input: PermissionsByChannel['permissions']): string[] {\r\n            return Object.entries(input)\r\n                .filter(([permission, active]) => active)\r\n                .map(([permission, active]) => permission);\r\n        }\r\n        if (this.selectedChannelId) {\r\n            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];\r\n            if (selectedChannel) {\r\n                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;\r\n                return getActivePermissions(permissionMap);\r\n            }\r\n        }\r\n        const channels = Object.values(this.selectedRolePermissions);\r\n        if (0 < channels.length) {\r\n            this.selectedChannelId = channels[0].channelId;\r\n            return getActivePermissions(channels[0].permissions);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    create() {\r\n        const formValue = this.detailForm.value;\r\n        const administrator: CreateAdministratorInput = {\r\n            emailAddress: formValue.emailAddress,\r\n            firstName: formValue.firstName,\r\n            lastName: formValue.lastName,\r\n            password: formValue.password,\r\n            customFields: formValue.customFields,\r\n            roleIds: formValue.roles.map(role => role.id),\r\n        };\r\n        this.dataService.administrator.createAdministrator(administrator).subscribe(\r\n            data => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'Administrator',\r\n                });\r\n                this.detailForm.markAsPristine();\r\n                this.changeDetector.markForCheck();\r\n                this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'Administrator',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        this.administrator$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const administrator: UpdateAdministratorInput = {\r\n                        id,\r\n                        emailAddress: formValue.emailAddress,\r\n                        firstName: formValue.firstName,\r\n                        lastName: formValue.lastName,\r\n                        password: formValue.password,\r\n                        customFields: formValue.customFields,\r\n                        roleIds: formValue.roles.map(role => role.id),\r\n                    };\r\n                    return this.dataService.administrator.updateAdministrator(administrator);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            emailAddress: administrator.emailAddress,\r\n            firstName: administrator.firstName,\r\n            lastName: administrator.lastName,\r\n            roles: administrator.user.roles,\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                administrator,\r\n            );\r\n        }\r\n        const passwordControl = this.detailForm.get('password');\r\n        if (passwordControl) {\r\n            if (!administrator.id) {\r\n                passwordControl.setValidators([Validators.required]);\r\n            } else {\r\n                passwordControl.setValidators([]);\r\n            }\r\n        }\r\n        this.buildPermissionsMap();\r\n    }\r\n\r\n    private buildPermissionsMap() {\r\n        const permissionsControl = this.detailForm.get('roles');\r\n        if (permissionsControl) {\r\n            const roles: RoleFragment[] = permissionsControl.value;\r\n            const channelIdPermissionsMap = new Map<string, Set<Permission>>();\r\n            const channelIdCodeMap = new Map<string, string>();\r\n\r\n            for (const role of roles) {\r\n                for (const channel of role.channels) {\r\n                    const channelPermissions = channelIdPermissionsMap.get(channel.id);\r\n                    const permissionSet = channelPermissions || new Set<Permission>();\r\n\r\n                    role.permissions.forEach(p => permissionSet.add(p));\r\n                    channelIdPermissionsMap.set(channel.id, permissionSet);\r\n                    channelIdCodeMap.set(channel.id, channel.code);\r\n                }\r\n            }\r\n\r\n            this.selectedRolePermissions = {} as any;\r\n            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                const permissionSet = channelIdPermissionsMap.get(channelId)!;\r\n                const permissionsHash: { [K in Permission]: boolean } = {} as any;\r\n                for (const def of this.serverConfigService.getPermissionDefinitions()) {\r\n                    permissionsHash[def.name] = permissionSet.has(def.name as Permission);\r\n                }\r\n                this.selectedRolePermissions[channelId] = {\r\n                    // tslint:disable:no-non-null-assertion\r\n                    channelId,\r\n                    channelCode: channelIdCodeMap.get(channelId)!,\r\n                    permissions: permissionsHash,\r\n                    // tslint:enable:no-non-null-assertion\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'admin.create-new-administrator' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'settings.first-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.last-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-administrator=\"item\">\r\n        <td class=\"left align-middle\">{{ administrator.firstName }}</td>\r\n        <td class=\"left align-middle\">{{ administrator.lastName }}</td>\r\n        <td class=\"left align-middle\">{{ administrator.emailAddress }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', administrator.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteAdministrator(administrator)\"\r\n                        [disabled]=\"!('DeleteAdministrator' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetAdministrators,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-administrator-list',\r\n    templateUrl: './administrator-list.component.html',\r\n    styleUrls: ['./administrator-list.component.scss'],\r\n})\r\nexport class AdministratorListComponent extends BaseListComponent<\r\n    GetAdministrators.Query,\r\n    GetAdministrators.Items\r\n> {\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.administrator.getAdministrators(...args),\r\n            (data) => data.administrators,\r\n        );\r\n    }\r\n\r\n    deleteAdministrator(administrator: GetAdministrators.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-administrator'),\r\n                body: `${administrator.firstName} ${administrator.lastName}`,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap((res) =>\r\n                    res ? this.dataService.administrator.deleteAdministrator(administrator.id) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                (err) => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"channel-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"['SuperAdmin', 'UpdateChannel']\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            formControlName=\"code\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.channel-token' | translate\" for=\"token\">\r\n        <input\r\n            id=\"token\"\r\n            type=\"text\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            formControlName=\"token\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.currency' | translate\" for=\"defaultTaxZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"currencyCode\"\r\n            formControlName=\"currencyCode\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let code of currencyCodes\" [value]=\"code\">{{ code | localeCurrencyName }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.default-language' | translate\" for=\"defaultLanguage\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultLanguageCode\"\r\n            formControlName=\"defaultLanguageCode\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let languageCode of availableLanguageCodes$ | async\" [value]=\"languageCode\">\r\n                {{ languageCode | localeLanguageName }} ({{ languageCode | uppercase }})\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.prices-include-tax' | translate\" for=\"pricesIncludeTax\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"pricesIncludeTax\"\r\n                formControlName=\"pricesIncludeTax\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.default-tax-zone' | translate\" for=\"defaultTaxZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultTaxZoneId\"\r\n            formControlName=\"defaultTaxZoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option selected value style=\"display: none\"></option>\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <clr-alert\r\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultTaxZoneId\"\r\n        clrAlertType=\"danger\"\r\n        [clrAlertClosable]=\"false\"\r\n    >\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'error.no-default-tax-zone-set' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <vdr-form-field [label]=\"'settings.default-shipping-zone' | translate\" for=\"defaultShippingZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultShippingZoneId\"\r\n            formControlName=\"defaultShippingZoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option selected value style=\"display: none\"></option>\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <clr-alert\r\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultShippingZoneId\"\r\n        clrAlertType=\"warning\"\r\n        [clrAlertClosable]=\"false\"\r\n    >\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'error.no-default-shipping-zone-set' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Channel\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"channel-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\r\nimport {\r\n    Channel,\r\n    CreateChannelInput,\r\n    CurrencyCode,\r\n    GetZones,\r\n    LanguageCode,\r\n    UpdateChannelInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap, take } from 'rxjs/operators';\r\n@Component({\r\n    selector: 'vdr-channel-detail',\r\n    templateUrl: './channel-detail.component.html',\r\n    styleUrls: ['./channel-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChannelDetailComponent\r\n    extends BaseDetailComponent<Channel.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    detailForm: FormGroup;\r\n    currencyCodes = Object.values(CurrencyCode);\r\n    availableLanguageCodes$: Observable<LanguageCode[]>;\r\n    readonly updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        protected serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Channel');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            token: ['', Validators.required],\r\n            pricesIncludeTax: [false],\r\n            currencyCode: [''],\r\n            defaultShippingZoneId: ['', Validators.required],\r\n            defaultLanguageCode: [],\r\n            defaultTaxZoneId: ['', Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\r\n        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return this.detailForm.dirty && this.detailForm.valid;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input: CreateChannelInput = {\r\n            code: formValue.code,\r\n            token: formValue.token,\r\n            defaultLanguageCode: formValue.defaultLanguageCode,\r\n            pricesIncludeTax: formValue.pricesIncludeTax,\r\n            currencyCode: formValue.currencyCode,\r\n            defaultShippingZoneId: formValue.defaultShippingZoneId,\r\n            defaultTaxZoneId: formValue.defaultTaxZoneId,\r\n            customFields: formValue.customFields,\r\n        };\r\n        this.dataService.settings\r\n            .createChannel(input)\r\n            .pipe(\r\n                mergeMap(({ createChannel }) =>\r\n                    this.dataService.auth.currentUser().single$.pipe(\r\n                        map(({ me }) => ({\r\n                            me,\r\n                            createChannel,\r\n                        })),\r\n                    ),\r\n                ),\r\n                mergeMap(({ me, createChannel }) =>\r\n                    // tslint:disable-next-line:no-non-null-assertion\r\n                    this.dataService.client.updateUserChannels(me!.channels).pipe(map(() => createChannel)),\r\n                ),\r\n            )\r\n            .subscribe(data => {\r\n                switch (data.__typename) {\r\n                    case 'Channel':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Channel',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', data.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'LanguageNotAvailableError':\r\n                        this.notificationService.error(data.message);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(channel => {\r\n                    const input = {\r\n                        id: channel.id,\r\n                        code: formValue.code,\r\n                        token: formValue.token,\r\n                        pricesIncludeTax: formValue.pricesIncludeTax,\r\n                        currencyCode: formValue.currencyCode,\r\n                        defaultShippingZoneId: formValue.defaultShippingZoneId,\r\n                        defaultLanguageCode: formValue.defaultLanguageCode,\r\n                        defaultTaxZoneId: formValue.defaultTaxZoneId,\r\n                        customFields: formValue.customFields,\r\n                    } as UpdateChannelInput;\r\n                    return this.dataService.settings.updateChannel(input);\r\n                }),\r\n            )\r\n            .subscribe(({ updateChannel }) => {\r\n                switch (updateChannel.__typename) {\r\n                    case 'Channel':\r\n                        this.notificationService.success(_('common.notify-update-success'), {\r\n                            entity: 'Channel',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        break;\r\n                    case 'LanguageNotAvailableError':\r\n                        this.notificationService.error(updateChannel.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: Channel.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            code: entity.code,\r\n            token: entity.token || this.generateToken(),\r\n            pricesIncludeTax: entity.pricesIncludeTax,\r\n            currencyCode: entity.currencyCode,\r\n            defaultShippingZoneId: entity.defaultShippingZone ? entity.defaultShippingZone.id : '',\r\n            defaultLanguageCode: entity.defaultLanguageCode,\r\n            defaultTaxZoneId: entity.defaultTaxZone ? entity.defaultTaxZone.id : '',\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\r\n        }\r\n        if (entity.code === DEFAULT_CHANNEL_CODE) {\r\n            const codeControl = this.detailForm.get('code');\r\n            if (codeControl) {\r\n                codeControl.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    private generateToken(): string {\r\n        const randomString = () => Math.random().toString(36).substr(3, 10);\r\n        return `${randomString()}${randomString()}`;\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"channel-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['SuperAdmin', 'CreateChannel']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-channel' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table [items]=\"channels$ | async\">\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-channel=\"item\">\r\n        <td class=\"left align-middle\">\r\n            <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n            {{ channel.code | channelCodeToLabel | translate }}\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', channel.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultChannel(channel.code)\">\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteChannel(channel.id)\"\r\n                        [disabled]=\"!(['SuperAdmin', 'DeleteChannel'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { mergeMap, startWith, switchMap } from 'rxjs/operators';\r\n\r\nimport { Channel } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-channel-list',\r\n    templateUrl: './channel-list.component.html',\r\n    styleUrls: ['./channel-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChannelListComponent {\r\n    channels$: Observable<Channel.Fragment[]>;\r\n    private refresh$ = new Subject();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        this.channels$ = this.refresh$.pipe(\r\n            startWith(1),\r\n            switchMap(() => this.dataService.settings.getChannels().mapStream(data => data.channels)),\r\n        );\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    deleteChannel(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.settings.deleteChannel(id) : EMPTY)),\r\n                mergeMap(() => this.dataService.auth.currentUser().single$),\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                mergeMap(data => this.dataService.client.updateUserChannels(data.me!.channels)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Channel',\r\n                    });\r\n                    this.refresh$.next(1);\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Channel',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"country-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                formControlName=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Country\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"country-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    Country,\r\n    CreateCountryInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    findTranslation,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    UpdateCountryInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-country-detail',\r\n    templateUrl: './country-detail.component.html',\r\n    styleUrls: ['./country-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CountryDetailComponent\r\n    extends BaseDetailComponent<Country.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    country$: Observable<Country.Fragment>;\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Country');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            enabled: [true],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.country$ = this.entity$;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.country$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([country, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: CreateCountryInput = createUpdatedTranslatable({\r\n                        translatable: country,\r\n                        updatedFields: formValue,\r\n                        customFieldConfig: this.customFields,\r\n                        languageCode,\r\n                        defaultTranslation: {\r\n                            name: formValue.name,\r\n                            languageCode,\r\n                        },\r\n                    });\r\n                    return this.dataService.settings.createCountry(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Country',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Country',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.country$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([country, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: UpdateCountryInput = createUpdatedTranslatable({\r\n                        translatable: country,\r\n                        updatedFields: formValue,\r\n                        customFieldConfig: this.customFields,\r\n                        languageCode,\r\n                        defaultTranslation: {\r\n                            name: formValue.name,\r\n                            languageCode,\r\n                        },\r\n                    });\r\n                    return this.dataService.settings.updateCountry(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Country',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Country',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(country: Country, languageCode: LanguageCode): void {\r\n        const currentTranslation = findTranslation(country, languageCode);\r\n\r\n        this.detailForm.patchValue({\r\n            code: country.code,\r\n            name: currentTranslation ? currentTranslation.name : '',\r\n            enabled: country.enabled,\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                country,\r\n                currentTranslation,\r\n            );\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"searchTerm\"\r\n            [formControl]=\"searchTerm\"\r\n            [placeholder]=\"'settings.search-country-by-name' | translate\"\r\n            class=\"search-input\"\r\n        />\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"contentLanguage$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"country-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-country' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"countriesWithZones$ | async\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-country=\"item\">\r\n        <td class=\"left align-middle\">{{ country.code }}</td>\r\n        <td class=\"left align-middle\">{{ country.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <a [routerLink]=\"['/settings', 'zones', { contents: zone.id }]\" *ngFor=\"let zone of country.zones\">\r\n                <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\r\n            </a>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <clr-icon\r\n                [class.is-success]=\"country.enabled\"\r\n                [attr.shape]=\"country.enabled ? 'check' : 'times'\"\r\n            ></clr-icon>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', country.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteCountry(country.id)\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteCountry'] | hasPermission)\"\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetCountryList,\r\n    GetZones,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    Zone,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\r\nimport { map, startWith, switchMap, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-country-list',\r\n    templateUrl: './country-list.component.html',\r\n    styleUrls: ['./country-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CountryListComponent implements OnInit, OnDestroy {\r\n    searchTerm = new FormControl('');\r\n    countriesWithZones$: Observable<Array<GetCountryList.Items & { zones: GetZones.Zones[] }>>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n\r\n    private countries: GetCountryList.Items[] = [];\r\n    private destroy$ = new Subject<void>();\r\n    private refresh$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private serverConfigService: ServerConfigService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage);\r\n\r\n        const countries$ = combineLatest(\r\n            this.contentLanguage$,\r\n            this.searchTerm.valueChanges.pipe(startWith(null)),\r\n        ).pipe(\r\n            map(([__, term]) => term),\r\n            switchMap(term => this.dataService.settings.getCountries(999, 0, term).single$),\r\n            tap(data => {\r\n                this.countries = data.countries.items;\r\n            }),\r\n            map(data => data.countries.items),\r\n        );\r\n\r\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\r\n\r\n        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(\r\n            map(([countries, zones]) => {\r\n                return countries.map(country => ({\r\n                    ...country,\r\n                    zones: zones.filter(z => !!z.members.find(c => c.id === country.id)),\r\n                }));\r\n            }),\r\n        );\r\n\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next(undefined);\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    deleteCountry(countryId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-country'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.settings.deleteCountry(countryId) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                response => {\r\n                    if (response.deleteCountry.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'Country',\r\n                        });\r\n                        this.dataService.settings.getCountries(999, 0).single$.subscribe();\r\n                    } else {\r\n                        this.notificationService.error(response.deleteCountry.message || '');\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Country',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private isZone(input: Zone.Fragment | { name: string } | string): input is Zone.Fragment {\r\n        return input.hasOwnProperty('id');\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"global-settings-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            *vdrIfPermissions=\"updatePermission\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.available-languages' | translate\" for=\"availableLanguages\">\r\n        <ng-select\r\n            [items]=\"languageCodes\"\r\n            [addTag]=\"false\"\r\n            [hideSelected]=\"true\"\r\n            multiple=\"true\"\r\n            appendTo=\"body\"\r\n            formControlName=\"availableLanguages\"\r\n        >\r\n            <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                <span class=\"ng-value-icon left\" (click)=\"clear.call(null, item)\" aria-hidden=\"true\">\r\n                    ×\r\n                </span>\r\n                <span class=\"ng-value-label\">{{ item | localeLanguageName }} ({{ item }})</span>\r\n            </ng-template>\r\n            <ng-template ng-option-tmp let-item=\"item\">\r\n                {{ item | localeLanguageName }} ({{ item }})\r\n            </ng-template>\r\n        </ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'settings.global-out-of-stock-threshold' | translate\"\r\n        for=\"outOfStockThreshold\"\r\n        [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\r\n    >\r\n        <input\r\n            id=\"outOfStockThreshold\"\r\n            type=\"number\"\r\n            formControlName=\"outOfStockThreshold\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'settings.track-inventory-default' | translate\"\r\n        for=\"enabled\"\r\n        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\r\n    >\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                name=\"enabled\"\r\n                formControlName=\"trackInventory\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"GlobalSettings\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"global-settings-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GlobalSettings,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { switchMap, tap, withLatestFrom } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-global-settings',\r\n    templateUrl: './global-settings.component.html',\r\n    styleUrls: ['./global-settings.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class GlobalSettingsComponent extends BaseDetailComponent<GlobalSettings> implements OnInit {\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    languageCodes = Object.values(LanguageCode);\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('GlobalSettings');\r\n        this.detailForm = this.formBuilder.group({\r\n            availableLanguages: [''],\r\n            trackInventory: false,\r\n            outOfStockThreshold: [0, Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\r\n            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {\r\n                const languagesSelect = this.detailForm.get('availableLanguages');\r\n                if (languagesSelect) {\r\n                    languagesSelect.disable();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n\r\n        this.dataService.settings\r\n            .updateGlobalSettings(this.detailForm.value)\r\n            .pipe(\r\n                tap(({ updateGlobalSettings }) => {\r\n                    switch (updateGlobalSettings.__typename) {\r\n                        case 'GlobalSettings':\r\n                            this.detailForm.markAsPristine();\r\n                            this.changeDetector.markForCheck();\r\n                            this.notificationService.success(_('common.notify-update-success'), {\r\n                                entity: 'Settings',\r\n                            });\r\n                            break;\r\n                        case 'ChannelDefaultLanguageError':\r\n                            this.notificationService.error(updateGlobalSettings.message);\r\n                    }\r\n                }),\r\n                switchMap(() => this.serverConfigService.refreshGlobalSettings()),\r\n                withLatestFrom(this.dataService.client.uiState().single$),\r\n            )\r\n            .subscribe(([{ globalSettings }, { uiState }]) => {\r\n                const availableLangs = globalSettings.availableLanguages;\r\n                if (availableLangs.length && !availableLangs.includes(uiState.contentLanguage)) {\r\n                    this.dataService.client.setContentLanguage(availableLangs[0]).subscribe();\r\n                }\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: GlobalSettings, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            availableLanguages: entity.availableLanguages,\r\n            trackInventory: entity.trackInventory,\r\n            outOfStockThreshold: entity.outOfStockThreshold,\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"payment-method-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            [disabled]=\"detailForm.pristine || detailForm.invalid\"\r\n            (click)=\"create()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as paymentMethod\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            (input)=\"updateCode(paymentMethod.code, $event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-rich-text-editor\r\n        formControlName=\"description\"\r\n        [readonly]=\"!(updatePermission | hasPermission)\"\r\n        [label]=\"'common.description' | translate\"\r\n    ></vdr-rich-text-editor>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"description\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"enabled\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"PaymentMethod\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"payment-method-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n\r\n    <div class=\"clr-row mt4\">\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.payment-eligibility-checker' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                [operation]=\"selectedChecker\"\r\n                [operationDefinition]=\"selectedCheckerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"removeChecker()\"\r\n                formControlName=\"checker\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let checker of checkers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectChecker(checker)\"\r\n                        >\r\n                            {{ checker.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.payment-handler' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedHandler && selectedHandlerDefinition\"\r\n                [operation]=\"selectedHandler\"\r\n                [operationDefinition]=\"selectedHandlerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"removeHandler()\"\r\n                formControlName=\"handler\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedHandler || !selectedHandlerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let handler of handlers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectHandler(handler)\"\r\n                        >\r\n                            {{ handler.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    ConfigArgDefinition,\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    CreatePaymentMethodInput,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    getConfigArgValue,\r\n    NotificationService,\r\n    PaymentMethod,\r\n    Permission,\r\n    ServerConfigService,\r\n    toConfigurableOperationInput,\r\n    UpdatePaymentMethodInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-method-detail',\r\n    templateUrl: './payment-method-detail.component.html',\r\n    styleUrls: ['./payment-method-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodDetailComponent\r\n    extends BaseDetailComponent<PaymentMethod.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    checkers: ConfigurableOperationDefinition[] = [];\r\n    handlers: ConfigurableOperationDefinition[] = [];\r\n    selectedChecker?: ConfigurableOperation | null;\r\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\r\n    selectedHandler?: ConfigurableOperation | null;\r\n    selectedHandlerDefinition?: ConfigurableOperationDefinition;\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('PaymentMethod');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            description: '',\r\n            enabled: [true, Validators.required],\r\n            checker: {},\r\n            handler: {},\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        combineLatest([\r\n            this.dataService.settings.getPaymentMethodOperations().single$,\r\n            this.entity$.pipe(take(1)),\r\n        ]).subscribe(([data, entity]) => {\r\n            this.checkers = data.paymentMethodEligibilityCheckers;\r\n            this.handlers = data.paymentMethodHandlers;\r\n            this.changeDetector.markForCheck();\r\n            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(\r\n                c => c.code === (entity.checker && entity.checker.code),\r\n            );\r\n            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(\r\n                c => c.code === (entity.handler && entity.handler.code),\r\n            );\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    configArgsIsPopulated(): boolean {\r\n        const configArgsGroup = this.detailForm.get('configArgs') as FormGroup | undefined;\r\n        if (!configArgsGroup) {\r\n            return false;\r\n        }\r\n        return 0 < Object.keys(configArgsGroup.controls).length;\r\n    }\r\n\r\n    selectChecker(checker: ConfigurableOperationDefinition) {\r\n        this.selectedCheckerDefinition = checker;\r\n        this.selectedChecker = configurableDefinitionToInstance(checker);\r\n        const formControl = this.detailForm.get('checker');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedChecker);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    selectHandler(handler: ConfigurableOperationDefinition) {\r\n        this.selectedHandlerDefinition = handler;\r\n        this.selectedHandler = configurableDefinitionToInstance(handler);\r\n        const formControl = this.detailForm.get('handler');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedHandler);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeChecker() {\r\n        this.selectedChecker = null;\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeHandler() {\r\n        this.selectedHandler = null;\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    create() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedHandler = this.selectedHandler;\r\n        if (!selectedHandler) {\r\n            return;\r\n        }\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: CreatePaymentMethodInput = {\r\n                        name: formValue.name,\r\n                        code: formValue.code,\r\n                        description: formValue.description,\r\n                        enabled: formValue.enabled,\r\n                        checker: selectedChecker\r\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\r\n                            : null,\r\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.settings.createPaymentMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedHandler = this.selectedHandler;\r\n        if (!selectedHandler) {\r\n            return;\r\n        }\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: UpdatePaymentMethodInput = {\r\n                        id,\r\n                        name: formValue.name,\r\n                        code: formValue.code,\r\n                        description: formValue.description,\r\n                        enabled: formValue.enabled,\r\n                        checker: selectedChecker\r\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\r\n                            : null,\r\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.settings.updatePaymentMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(paymentMethod: PaymentMethod.Fragment): void {\r\n        this.detailForm.patchValue({\r\n            name: paymentMethod.name,\r\n            code: paymentMethod.code,\r\n            description: paymentMethod.description,\r\n            enabled: paymentMethod.enabled,\r\n            checker: paymentMethod.checker || {},\r\n            handler: paymentMethod.handler || {},\r\n        });\r\n        if (!this.selectedChecker) {\r\n            this.selectedChecker = paymentMethod.checker && {\r\n                code: paymentMethod.checker.code,\r\n                args: paymentMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (!this.selectedHandler) {\r\n            this.selectedHandler = paymentMethod.handler && {\r\n                code: paymentMethod.handler.code,\r\n                args: paymentMethod.handler.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get('customFields'),\r\n                paymentMethod,\r\n            );\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"payment-method-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreatePaymentMethod']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-payment-method' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-paymentMethod=\"item\">\r\n        <td class=\"left align-middle\">{{ paymentMethod.code }}</td>\r\n        <td class=\"left align-middle\">{{ paymentMethod.enabled }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', paymentMethod.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deletePaymentMethod(paymentMethod.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeletePaymentMethod'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetPaymentMethodList,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-method-list',\r\n    templateUrl: './payment-method-list.component.html',\r\n    styleUrls: ['./payment-method-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodListComponent extends BaseListComponent<\r\n    GetPaymentMethodList.Query,\r\n    GetPaymentMethodList.Items\r\n> {\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getPaymentMethods(...args).refetchOnChannelChange(),\r\n            data => data.paymentMethods,\r\n        );\r\n    }\r\n\r\n    deletePaymentMethod(paymentMethodId: string) {\r\n        this.showModalAndDelete(paymentMethodId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(paymentMethodId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                // Refresh the cached facets to reflect the changes\r\n                switchMap(() => this.dataService.settings.getPaymentMethods(100).single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(paymentMethodId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-payment-method'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res =>\r\n                    res ? this.dataService.settings.deletePaymentMethod(paymentMethodId, !!message) : EMPTY,\r\n                ),\r\n                map(res => res.deletePaymentMethod),\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\r\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.password' | translate\" for=\"password\" [readOnlyToggle]=\"true\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Administrator\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Administrator,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GetActiveAdministrator,\r\n    LanguageCode,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    UpdateActiveAdministratorInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-profile',\r\n    templateUrl: './profile.component.html',\r\n    styleUrls: ['./profile.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProfileComponent\r\n    extends BaseDetailComponent<GetActiveAdministrator.ActiveAdministrator>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Administrator');\r\n        this.detailForm = this.formBuilder.group({\r\n            emailAddress: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            password: [''],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    save() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const administrator: UpdateActiveAdministratorInput = {\r\n                        emailAddress: formValue.emailAddress,\r\n                        firstName: formValue.firstName,\r\n                        lastName: formValue.lastName,\r\n                        password: formValue.password,\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.administrator.updateActiveAdministrator(administrator);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            emailAddress: administrator.emailAddress,\r\n            firstName: administrator.firstName,\r\n            lastName: administrator.lastName,\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get('customFields'),\r\n                administrator,\r\n            );\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"role-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\">\r\n        <input\r\n            id=\"description\"\r\n            type=\"text\"\r\n            formControlName=\"description\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n            (input)=\"updateCode($event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"'UpdateAdministrator' | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.channel' | translate\">\r\n        <vdr-channel-assignment-control\r\n            formControlName=\"channelIds\"\r\n            [vdrDisabled]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        ></vdr-channel-assignment-control>\r\n    </vdr-form-field>\r\n    <label>{{ 'settings.permissions' | translate }}</label>\r\n    <vdr-permission-grid\r\n        [permissionDefinitions]=\"permissionDefinitions\"\r\n        [activePermissions]=\"detailForm.get('permissions')?.value\"\r\n        (permissionChange)=\"setPermission($event)\"\r\n        [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n    ></vdr-permission-grid>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateRoleInput,\n    DataService,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    PermissionDefinition,\n    Role,\n    ServerConfigService,\n    UpdateRoleInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-detail',\n    templateUrl: './role-detail.component.html',\n    styleUrls: ['./role-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleDetailComponent extends BaseDetailComponent<Role> implements OnInit, OnDestroy {\n    role$: Observable<Role>;\n    detailForm: FormGroup;\n    permissionDefinitions: PermissionDefinition[];\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            description: ['', Validators.required],\n            channelIds: [],\n            permissions: [],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.role$ = this.entity$;\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(nameValue: string) {\n        const codeControl = this.detailForm.get(['code']);\n        if (codeControl && codeControl.pristine) {\n            codeControl.setValue(normalizeString(nameValue, '-'));\n        }\n    }\n\n    setPermission(change: { permission: string; value: boolean }) {\n        const permissionsControl = this.detailForm.get('permissions');\n        if (permissionsControl) {\n            const currentPermissions = permissionsControl.value as string[];\n            const newValue =\n                change.value === true\n                    ? unique([...currentPermissions, change.permission])\n                    : currentPermissions.filter(p => p !== change.permission);\n            permissionsControl.setValue(newValue);\n            permissionsControl.markAsDirty();\n        }\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const role: CreateRoleInput = formValue;\n        this.dataService.administrator.createRole(role).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), { entity: 'Role' });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Role',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.role$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const role: UpdateRoleInput = { id, ...formValue };\n                    return this.dataService.administrator.updateRole(role);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Role' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(role: Role, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            description: role.description,\n            code: role.code,\n            channelIds: role.channels.map(c => c.id),\n            permissions: role.permissions,\n        });\n        // This was required to get the channel selector component to\n        // correctly display its contents. A while spent debugging the root\n        // cause did not yield a solution, therefore this next line.\n        this.changeDetector.detectChanges();\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"role-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-role' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"visibleRoles$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.description' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.channel' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.permissions' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-role=\"item\">\r\n        <td class=\"left align-middle\">{{ role.description }}</td>\r\n        <td class=\"left align-middle\"><span *ngIf=\"!isDefaultRole(role)\">{{ role.code }}</span></td>\r\n        <td class=\"left align-middle\">\r\n            <ng-container *ngIf=\"!isDefaultRole(role)\">\r\n                <vdr-chip *ngFor=\"let channel of role.channels\">\r\n                    <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                    {{ channel.code | channelCodeToLabel | translate }}\r\n                </vdr-chip>\r\n            </ng-container>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <ng-container *ngIf=\"!isDefaultRole(role); else defaultRole\">\r\n                <vdr-chip *ngFor=\"let permission of role.permissions |  slice: 0:displayLimit[role.id] || 3\">{{ permission }}</vdr-chip>\r\n                <button\r\n                    class=\"btn btn-sm btn-secondary btn-icon\"\r\n                    *ngIf=\"role.permissions.length > initialLimit\"\r\n                    (click)=\"toggleDisplayLimit(role)\"\r\n                >\r\n                    <ng-container *ngIf=\"(displayLimit[role.id] || 0) < role.permissions.length; else collapse\">\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ role.permissions.length - initialLimit }}\r\n                    </ng-container>\r\n                    <ng-template #collapse>\r\n                        <clr-icon shape=\"minus\"></clr-icon>\r\n                    </ng-template>\r\n                </button>\r\n            </ng-container>\r\n            <ng-template #defaultRole>\r\n                <span class=\"default-role-label\">{{ 'settings.default-role-label' | translate }}</span>\r\n            </ng-template>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                *ngIf=\"!isDefaultRole(role)\"\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', role.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultRole(role)\">\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteRole(role.id)\"\r\n                        [disabled]=\"!('SuperAdmin' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseListComponent } from '@vendure/admin-ui/core';\r\nimport { GetRoles, Role } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\nimport { CUSTOMER_ROLE_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-role-list',\r\n    templateUrl: './role-list.component.html',\r\n    styleUrls: ['./role-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RoleListComponent extends BaseListComponent<GetRoles.Query, GetRoles.Items> implements OnInit {\r\n    readonly initialLimit = 3;\r\n    displayLimit: { [id: string]: number } = {};\r\n    visibleRoles$: Observable<GetRoles.Items[]>;\r\n\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.administrator.getRoles(...args),\r\n            data => data.roles,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.visibleRoles$ = this.items$.pipe(\r\n            map(roles => roles.filter(role => role.code !== CUSTOMER_ROLE_CODE)),\r\n        );\r\n    }\r\n\r\n    toggleDisplayLimit(role: GetRoles.Items) {\r\n        if (this.displayLimit[role.id] === role.permissions.length) {\r\n            this.displayLimit[role.id] = this.initialLimit;\r\n        } else {\r\n            this.displayLimit[role.id] = role.permissions.length;\r\n        }\r\n    }\r\n\r\n    isDefaultRole(role: Role): boolean {\r\n        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;\r\n    }\r\n\r\n    deleteRole(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-role'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(response => (response ? this.dataService.administrator.deleteRole(id) : EMPTY)))\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Role',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Role',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<div class=\"test-result card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-result' | translate }}\r\n    </div>\r\n    <div class=\"card-block\" *ngFor=\"let quote of testResult\">\r\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\r\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\r\n                {{ quote.name }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                    {{ quote.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\r\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\" *ngIf=\"testResult?.length === 0\">\r\n        <clr-icon shape=\"ban\" class=\"is-solid error\"></clr-icon>\r\n        {{ 'settings.no-eligible-shipping-methods' | translate }}\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\r\n            {{ 'settings.test-shipping-methods' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CurrencyCode, ShippingMethodQuote } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-eligibility-test-result',\r\n    templateUrl: './shipping-eligibility-test-result.component.html',\r\n    styleUrls: ['./shipping-eligibility-test-result.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingEligibilityTestResultComponent {\r\n    @Input() testResult: ShippingMethodQuote[];\r\n    @Input() okToRun = false;\r\n    @Input() testDataUpdated = false;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() runTest = new EventEmitter<void>();\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-order' | translate }}\r\n    </div>\r\n    <table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th>{{ 'order.product-name' | translate }}</th>\r\n                <th>{{ 'order.product-sku' | translate }}</th>\r\n                <th>{{ 'order.unit-price' | translate }}</th>\r\n                <th>{{ 'order.quantity' | translate }}</th>\r\n                <th>{{ 'order.total' | translate }}</th>\r\n            </tr>\r\n        </thead>\r\n        <tr *ngFor=\"let line of lines\" class=\"order-line\">\r\n            <td class=\"align-middle thumb\">\r\n                <img [src]=\"line.preview + '?preset=tiny'\" />\r\n            </td>\r\n            <td class=\"align-middle name\">{{ line.name }}</td>\r\n            <td class=\"align-middle sku\">{{ line.sku }}</td>\r\n            <td class=\"align-middle unit-price\">\r\n                {{ line.unitPriceWithTax | localeCurrency: currencyCode }}\r\n            </td>\r\n            <td class=\"align-middle quantity\">\r\n                <input\r\n                    [(ngModel)]=\"line.quantity\"\r\n                    (change)=\"updateQuantity()\"\r\n                    type=\"number\"\r\n                    max=\"9999\"\r\n                    min=\"1\"\r\n                />\r\n                <button class=\"icon-button\" (click)=\"removeLine(line)\">\r\n                    <clr-icon shape=\"trash\"></clr-icon>\r\n                </button>\r\n            </td>\r\n            <td class=\"align-middle total\">\r\n                {{ (line.unitPriceWithTax * line.quantity) | localeCurrency: currencyCode }}\r\n            </td>\r\n        </tr>\r\n        <tr class=\"sub-total\">\r\n            <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>{{ subTotal | localeCurrency: currencyCode }}</td>\r\n        </tr>\r\n    </table>\r\n\r\n    <ng-template #emptyPlaceholder>\r\n        <div class=\"card-block empty-placeholder\">\r\n            <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\r\n            <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\r\n        </div>\r\n    </ng-template>\r\n    <div class=\"card-block\">\r\n        <vdr-product-selector (productSelected)=\"selectResult($event)\"> </vdr-product-selector>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    LocalStorageService,\r\n    ProductSelectorSearch,\r\n} from '@vendure/admin-ui/core';\r\n\r\nexport interface TestOrderLine {\r\n    id: string;\r\n    name: string;\r\n    preview: string;\r\n    sku: string;\r\n    unitPriceWithTax: number;\r\n    quantity: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-test-order-builder',\r\n    templateUrl: './test-order-builder.component.html',\r\n    styleUrls: ['./test-order-builder.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TestOrderBuilderComponent implements OnInit {\r\n    @Output() orderLinesChange = new EventEmitter<TestOrderLine[]>();\r\n    lines: TestOrderLine[] = [];\r\n    currencyCode: CurrencyCode;\r\n    get subTotal(): number {\r\n        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);\r\n    }\r\n\r\n    constructor(private dataService: DataService, private localStorageService: LocalStorageService) {}\r\n\r\n    ngOnInit() {\r\n        this.lines = this.loadFromLocalStorage();\r\n        if (this.lines) {\r\n            this.orderLinesChange.emit(this.lines);\r\n        }\r\n        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {\r\n            this.currencyCode = result.activeChannel.currencyCode;\r\n        });\r\n    }\r\n\r\n    selectResult(result: ProductSelectorSearch.Items) {\r\n        if (result) {\r\n            this.addToLines(result);\r\n        }\r\n    }\r\n\r\n    private addToLines(result: ProductSelectorSearch.Items) {\r\n        if (!this.lines.find(l => l.id === result.productVariantId)) {\r\n            this.lines.push({\r\n                id: result.productVariantId,\r\n                name: result.productVariantName,\r\n                preview: result.productAsset?.preview ?? '',\r\n                quantity: 1,\r\n                sku: result.sku,\r\n                unitPriceWithTax:\r\n                    (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,\r\n            });\r\n            this.persistToLocalStorage();\r\n            this.orderLinesChange.emit(this.lines);\r\n        }\r\n    }\r\n\r\n    updateQuantity() {\r\n        this.persistToLocalStorage();\r\n        this.orderLinesChange.emit(this.lines);\r\n    }\r\n\r\n    removeLine(line: TestOrderLine) {\r\n        this.lines = this.lines.filter(l => l.id !== line.id);\r\n        this.persistToLocalStorage();\r\n        this.orderLinesChange.emit(this.lines);\r\n    }\r\n\r\n    private persistToLocalStorage() {\r\n        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);\r\n    }\r\n\r\n    private loadFromLocalStorage(): TestOrderLine[] {\r\n        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-address' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <form [formGroup]=\"form\">\r\n            <clr-input-container>\r\n                <label>{{ 'customer.city' | translate }}</label>\r\n                <input formControlName=\"city\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.province' | translate }}</label>\r\n                <input formControlName=\"province\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.postal-code' | translate }}</label>\r\n                <input formControlName=\"postalCode\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.country' | translate }}</label>\r\n                <select name=\"countryCode\" formControlName=\"countryCode\" clrInput clrSelect>\r\n                    <option *ngFor=\"let country of availableCountries$ | async\" [value]=\"country.code\">\r\n                        {{ country.name }}\r\n                    </option>\r\n                </select>\r\n            </clr-input-container>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { DataService, GetAvailableCountries, LocalStorageService } from '@vendure/admin-ui/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\nexport interface TestAddress {\r\n    city: string;\r\n    province: string;\r\n    postalCode: string;\r\n    countryCode: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-test-address-form',\r\n    templateUrl: './test-address-form.component.html',\r\n    styleUrls: ['./test-address-form.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TestAddressFormComponent implements OnInit, OnDestroy {\r\n    @Output() addressChange = new EventEmitter<TestAddress>();\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    form: FormGroup;\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private dataService: DataService,\r\n        private localStorageService: LocalStorageService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items);\r\n        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');\r\n        const initialValue: TestAddress = storedValue\r\n            ? storedValue\r\n            : {\r\n                  city: '',\r\n                  countryCode: '',\r\n                  postalCode: '',\r\n                  province: '',\r\n              };\r\n        this.addressChange.emit(initialValue);\r\n\r\n        this.form = this.formBuilder.group(initialValue);\r\n        this.subscription = this.form.valueChanges.subscribe(value => {\r\n            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);\r\n            this.addressChange.emit(value);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","<div\r\n    class=\"test-result card\"\r\n    [ngClass]=\"{\r\n        success: testResult?.eligible === true,\r\n        error: testResult?.eligible === false,\r\n        unknown: !testResult\r\n    }\"\r\n>\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-result' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\r\n            <vdr-labeled-data [label]=\"'settings.eligible' | translate\">\r\n                <div class=\"eligible-icon\">\r\n                    <clr-icon\r\n                        shape=\"success-standard\"\r\n                        class=\"is-solid success\"\r\n                        *ngIf=\"testResult?.eligible\"\r\n                    ></clr-icon>\r\n                    <clr-icon\r\n                        shape=\"ban\"\r\n                        class=\"is-solid error\"\r\n                        *ngIf=\"testResult?.eligible === false\"\r\n                    ></clr-icon>\r\n                    <clr-icon shape=\"unknown-status\" *ngIf=\"!testResult\"></clr-icon>\r\n                </div>\r\n                {{ testResult?.eligible }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data\r\n                    [label]=\"'common.price' | translate\"\r\n                    *ngIf=\"testResult?.quote?.price != null\"\r\n                >\r\n                    {{ testResult.quote?.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data\r\n                    [label]=\"'common.price-with-tax' | translate\"\r\n                    *ngIf=\"testResult?.quote?.priceWithTax != null\"\r\n                >\r\n                    {{ testResult.quote?.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree\r\n                *ngIf=\"testResult?.quote?.metadata\"\r\n                [value]=\"testResult?.quote?.metadata\"\r\n            ></vdr-object-tree>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\r\n            {{ 'settings.test-shipping-method' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CurrencyCode, TestShippingMethodResult } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-test-result',\r\n    templateUrl: './shipping-method-test-result.component.html',\r\n    styleUrls: ['./shipping-method-test-result.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodTestResultComponent {\r\n    @Input() testResult: TestShippingMethodResult;\r\n    @Input() okToRun = false;\r\n    @Input() testDataUpdated = false;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() runTest = new EventEmitter<void>();\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"shipping-method-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                [disabled]=\"\r\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as shippingMethod\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            (input)=\"updateCode(shippingMethod.code, $event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-rich-text-editor\r\n        formControlName=\"description\"\r\n        [readonly]=\"!(updatePermission | hasPermission)\"\r\n        [label]=\"'common.description' | translate\"\r\n    ></vdr-rich-text-editor>\r\n    <vdr-form-field [label]=\"'settings.fulfillment-handler' | translate\" for=\"fulfillmentHandler\" class=\"mb2\">\r\n        <select\r\n            name=\"fulfillmentHandler\"\r\n            formControlName=\"fulfillmentHandler\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\r\n                {{ handler.code }}: {{ handler.description }}\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"ShippingMethod\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"shipping-method-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n\r\n    <div class=\"clr-row mt4\">\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.shipping-eligibility-checker' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                [operation]=\"selectedChecker\"\r\n                [operationDefinition]=\"selectedCheckerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"selectedChecker = null\"\r\n                formControlName=\"checker\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let checker of checkers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectChecker(checker)\"\r\n                        >\r\n                            {{ checker.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.shipping-calculator' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\r\n                [operation]=\"selectedCalculator\"\r\n                [operationDefinition]=\"selectedCalculatorDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"selectedCalculator = null\"\r\n                formControlName=\"calculator\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let calculator of calculators\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectCalculator(calculator)\"\r\n                        >\r\n                            {{ calculator.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div class=\"testing-tool\">\r\n    <clr-accordion>\r\n        <clr-accordion-panel>\r\n            <clr-accordion-title>{{ 'settings.test-shipping-method' | translate }}</clr-accordion-title>\r\n            <clr-accordion-content *clrIfExpanded>\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-order-builder\r\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                        ></vdr-test-order-builder>\r\n                    </div>\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-address-form\r\n                            (addressChange)=\"setTestAddress($event)\"\r\n                        ></vdr-test-address-form>\r\n                        <vdr-shipping-method-test-result\r\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                            [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\r\n                            [testDataUpdated]=\"testDataUpdated\"\r\n                            [testResult]=\"testResult$ | async\"\r\n                            (runTest)=\"runTest()\"\r\n                        ></vdr-shipping-method-test-result>\r\n                    </div>\r\n                </div>\r\n            </clr-accordion-content>\r\n        </clr-accordion-panel>\r\n    </clr-accordion>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    CreateShippingMethodInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    findTranslation,\r\n    GetActiveChannel,\r\n    getConfigArgValue,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    ShippingMethod,\r\n    TestShippingMethodInput,\r\n    TestShippingMethodResult,\r\n    toConfigurableOperationInput,\r\n    UpdateShippingMethodInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\r\nimport { mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';\r\n\r\nimport { TestAddress } from '../test-address-form/test-address-form.component';\r\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-detail',\r\n    templateUrl: './shipping-method-detail.component.html',\r\n    styleUrls: ['./shipping-method-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodDetailComponent\r\n    extends BaseDetailComponent<ShippingMethod.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    detailForm: FormGroup;\r\n    checkers: ConfigurableOperationDefinition[] = [];\r\n    calculators: ConfigurableOperationDefinition[] = [];\r\n    fulfillmentHandlers: ConfigurableOperationDefinition[] = [];\r\n    selectedChecker?: ConfigurableOperation | null;\r\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\r\n    selectedCalculator?: ConfigurableOperation | null;\r\n    selectedCalculatorDefinition?: ConfigurableOperationDefinition;\r\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\r\n    testAddress: TestAddress;\r\n    testOrderLines: TestOrderLine[];\r\n    testDataUpdated = false;\r\n    testResult$: Observable<TestShippingMethodResult | undefined>;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];\r\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('ShippingMethod');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            description: '',\r\n            fulfillmentHandler: ['', Validators.required],\r\n            checker: {},\r\n            calculator: {},\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        combineLatest([\r\n            this.dataService.shippingMethod.getShippingMethodOperations().single$,\r\n            this.entity$.pipe(take(1)),\r\n        ]).subscribe(([data, entity]) => {\r\n            this.checkers = data.shippingEligibilityCheckers;\r\n            this.calculators = data.shippingCalculators;\r\n            this.fulfillmentHandlers = data.fulfillmentHandlers;\r\n            this.changeDetector.markForCheck();\r\n            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(\r\n                c => c.code === (entity.checker && entity.checker.code),\r\n            );\r\n            this.selectedCalculatorDefinition = data.shippingCalculators.find(\r\n                c => c.code === (entity.calculator && entity.calculator.code),\r\n            );\r\n        });\r\n\r\n        this.activeChannel$ = this.dataService.settings\r\n            .getActiveChannel()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.testResult$ = this.fetchTestResult$.pipe(\r\n            switchMap(([address, lines]) => {\r\n                if (!this.selectedChecker || !this.selectedCalculator) {\r\n                    return of(undefined);\r\n                }\r\n                const formValue = this.detailForm.value;\r\n                const input: TestShippingMethodInput = {\r\n                    shippingAddress: { ...address, streetLine1: 'test' },\r\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\r\n                    checker: toConfigurableOperationInput(this.selectedChecker, formValue.checker),\r\n                    calculator: toConfigurableOperationInput(this.selectedCalculator, formValue.calculator),\r\n                };\r\n                return this.dataService.shippingMethod\r\n                    .testShippingMethod(input)\r\n                    .mapSingle(result => result.testShippingMethod);\r\n            }),\r\n        );\r\n\r\n        // tslint:disable:no-non-null-assertion\r\n        merge(\r\n            this.detailForm.get(['checker'])!.valueChanges,\r\n            this.detailForm.get(['calculator'])!.valueChanges,\r\n        )\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(() => (this.testDataUpdated = true));\r\n        // tslint:enable:no-non-null-assertion\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    selectChecker(checker: ConfigurableOperationDefinition) {\r\n        this.selectedCheckerDefinition = checker;\r\n        this.selectedChecker = configurableDefinitionToInstance(checker);\r\n        const formControl = this.detailForm.get('checker');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedChecker);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    selectCalculator(calculator: ConfigurableOperationDefinition) {\r\n        this.selectedCalculatorDefinition = calculator;\r\n        this.selectedCalculator = configurableDefinitionToInstance(calculator);\r\n        const formControl = this.detailForm.get('calculator');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedCalculator);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    create() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedCalculator = this.selectedCalculator;\r\n        if (!selectedChecker || !selectedCalculator) {\r\n            return;\r\n        }\r\n        combineLatest([this.entity$, this.languageCode$])\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([shippingMethod, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input = {\r\n                        ...(this.getUpdatedShippingMethod(\r\n                            shippingMethod,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as CreateShippingMethodInput),\r\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\r\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\r\n                    };\r\n                    return this.dataService.shippingMethod.createShippingMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedCalculator = this.selectedCalculator;\r\n        if (!selectedChecker || !selectedCalculator) {\r\n            return;\r\n        }\r\n        combineLatest([this.entity$, this.languageCode$])\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([shippingMethod, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input = {\r\n                        ...(this.getUpdatedShippingMethod(\r\n                            shippingMethod,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as UpdateShippingMethodInput),\r\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\r\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\r\n                    };\r\n                    return this.dataService.shippingMethod.updateShippingMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setTestOrderLines(event: TestOrderLine[]) {\r\n        this.testOrderLines = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    setTestAddress(event: TestAddress) {\r\n        this.testAddress = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    allTestDataPresent(): boolean {\r\n        return !!(\r\n            this.testAddress &&\r\n            this.testOrderLines &&\r\n            this.testOrderLines.length &&\r\n            this.selectedChecker &&\r\n            this.selectedCalculator\r\n        );\r\n    }\r\n\r\n    runTest() {\r\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\r\n        this.testDataUpdated = false;\r\n    }\r\n\r\n    /**\r\n     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedShippingMethod(\r\n        shippingMethod: ShippingMethod.Fragment,\r\n        formGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): Omit<CreateShippingMethodInput | UpdateShippingMethodInput, 'checker' | 'calculator'> {\r\n        const formValue = formGroup.value;\r\n        const input = createUpdatedTranslatable({\r\n            translatable: shippingMethod,\r\n            updatedFields: formValue,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: shippingMethod.name || '',\r\n                description: shippingMethod.description || '',\r\n            },\r\n        });\r\n        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };\r\n    }\r\n\r\n    protected setFormValues(shippingMethod: ShippingMethod.Fragment, languageCode: LanguageCode): void {\r\n        const currentTranslation = findTranslation(shippingMethod, languageCode);\r\n        this.detailForm.patchValue({\r\n            name: currentTranslation?.name ?? '',\r\n            description: currentTranslation?.description ?? '',\r\n            code: shippingMethod.code,\r\n            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,\r\n            checker: shippingMethod.checker || {},\r\n            calculator: shippingMethod.calculator || {},\r\n        });\r\n        if (!this.selectedChecker) {\r\n            this.selectedChecker = shippingMethod.checker && {\r\n                code: shippingMethod.checker.code,\r\n                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (!this.selectedCalculator) {\r\n            this.selectedCalculator = shippingMethod.calculator && {\r\n                code: shippingMethod.calculator?.code,\r\n                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                shippingMethod,\r\n                currentTranslation,\r\n            );\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"contentLanguage$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"shipping-method-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            [routerLink]=\"['./create']\"\r\n            *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-shipping-method' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-shippingMethod=\"item\">\r\n        <td class=\"left align-middle\">{{ shippingMethod.code }}</td>\r\n        <td class=\"left align-middle\">{{ shippingMethod.name }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', shippingMethod.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteShippingMethod(shippingMethod.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteShippingMethod'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n\r\n<div class=\"testing-tool\">\r\n    <clr-accordion>\r\n        <clr-accordion-panel>\r\n            <clr-accordion-title>{{ 'settings.test-shipping-methods' | translate }}</clr-accordion-title>\r\n            <clr-accordion-content *clrIfExpanded>\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-order-builder\r\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                        ></vdr-test-order-builder>\r\n                    </div>\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-address-form\r\n                            (addressChange)=\"setTestAddress($event)\"\r\n                        ></vdr-test-address-form>\r\n                        <vdr-shipping-eligibility-test-result\r\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                            [okToRun]=\"allTestDataPresent()\"\r\n                            [testDataUpdated]=\"testDataUpdated\"\r\n                            [testResult]=\"testResult$ | async\"\r\n                            (runTest)=\"runTest()\"\r\n                        ></vdr-shipping-eligibility-test-result>\r\n                    </div>\r\n                </div>\r\n            </clr-accordion-content>\r\n        </clr-accordion-panel>\r\n    </clr-accordion>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetActiveChannel,\r\n    GetShippingMethodList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    ShippingMethodQuote,\r\n    TestEligibleShippingMethodsInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { TestAddress } from '../test-address-form/test-address-form.component';\r\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-list',\r\n    templateUrl: './shipping-method-list.component.html',\r\n    styleUrls: ['./shipping-method-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodListComponent\r\n    extends BaseListComponent<GetShippingMethodList.Query, GetShippingMethodList.Items>\r\n    implements OnInit {\r\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\r\n    testAddress: TestAddress;\r\n    testOrderLines: TestOrderLine[];\r\n    testDataUpdated = false;\r\n    testResult$: Observable<ShippingMethodQuote[] | undefined>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\r\n\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) =>\r\n                this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(),\r\n            data => data.shippingMethods,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.testResult$ = this.fetchTestResult$.pipe(\r\n            switchMap(([address, lines]) => {\r\n                const input: TestEligibleShippingMethodsInput = {\r\n                    shippingAddress: { ...address, streetLine1: 'test' },\r\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\r\n                };\r\n                return this.dataService.shippingMethod\r\n                    .testEligibleShippingMethods(input)\r\n                    .mapSingle(result => result.testEligibleShippingMethods);\r\n            }),\r\n        );\r\n        this.activeChannel$ = this.dataService.settings\r\n            .getActiveChannel()\r\n            .mapStream(data => data.activeChannel);\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    deleteShippingMethod(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-shipping-method'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setTestOrderLines(event: TestOrderLine[]) {\r\n        this.testOrderLines = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    setTestAddress(event: TestAddress) {\r\n        this.testAddress = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    allTestDataPresent(): boolean {\r\n        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);\r\n    }\r\n\r\n    runTest() {\r\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\r\n        this.testDataUpdated = false;\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-category-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.default-tax-category' | translate\" for=\"isDefault\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"isDefault\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"isDefault\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"TaxCategory\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"tax-category-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\r\nimport {\r\n    ConfigurableOperation,\r\n    CreateTaxCategoryInput,\r\n    LanguageCode,\r\n    TaxCategory,\r\n    UpdateTaxCategoryInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-detail',\r\n    templateUrl: './tax-category-detail.component.html',\r\n    styleUrls: ['./tax-category-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxCategoryDetailComponent\r\n    extends BaseDetailComponent<TaxCategory.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    taxCategory$: Observable<TaxCategory.Fragment>;\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];\r\n\r\n    private taxCondition: ConfigurableOperation;\r\n    private taxAction: ConfigurableOperation;\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('TaxCategory');\r\n        this.detailForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            isDefault: false,\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.taxCategory$ = this.entity$;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return this.detailForm.dirty && this.detailForm.valid;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input = {\r\n            name: formValue.name,\r\n            isDefault: formValue.isDefault,\r\n            customFields: formValue.customFields,\r\n        } as CreateTaxCategoryInput;\r\n        this.dataService.settings.createTaxCategory(input).subscribe(\r\n            data => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'TaxCategory',\r\n                });\r\n                this.detailForm.markAsPristine();\r\n                this.changeDetector.markForCheck();\r\n                this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'TaxCategory',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.taxCategory$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(taxCategory => {\r\n                    const input = {\r\n                        id: taxCategory.id,\r\n                        name: formValue.name,\r\n                        isDefault: formValue.isDefault,\r\n                        customFields: formValue.customFields,\r\n                    } as UpdateTaxCategoryInput;\r\n                    return this.dataService.settings.updateTaxCategory(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'TaxCategory',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'TaxCategory',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: TaxCategory.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            name: entity.name,\r\n            isDefault: entity.isDefault,\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-category-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxCategory']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-tax-category' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table [items]=\"taxCategories$ | async\">\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-taxCategory=\"item\">\r\n        <td class=\"left align-middle\">{{ taxCategory.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-chip *ngIf=\"taxCategory.isDefault\">{{ 'common.default-tax-category' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', taxCategory.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteTaxCategory(taxCategory)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxCategory'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { DeletionResult, GetTaxCategories, TaxCategory } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { QueryResult } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-list',\r\n    templateUrl: './tax-category-list.component.html',\r\n    styleUrls: ['./tax-category-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxCategoryListComponent {\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    private queryResult: QueryResult<GetTaxCategories.Query>;\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        this.queryResult = this.dataService.settings.getTaxCategories();\r\n        this.taxCategories$ = this.queryResult.mapStream(data => data.taxCategories);\r\n    }\r\n\r\n    deleteTaxCategory(taxCategory: TaxCategory.Fragment) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-tax-category'),\r\n                body: taxCategory.name,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.settings.deleteTaxCategory(taxCategory.id) : EMPTY)),\r\n                map(res => res.deleteTaxCategory),\r\n            )\r\n            .subscribe(\r\n                res => {\r\n                    if (res.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                        this.queryResult.ref.refetch();\r\n                    } else {\r\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-rate-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                formControlName=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.rate' | translate\" for=\"value\">\r\n        <vdr-affixed-input suffix=\"%\">\r\n            <input\r\n                id=\"value\"\r\n                type=\"number\"\r\n                step=\"0.1\"\r\n                formControlName=\"value\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </vdr-affixed-input>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.tax-category' | translate\" for=\"taxCategoryId\">\r\n        <select\r\n            clrSelect\r\n            name=\"taxCategoryId\"\r\n            formControlName=\"taxCategoryId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let taxCategory of taxCategories$ | async\" [value]=\"taxCategory.id\">\r\n                {{ taxCategory.name }}\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.zone' | translate\" for=\"zoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"zoneId\"\r\n            formControlName=\"zoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"TaxRate\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"tax-rate-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateTaxRateInput,\r\n    CustomerGroup,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GetZones,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    TaxCategory,\r\n    TaxRate,\r\n    UpdateTaxRateInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-rate-detail',\r\n    templateUrl: './tax-rate-detail.component.html',\r\n    styleUrls: ['./tax-rate-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxRateDetailComponent\r\n    extends BaseDetailComponent<TaxRate.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    groups$: Observable<CustomerGroup[]>;\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('TaxRate');\r\n        this.detailForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            enabled: [true],\r\n            value: [0, Validators.required],\r\n            taxCategoryId: [''],\r\n            zoneId: [''],\r\n            customerGroupId: [''],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.taxCategories$ = this.dataService.settings\r\n            .getTaxCategories()\r\n            .mapSingle(data => data.taxCategories);\r\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return this.detailForm.dirty && this.detailForm.valid;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input = {\r\n            name: formValue.name,\r\n            enabled: formValue.enabled,\r\n            value: formValue.value,\r\n            categoryId: formValue.taxCategoryId,\r\n            zoneId: formValue.zoneId,\r\n            customerGroupId: formValue.customerGroupId,\r\n            customFields: formValue.customFields,\r\n        } as CreateTaxRateInput;\r\n        this.dataService.settings.createTaxRate(input).subscribe(\r\n            data => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'TaxRate',\r\n                });\r\n                this.detailForm.markAsPristine();\r\n                this.changeDetector.markForCheck();\r\n                this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'TaxRate',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(taxRate => {\r\n                    const input = {\r\n                        id: taxRate.id,\r\n                        name: formValue.name,\r\n                        enabled: formValue.enabled,\r\n                        value: formValue.value,\r\n                        categoryId: formValue.taxCategoryId,\r\n                        zoneId: formValue.zoneId,\r\n                        customerGroupId: formValue.customerGroupId,\r\n                        customFields: formValue.customFields,\r\n                    } as UpdateTaxRateInput;\r\n                    return this.dataService.settings.updateTaxRate(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: TaxRate.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            name: entity.name,\r\n            enabled: entity.enabled,\r\n            value: entity.value,\r\n            taxCategoryId: entity.category ? entity.category.id : '',\r\n            zoneId: entity.zone ? entity.zone.id : '',\r\n            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-rate-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-tax-rate' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.tax-category' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.tax-rate' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-taxRate=\"item\">\r\n        <td class=\"left align-middle\">{{ taxRate.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.category.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.zone.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.value }}%</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', taxRate.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteTaxRate(taxRate)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxRate'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { BaseListComponent } from '@vendure/admin-ui/core';\r\nimport { DeletionResult, GetTaxRateList } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-rate-list',\r\n    templateUrl: './tax-rate-list.component.html',\r\n    styleUrls: ['./tax-rate-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxRateListComponent extends BaseListComponent<GetTaxRateList.Query, GetTaxRateList.Items> {\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getTaxRates(...args),\r\n            data => data.taxRates,\r\n        );\r\n    }\r\n\r\n    deleteTaxRate(taxRate: GetTaxRateList.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-tax-rate'),\r\n                body: taxRate.name,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.settings.deleteTaxRate(taxRate.id) : EMPTY)),\r\n                map(res => res.deleteTaxRate),\r\n            )\r\n            .subscribe(\r\n                res => {\r\n                    if (res.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                        this.refresh();\r\n                    } else {\r\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\r\n    <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\r\n</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-tabbed-custom-fields\r\n        entityName=\"Zone\"\r\n        [customFields]=\"customFields\"\r\n        [customFieldsFormGroup]=\"form.get('customFields')\"\r\n        [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n    ></vdr-tabbed-custom-fields>\r\n</form>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\r\n        <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CreateZoneInput, CustomFieldConfig, Dialog, ServerConfigService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-zone-detail-dialog',\r\n    templateUrl: './zone-detail-dialog.component.html',\r\n    styleUrls: ['./zone-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneDetailDialogComponent implements Dialog<CreateZoneInput>, OnInit {\r\n    zone: { id?: string; name: string; customFields?: { [name: string]: any } };\r\n    resolveWith: (result?: CreateZoneInput) => void;\r\n\r\n    customFields: CustomFieldConfig[];\r\n    form: FormGroup;\r\n\r\n    constructor(private serverConfigService: ServerConfigService, private formBuilder: FormBuilder) {\r\n        this.customFields = this.serverConfigService.getCustomFieldsFor('CustomerGroup');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            name: [this.zone.name, Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.form.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = this.zone.customFields?.[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.form.value);\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"zone-list\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *vdrIfPermissions=\"['CreateSettings', 'CreateZone']\"\r\n            (click)=\"create()\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-zone' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"zone-wrapper\">\r\n    <div class=\"zone-list\">\r\n        <table class=\"table mt0\">\r\n            <tbody>\r\n                <tr\r\n                    *ngFor=\"let zone of zones$ | async\"\r\n                    [class.active]=\"zone.id === (activeZone$ | async)?.id\"\r\n                >\r\n                    <td class=\"left align-middle\"><vdr-entity-info [entity]=\"zone\"></vdr-entity-info></td>\r\n                    <td class=\"left align-middle\">\r\n                        <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"text-right align-middle\">\r\n                        <a\r\n                            class=\"btn btn-link btn-sm\"\r\n                            [routerLink]=\"['./', { contents: zone.id }]\"\r\n                            queryParamsHandling=\"preserve\"\r\n                        >\r\n                            <clr-icon shape=\"view-list\"></clr-icon>\r\n                            {{ 'settings.view-zone-members' | translate }}\r\n                        </a>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <button class=\"btn btn-link btn-sm\" (click)=\"update(zone)\">\r\n                            <clr-icon shape=\"edit\"></clr-icon>\r\n                            {{ 'common.edit' | translate }}\r\n                        </button>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    class=\"button\"\r\n                                    vdrDropdownItem\r\n                                    (click)=\"delete(zone.id)\"\r\n                                    [disabled]=\"!(['DeleteSettings', 'DeleteZone'] | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"zone-members\" [class.expanded]=\"activeZone$ | async\">\r\n        <ng-container *ngIf=\"activeZone$ | async as activeZone\">\r\n            <vdr-zone-member-list\r\n                [members]=\"activeZone.members\"\r\n                [selectedMemberIds]=\"selectedMemberIds\"\r\n                (selectionChange)=\"selectedMemberIds = $event\"\r\n            >\r\n                <div *vdrZoneMemberListHeader>\r\n                    <div class=\"flex\">\r\n                        <div class=\"header-title-row\">\r\n                            {{ activeZone.name }} ({{ activeZone.members.length }})\r\n                        </div>\r\n                        <div class=\"flex-spacer\"></div>\r\n                        <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\r\n                            <clr-icon shape=\"close\"></clr-icon>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"controls\">\r\n                        <vdr-dropdown>\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"btn btn-secondary btn-sm\"\r\n                                vdrDropdownTrigger\r\n                                [disabled]=\"selectedMemberIds.length === 0\"\r\n                            >\r\n                                {{ 'common.with-selected' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"delete-button\"\r\n                                    (click)=\"removeFromZone(activeZone, selectedMemberIds)\"\r\n                                    vdrDropdownItem\r\n                                    [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'settings.remove-from-zone' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                        <button class=\"btn btn-secondary btn-sm\" (click)=\"addToZone(activeZone)\">\r\n                            {{ 'settings.add-countries-to-zone' | translate: { zoneName: activeZone.name } }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div *vdrZoneMemberControls=\"let member = member\">\r\n                    <vdr-dropdown>\r\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                            {{ 'common.actions' | translate }}\r\n                            <clr-icon shape=\"caret down\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <a\r\n                                type=\"button\"\r\n                                [routerLink]=\"['/settings', 'countries', member.id]\"\r\n                                vdrDropdownItem\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </a>\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"delete-button\"\r\n                                (click)=\"removeFromZone(activeZone, [member.id])\"\r\n                                vdrDropdownItem\r\n                                [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'settings.remove-from-zone' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-zone-member-list>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetZones,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { AddCountryToZoneDialogComponent } from '../add-country-to-zone-dialog/add-country-to-zone-dialog.component';\r\nimport { ZoneDetailDialogComponent } from '../zone-detail-dialog/zone-detail-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-zone-list',\r\n    templateUrl: './zone-list.component.html',\r\n    styleUrls: ['./zone-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneListComponent implements OnInit {\r\n    activeZone$: Observable<GetZones.Zones | undefined>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    members$: Observable<GetZones.Members[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    selectedMemberIds: string[] = [];\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private serverConfigService: ServerConfigService,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        const zonesQueryRef = this.dataService.settings.getZones().ref;\r\n        this.zones$ = zonesQueryRef.valueChanges.pipe(map(data => data.data.zones));\r\n        const activeZoneId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n            tap(() => (this.selectedMemberIds = [])),\r\n        );\r\n        this.activeZone$ = combineLatest(this.zones$, activeZoneId$).pipe(\r\n            map(([zones, activeZoneId]) => {\r\n                if (activeZoneId) {\r\n                    return zones.find(z => z.id === activeZoneId);\r\n                }\r\n            }),\r\n        );\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => zonesQueryRef.refetch()));\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    create() {\r\n        this.modalService\r\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone: { name: '' } } })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result ? this.dataService.settings.createZone({ ...result, memberIds: [] }) : EMPTY,\r\n                ),\r\n                // refresh list\r\n                switchMap(() => this.dataService.settings.getZones().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    delete(zoneId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-zone'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.settings.deleteZone(zoneId) : EMPTY)),\r\n\r\n                switchMap(result => {\r\n                    if (result.deleteZone.result === DeletionResult.DELETED) {\r\n                        // refresh list\r\n                        return this.dataService.settings\r\n                            .getZones()\r\n                            .mapSingle(() => ({ errorMessage: false }));\r\n                    } else {\r\n                        return of({ errorMessage: result.deleteZone.message });\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    if (typeof result.errorMessage === 'string') {\r\n                        this.notificationService.error(result.errorMessage);\r\n                    } else {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'Zone',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    update(zone: GetZones.Zones) {\r\n        this.modalService\r\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone } })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result ? this.dataService.settings.updateZone({ id: zone.id, ...result }) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeMembers() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    addToZone(zone: GetZones.Zones) {\r\n        this.modalService\r\n            .fromComponent(AddCountryToZoneDialogComponent, {\r\n                locals: {\r\n                    zoneName: zone.name,\r\n                    currentMembers: zone.members,\r\n                },\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(memberIds =>\r\n                    memberIds\r\n                        ? this.dataService.settings\r\n                              .addMembersToZone(zone.id, memberIds)\r\n                              .pipe(mapTo(memberIds))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe({\r\n                next: result => {\r\n                    this.notificationService.success(_(`settings.add-countries-to-zone-success`), {\r\n                        countryCount: result.length,\r\n                        zoneName: zone.name,\r\n                    });\r\n                },\r\n                error: err => {\r\n                    this.notificationService.error(err);\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromZone(zone: GetZones.Zones, memberIds: string[]) {\r\n        this.dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({\r\n            complete: () => {\r\n                this.notificationService.success(_(`settings.remove-countries-from-zone-success`), {\r\n                    countryCount: memberIds.length,\r\n                    zoneName: zone.name,\r\n                });\r\n            },\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Administrator, Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AdministratorResolver extends BaseEntityResolver<Administrator.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Administrator' as 'Administrator',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                emailAddress: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                user: { roles: [] } as any,\r\n            },\r\n            id => dataService.administrator.getAdministrator(id).mapStream(data => data.administrator),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Channel, CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ChannelResolver extends BaseEntityResolver<Channel.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Channel',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                token: '',\r\n                pricesIncludeTax: false,\r\n                currencyCode: CurrencyCode.USD,\r\n                defaultLanguageCode: getDefaultUiLanguage(),\r\n                defaultShippingZone: {} as any,\r\n                defaultTaxZone: {} as any,\r\n            },\r\n            (id) => dataService.settings.getChannel(id).mapStream((data) => data.channel),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Country } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CountryResolver extends BaseEntityResolver<Country.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Country',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                name: '',\r\n                enabled: false,\r\n                translations: [],\r\n            },\r\n            id => dataService.settings.getCountry(id).mapStream(data => data.country),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { GetGlobalSettings } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the global settings.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class GlobalSettingsResolver extends BaseEntityResolver<GetGlobalSettings.GlobalSettings> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            // we will never be creating a new GlobalSettings entity, so this part is not used.\r\n            {} as any,\r\n            () => dataService.settings.getGlobalSettings().mapStream(data => data.globalSettings),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { PaymentMethod } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PaymentMethodResolver extends BaseEntityResolver<PaymentMethod.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'PaymentMethod',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                code: '',\r\n                description: '',\r\n                enabled: true,\r\n                checker: undefined as any,\r\n                handler: undefined as any,\r\n            },\r\n            id => dataService.settings.getPaymentMethod(id).mapStream(data => data.paymentMethod),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Administrator, Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProfileResolver extends BaseEntityResolver<Administrator.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Administrator' as 'Administrator',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                emailAddress: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                user: { roles: [] } as any,\r\n            },\r\n            id =>\r\n                dataService.administrator\r\n                    .getActiveAdministrator()\r\n                    .mapStream(data => data.activeAdministrator),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class RoleResolver extends BaseEntityResolver<Role.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Role' as 'Role',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                description: '',\r\n                permissions: [],\r\n                channels: [],\r\n            },\r\n            id => dataService.administrator.getRole(id).mapStream(data => data.role),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { ShippingMethod } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ShippingMethodResolver extends BaseEntityResolver<ShippingMethod.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'ShippingMethod',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                id: '',\r\n                code: '',\r\n                name: '',\r\n                description: '',\r\n                fulfillmentHandlerCode: undefined as any,\r\n                checker: undefined as any,\r\n                calculator: undefined as any,\r\n                translations: [],\r\n            },\r\n            id => dataService.shippingMethod.getShippingMethod(id).mapStream(data => data.shippingMethod),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, TaxCategory } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TaxCategoryResolver extends BaseEntityResolver<TaxCategory.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'TaxCategory',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                isDefault: false,\r\n            },\r\n            id => dataService.settings.getTaxCategory(id).mapStream(data => data.taxCategory),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, TaxRate } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TaxRateResolver extends BaseEntityResolver<TaxRate.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'TaxRate',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                value: 0,\r\n                enabled: true,\r\n                category: {} as any,\r\n                zone: {} as any,\r\n                customerGroup: null,\r\n            },\r\n            id => dataService.settings.getTaxRate(id).mapStream(data => data.taxRate),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Administrator,\r\n    CanDeactivateDetailGuard,\r\n    Channel,\r\n    Country,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    Role,\r\n    ShippingMethod,\r\n    TaxCategory,\r\n    TaxRate,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\r\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\r\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\r\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\r\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\r\nimport { CountryListComponent } from './components/country-list/country-list.component';\r\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\r\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\r\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\r\nimport { RoleListComponent } from './components/role-list/role-list.component';\r\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\r\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\r\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\r\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\r\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\r\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\r\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\r\nimport { AdministratorResolver } from './providers/routing/administrator-resolver';\r\nimport { ChannelResolver } from './providers/routing/channel-resolver';\r\nimport { CountryResolver } from './providers/routing/country-resolver';\r\nimport { GlobalSettingsResolver } from './providers/routing/global-settings-resolver';\r\nimport { PaymentMethodResolver } from './providers/routing/payment-method-resolver';\r\nimport { ProfileResolver } from './providers/routing/profile-resolver';\r\nimport { RoleResolver } from './providers/routing/role-resolver';\r\nimport { ShippingMethodResolver } from './providers/routing/shipping-method-resolver';\r\nimport { TaxCategoryResolver } from './providers/routing/tax-category-resolver';\r\nimport { TaxRateResolver } from './providers/routing/tax-rate-resolver';\r\n\r\nexport const settingsRoutes: Route[] = [\r\n    {\r\n        path: 'profile',\r\n        component: ProfileComponent,\r\n        resolve: createResolveData(ProfileResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: _('breadcrumb.profile'),\r\n        },\r\n    },\r\n    {\r\n        path: 'administrators',\r\n        component: AdministratorListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.administrators'),\r\n        },\r\n    },\r\n    {\r\n        path: 'administrators/:id',\r\n        component: AdminDetailComponent,\r\n        resolve: createResolveData(AdministratorResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: administratorBreadcrumb },\r\n    },\r\n    {\r\n        path: 'channels',\r\n        component: ChannelListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.channels'),\r\n        },\r\n    },\r\n    {\r\n        path: 'channels/:id',\r\n        component: ChannelDetailComponent,\r\n        resolve: createResolveData(ChannelResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: channelBreadcrumb },\r\n    },\r\n    {\r\n        path: 'roles',\r\n        component: RoleListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.roles'),\r\n        },\r\n    },\r\n    {\r\n        path: 'roles/:id',\r\n        component: RoleDetailComponent,\r\n        resolve: createResolveData(RoleResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: roleBreadcrumb },\r\n    },\r\n    {\r\n        path: 'tax-categories',\r\n        component: TaxCategoryListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.tax-categories'),\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-categories/:id',\r\n        component: TaxCategoryDetailComponent,\r\n        resolve: createResolveData(TaxCategoryResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: taxCategoryBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-rates',\r\n        component: TaxRateListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.tax-rates'),\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-rates/:id',\r\n        component: TaxRateDetailComponent,\r\n        resolve: createResolveData(TaxRateResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: taxRateBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'countries',\r\n        component: CountryListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.countries'),\r\n        },\r\n    },\r\n    {\r\n        path: 'countries/:id',\r\n        component: CountryDetailComponent,\r\n        resolve: createResolveData(CountryResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: countryBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'zones',\r\n        component: ZoneListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.zones'),\r\n        },\r\n    },\r\n    {\r\n        path: 'shipping-methods',\r\n        component: ShippingMethodListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.shipping-methods'),\r\n        },\r\n    },\r\n    {\r\n        path: 'shipping-methods/:id',\r\n        component: ShippingMethodDetailComponent,\r\n        resolve: createResolveData(ShippingMethodResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: shippingMethodBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'payment-methods',\r\n        component: PaymentMethodListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.payment-methods'),\r\n        },\r\n    },\r\n    {\r\n        path: 'payment-methods/:id',\r\n        component: PaymentMethodDetailComponent,\r\n        resolve: createResolveData(PaymentMethodResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: paymentMethodBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'global-settings',\r\n        component: GlobalSettingsComponent,\r\n        resolve: createResolveData(GlobalSettingsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: _('breadcrumb.global-settings'),\r\n        },\r\n    },\r\n];\r\n\r\nexport function administratorBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Administrator>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.administrators',\r\n        getName: admin => `${admin.firstName} ${admin.lastName}`,\r\n        route: 'administrators',\r\n    });\r\n}\r\n\r\nexport function channelBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Channel>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.channels',\r\n        getName: channel => channel.code,\r\n        route: 'channels',\r\n    });\r\n}\r\n\r\nexport function roleBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Role>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.roles',\r\n        getName: role => role.description,\r\n        route: 'roles',\r\n    });\r\n}\r\n\r\nexport function taxCategoryBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<TaxCategory.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.tax-categories',\r\n        getName: category => category.name,\r\n        route: 'tax-categories',\r\n    });\r\n}\r\n\r\nexport function taxRateBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<TaxRate.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.tax-rates',\r\n        getName: category => category.name,\r\n        route: 'tax-rates',\r\n    });\r\n}\r\n\r\nexport function countryBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Country.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.countries',\r\n        getName: promotion => promotion.name,\r\n        route: 'countries',\r\n    });\r\n}\r\n\r\nexport function shippingMethodBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ShippingMethod.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.shipping-methods',\r\n        getName: method => method.name,\r\n        route: 'shipping-methods',\r\n    });\r\n}\r\n\r\nexport function paymentMethodBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ShippingMethod.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.payment-methods',\r\n        getName: method => method.code,\r\n        route: 'payment-methods',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddCountryToZoneDialogComponent } from './components/add-country-to-zone-dialog/add-country-to-zone-dialog.component';\r\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\r\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\r\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\r\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\r\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\r\nimport { CountryListComponent } from './components/country-list/country-list.component';\r\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\r\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\r\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\r\nimport { PermissionGridComponent } from './components/permission-grid/permission-grid.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\r\nimport { RoleListComponent } from './components/role-list/role-list.component';\r\nimport { ShippingEligibilityTestResultComponent } from './components/shipping-eligibility-test-result/shipping-eligibility-test-result.component';\r\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\r\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\r\nimport { ShippingMethodTestResultComponent } from './components/shipping-method-test-result/shipping-method-test-result.component';\r\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\r\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\r\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\r\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\r\nimport { TestAddressFormComponent } from './components/test-address-form/test-address-form.component';\r\nimport { TestOrderBuilderComponent } from './components/test-order-builder/test-order-builder.component';\r\nimport { ZoneDetailDialogComponent } from './components/zone-detail-dialog/zone-detail-dialog.component';\r\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\r\nimport { ZoneMemberControlsDirective } from './components/zone-member-list/zone-member-controls.directive';\r\nimport { ZoneMemberListHeaderDirective } from './components/zone-member-list/zone-member-list-header.directive';\r\nimport { ZoneMemberListComponent } from './components/zone-member-list/zone-member-list.component';\r\nimport { settingsRoutes } from './settings.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(settingsRoutes)],\r\n    declarations: [\r\n        TaxCategoryListComponent,\r\n        TaxCategoryDetailComponent,\r\n        AdministratorListComponent,\r\n        RoleListComponent,\r\n        RoleDetailComponent,\r\n        AdminDetailComponent,\r\n        PermissionGridComponent,\r\n        CountryListComponent,\r\n        CountryDetailComponent,\r\n        TaxRateListComponent,\r\n        TaxRateDetailComponent,\r\n        ChannelListComponent,\r\n        ChannelDetailComponent,\r\n        ShippingMethodListComponent,\r\n        ShippingMethodDetailComponent,\r\n        PaymentMethodListComponent,\r\n        PaymentMethodDetailComponent,\r\n        GlobalSettingsComponent,\r\n        TestOrderBuilderComponent,\r\n        TestAddressFormComponent,\r\n        ShippingMethodTestResultComponent,\r\n        ShippingEligibilityTestResultComponent,\r\n        ZoneListComponent,\r\n        AddCountryToZoneDialogComponent,\r\n        ZoneMemberListComponent,\r\n        ZoneMemberListHeaderDirective,\r\n        ZoneMemberControlsDirective,\r\n        ZoneDetailDialogComponent,\r\n        ProfileComponent,\r\n    ],\r\n})\r\nexport class SettingsModule {}\r\n"]}