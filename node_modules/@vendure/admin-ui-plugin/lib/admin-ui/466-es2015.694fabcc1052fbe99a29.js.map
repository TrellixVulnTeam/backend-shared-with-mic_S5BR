{"version":3,"mappings":"mYA+C4CA,gBAAmDA,aAACA,kCAApFA,gBAAoBA,SAAYA,yBAA2DA,8BAAvEA,+BAAmBA,qFACvCA,gBAAmCA,mBAAOA,kCAC1CA,gBAA2BA,SAAcA,8BAAdA,kCCxChC,QAUHC,YAAoBC,EAAkCC,GAAlCC,mBAAkCA,cATtDA,cAAW,GACXA,cAAW,GACXA,iBAAa,EACbA,aAAUC,MAEVD,YAAQ,WAAeE,MACvBF,4BAAsBC,SAAeE,oBACrCH,oBAAcC,SAAeG,YAI7BC,QACIL,KAAKM,kBAAe,EACpBN,KAAKO,YAAYF,MAAML,KAAKQ,SAAUR,KAAKS,SAAUT,KAAKU,YAAYC,UAAUb,IAC5E,OAAQA,EAAOc,gBACN,cACD,MAAMb,EAAWC,KAAKa,mBACtBb,KAAKc,OAAOC,cAAchB,GAAsB,KAChD,UACC,8BACA,0BACDC,KAAKM,aAAeR,EAAOkB,WAUnCH,mBACJ,IAAIf,EACJ,MAAMC,EAAK,IAAIkB,OAAO,GAAGhB,cACzB,IACI,MAAMiB,EAAkBC,OAAOC,SAASC,OAAOC,MAAMvB,GACjDmB,GAAmB,EAAIA,EAAgBK,SACvCzB,EAAa0B,KAAKC,mBAAmBP,EAAgB,YAEpDA,IAGT,OAAOpB,yCA3CF4B,GAAc9B,mDAAd8B,EAAcC,qpBDT3B/B,iBACIA,kBACIA,mBAAqBA,iBAAmCA,QACxDA,iBACIA,mBAKIA,6EALJA,QAQAA,mBAKIA,6EALJA,QAQAA,uBACIA,2BACIA,mBACIA,UACJA,QACJA,QACJA,QACAA,iCACIA,oBAKIA,0DALJA,QAOAA,kBAAOA,gCAAsCA,QACjDA,QACAA,sBAGIA,gCAASG,YAGTH,gCACJA,QACJA,QACAA,mBACIA,0BACAA,0BACAA,0BACJA,QACJA,QACJA,eA3CgBA,qCAAsB,6CAQtBA,qCAAsB,6CAGuCA,yCAAtDA,+BAAyB,uBAGxBA,uCAUJA,uCAEGA,kDAMPA,oDAEAA,oDAIGA,+BACAA,8CACAA,+vCErCZ,QACHC,YAAoBC,EAAwBC,GAAxBC,cAAwBA,mBAE5C4B,YAAY9B,GACR,OAAOE,KAAKO,YAAYsB,2BAA2BC,QAC/CC,KAAIhC,IACIA,GACAC,KAAKc,OAAOkB,SAAS,CAAC,OAElBjC,4CATXkC,GAAUrC,qDAAVqC,EAAUC,QAAVD,EAAU,qBAFP,SCLT,MAAME,EAAsB,CAC/B,CACIC,KAAM,GACNC,UAAWX,EACXY,UAAW,OACXV,YAAa,CAACK,KCEf,+CAAMM,4DAJA,CAACtC,MAAcuC,cAAsBL","names":["e","constructor","t","n","this","a","brand","hideVendureBranding","hideVersion","logIn","errorMessage","authService","username","password","rememberMe","subscribe","__typename","getRedirectRoute","router","navigateByUrl","message","RegExp","i","window","location","search","match","length","atob","decodeURIComponent","g","selectors","canActivate","checkAuthenticatedStatus","pipe","T","navigate","l","factory","h","path","component","pathMatch","p","m"],"sources":["webpack:///src/lib/login/src/components/login/login.component.html","webpack:///src/lib/login/src/components/login/login.component.ts","webpack:///src/lib/login/src/providers/login.guard.ts","webpack:///src/lib/login/src/login.routes.ts","webpack:///src/lib/login/src/login.module.ts"],"sourcesContent":["<div class=\"login-wrapper\">\r\n    <form class=\"login\">\r\n        <label class=\"title\"><img src=\"assets/logo-300px.png\" /></label>\r\n        <div class=\"login-group\">\r\n            <input\r\n                class=\"username\"\r\n                type=\"text\"\r\n                name=\"username\"\r\n                id=\"login_username\"\r\n                [(ngModel)]=\"username\"\r\n                [placeholder]=\"'common.username' | translate\"\r\n            />\r\n            <input\r\n                class=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                id=\"login_password\"\r\n                [(ngModel)]=\"password\"\r\n                [placeholder]=\"'common.password' | translate\"\r\n            />\r\n            <clr-alert [clrAlertType]=\"'danger'\"  [clrAlertClosable]=\"false\" [class.visible]=\"errorMessage\" class=\"login-error\">\r\n                <clr-alert-item>\r\n                    <span class=\"alert-text\">\r\n                        {{ errorMessage }}\r\n                    </span>\r\n                </clr-alert-item>\r\n            </clr-alert>\r\n            <clr-checkbox-wrapper>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrCheckbox\r\n                    id=\"rememberme\"\r\n                    name=\"rememberme\"\r\n                    [(ngModel)]=\"rememberMe\"\r\n                />\r\n                <label>{{ 'common.remember-me' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <button\r\n                type=\"submit\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"logIn()\"\r\n                [disabled]=\"!username || !password\"\r\n            >\r\n                {{ 'common.login' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"version\">\r\n            <span *ngIf=\"brand\">{{ brand }} <span *ngIf=\"!hideVendureBranding || !hideVersion\">-</span></span>\r\n            <span *ngIf=\"!hideVendureBranding\">vendure</span>\r\n            <span *ngIf=\"!hideVersion\">v{{ version }}</span>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ADMIN_UI_VERSION, AuthService, AUTH_REDIRECT_PARAM, getAppConfig } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n    username = '';\r\n    password = '';\r\n    rememberMe = false;\r\n    version = ADMIN_UI_VERSION;\r\n    errorMessage: string | undefined;\r\n    brand = getAppConfig().brand;\r\n    hideVendureBranding = getAppConfig().hideVendureBranding;\r\n    hideVersion = getAppConfig().hideVersion;\r\n\r\n    constructor(private authService: AuthService, private router: Router) {}\r\n\r\n    logIn(): void {\r\n        this.errorMessage = undefined;\r\n        this.authService.logIn(this.username, this.password, this.rememberMe).subscribe(result => {\r\n            switch (result.__typename) {\r\n                case 'CurrentUser':\r\n                    const redirect = this.getRedirectRoute();\r\n                    this.router.navigateByUrl(redirect ? redirect : '/');\r\n                    break;\r\n                case 'InvalidCredentialsError':\r\n                case 'NativeAuthStrategyError':\r\n                    this.errorMessage = result.message;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attempts to read a redirect param from the current url and parse it into a\r\n     * route from which the user was redirected after a 401 error.\r\n     */\r\n    private getRedirectRoute(): string | undefined {\r\n        let redirectTo: string | undefined;\r\n        const re = new RegExp(`${AUTH_REDIRECT_PARAM}=(.*)`);\r\n        try {\r\n            const redirectToParam = window.location.search.match(re);\r\n            if (redirectToParam && 1 < redirectToParam.length) {\r\n                redirectTo = atob(decodeURIComponent(redirectToParam[1]));\r\n            }\r\n        } catch (e) {\r\n            // ignore\r\n        }\r\n        return redirectTo;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';\r\nimport { AuthService } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * This guard prevents loggen-in users from navigating to the login screen.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LoginGuard implements CanActivate {\r\n    constructor(private router: Router, private authService: AuthService) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n        return this.authService.checkAuthenticatedStatus().pipe(\r\n            map(authenticated => {\r\n                if (authenticated) {\r\n                    this.router.navigate(['/']);\r\n                }\r\n                return !authenticated;\r\n            }),\r\n        );\r\n    }\r\n}\r\n","import { Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { LoginGuard } from './providers/login.guard';\r\n\r\nexport const loginRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LoginComponent,\r\n        pathMatch: 'full',\r\n        canActivate: [LoginGuard],\r\n    },\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { loginRoutes } from './login.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(loginRoutes)],\r\n    exports: [],\r\n    declarations: [LoginComponent],\r\n})\r\nexport class LoginModule {}\r\n"]}