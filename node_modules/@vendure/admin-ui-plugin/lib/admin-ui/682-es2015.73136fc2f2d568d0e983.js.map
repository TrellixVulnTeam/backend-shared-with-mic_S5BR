{"version":3,"mappings":"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","names":["e","constructor","n","this","a","method","transactionId","ngOnInit","paymentMethods$","dataService","settings","getPaymentMethods","mapSingle","paymentMethods","items","submit","form","value","resolveWith","cancel","V","selectors","t","cancellationReasons","g","reasons","map","o","i18nService","translate","Object","values","lineQuantities","reduce","order","lines","id","quantity","radioChanged","cancelAll","checkIfAllSelected","entries","i","find","l","select","orderId","getLineInputs","reason","cancelShipping","active","orderLineId","filter","B","getGlobalSettings","single$","subscribe","globalSettings","fulfillmentQuantities","getFulfillableCount","trackInventory","fulfillCount","max","changeDetector","markForCheck","shippingMethod","getShippingMethodOperations","fulfillmentHandlers","fulfillmentHandlerDef","code","shippingLines","fulfillmentHandlerCode","fulfillmentHandler","fulfillmentHandlerControl","patchValue","stockOnHand","productVariant","s","c","getUnfulfilledCount","Math","min","fulfillment","canSubmit","valid","handler","W","chipColorType","state","X","q","customFieldConfig","serverConfigService","getCustomFieldsFor","ngOnChanges","buildCustomFieldsFormGroup","fulfillments","fulfillmentId","Map","orderItems","includes","get","name","set","Array","from","customFields","customFieldFormGroup","addControl","customFieldIsObject","isArray","U","J","oxw","transitionState","nextSuggestedState","nextStates","nextOtherStates","z","line","fulfilledCount","getDeliveredCount","fulfillmentStatus","getFulfillmentStatus","length","getFulfillments","count","E","getRefundedCount","payments","refunds","refundId","cancelled","L","added","removed","getModifiedLines","addedItems","removedItems","getSurcharge","surcharges","getAddedItems","getRemovedItems","modification","getOrderLineAndItem","item","_","x","u","ee","customFieldForm","formBuilder","group","customFieldsConfig","control","customFieldValues","onUpdateClick","updateClick","emit","markAsPristine","editable","te","Fe","Ie","isCancellable","node","to","active$","next","getPos","elementRef","nativeElement","getBoundingClientRect","querySelector","height","y","index","getStyle","R","asObservable","pipe","nn","activeTarget$","abs","sqrt","transform","ne","nodes","setActiveState$","initialState","activeState$","We","populateNodes","ngAfterViewInit","setTimeout","populateEdges","onMouseOver","onMouseOut","getNodeFor","nodeComponents","states","push","edges","re","getOrderProcessStates","oe","refund","proratedUnitPriceWithTax","refundShipping","shippingWithTax","adjustment","settledPayments","amount","lineCanBeRefundedOrCancelled","selectedPayment","handleZeroQuantity","isRefunding","isCancelling","refundTotal","settledPaymentsTotal","getOrderLineInput","shipping","paymentId","ie","le","call","we","super","error","be","notifier","_unsubscribe","errors","notifyNext","selectedState","ae","transitionToPreModifyingState","getPreModifyingState","message","cancellable","retry","transitionToStateOrThrow","bn","manuallyTransitionToState","modalService","fromComponent","locals","closable","size","Y","Error","r","Fn","getOrderHistory","type","eq","sort","createdAt","history","data","transitionToState","transitionOrderToState","__typename","notificationService","transitionError","F","factory","orderLineCustomFieldsVisible","orderLineCustomFields","getLineCustomFields","toggleOrderLineCustomFields","getLineDiscounts","discounts","config","formGroup","customFieldsForLine","getPromotionLink","adjustmentSource","split","getCouponCodeForAdjustment","promotions","couponCode","H","$","updateNote","deleteNote","getDisplayType","getTimelineIcon","isFeatured","getFulfillment","getPayment","getCancelledItems","orderItemIds","getModification","modifications","getName","administrator","firstName","lastName","customer","addNoteToOrder","addNote","note","isPublic","noteIsPrivate","ce","de","settleRefund","se","refundHasMetadata","keys","metadata","payment","ue","init","entity$","router","navigate","relativeTo","route","getCustomFieldConfig","history$","fetchHistory","h","mapStream","nextStates$","I","defaultStates","ngOnDestroy","destroy","openStateDiagram","activeState","success","orderTransitionService","transitionToModifying","updateCustomFields","updateOrderCustomFields","entity","getOrderAddressLines","settlePayment","getOrder","transitionPaymentState","transitionPaymentToState","canAddFulfillment","every","hasUnsettledModifications","outstandingPaymentAmount","isSettled","getOutstandingModificationAmount","M","totalWithTax","addManualPayment","outstandingAmount","currencyCode","addManualPaymentToOrder","Le","refetchOrder","result","fulfillOrder","createFulfillment","j","addFulfillmentToOrder","fulfillmentHandlerError","JSON","stringify","transitionFulfillment","transitionFulfillmentToState","cancelOrRefund","orderHasSettledPayments","refundOrder","cancelOrder","displayPrivacyControls","updateOrderNote","noteId","isPrivate","dialog","title","body","buttons","label","returnValue","deleteOrderNote","setFormValues","pe","T","priceDifference","originalTotalWithTax","refundNote","modifyOrderInput","Cancel","Payment","Refund","refundPaymentId","PriceUnchanged","me","dryRun","addItems","adjustOrderLines","updateShippingAddress","updateBillingAddress","addedVariants","productVariantId","price","priceWithTax","promotion","getPromotions","addressCustomFields","snapshot","paramMap","destroy$","couponCodes","couponCodesControl","setValue","surchargeForm","description","sku","priceIncludesTax","taxRate","taxDescription","shippingAddressForm","fullName","shippingAddress","company","streetLine1","streetLine2","city","province","postalCode","countryCode","phoneNumber","addAddressCustomFieldsFormGroup","billingAddressForm","P","billingAddress","S","Ne","Ue","Je","Qe","De","ke","Ee","orderLineCustomFieldsFormArray","Ae","Ye","Te","valueChanges","Oe","si","availableCouponCodes$","so","couponCodeInput$","contains","promotionName","addItemCustomFieldsFormArray","addItemCustomFieldsForm","availableCountries$","getAvailableCountries","countries","uo","take","previousState","transitionToPriorState","canPreviewChanges","dirty","isLineModified","updateLineQuantity","splice","indexOf","updateAddedItemQuantity","trackByProductVariantId","getSelectedItemPrice","addItemToOrder","isMatchingAddItemRow","reset","addItemSelectedVariant","removeAddedItem","removeAt","getSurchargePrices","round","addSurcharge","removeSurcharge","previewAndModify","options","recalculateShipping","modifyOrder","_e","orderStates","setQueryFn","getOrders","skip","refetchOnChannelChange","orders","createQueryOptions","searchOrderCodeControl","searchLastNameControl","queryParamMap","localStorageService","setQueryParam","replaceUrl","activePreset$","rt","qe","refresh","customFilterForm","getAll","placedAtStart","placedAtEnd","selectFilterPreset","page","applyCustomFilters","filterPresets","in","orderPlacedAt","between","start","end","after","before","customerLastName","updatedAt","getShippingNames","join","ge","total","w","it","path","component","breadcrumb","resolve","canDeactivate","Se","lt","breadcrumbKey","slice","link","concat","fe","C"],"sources":["webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.html","webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.ts","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.html","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.html","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.html","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.ts","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.html","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.ts","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.html","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.ts","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.html","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.ts","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.html","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.ts","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.html","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.ts","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.html","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.ts","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.html","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.ts","webpack:///src/lib/order/src/components/order-process-graph/constants.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.ts","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.html","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.ts","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.html","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.ts","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.html","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/retryWhen.js","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.html","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.ts","webpack:///src/lib/order/src/providers/order-transition.service.ts","webpack:///src/lib/order/src/components/order-table/order-table.component.html","webpack:///src/lib/order/src/components/order-table/order-table.component.ts","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.html","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.ts","webpack:///src/lib/order/src/components/order-history/order-history.component.html","webpack:///src/lib/order/src/components/order-history/order-history.component.ts","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.html","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.ts","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.html","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.ts","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.html","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.ts","webpack:///src/lib/order/src/components/order-detail/order-detail.component.html","webpack:///src/lib/order/src/components/order-detail/order-detail.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.ts","webpack:///src/lib/order/src/components/order-list/order-list.component.html","webpack:///src/lib/order/src/components/order-list/order-list.component.ts","webpack:///src/lib/order/src/providers/routing/order-resolver.ts","webpack:///src/lib/order/src/order.routes.ts","webpack:///src/lib/order/src/order.module.ts"],"sourcesContent":["<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\r\n        <ng-select\r\n            [items]=\"paymentMethods$ | async\"\r\n            bindLabel=\"code\"\r\n            autofocus\r\n            bindValue=\"code\"\r\n            [addTag]=\"true\"\r\n            formControlName=\"method\"\r\n        ></ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\r\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\r\n    </vdr-form-field>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\r\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    Dialog,\r\n    GetPaymentMethodList,\r\n    ManualPaymentInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-add-manual-payment-dialog',\r\n    templateUrl: './add-manual-payment-dialog.component.html',\r\n    styleUrls: ['./add-manual-payment-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddManualPaymentDialogComponent implements OnInit, Dialog<Omit<ManualPaymentInput, 'orderId'>> {\r\n    // populated by ModalService call\r\n    outstandingAmount: number;\r\n    currencyCode: CurrencyCode;\r\n\r\n    resolveWith: (result?: Omit<ManualPaymentInput, 'orderId'>) => void;\r\n    form = new FormGroup({\r\n        method: new FormControl('', Validators.required),\r\n        transactionId: new FormControl('', Validators.required),\r\n    });\r\n    paymentMethods$: Observable<GetPaymentMethodList.Items[]>;\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.paymentMethods$ = this.dataService.settings\r\n            .getPaymentMethods(999)\r\n            .mapSingle(data => data.paymentMethods.items);\r\n    }\r\n\r\n    submit() {\r\n        const formValue = this.form.value;\r\n        this.resolveWith({\r\n            method: formValue.method,\r\n            transactionId: formValue.transactionId,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-lines\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.is-disabled]=\"cancelAll\"\r\n                [class.is-cancelled]=\"line.quantity === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\r\n                        [(ngModel)]=\"lineQuantities[line.id]\"\r\n                        (input)=\"checkIfAllSelected()\"\r\n                        [disabled]=\"cancelAll\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                    />\r\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"cancellation-details\">\r\n        <ng-container *ngIf=\"order.active !== true\">\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"true\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-entire-order' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n            <clr-radio-wrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    clrRadio\r\n                    [value]=\"false\"\r\n                    [(ngModel)]=\"cancelAll\"\r\n                    name=\"options\"\r\n                    (ngModelChange)=\"radioChanged()\"\r\n                />\r\n                <label>{{ 'order.cancel-specified-items' | translate }}</label>\r\n            </clr-radio-wrapper>\r\n        </ng-container>\r\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\r\n        <ng-select\r\n            [items]=\"reasons\"\r\n            bindLabel=\"name\"\r\n            autofocus\r\n            bindValue=\"id\"\r\n            [addTag]=\"true\"\r\n            [(ngModel)]=\"reason\"\r\n        ></ng-select>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-container *ngIf=\"!order.active\">\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"order.active\">\r\n            {{ 'order.cancel-order' | translate }}\r\n        </ng-container>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CancelOrderInput,\r\n    Dialog,\r\n    getAppConfig,\r\n    I18nService,\r\n    OrderDetailFragment,\r\n    OrderLineInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-cancel-order-dialog',\r\n    templateUrl: './cancel-order-dialog.component.html',\r\n    styleUrls: ['./cancel-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CancelOrderDialogComponent implements OnInit, Dialog<CancelOrderInput> {\r\n    order: OrderDetailFragment;\r\n    cancelAll = true;\r\n    resolveWith: (result?: CancelOrderInput) => void;\r\n    reason: string;\r\n    lineQuantities: { [lineId: string]: number } = {};\r\n    reasons: string[] = getAppConfig().cancellationReasons ?? [\r\n        _('order.cancel-reason-customer-request'),\r\n        _('order.cancel-reason-not-available'),\r\n    ];\r\n\r\n    get selectionCount(): number {\r\n        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);\r\n    }\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\r\n            return { ...result, [line.id]: line.quantity };\r\n        }, {});\r\n    }\r\n\r\n    radioChanged() {\r\n        if (this.cancelAll) {\r\n            for (const line of this.order.lines) {\r\n                this.lineQuantities[line.id] = line.quantity;\r\n            }\r\n        } else {\r\n            for (const line of this.order.lines) {\r\n                this.lineQuantities[line.id] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfAllSelected() {\r\n        for (const [lineId, quantity] of Object.entries(this.lineQuantities)) {\r\n            const quantityInOrder = this.order.lines.find(line => line.id === lineId)?.quantity;\r\n            if (quantityInOrder && quantity < quantityInOrder) {\r\n                return;\r\n            }\r\n        }\r\n        // If we got here, all of the selected quantities are equal to the order\r\n        // line quantities, i.e. everything is selected.\r\n        this.cancelAll = true;\r\n    }\r\n\r\n    select() {\r\n        this.resolveWith({\r\n            orderId: this.order.id,\r\n            lines: this.getLineInputs(),\r\n            reason: this.reason,\r\n            cancelShipping: this.cancelAll,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getLineInputs(): OrderLineInput[] | undefined {\r\n        if (this.order.active) {\r\n            return;\r\n        }\r\n        return Object.entries(this.lineQuantities)\r\n            .map(([orderLineId, quantity]) => ({\r\n                orderLineId,\r\n                quantity,\r\n            }))\r\n            .filter(l => 0 < l.quantity);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\r\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                    <th>{{ 'order.fulfill' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\r\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\r\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\r\n                        type=\"number\"\r\n                        [max]=\"fulfillmentQuantities[line.id].max\"\r\n                        min=\"0\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"shipping-details\">\r\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\r\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\r\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\r\n        <vdr-configurable-input\r\n            [operationDefinition]=\"fulfillmentHandlerDef\"\r\n            [operation]=\"fulfillmentHandler\"\r\n            [formControl]=\"fulfillmentHandlerControl\"\r\n            [removable]=\"false\"\r\n        ></vdr-configurable-input>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        {{ 'order.create-fulfillment' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport {\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    configurableOperationValueIsValid,\r\n    DataService,\r\n    Dialog,\r\n    FulfillOrderInput,\r\n    GlobalFlag,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    toConfigurableOperationInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfill-order-dialog',\r\n    templateUrl: './fulfill-order-dialog.component.html',\r\n    styleUrls: ['./fulfill-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillOrderDialogComponent implements Dialog<FulfillOrderInput>, OnInit {\r\n    resolveWith: (result?: FulfillOrderInput) => void;\r\n    fulfillmentHandlerDef: ConfigurableOperationDefinition;\r\n    fulfillmentHandler: ConfigurableOperation;\r\n    fulfillmentHandlerControl = new FormControl();\r\n    fulfillmentQuantities: { [lineId: string]: { fulfillCount: number; max: number } } = {};\r\n\r\n    // Provided by modalService.fromComponent() call\r\n    order: OrderDetailFragment;\r\n\r\n    constructor(private dataService: DataService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {\r\n            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {\r\n                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);\r\n                return {\r\n                    ...result,\r\n                    [line.id]: { fulfillCount, max: fulfillCount },\r\n                };\r\n            }, {});\r\n            this.changeDetector.markForCheck();\r\n        });\r\n\r\n        this.dataService.shippingMethod\r\n            .getShippingMethodOperations()\r\n            .mapSingle(data => data.fulfillmentHandlers)\r\n            .subscribe(handlers => {\r\n                this.fulfillmentHandlerDef =\r\n                    handlers.find(\r\n                        h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode,\r\n                    ) || handlers[0];\r\n                this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);\r\n                this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);\r\n                this.changeDetector.markForCheck();\r\n            });\r\n    }\r\n\r\n    getFulfillableCount(line: OrderDetail.Lines, globalTrackInventory: boolean): number {\r\n        const { trackInventory, stockOnHand } = line.productVariant;\r\n        const effectiveTracInventory =\r\n            trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;\r\n\r\n        const unfulfilledCount = this.getUnfulfilledCount(line);\r\n        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;\r\n    }\r\n\r\n    getUnfulfilledCount(line: OrderDetail.Lines): number {\r\n        const fulfilled = line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\r\n        return line.quantity - fulfilled;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        const totalCount = Object.values(this.fulfillmentQuantities).reduce(\r\n            (total, { fulfillCount }) => total + fulfillCount,\r\n            0,\r\n        );\r\n        const formIsValid =\r\n            configurableOperationValueIsValid(\r\n                this.fulfillmentHandlerDef,\r\n                this.fulfillmentHandlerControl.value,\r\n            ) && this.fulfillmentHandlerControl.valid;\r\n        return formIsValid && 0 < totalCount;\r\n    }\r\n\r\n    select() {\r\n        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({\r\n            orderLineId,\r\n            quantity: fulfillCount,\r\n        }));\r\n        this.resolveWith({\r\n            lines,\r\n            handler: toConfigurableOperationInput(\r\n                this.fulfillmentHandler,\r\n                this.fulfillmentHandlerControl.value,\r\n            ),\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-state-label',\r\n    templateUrl: './fulfillment-state-label.component.html',\r\n    styleUrls: ['./fulfillment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n            case 'Shipped':\r\n                return 'warning';\r\n            case 'Delivered':\r\n                return 'success';\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<div class=\"items-list\">\r\n    <ul>\r\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\r\n            <div class=\"quantity\">{{ item.quantity }}</div>\r\n            <clr-icon shape=\"times\" size=\"12\"></clr-icon>\r\n            {{ item.name }}\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-simple-item-list',\r\n    templateUrl: './simple-item-list.component.html',\r\n    styleUrls: ['./simple-item-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SimpleItemListComponent {\r\n    @Input() items: Array<{ name: string; quantity: number }>;\r\n}\r\n","<vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n    {{ fulfillment?.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\r\n    {{ fulfillment?.trackingCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<ng-container *ngFor=\"let customField of customFieldConfig\">\r\n    <vdr-custom-field-control\r\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\r\n        [readonly]=\"true\"\r\n        [compact]=\"true\"\r\n        [customField]=\"customField\"\r\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\r\n    ></vdr-custom-field-control>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, OrderDetail, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { isObject } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-detail',\r\n    templateUrl: './fulfillment-detail.component.html',\r\n    styleUrls: ['./fulfillment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentDetailComponent implements OnInit, OnChanges {\r\n    @Input() fulfillmentId: string;\r\n    @Input() order: OrderDetail.Fragment;\r\n\r\n    customFieldConfig: CustomFieldConfig[] = [];\r\n    customFieldFormGroup = new FormGroup({});\r\n\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldConfig = this.serverConfigService.getCustomFieldsFor('Fulfillment');\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.buildCustomFieldsFormGroup();\r\n    }\r\n\r\n    get fulfillment(): OrderDetail.Fulfillments | undefined | null {\r\n        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);\r\n    }\r\n\r\n    get items(): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        const fulfillmentItemIds = this.fulfillment?.orderItems.map(i => i.id);\r\n        for (const line of this.order.lines) {\r\n            for (const item of line.items) {\r\n                if (fulfillmentItemIds?.includes(item.id)) {\r\n                    const count = itemMap.get(line.productVariant.name);\r\n                    if (count != null) {\r\n                        itemMap.set(line.productVariant.name, count + 1);\r\n                    } else {\r\n                        itemMap.set(line.productVariant.name, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    buildCustomFieldsFormGroup() {\r\n        const customFields = (this.fulfillment as any).customFields;\r\n        for (const fieldDef of this.serverConfigService.getCustomFieldsFor('Fulfillment')) {\r\n            this.customFieldFormGroup.addControl(fieldDef.name, new FormControl(customFields[fieldDef.name]));\r\n        }\r\n    }\r\n\r\n    customFieldIsObject(customField: unknown) {\r\n        return Array.isArray(customField) || isObject(customField);\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header fulfillment-header\">\r\n        <div>{{ 'order.fulfillment' | translate }}</div>\r\n        <div class=\"fulfillment-state\">\r\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-fulfillment-detail\r\n            *ngIf=\"!!fulfillment\"\r\n            [fulfillmentId]=\"fulfillment?.id\"\r\n            [order]=\"order\"\r\n        ></vdr-fulfillment-detail>\r\n    </div>\r\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\r\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\r\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\r\n            </button>\r\n        </ng-container>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionState.emit(nextState)\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-fulfillment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Fulfillment, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-card',\r\n    templateUrl: './fulfillment-card.component.html',\r\n    styleUrls: ['./fulfillment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentCardComponent {\r\n    @Input() fulfillment: Fulfillment.Fragment | undefined;\r\n    @Input() order: OrderDetail.Fragment;\r\n    @Output() transitionState = new EventEmitter<string>();\r\n\r\n    nextSuggestedState(): string | undefined {\r\n        if (!this.fulfillment) {\r\n            return;\r\n        }\r\n        const { nextStates } = this.fulfillment;\r\n        const namedStateOrDefault = (targetState: string) =>\r\n            nextStates.includes(targetState) ? targetState : nextStates[0];\r\n        switch (this.fulfillment?.state) {\r\n            case 'Pending':\r\n                return namedStateOrDefault('Shipped');\r\n            case 'Shipped':\r\n                return namedStateOrDefault('Delivered');\r\n            default:\r\n                return nextStates.find(s => s !== 'Cancelled');\r\n        }\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.fulfillment) {\r\n            return [];\r\n        }\r\n        const suggested = this.nextSuggestedState();\r\n        return this.fulfillment.nextStates.filter(s => s !== suggested);\r\n    }\r\n}\r\n","<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\r\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'partial'\"\r\n            class=\"item-partially-fulfilled\"\r\n            shape=\"check-circle\"\r\n        ></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'none'\"\r\n            class=\"item-not-fulfilled\"\r\n            shape=\"exclamation-circle\"\r\n        ></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\r\n            {{ 'order.line-fulfillment-all' | translate }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\r\n            {{\r\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\r\n            }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\r\n            {{ 'order.line-fulfillment-none' | translate }}\r\n        </label>\r\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\r\n            <div class=\"fulfillment-title\">\r\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\r\n                    'order.item-count' | translate: { count: item.count }\r\n                }})\r\n            </div>\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n                {{ item.fulfillment.method }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                *ngIf=\"item.fulfillment.trackingCode\"\r\n                [label]=\"'order.tracking-code' | translate\"\r\n            >\r\n                {{ item.fulfillment.trackingCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport type FulfillmentStatus = 'full' | 'partial' | 'none';\r\n\r\n@Component({\r\n    selector: 'vdr-line-fulfillment',\r\n    templateUrl: './line-fulfillment.component.html',\r\n    styleUrls: ['./line-fulfillment.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineFulfillmentComponent implements OnChanges {\r\n    @Input() line: OrderDetail.Lines;\r\n    @Input() orderState: string;\r\n    fulfilledCount = 0;\r\n    fulfillmentStatus: FulfillmentStatus;\r\n    fulfillments: Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> = [];\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.line) {\r\n            this.fulfilledCount = this.getDeliveredCount(this.line);\r\n            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.items.length);\r\n            this.fulfillments = this.getFulfillments(this.line);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in an OrderLine which are fulfilled.\r\n     */\r\n    private getDeliveredCount(line: OrderDetail.Lines): number {\r\n        return line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\r\n    }\r\n\r\n    private getFulfillmentStatus(fulfilledCount: number, lineQuantity: number): FulfillmentStatus {\r\n        if (fulfilledCount === lineQuantity) {\r\n            return 'full';\r\n        }\r\n        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {\r\n            return 'partial';\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n    private getFulfillments(\r\n        line: OrderDetail.Lines,\r\n    ): Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> {\r\n        const counts: { [fulfillmentId: string]: number } = {};\r\n\r\n        for (const item of line.items) {\r\n            if (item.fulfillment) {\r\n                if (counts[item.fulfillment.id] === undefined) {\r\n                    counts[item.fulfillment.id] = 1;\r\n                } else {\r\n                    counts[item.fulfillment.id]++;\r\n                }\r\n            }\r\n        }\r\n        const all = line.items.reduce((fulfillments, item) => {\r\n            return item.fulfillment ? [...fulfillments, item.fulfillment] : fulfillments;\r\n        }, [] as OrderDetail.Fulfillments[]);\r\n\r\n        return Object.entries(counts).map(([id, count]) => {\r\n            return {\r\n                count,\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                fulfillment: all.find(f => f.id === id)!,\r\n            };\r\n        });\r\n    }\r\n}\r\n","<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-line-refunds',\r\n    templateUrl: './line-refunds.component.html',\r\n    styleUrls: ['./line-refunds.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineRefundsComponent {\r\n    @Input() line: OrderDetail.Lines;\r\n    @Input() payments: OrderDetail.Payments[];\r\n\r\n    getRefundedCount(): number {\r\n        const refunds =\r\n            this.payments?.reduce(\r\n                (all, payment) => [...all, ...payment.refunds],\r\n                [] as OrderDetail.Refunds[],\r\n            ) ?? [];\r\n        return this.line.items.filter(i => {\r\n            if (i.refundId === null && !i.cancelled) {\r\n                return false;\r\n            }\r\n            if (i.refundId) {\r\n                const refund = refunds.find(r => r.id === i.refundId);\r\n                if (refund?.state === 'Failed') {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }).length;\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-modification-detail',\r\n    templateUrl: './modification-detail.component.html',\r\n    styleUrls: ['./modification-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModificationDetailComponent implements OnChanges {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() modification: OrderDetail.Modifications;\r\n    private addedItems = new Map<OrderDetail.Lines, number>();\r\n    private removedItems = new Map<OrderDetail.Lines, number>();\r\n\r\n    ngOnChanges(): void {\r\n        const { added, removed } = this.getModifiedLines();\r\n        this.addedItems = added;\r\n        this.removedItems = removed;\r\n    }\r\n\r\n    getSurcharge(id: string) {\r\n        return this.order.surcharges.find(m => m.id === id);\r\n    }\r\n\r\n    getAddedItems() {\r\n        return [...this.addedItems.entries()].map(([line, count]) => {\r\n            return { name: line.productVariant.name, quantity: count };\r\n        });\r\n    }\r\n\r\n    getRemovedItems() {\r\n        return [...this.removedItems.entries()].map(([line, count]) => {\r\n            return { name: line.productVariant.name, quantity: count };\r\n        });\r\n    }\r\n\r\n    private getModifiedLines() {\r\n        const added = new Map<OrderDetail.Lines, number>();\r\n        const removed = new Map<OrderDetail.Lines, number>();\r\n        for (const _item of this.modification.orderItems || []) {\r\n            const result = this.getOrderLineAndItem(_item.id);\r\n            if (result) {\r\n                const { line, item } = result;\r\n                if (item.cancelled) {\r\n                    const count = removed.get(line) ?? 0;\r\n                    removed.set(line, count + 1);\r\n                } else {\r\n                    const count = added.get(line) ?? 0;\r\n                    added.set(line, count + 1);\r\n                }\r\n            }\r\n        }\r\n        return { added, removed };\r\n    }\r\n\r\n    private getOrderLineAndItem(itemId: string) {\r\n        for (const line of this.order.lines) {\r\n            const item = line.items.find(i => i.id === itemId);\r\n            if (item) {\r\n                return { line, item };\r\n            }\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\r\n    <div class=\"card-header\">\r\n        {{ 'common.custom-fields' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\r\n            <ng-container *ngFor=\"let customField of customFieldsConfig\">\r\n                <vdr-custom-field-control\r\n                    entityName=\"Order\"\r\n                    [customFieldsFormGroup]=\"customFieldForm\"\r\n                    [compact]=\"true\"\r\n                    [readonly]=\"customField.readonly || !editable\"\r\n                    [customField]=\"customField\"\r\n                ></vdr-custom-field-control>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\r\n            <clr-icon shape=\"pencil\"></clr-icon>\r\n            {{ 'common.edit' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            (click)=\"onUpdateClick()\"\r\n            *ngIf=\"editable\"\r\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\r\n        >\r\n            <clr-icon shape=\"check\"></clr-icon>\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-custom-fields-card',\r\n    templateUrl: './order-custom-fields-card.component.html',\r\n    styleUrls: ['./order-custom-fields-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderCustomFieldsCardComponent implements OnInit {\r\n    @Input() customFieldsConfig: CustomFieldConfig[] = [];\r\n    @Input() customFieldValues: { [name: string]: any } = {};\r\n    @Output() updateClick = new EventEmitter<any>();\r\n    customFieldForm: FormGroup;\r\n    editable = false;\r\n    constructor(private formBuilder: FormBuilder) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldForm = this.formBuilder.group({});\r\n        for (const field of this.customFieldsConfig) {\r\n            this.customFieldForm.addControl(\r\n                field.name,\r\n                this.formBuilder.control(this.customFieldValues[field.name]),\r\n            );\r\n        }\r\n    }\r\n\r\n    onUpdateClick() {\r\n        this.updateClick.emit(this.customFieldForm.value);\r\n        this.customFieldForm.markAsPristine();\r\n        this.editable = false;\r\n    }\r\n}\r\n","export const NODE_HEIGHT = 72;\r\n","<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\r\n    <div\r\n        class=\"node\"\r\n        [class.active-target]=\"activeTarget$ | async\"\r\n    >\r\n        {{ node.name | stateI18nToken | translate }}\r\n    </div>\r\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\r\n        <div class=\"cancelled-edge\">\r\n        </div>\r\n        <clr-icon shape=\"dot-circle\"></clr-icon>\r\n        <div class=\"cancelled-node\">\r\n            {{ cancelledState | stateI18nToken | translate }}\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-node',\r\n    templateUrl: './order-process-node.component.html',\r\n    styleUrls: ['./order-process-node.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessNodeComponent implements OnChanges {\r\n    @Input() node: StateNode;\r\n    @Input() index: number;\r\n    @Input() active: boolean;\r\n    active$ = new BehaviorSubject<boolean>(false);\r\n    activeTarget$ = new BehaviorSubject<boolean>(false);\r\n    isCancellable = false;\r\n    // We use a class field here to prevent the\r\n    // i18n extractor from extracting a \"Cancelled\" key\r\n    cancelledState = 'Cancelled';\r\n\r\n    constructor(private elementRef: ElementRef<HTMLDivElement>) {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');\r\n        if (changes.active) {\r\n            this.active$.next(this.active);\r\n        }\r\n    }\r\n\r\n    getPos(origin: 'top' | 'bottom' = 'top'): { x: number; y: number } {\r\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n        const nodeHeight =\r\n            this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;\r\n        return {\r\n            x: 10,\r\n            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),\r\n        };\r\n    }\r\n\r\n    getStyle() {\r\n        const pos = this.getPos();\r\n        return {\r\n            'top.px': pos.y,\r\n            'left.px': pos.x,\r\n        };\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-edge',\r\n    templateUrl: './order-process-edge.component.html',\r\n    styleUrls: ['./order-process-edge.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessEdgeComponent implements OnInit {\r\n    @Input() from: OrderProcessNodeComponent;\r\n    @Input() to: OrderProcessNodeComponent;\r\n    @Input() index: number;\r\n    active$: Observable<boolean>;\r\n\r\n    ngOnInit() {\r\n        this.active$ = this.from.active$\r\n            .asObservable()\r\n            .pipe(tap((active) => this.to.activeTarget$.next(active)));\r\n    }\r\n\r\n    getStyle() {\r\n        const direction = this.from.index < this.to.index ? 'down' : 'up';\r\n        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');\r\n        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');\r\n        const dX = Math.abs(startPos.x - endPos.x);\r\n        const dY = Math.abs(startPos.y - endPos.y);\r\n        const length = Math.sqrt(dX ** 2 + dY ** 2);\r\n        return {\r\n            'top.px': startPos.y,\r\n            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,\r\n            'height.px': length,\r\n            'width.px': 1,\r\n            ...(direction === 'up'\r\n                ? {\r\n                      transform: 'rotateZ(180deg)',\r\n                      'transform-origin': 'top',\r\n                  }\r\n                : {}),\r\n        };\r\n    }\r\n}\r\n","<ng-container *ngFor=\"let state of nodes; let i = index\">\r\n    <vdr-order-process-node\r\n        [node]=\"state\"\r\n        [index]=\"i\"\r\n        [active]=\"(activeState$ | async) === state.name\"\r\n        (mouseenter)=\"onMouseOver(state.name)\"\r\n        (mouseleave)=\"onMouseOut()\"\r\n    ></vdr-order-process-node>\r\n</ng-container>\r\n<ng-container *ngFor=\"let edge of edges\">\r\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\r\n</ng-container>\r\n","<div\r\n    [attr.data-from]=\"from.node.name\"\r\n    [attr.data-to]=\"to.node.name\"\r\n    [ngStyle]=\"getStyle()\"\r\n    [class.active]=\"active$ | async\"\r\n    class=\"edge\">\r\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\r\n</div>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    HostBinding,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    QueryList,\r\n    SimpleChanges,\r\n    ViewChildren,\r\n} from '@angular/core';\r\nimport { OrderProcessState } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph',\r\n    templateUrl: './order-process-graph.component.html',\r\n    styleUrls: ['./order-process-graph.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphComponent implements OnInit, OnChanges, AfterViewInit {\r\n    @Input() states: OrderProcessState[];\r\n    @Input() initialState?: string;\r\n    setActiveState$ = new BehaviorSubject<string | undefined>(undefined);\r\n    activeState$: Observable<string | undefined>;\r\n    nodes: StateNode[] = [];\r\n    edges: Array<{ from: OrderProcessNodeComponent; to: OrderProcessNodeComponent; index: number }> = [];\r\n\r\n    @ViewChildren(OrderProcessNodeComponent) nodeComponents: QueryList<OrderProcessNodeComponent>;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    @HostBinding('style.height.px')\r\n    get outerHeight(): number {\r\n        return this.nodes.length * NODE_HEIGHT;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setActiveState$.next(this.initialState);\r\n        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.populateNodes();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.populateEdges());\r\n    }\r\n\r\n    onMouseOver(stateName: string) {\r\n        this.setActiveState$.next(stateName);\r\n    }\r\n\r\n    onMouseOut() {\r\n        this.setActiveState$.next(this.initialState);\r\n    }\r\n\r\n    getNodeFor(state: string): OrderProcessNodeComponent | undefined {\r\n        if (this.nodeComponents) {\r\n            return this.nodeComponents.find((n) => n.node.name === state);\r\n        }\r\n    }\r\n\r\n    private populateNodes() {\r\n        const stateNodeMap = new Map<string, StateNode>();\r\n        for (const state of this.states) {\r\n            stateNodeMap.set(state.name, {\r\n                name: state.name,\r\n                to: [],\r\n            });\r\n        }\r\n\r\n        for (const [name, stateNode] of stateNodeMap.entries()) {\r\n            const targets = this.states.find((s) => s.name === name)?.to ?? [];\r\n            for (const target of targets) {\r\n                const targetNode = stateNodeMap.get(target);\r\n                if (targetNode) {\r\n                    stateNode.to.push(targetNode);\r\n                }\r\n            }\r\n        }\r\n        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');\r\n    }\r\n\r\n    private populateEdges() {\r\n        for (const node of this.nodes) {\r\n            const nodeCmp = this.getNodeFor(node.name);\r\n            let index = 0;\r\n            for (const to of node.to) {\r\n                const toCmp = this.getNodeFor(to.name);\r\n                if (nodeCmp && toCmp && nodeCmp !== toCmp) {\r\n                    this.edges.push({\r\n                        to: toCmp,\r\n                        from: nodeCmp,\r\n                        index,\r\n                    });\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n        this.edges = [...this.edges];\r\n        this.changeDetector.markForCheck();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\r\n\r\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport {\r\n    CancelOrderInput,\r\n    DataService,\r\n    Dialog,\r\n    OrderProcessState,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph-dialog',\r\n    templateUrl: './order-process-graph-dialog.component.html',\r\n    styleUrls: ['./order-process-graph-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphDialogComponent implements OnInit, Dialog<void> {\r\n    activeState: string;\r\n    states: OrderProcessState[] = [];\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.states = this.serverConfigService.getOrderProcessStates();\r\n    }\r\n\r\n    resolveWith: (result: void | undefined) => void;\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"refund-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.prorated-unit-price' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.refund' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr *ngFor=\"let line of order.lines\" class=\"order-line\">\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.quantity }}\r\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    <div class=\"prorated-wrapper\">\r\n                        {{ line.proratedUnitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                        <ng-container *ngIf=\"line.discounts as discounts\">\r\n                            <vdr-dropdown *ngIf=\"discounts.length\">\r\n                                <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                                    <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\r\n                                </div>\r\n                                <vdr-dropdown-menu>\r\n                                    <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                        {{ discount.description }}\r\n                                        <div class=\"promotion-amount\">\r\n                                            {{\r\n                                                discount.amount / 100 / line.quantity\r\n                                                    | number: '1.0-2'\r\n                                                    | currency: order.currencyCode\r\n                                            }}\r\n                                        </div>\r\n                                    </div>\r\n                                </vdr-dropdown-menu>\r\n                            </vdr-dropdown>\r\n                        </ng-container>\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle quantity-col\">\r\n                    <input\r\n                        *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                        [(ngModel)]=\"lineQuantities[line.id].quantity\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                        (input)=\"handleZeroQuantity(lineQuantities[line.id])\"\r\n                    />\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <div class=\"cancel-checkbox-wrapper\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].refund\"\r\n                        />\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <div class=\"cancel-checkbox-wrapper\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\r\n                        />\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"refund-details mt4\" [class.faded]=\"!isRefunding() && !isCancelling()\">\r\n        <div>\r\n            <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n            <ng-select\r\n                [disabled]=\"!isRefunding() && !isCancelling()\"\r\n                [items]=\"reasons\"\r\n                bindLabel=\"name\"\r\n                autofocus\r\n                [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\r\n                bindValue=\"id\"\r\n                [addTag]=\"true\"\r\n                [(ngModel)]=\"reason\"\r\n            ></ng-select>\r\n        </div>\r\n\r\n        <div>\r\n            <clr-select-container>\r\n                <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n                <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\" [disabled]=\"!isRefunding()\">\r\n                    <option\r\n                        *ngFor=\"let payment of settledPayments\"\r\n                        [ngValue]=\"payment\"\r\n                        [disabled]=\"payment.state !== 'Settled'\"\r\n                    >\r\n                        #{{ payment.id }} {{ payment.method }}:\r\n                        {{ payment.amount | localeCurrency: order.currencyCode }}\r\n                    </option>\r\n                </select>\r\n            </clr-select-container>\r\n\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"refundShipping\" [disabled]=\"!isRefunding()\" />\r\n                <label>\r\n                    {{ 'order.refund-shipping' | translate }} ({{\r\n                        order.shippingWithTax | localeCurrency: order.currencyCode\r\n                    }})\r\n                </label>\r\n            </clr-checkbox-wrapper>\r\n            <clr-input-container>\r\n                <label>{{ 'order.refund-adjustment' | translate }}</label>\r\n                <vdr-currency-input\r\n                    clrInput\r\n                    [disabled]=\"!isRefunding()\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [(ngModel)]=\"adjustment\"\r\n                ></vdr-currency-input>\r\n            </clr-input-container>\r\n            <div class=\"totals\" [class.disabled]=\"!isRefunding()\">\r\n                <div class=\"order-total\">\r\n                    {{ 'order.payment-amount' | translate }}:\r\n                    {{ selectedPayment.amount | localeCurrency: order.currencyCode }}\r\n                </div>\r\n                <div class=\"refund-total\">\r\n                    {{ 'order.refund-total' | translate }}:\r\n                    {{ refundTotal | localeCurrency: order.currencyCode }}\r\n                </div>\r\n                <div class=\"refund-total-error\" *ngIf=\"refundTotal < 0 || settledPaymentsTotal < refundTotal\">\r\n                    {{\r\n                        'order.refund-total-error'\r\n                            | translate\r\n                                : {\r\n                                      min: 0 | currency: order.currencyCode,\r\n                                      max: settledPaymentsTotal | localeCurrency: order.currencyCode\r\n                                  }\r\n                    }}\r\n                </div>\r\n                <div class=\"refund-total-warning\" *ngIf=\"selectedPayment.amount < refundTotal\">\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        <ng-container *ngIf=\"isRefunding(); else cancelling\">\r\n            {{\r\n                'order.refund-with-amount'\r\n                    | translate: { amount: refundTotal | localeCurrency: order.currencyCode }\r\n            }}\r\n        </ng-container>\r\n        <ng-template #cancelling>\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CancelOrderInput,\r\n    Dialog,\r\n    getAppConfig,\r\n    I18nService,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    OrderLineInput,\r\n    RefundOrderInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { summate } from '@vendure/common/lib/shared-utils';\r\n\r\ntype SelectionLine = { quantity: number; refund: boolean; cancel: boolean };\r\n\r\n@Component({\r\n    selector: 'vdr-refund-order-dialog',\r\n    templateUrl: './refund-order-dialog.component.html',\r\n    styleUrls: ['./refund-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundOrderDialogComponent\r\n    implements OnInit, Dialog<{ cancel: CancelOrderInput; refund: RefundOrderInput }>\r\n{\r\n    order: OrderDetailFragment;\r\n    resolveWith: (result?: { cancel: CancelOrderInput; refund: RefundOrderInput }) => void;\r\n    reason: string;\r\n    settledPayments: OrderDetail.Payments[];\r\n    selectedPayment: OrderDetail.Payments;\r\n    lineQuantities: { [lineId: string]: SelectionLine } = {};\r\n    refundShipping = false;\r\n    adjustment = 0;\r\n    reasons = getAppConfig().cancellationReasons ?? [\r\n        _('order.refund-reason-customer-request'),\r\n        _('order.refund-reason-not-available'),\r\n    ];\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    get refundTotal(): number {\r\n        const itemTotal = this.order.lines.reduce((total, line) => {\r\n            const lineRef = this.lineQuantities[line.id];\r\n            const refundCount = (lineRef.refund && lineRef.quantity) || 0;\r\n            return total + line.proratedUnitPriceWithTax * refundCount;\r\n        }, 0);\r\n        return itemTotal + (this.refundShipping ? this.order.shippingWithTax : 0) + this.adjustment;\r\n    }\r\n\r\n    get settledPaymentsTotal(): number {\r\n        return this.settledPayments\r\n            .map(payment => {\r\n                const paymentTotal = payment.amount;\r\n                const alreadyRefundedTotal = summate(\r\n                    payment.refunds.filter(r => r.state !== 'Failed') as Array<Required<OrderDetail.Refunds>>,\r\n                    'total',\r\n                );\r\n                return paymentTotal - alreadyRefundedTotal;\r\n            })\r\n            .reduce((sum, amount) => sum + amount, 0);\r\n    }\r\n\r\n    lineCanBeRefundedOrCancelled(line: OrderDetail.Lines): boolean {\r\n        const refunds =\r\n            this.order.payments?.reduce(\r\n                (all, payment) => [...all, ...payment.refunds],\r\n                [] as OrderDetail.Refunds[],\r\n            ) ?? [];\r\n\r\n        const refundable = line.items.filter(i => {\r\n            if (i.cancelled) {\r\n                return false;\r\n            }\r\n            if (i.refundId == null) {\r\n                return true;\r\n            }\r\n            const refund = refunds.find(r => r.id === i.refundId);\r\n            return refund?.state === 'Failed';\r\n        });\r\n        return 0 < refundable.length;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\r\n            return {\r\n                ...result,\r\n                [line.id]: {\r\n                    quantity: 0,\r\n                    refund: false,\r\n                    cancel: false,\r\n                },\r\n            };\r\n        }, {});\r\n        this.settledPayments = (this.order.payments || []).filter(p => p.state === 'Settled');\r\n        if (this.settledPayments.length) {\r\n            this.selectedPayment = this.settledPayments[0];\r\n        }\r\n    }\r\n\r\n    handleZeroQuantity(line?: SelectionLine) {\r\n        if (line?.quantity === 0) {\r\n            line.cancel = false;\r\n            line.refund = false;\r\n        }\r\n    }\r\n\r\n    isRefunding(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce((isRefunding, line) => {\r\n            return isRefunding || (0 < line.quantity && line.refund);\r\n        }, false);\r\n        return result;\r\n    }\r\n\r\n    isCancelling(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce((isCancelling, line) => {\r\n            return isCancelling || (0 < line.quantity && line.cancel);\r\n        }, false);\r\n        return result;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        if (this.isRefunding()) {\r\n            return !!(\r\n                this.selectedPayment &&\r\n                this.reason &&\r\n                0 < this.refundTotal &&\r\n                this.refundTotal <= this.settledPaymentsTotal\r\n            );\r\n        } else if (this.isCancelling()) {\r\n            return !!this.reason;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    select() {\r\n        const payment = this.selectedPayment;\r\n        if (payment) {\r\n            const refundLines = this.getOrderLineInput(line => line.refund);\r\n            const cancelLines = this.getOrderLineInput(line => line.cancel);\r\n\r\n            this.resolveWith({\r\n                refund: {\r\n                    lines: refundLines,\r\n                    reason: this.reason,\r\n                    shipping: this.refundShipping ? this.order.shippingWithTax : 0,\r\n                    adjustment: this.adjustment,\r\n                    paymentId: payment.id,\r\n                },\r\n                cancel: {\r\n                    lines: cancelLines,\r\n                    orderId: this.order.id,\r\n                    reason: this.reason,\r\n                    cancelShipping: this.refundShipping,\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getOrderLineInput(filterFn: (line: SelectionLine) => boolean): OrderLineInput[] {\r\n        return Object.entries(this.lineQuantities)\r\n            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))\r\n            .map(([orderLineId, line]) => ({\r\n                orderLineId,\r\n                quantity: line.quantity,\r\n            }));\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\r\n<p class=\"instruction\">\r\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\r\n</p>\r\n<clr-input-container>\r\n    <label>{{ 'order.transaction-id' | translate }}</label>\r\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\r\n</clr-input-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\r\n        {{ 'order.settle-refund' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-settle-refund-dialog',\r\n    templateUrl: './settle-refund-dialog.component.html',\r\n    styleUrls: ['./settle-refund-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SettleRefundDialogComponent implements Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    transactionId = '';\r\n    refund: OrderDetail.Refunds;\r\n\r\n    submit() {\r\n        this.resolveWith(this.transactionId);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\r\n<p>{{ message | translate }}</p>\r\n<clr-select-container>\r\n    <select clrSelect name=\"state\" [(ngModel)]=\"selectedState\">\r\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\r\n            {{ state | stateI18nToken | translate }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\r\n        {{ 'common.cancel' | translate }}\r\n    </button>\r\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\r\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-state-select-dialog',\n    templateUrl: './order-state-select-dialog.component.html',\n    styleUrls: ['./order-state-select-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderStateSelectDialogComponent implements Dialog<string> {\n    resolveWith: (result?: string) => void;\n    nextStates: string[] = [];\n    message = '';\n    cancellable: boolean;\n    selectedState = '';\n\n    select() {\n        if (this.selectedState) {\n            this.resolveWith(this.selectedState);\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    HistoryEntryType,\n    I18nService,\n    ModalService,\n    NotificationService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\n\nimport { OrderStateSelectDialogComponent } from '../components/order-state-select-dialog/order-state-select-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderTransitionService {\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private i18nService: I18nService,\n    ) {}\n\n    /**\n     * Attempts to transition the Order to the last state it was in before it was transitioned\n     * to the \"Modifying\" state. If this fails, a manual prompt is used.\n     */\n    transitionToPreModifyingState(orderId: string, nextStates: string[]) {\n        return this.getPreModifyingState(orderId).pipe(\n            switchMap(state => {\n                const manualTransitionOptions = {\n                    orderId,\n                    nextStates,\n                    message: this.i18nService.translate(\n                        _('order.unable-to-transition-to-state-try-another'),\n                        { state },\n                    ),\n                    cancellable: false,\n                    retry: 10,\n                };\n                if (state) {\n                    return this.transitionToStateOrThrow(orderId, state).pipe(\n                        catchError(err => this.manuallyTransitionToState(manualTransitionOptions)),\n                    );\n                } else {\n                    return this.manuallyTransitionToState(manualTransitionOptions);\n                }\n            }),\n        );\n    }\n\n    /**\n     * Displays a modal for manually selecting the next state.\n     */\n    manuallyTransitionToState(options: {\n        orderId: string;\n        nextStates: string[];\n        message: string;\n        cancellable: boolean;\n        retry: number;\n    }) {\n        return this.modalService\n            .fromComponent(OrderStateSelectDialogComponent, {\n                locals: {\n                    nextStates: options.nextStates,\n                    cancellable: options.cancellable,\n                    message: options.message,\n                },\n                closable: false,\n                size: 'md',\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.transitionToStateOrThrow(options.orderId, result);\n                    } else {\n                        if (!options.cancellable) {\n                            throw new Error(`An order state must be selected`);\n                        } else {\n                            return EMPTY;\n                        }\n                    }\n                }),\n                retryWhen(errors => errors.pipe(delay(2000), take(options.retry))),\n            );\n    }\n\n    /**\n     * Attempts to get the last state the Order was in before it was transitioned\n     * to the \"Modifying\" state.\n     */\n    private getPreModifyingState(orderId: string) {\n        return this.dataService.order\n            .getOrderHistory(orderId, {\n                filter: {\n                    type: {\n                        eq: HistoryEntryType.ORDER_STATE_TRANSITION,\n                    },\n                },\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n            })\n            .mapSingle(result => result.order)\n            .pipe(\n                map(result => {\n                    const item = result?.history.items.find(i => i.data.to === 'Modifying');\n                    if (item) {\n                        return item.data.from as string;\n                    } else {\n                        return;\n                    }\n                }),\n            );\n    }\n\n    private transitionToStateOrThrow(orderId: string, state: string) {\n        return this.dataService.order.transitionToState(orderId, state).pipe(\n            map(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        return transitionOrderToState?.state;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState?.transitionError);\n                        throw new Error(transitionOrderToState?.transitionError);\n                }\n            }),\n        );\n    }\n}\n","<table class=\"order-table table\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'order.product-name' | translate }}</th>\r\n            <th>{{ 'order.product-sku' | translate }}</th>\r\n            <th>{{ 'order.unit-price' | translate }}</th>\r\n            <th>{{ 'order.quantity' | translate }}</th>\r\n            <th>{{ 'order.total' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <ng-container *ngFor=\"let line of order.lines\">\r\n            <tr class=\"order-line\" [class.is-cancelled]=\"line.quantity === 0\">\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle unit-price\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ line.unitPrice | localeCurrency: order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.quantity }}\r\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                    <vdr-line-fulfillment [line]=\"line\" [orderState]=\"order.state\"></vdr-line-fulfillment>\r\n                </td>\r\n                <td class=\"align-middle total\">\r\n                    {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ line.linePrice | localeCurrency: order.currencyCode }}\r\n                    </div>\r\n\r\n                    <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\r\n                        <vdr-dropdown *ngIf=\"discounts.length\">\r\n                            <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                                {{ 'order.promotions-applied' | translate }}\r\n                            </div>\r\n                            <vdr-dropdown-menu>\r\n                                <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                    <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\r\n                                        discount.description\r\n                                    }}</a>\r\n                                    <div class=\"promotion-amount\">\r\n                                        {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\r\n                                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                            {{ discount.amount | localeCurrency: order.currencyCode }}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </ng-container>\r\n                </td>\r\n            </tr>\r\n            <ng-container *ngIf=\"customFieldsForLine[line.id] as customFields\">\r\n                <tr *ngIf=\"customFields.length\">\r\n                    <td colspan=\"6\" class=\"custom-fields-row\">\r\n                        <div class=\"order-line-custom-fields\">\r\n                            <div class=\"custom-field\" *ngFor=\"let field of customFields\">\r\n                                <vdr-custom-field-control\r\n                                    [compact]=\"true\"\r\n                                    [readonly]=\"true\"\r\n                                    [customField]=\"field.config\"\r\n                                    [customFieldsFormGroup]=\"field.formGroup\"\r\n                                ></vdr-custom-field-control>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n        </ng-container>\r\n        <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n            <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n            <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n            <td class=\"align-middle\" colspan=\"2\"></td>\r\n            <td class=\"align-middle total\">\r\n                {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ surcharge.price | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <ng-container *ngFor=\"let discount of order.discounts\">\r\n            <tr class=\"order-adjustment\" *ngIf=\"discount.type !== 'OTHER'\">\r\n            <td colspan=\"5\" class=\"left clr-align-middle\">\r\n                <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\r\n                <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\r\n                    couponCode\r\n                }}</vdr-chip>\r\n            </td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ discount.amount | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n            </tr>\r\n        </ng-container>\r\n        <tr class=\"sub-total\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.sub-total' | translate }}</td>\r\n            <td colspan=\"4\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.subTotalWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.subTotal | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"shipping\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\r\n            <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\r\n            <td colspan=\"3\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.shipping | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"total\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.total' | translate }}</td>\r\n            <td colspan=\"4\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.totalWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.total | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { AdjustmentType, CustomFieldConfig, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-table',\r\n    templateUrl: './order-table.component.html',\r\n    styleUrls: ['./order-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderTableComponent implements OnInit {\r\n    @Input() order: OrderDetail.Fragment;\r\n    @Input() orderLineCustomFields: CustomFieldConfig[];\r\n    orderLineCustomFieldsVisible = false;\r\n    customFieldsForLine: {\r\n        [lineId: string]: Array<{ config: CustomFieldConfig; formGroup: FormGroup; value: any }>;\r\n    } = {};\r\n\r\n    get visibleOrderLineCustomFields(): CustomFieldConfig[] {\r\n        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];\r\n    }\r\n\r\n    get showElided(): boolean {\r\n        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;\r\n        this.getLineCustomFields();\r\n    }\r\n\r\n    toggleOrderLineCustomFields() {\r\n        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;\r\n    }\r\n\r\n    getLineDiscounts(line: OrderDetail.Lines) {\r\n        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);\r\n    }\r\n\r\n    private getLineCustomFields() {\r\n        for (const line of this.order.lines) {\r\n            const formGroup = new FormGroup({});\r\n            const result = this.orderLineCustomFields\r\n                .map(config => {\r\n                    const value = (line as any).customFields[config.name];\r\n                    formGroup.addControl(config.name, new FormControl(value));\r\n                    return {\r\n                        config,\r\n                        formGroup,\r\n                        value,\r\n                    };\r\n                })\r\n                .filter(field => {\r\n                    return this.orderLineCustomFieldsVisible ? true : field.value != null;\r\n                });\r\n            this.customFieldsForLine[line.id] = result;\r\n        }\r\n    }\r\n\r\n    getPromotionLink(promotion: OrderDetail.Discounts): any[] {\r\n        const id = promotion.adjustmentSource.split(':')[1];\r\n        return ['/marketing', 'promotions', id];\r\n    }\r\n\r\n    getCouponCodeForAdjustment(\r\n        order: OrderDetail.Fragment,\r\n        promotionAdjustment: OrderDetail.Discounts,\r\n    ): string | undefined {\r\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\r\n        const promotion = order.promotions.find(p => p.id === id);\r\n        if (promotion) {\r\n            return promotion.couponCode || undefined;\r\n        }\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n    {{ payment.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ payment.amount | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\r\n    {{ payment.errorMessage }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ payment.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { CurrencyCode, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-detail',\r\n    templateUrl: './payment-detail.component.html',\r\n    styleUrls: ['./payment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentDetailComponent {\r\n    @Input() payment: OrderDetail.Payments;\r\n    @Input() currencyCode: CurrencyCode;\r\n}\r\n","<h4>{{ 'order.order-history' | translate }}</h4>\r\n<div class=\"entry-list\" [class.expanded]=\"expanded\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\r\n                {{ 'common.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"visibility-select\">\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\r\n                <label>{{ 'order.note-is-private' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\r\n                {{ 'order.note-only-visible-to-administrators' | translate }}\r\n            </span>\r\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\r\n                {{ 'order.note-visible-to-customer' | translate }}\r\n            </span>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry\r\n        *ngFor=\"let entry of history\"\r\n        [displayType]=\"getDisplayType(entry)\"\r\n        [iconShape]=\"getTimelineIcon(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"getName(entry)\"\r\n        [featured]=\"isFeatured(entry)\"\r\n        [collapsed]=\"!expanded && !isFeatured(entry)\"\r\n        (expandClick)=\"expanded = !expanded\"\r\n    >\r\n        <ng-container [ngSwitch]=\"entry.type\">\r\n            <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\r\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\r\n                    {{ 'order.history-order-fulfilled' | translate }}\r\n                </div>\r\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\r\n                    {{ 'order.history-order-cancelled' | translate }}\r\n                </div>\r\n                <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\r\n                    {{\r\n                        'order.history-order-transition'\r\n                            | translate: { from: entry.data.from, to: entry.data.to }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\r\n                <div class=\"title\">\r\n                    {{ 'order.history-order-modified' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"getModification(entry.data.modificationId) as modification\">\r\n                    {{ 'order.modify-order-price-difference' | translate }}:\r\n                    <strong>{{ modification.priceChange | localeCurrency: order.currencyCode }}</strong>\r\n                    <vdr-chip colorType=\"success\" *ngIf=\"modification.isSettled\">{{\r\n                        'order.modification-settled' | translate\r\n                    }}</vdr-chip>\r\n                    <vdr-chip colorType=\"error\" *ngIf=\"!modification.isSettled\">{{\r\n                        'order.modification-not-settled' | translate\r\n                    }}</vdr-chip>\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-modification-detail\r\n                            [order]=\"order\"\r\n                            [modification]=\"modification\"\r\n                        ></vdr-modification-detail>\r\n                    </vdr-history-entry-detail>\r\n                </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\r\n                <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-payment-settled' | translate }}\r\n                    </div>\r\n                    {{ 'order.transaction-id' | translate }}: {{ getPayment(entry)?.transactionId }}\r\n                    <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\r\n                        <vdr-payment-detail\r\n                            [payment]=\"payment\"\r\n                            [currencyCode]=\"order.currencyCode\"\r\n                        ></vdr-payment-detail>\r\n                    </vdr-history-entry-detail>\r\n                </ng-container>\r\n                <ng-template #regularPaymentTransition>\r\n                    {{\r\n                        'order.history-payment-transition'\r\n                            | translate\r\n                                : {\r\n                                      from: entry.data.from,\r\n                                      to: entry.data.to,\r\n                                      id: getPayment(entry)?.transactionId\r\n                                  }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\r\n                {{\r\n                    'order.history-refund-transition'\r\n                        | translate: { from: entry.data.from, to: entry.data.to, id: entry.data.refundId }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\r\n                {{ 'order.history-items-cancelled' | translate: { count: entry.data.orderItemIds.length } }}\r\n                <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry) as items\">\r\n                    <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                        {{ entry.data.reason }}\r\n                    </vdr-labeled-data>\r\n                    <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                        <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n                    </vdr-labeled-data>\r\n                    <vdr-labeled-data [label]=\"'order.shipping-cancelled' | translate\">\r\n                        {{ entry.data.shippingCancelled }}\r\n                    </vdr-labeled-data>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\r\n                {{ 'order.history-fulfillment-created' | translate }}\r\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                    <vdr-fulfillment-detail\r\n                        [fulfillmentId]=\"fulfillment.id\"\r\n                        [order]=\"order\"\r\n                    ></vdr-fulfillment-detail>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\r\n                <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-fulfillment-delivered' | translate }}\r\n                    </div>\r\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-fulfillment-shipped' | translate }}\r\n                    </div>\r\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\r\n                    {{\r\n                        'order.history-fulfillment-transition'\r\n                            | translate: { from: entry.data.from, to: entry.data.to }\r\n                    }}\r\n                </ng-container>\r\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                    <vdr-fulfillment-detail\r\n                        [fulfillmentId]=\"fulfillment.id\"\r\n                        [order]=\"order\"\r\n                    ></vdr-fulfillment-detail>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\r\n                <div class=\"flex\">\r\n                    <div class=\"note-text\">\r\n                        <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\r\n                            'common.public' | translate\r\n                        }}</span>\r\n                        <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\r\n                            'common.private' | translate\r\n                        }}</span>\r\n                        {{ entry.data.note }}\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <vdr-dropdown>\r\n                        <button class=\"icon-button\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"updateNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </button>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"deleteNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\r\n                {{ 'order.history-coupon-code-applied' | translate }}:\r\n                <vdr-chip>\r\n                    <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\r\n                        entry.data.couponCode\r\n                    }}</a>\r\n                </vdr-chip>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\r\n                {{ 'order.history-coupon-code-removed' | translate }}:\r\n                <vdr-chip\r\n                    ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\r\n                >\r\n            </ng-container>\r\n        </ng-container>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\r\n        <div class=\"title\">\r\n            {{ 'order.history-order-created' | translate }}\r\n        </div>\r\n    </vdr-timeline-entry>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport {\r\n    GetOrderHistory,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    TimelineDisplayType,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-history',\r\n    templateUrl: './order-history.component.html',\r\n    styleUrls: ['./order-history.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderHistoryComponent {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() history: GetOrderHistory.Items[];\r\n    @Output() addNote = new EventEmitter<{ note: string; isPublic: boolean }>();\r\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\r\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\r\n    note = '';\r\n    noteIsPrivate = true;\r\n    expanded = false;\r\n    readonly type = HistoryEntryType;\r\n\r\n    getDisplayType(entry: GetOrderHistory.Items): TimelineDisplayType {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {\r\n            return 'error';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\r\n            return 'warning';\r\n        }\r\n        return 'default';\r\n    }\r\n\r\n    getTimelineIcon(entry: GetOrderHistory.Items) {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return ['success-standard', 'is-solid'];\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'ban';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Settled') {\r\n                return 'credit-card';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_NOTE) {\r\n            return 'note';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {\r\n            return 'pencil';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Shipped') {\r\n                return 'truck';\r\n            }\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'truck';\r\n            }\r\n        }\r\n    }\r\n\r\n    isFeatured(entry: GetOrderHistory.Items): boolean {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.ORDER_STATE_TRANSITION: {\r\n                return (\r\n                    entry.data.to === 'Delivered' ||\r\n                    entry.data.to === 'Cancelled' ||\r\n                    entry.data.to === 'Settled'\r\n                );\r\n            }\r\n            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:\r\n                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';\r\n            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:\r\n                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';\r\n            case HistoryEntryType.ORDER_NOTE:\r\n            case HistoryEntryType.ORDER_MODIFIED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getFulfillment(entry: GetOrderHistory.Items): OrderDetail.Fulfillments | undefined {\r\n        if (\r\n            (entry.type === HistoryEntryType.ORDER_FULFILLMENT ||\r\n                entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&\r\n            this.order.fulfillments\r\n        ) {\r\n            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);\r\n        }\r\n    }\r\n\r\n    getPayment(entry: GetOrderHistory.Items): OrderDetail.Payments | undefined {\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {\r\n            return this.order.payments.find(p => p.id === entry.data.paymentId);\r\n        }\r\n    }\r\n\r\n    getCancelledItems(entry: GetOrderHistory.Items): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        const cancelledItemIds: string[] = entry.data.orderItemIds;\r\n        for (const line of this.order.lines) {\r\n            for (const item of line.items) {\r\n                if (cancelledItemIds.includes(item.id)) {\r\n                    const count = itemMap.get(line.productVariant.name);\r\n                    if (count != null) {\r\n                        itemMap.set(line.productVariant.name, count + 1);\r\n                    } else {\r\n                        itemMap.set(line.productVariant.name, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    getModification(id: string) {\r\n        return this.order.modifications.find(m => m.id === id);\r\n    }\r\n\r\n    getName(entry: GetOrderHistory.Items): string {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        } else {\r\n            const customer = this.order.customer;\r\n            if (customer) {\r\n                return `${customer.firstName} ${customer.lastName}`;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    addNoteToOrder() {\r\n        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });\r\n        this.note = '';\r\n        this.noteIsPrivate = true;\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-state-label',\r\n    templateUrl: './payment-state-label.component.html',\r\n    styleUrls: ['./payment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Authorized':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Declined':\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-refund-state-label',\r\n    templateUrl: './refund-state-label.component.html',\r\n    styleUrls: ['./refund-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Failed':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header payment-header\">\r\n        <div>\r\n            {{ 'order.payment' | translate }}\r\n            <ng-container *ngIf=\"payment.transactionId\">#{{ payment.transactionId }}</ng-container>\r\n        </div>\r\n        <div class=\"payment-state\">\r\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\r\n    </div>\r\n    <ng-container *ngFor=\"let refund of payment.refunds\">\r\n        <div class=\"card-header payment-header\">\r\n            <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\r\n            {{ 'order.refund' | translate }} #{{ refund.id }}\r\n            <div class=\"clr-flex-fill\"></div>\r\n            <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\r\n        </div>\r\n        <div class=\"card-block\">\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ refund.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\r\n                {{ refund.total | localeCurrency: currencyCode }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\r\n                {{ refund.transactionId }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\r\n                {{ refund.reason }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-metadata' | translate\" *ngIf=\"refundHasMetadata(refund)\">\r\n                <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n            </vdr-labeled-data>\r\n        </div>\r\n        <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\r\n                {{ 'order.settle-refund' | translate }}\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            *ngIf=\"payment.nextStates.includes('Settled')\"\r\n            (click)=\"settlePayment.emit(payment)\"\r\n        >\r\n            {{ 'order.settle-payment' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{\r\n                                'order.transition-to-state'\r\n                                    | translate: { state: (nextState | stateI18nToken | translate) }\r\n                            }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-payment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-payment-card',\r\n    templateUrl: './order-payment-card.component.html',\r\n    styleUrls: ['./order-payment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderPaymentCardComponent {\r\n    @Input() payment: OrderDetail.Payments;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() settlePayment = new EventEmitter<OrderDetail.Payments>();\r\n    @Output() transitionPaymentState = new EventEmitter<{ payment: OrderDetail.Payments; state: string }>();\r\n    @Output() settleRefund = new EventEmitter<OrderDetail.Refunds>();\r\n\r\n    refundHasMetadata(refund?: OrderDetail.Refunds): boolean {\r\n        return !!refund && Object.keys(refund.metadata).length > 0;\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.payment) {\r\n            return [];\r\n        }\r\n        return this.payment.nextStates.filter(s => s !== 'Settled');\r\n    }\r\n}\r\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\">\r\n                <button\r\n                    class=\"icon-button\"\r\n                    (click)=\"openStateDiagram()\"\r\n                    [title]=\"'order.order-state-diagram' | translate\"\r\n                >\r\n                    <clr-icon shape=\"list\"></clr-icon>\r\n                </button>\r\n            </vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"\r\n                (order.state === 'ArrangingPayment' || order.state === 'ArrangingAdditionalPayment') &&\r\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\r\n            \"\r\n            (click)=\"addManualPayment(order)\"\r\n        >\r\n            {{ 'order.add-payment-to-order' | translate }}\r\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\r\n        </button>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"\r\n                order.active === false &&\r\n                order.state !== 'ArrangingAdditionalPayment' &&\r\n                0 < outstandingPaymentAmount(order)\r\n            \"\r\n            (click)=\"transitionToState('ArrangingAdditionalPayment')\"\r\n        >\r\n            {{ 'order.arrange-additional-payment' | translate }}\r\n        </button>\r\n        <button class=\"btn btn-primary\" (click)=\"fulfillOrder()\" [disabled]=\"!canAddFulfillment(order)\">\r\n            {{ 'order.fulfill-order' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngIf=\"order.nextStates.includes('Modifying')\">\r\n                    <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"transitionToModifying()\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'order.modify-order' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                </ng-container>\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"btn\"\r\n                    vdrDropdownItem\r\n                    *ngIf=\"order.nextStates.includes('Cancelled')\"\r\n                    (click)=\"cancelOrRefund(order)\"\r\n                >\r\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\r\n                        {{ 'order.refund-and-cancel-order' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #cancelOnly>\r\n                        {{ 'order.cancel-order' | translate }}\r\n                    </ng-template>\r\n                </button>\r\n\r\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        *ngFor=\"let nextState of nextStates$ | async\"\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionToState(nextState)\"\r\n                    >\r\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                        {{\r\n                            'order.transition-to-state'\r\n                                | translate: { state: (nextState | stateI18nToken | translate) }\r\n                        }}\r\n                    </button>\r\n                </ng-container>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\r\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\r\n                    {{ 'order.manually-transition-to-state' | translate }}\r\n                </button>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n            ></vdr-order-table>\r\n            <h4>{{ 'order.tax-summary' | translate }}</h4>\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{{ 'common.description' | translate }}</th>\r\n                        <th>{{ 'order.tax-rate' | translate }}</th>\r\n                        <th>{{ 'order.tax-base' | translate }}</th>\r\n                        <th>{{ 'order.tax-total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let row of order.taxSummary\">\r\n                        <td>{{ row.description }}</td>\r\n                        <td>{{ row.taxRate / 100 | percent }}</td>\r\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\r\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"order-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n\r\n            <vdr-order-history\r\n                [order]=\"order\"\r\n                [history]=\"history$ | async\"\r\n                (addNote)=\"addNote($event)\"\r\n                (updateNote)=\"updateNote($event)\"\r\n                (deleteNote)=\"deleteNote($event)\"\r\n            ></vdr-order-history>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <vdr-order-custom-fields-card\r\n                [customFieldsConfig]=\"customFields\"\r\n                [customFieldValues]=\"order.customFields\"\r\n                (updateClick)=\"updateCustomFields($event)\"\r\n            ></vdr-order-custom-fields-card>\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.customer' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card-text\">\r\n                        <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.shippingAddress).length\">\r\n                            {{ 'order.shipping-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.billingAddress).length\">\r\n                            {{ 'order.billing-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.billingAddress\"></vdr-formatted-address>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ng-container *ngIf=\"order.payments && order.payments.length\">\r\n                <vdr-order-payment-card\r\n                    *ngFor=\"let payment of order.payments\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [payment]=\"payment\"\r\n                    (settlePayment)=\"settlePayment($event)\"\r\n                    (transitionPaymentState)=\"transitionPaymentState($event)\"\r\n                    (settleRefund)=\"settleRefund($event)\"\r\n                ></vdr-order-payment-card>\r\n            </ng-container>\r\n            <ng-container *ngFor=\"let fulfillment of order.fulfillments\">\r\n                <vdr-fulfillment-card\r\n                    [fulfillment]=\"fulfillment\"\r\n                    [order]=\"order\"\r\n                    (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\r\n                ></vdr-fulfillment-card>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CancelOrder,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    EditNoteDialogComponent,\r\n    GetOrderHistory,\r\n    GetOrderQuery,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    ModalService,\r\n    NotificationService,\r\n    Order,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    OrderLineFragment,\r\n    Refund,\r\n    RefundOrder,\r\n    ServerConfigService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { assertNever, summate } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, merge, Observable, of, Subject } from 'rxjs';\r\nimport { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';\r\nimport { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';\r\nimport { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';\r\nimport { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';\r\nimport { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';\r\nimport { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-detail',\r\n    templateUrl: './order-detail.component.html',\r\n    styleUrls: ['./order-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderDetailComponent\r\n    extends BaseDetailComponent<OrderDetail.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    detailForm = new FormGroup({});\r\n    history$: Observable<GetOrderHistory.Items[] | undefined>;\r\n    nextStates$: Observable<string[]>;\r\n    fetchHistory = new Subject<void>();\r\n    customFields: CustomFieldConfig[];\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    private readonly defaultStates = [\r\n        'AddingItems',\r\n        'ArrangingPayment',\r\n        'PaymentAuthorized',\r\n        'PaymentSettled',\r\n        'PartiallyShipped',\r\n        'Shipped',\r\n        'PartiallyDelivered',\r\n        'Delivered',\r\n        'Cancelled',\r\n        'Modifying',\r\n        'ArrangingAdditionalPayment',\r\n    ];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.entity$.pipe(take(1)).subscribe(order => {\r\n            if (order.state === 'Modifying') {\r\n                this.router.navigate(['./', 'modify'], { relativeTo: this.route });\r\n            }\r\n        });\r\n        this.customFields = this.getCustomFieldConfig('Order');\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.history$ = this.fetchHistory.pipe(\r\n            startWith(null),\r\n            switchMap(() => {\r\n                return this.dataService.order\r\n                    .getOrderHistory(this.id, {\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    })\r\n                    .mapStream(data => data.order?.history.items);\r\n            }),\r\n        );\r\n        this.nextStates$ = this.entity$.pipe(\r\n            map(order => {\r\n                const isInCustomState = !this.defaultStates.includes(order.state);\r\n                return isInCustomState\r\n                    ? order.nextStates\r\n                    : order.nextStates.filter(s => !this.defaultStates.includes(s));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    openStateDiagram() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order =>\r\n                    this.modalService.fromComponent(OrderProcessGraphDialogComponent, {\r\n                        closable: true,\r\n                        locals: {\r\n                            activeState: order.state,\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToState(state: string) {\r\n        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {\r\n            switch (transitionOrderToState?.__typename) {\r\n                case 'Order':\r\n                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                    this.notificationService.error(transitionOrderToState.transitionError);\r\n            }\r\n        });\r\n    }\r\n\r\n    manuallyTransitionToState(order: OrderDetailFragment) {\r\n        this.orderTransitionService\r\n            .manuallyTransitionToState({\r\n                orderId: order.id,\r\n                nextStates: order.nextStates,\r\n                cancellable: true,\r\n                message: _('order.manually-transition-to-state-message'),\r\n                retry: 0,\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToModifying() {\r\n        this.dataService.order\r\n            .transitionToState(this.id, 'Modifying')\r\n            .subscribe(({ transitionOrderToState }) => {\r\n                switch (transitionOrderToState?.__typename) {\r\n                    case 'Order':\r\n                        this.router.navigate(['./modify'], { relativeTo: this.route });\r\n                        break;\r\n                    case 'OrderStateTransitionError':\r\n                        this.notificationService.error(transitionOrderToState.transitionError);\r\n                }\r\n            });\r\n    }\r\n\r\n    updateCustomFields(customFieldsValue: any) {\r\n        this.dataService.order\r\n            .updateOrderCustomFields({\r\n                id: this.id,\r\n                customFields: customFieldsValue,\r\n            })\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });\r\n            });\r\n    }\r\n\r\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\r\n        if (!orderAddress) {\r\n            return [];\r\n        }\r\n        return Object.values(orderAddress)\r\n            .filter(val => val !== 'OrderAddress')\r\n            .filter(line => !!line);\r\n    }\r\n\r\n    settlePayment(payment: OrderDetail.Payments) {\r\n        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {\r\n            switch (settlePayment.__typename) {\r\n                case 'Payment':\r\n                    if (settlePayment.state === 'Settled') {\r\n                        this.notificationService.success(_('order.settle-payment-success'));\r\n                    } else {\r\n                        this.notificationService.error(_('order.settle-payment-error'));\r\n                    }\r\n                    this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                case 'PaymentStateTransitionError':\r\n                case 'SettlePaymentError':\r\n                    this.notificationService.error(settlePayment.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    transitionPaymentState({ payment, state }: { payment: OrderDetail.Payments; state: string }) {\r\n        this.dataService.order\r\n            .transitionPaymentToState(payment.id, state)\r\n            .subscribe(({ transitionPaymentToState }) => {\r\n                switch (transitionPaymentToState.__typename) {\r\n                    case 'Payment':\r\n                        this.notificationService.success(_('order.transitioned-payment-to-state-success'), {\r\n                            state,\r\n                        });\r\n                        this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                        this.fetchHistory.next();\r\n                        break;\r\n                    case 'PaymentStateTransitionError':\r\n                        this.notificationService.error(transitionPaymentToState.message);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    canAddFulfillment(order: OrderDetail.Fragment): boolean {\r\n        const allItemsFulfilled = order.lines\r\n            .reduce((items, line) => [...items, ...line.items], [] as OrderLineFragment['items'])\r\n            .every(item => !!item.fulfillment || item.cancelled);\r\n        return (\r\n            !allItemsFulfilled &&\r\n            !this.hasUnsettledModifications(order) &&\r\n            this.outstandingPaymentAmount(order) === 0 &&\r\n            (order.nextStates.includes('Shipped') ||\r\n                order.nextStates.includes('PartiallyShipped') ||\r\n                order.nextStates.includes('Delivered'))\r\n        );\r\n    }\r\n\r\n    hasUnsettledModifications(order: OrderDetailFragment): boolean {\r\n        return 0 < order.modifications.filter(m => !m.isSettled).length;\r\n    }\r\n\r\n    getOutstandingModificationAmount(order: OrderDetailFragment): number {\r\n        return summate(\r\n            order.modifications.filter(m => !m.isSettled),\r\n            'priceChange',\r\n        );\r\n    }\r\n\r\n    outstandingPaymentAmount(order: OrderDetailFragment): number {\r\n        const paymentIsValid = (p: OrderDetail.Payments): boolean =>\r\n            p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';\r\n\r\n        let amountCovered = 0;\r\n        for (const payment of order.payments?.filter(paymentIsValid) ?? []) {\r\n            const refunds = payment.refunds.filter(r => r.state !== 'Failed') ?? [];\r\n            const refundsTotal = summate(refunds as Array<Required<Refund>>, 'total');\r\n            amountCovered += payment.amount - refundsTotal;\r\n        }\r\n        return order.totalWithTax - amountCovered;\r\n    }\r\n\r\n    addManualPayment(order: OrderDetailFragment) {\r\n        const priorState = order.state;\r\n        this.modalService\r\n            .fromComponent(AddManualPaymentDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    outstandingAmount: this.outstandingPaymentAmount(order),\r\n                    currencyCode: order.currencyCode,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.addManualPaymentToOrder({\r\n                            orderId: this.id,\r\n                            transactionId: result.transactionId,\r\n                            method: result.method,\r\n                            metadata: result.metadata || {},\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n                switchMap(({ addManualPaymentToOrder }) => {\r\n                    switch (addManualPaymentToOrder.__typename) {\r\n                        case 'Order':\r\n                            this.notificationService.success(_('order.add-payment-to-order-success'));\r\n                            if (priorState === 'ArrangingAdditionalPayment') {\r\n                                return this.orderTransitionService.transitionToPreModifyingState(\r\n                                    order.id,\r\n                                    order.nextStates,\r\n                                );\r\n                            } else {\r\n                                return this.dataService.order\r\n                                    .transitionToState(this.id, 'PaymentSettled')\r\n                                    .pipe(mapTo('PaymentSettled'));\r\n                            }\r\n                        case 'ManualPaymentStateError':\r\n                            this.notificationService.error(addManualPaymentToOrder.message);\r\n                            return EMPTY;\r\n                        default:\r\n                            return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.refetchOrder({ result });\r\n                }\r\n            });\r\n    }\r\n\r\n    fulfillOrder() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order => {\r\n                    return this.modalService.fromComponent(FulfillOrderDialogComponent, {\r\n                        size: 'xl',\r\n                        locals: {\r\n                            order,\r\n                        },\r\n                    });\r\n                }),\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.createFulfillment(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result).pipe(mapTo(result))),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    const { addFulfillmentToOrder } = result;\r\n                    switch (addFulfillmentToOrder.__typename) {\r\n                        case 'Fulfillment':\r\n                            this.notificationService.success(_('order.create-fulfillment-success'));\r\n                            break;\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'InsufficientStockOnHandError':\r\n                        case 'ItemsAlreadyFulfilledError':\r\n                        case 'InvalidFulfillmentHandlerError':\r\n                            this.notificationService.error(addFulfillmentToOrder.message);\r\n                            break;\r\n                        case 'FulfillmentStateTransitionError':\r\n                            this.notificationService.error(addFulfillmentToOrder.transitionError);\r\n                            break;\r\n                        case 'CreateFulfillmentError':\r\n                            this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);\r\n                            break;\r\n                        case undefined:\r\n                            this.notificationService.error(JSON.stringify(addFulfillmentToOrder));\r\n                            break;\r\n                        default:\r\n                            assertNever(addFulfillmentToOrder);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    transitionFulfillment(id: string, state: string) {\r\n        this.dataService.order\r\n            .transitionFulfillmentToState(id, state)\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('order.successfully-updated-fulfillment'));\r\n            });\r\n    }\r\n\r\n    cancelOrRefund(order: OrderDetail.Fragment) {\r\n        const isRefundable = this.orderHasSettledPayments(order);\r\n        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {\r\n            this.cancelOrder(order);\r\n        } else {\r\n            this.refundOrder(order);\r\n        }\r\n    }\r\n\r\n    settleRefund(refund: OrderDetail.Refunds) {\r\n        this.modalService\r\n            .fromComponent(SettleRefundDialogComponent, {\r\n                size: 'md',\r\n                locals: {\r\n                    refund,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(transactionId => {\r\n                    if (transactionId) {\r\n                        return this.dataService.order.settleRefund(\r\n                            {\r\n                                transactionId,\r\n                                id: refund.id,\r\n                            },\r\n                            this.id,\r\n                        );\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                // switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.settle-refund-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    addNote(event: { note: string; isPublic: boolean }) {\r\n        const { note, isPublic } = event;\r\n        this.dataService.order\r\n            .addNoteToOrder({\r\n                id: this.id,\r\n                note,\r\n                isPublic,\r\n            })\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(result => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    updateNote(entry: HistoryEntry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    displayPrivacyControls: true,\r\n                    note: entry.data.note,\r\n                    noteIsPrivate: !entry.isPublic,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.updateOrderNote({\r\n                            noteId: entry.id,\r\n                            isPublic: !result.isPrivate,\r\n                            note: result.note,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-update-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    deleteNote(entry: HistoryEntry) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('common.confirm-delete-note'),\r\n                body: entry.data.note,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    orderHasSettledPayments(order: OrderDetail.Fragment): boolean {\r\n        return !!order.payments?.find(p => p.state === 'Settled');\r\n    }\r\n\r\n    private cancelOrder(order: OrderDetail.Fragment) {\r\n        this.modalService\r\n            .fromComponent(CancelOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.cancelOrder(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.cancelled-order-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    private refundOrder(order: OrderDetail.Fragment) {\r\n        this.modalService\r\n            .fromComponent(RefundOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (!input) {\r\n                        return of(undefined);\r\n                    }\r\n\r\n                    const operations: Array<Observable<RefundOrder.RefundOrder | CancelOrder.CancelOrder>> =\r\n                        [];\r\n                    if (input.refund.lines.length) {\r\n                        operations.push(\r\n                            this.dataService.order\r\n                                .refundOrder(input.refund)\r\n                                .pipe(map(res => res.refundOrder)),\r\n                        );\r\n                    }\r\n                    if (input.cancel.lines?.length) {\r\n                        operations.push(\r\n                            this.dataService.order\r\n                                .cancelOrder(input.cancel)\r\n                                .pipe(map(res => res.cancelOrder)),\r\n                        );\r\n                    }\r\n                    return merge(...operations);\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    switch (result.__typename) {\r\n                        case 'Order':\r\n                            this.refetchOrder(result).subscribe();\r\n                            this.notificationService.success(_('order.cancelled-order-success'));\r\n                            break;\r\n                        case 'Refund':\r\n                            this.refetchOrder(result).subscribe();\r\n                            if (result.state === 'Failed') {\r\n                                this.notificationService.error(_('order.refund-order-failed'));\r\n                            } else {\r\n                                this.notificationService.success(_('order.refund-order-success'));\r\n                            }\r\n                            break;\r\n                        case 'QuantityTooGreatError':\r\n                        case 'MultipleOrderError':\r\n                        case 'OrderStateTransitionError':\r\n                        case 'CancelActiveOrderError':\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'AlreadyRefundedError':\r\n                        case 'NothingToRefundError':\r\n                        case 'PaymentOrderMismatchError':\r\n                        case 'RefundOrderStateError':\r\n                        case 'RefundStateTransitionError':\r\n                            this.notificationService.error(result.message);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private refetchOrder(result: object | undefined): Observable<GetOrderQuery | undefined> {\r\n        this.fetchHistory.next();\r\n        if (result) {\r\n            return this.dataService.order.getOrder(this.id).single$;\r\n        } else {\r\n            return of(undefined);\r\n        }\r\n    }\r\n\r\n    protected setFormValues(entity: Order.Fragment): void {\r\n        // empty\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { CustomFieldConfig, Dialog, ModifyOrderInput, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\nexport enum OrderEditResultType {\r\n    Refund,\r\n    Payment,\r\n    PriceUnchanged,\r\n    Cancel,\r\n}\r\n\r\ninterface OrderEditsRefundResult {\r\n    result: OrderEditResultType.Refund;\r\n    refundPaymentId: string;\r\n    refundNote?: string;\r\n}\r\ninterface OrderEditsPaymentResult {\r\n    result: OrderEditResultType.Payment;\r\n}\r\ninterface OrderEditsPriceUnchangedResult {\r\n    result: OrderEditResultType.PriceUnchanged;\r\n}\r\ninterface OrderEditsCancelResult {\r\n    result: OrderEditResultType.Cancel;\r\n}\r\ntype OrderEditResult =\r\n    | OrderEditsRefundResult\r\n    | OrderEditsPaymentResult\r\n    | OrderEditsPriceUnchangedResult\r\n    | OrderEditsCancelResult;\r\n\r\n@Component({\r\n    selector: 'vdr-order-edits-preview-dialog',\r\n    templateUrl: './order-edits-preview-dialog.component.html',\r\n    styleUrls: ['./order-edits-preview-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditsPreviewDialogComponent implements OnInit, Dialog<OrderEditResult> {\r\n    // Passed in via the modalService\r\n    order: OrderDetail.Fragment;\r\n    originalTotalWithTax: number;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    modifyOrderInput: ModifyOrderInput;\r\n\r\n    selectedPayment?: OrderDetail.Payments;\r\n    refundNote: string;\r\n    resolveWith: (result?: OrderEditResult) => void;\r\n\r\n    get priceDifference(): number {\r\n        return this.order.totalWithTax - this.originalTotalWithTax;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.refundNote = this.modifyOrderInput.note || '';\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith({\r\n            result: OrderEditResultType.Cancel,\r\n        });\r\n    }\r\n\r\n    submit() {\r\n        if (0 < this.priceDifference) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Payment,\r\n            });\r\n        } else if (this.priceDifference < 0) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Refund,\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                refundPaymentId: this.selectedPayment!.id,\r\n                refundNote: this.refundNote,\r\n            });\r\n        } else {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.PriceUnchanged,\r\n            });\r\n        }\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\r\n\r\n<h4 class=\"h4\">\r\n    {{ 'order.modify-order-price-difference' | translate }}:\r\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\r\n</h4>\r\n<div *ngIf=\"priceDifference < 0\">\r\n<clr-select-container>\r\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\r\n        <option\r\n            *ngFor=\"let payment of order.payments\"\r\n            [ngValue]=\"payment\"\r\n        >\r\n            #{{ payment.id }} {{ payment.method }}:\r\n            {{ payment.amount | localeCurrency: order.currencyCode }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\r\n            {{ 'order.cancel-modification' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <table class=\"order-table table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>{{ 'order.product-name' | translate }}</th>\r\n                        <th>{{ 'order.product-sku' | translate }}</th>\r\n                        <th>{{ 'order.unit-price' | translate }}</th>\r\n                        <th>{{ 'order.quantity' | translate }}</th>\r\n                        <th *ngIf=\"orderLineCustomFields.length\">{{ 'common.custom-fields' | translate }}</th>\r\n                        <th>{{ 'order.total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr\r\n                        *ngFor=\"let line of order.lines; let i = index\"\r\n                        class=\"order-line\"\r\n                        [class.is-cancelled]=\"line.quantity === 0\"\r\n                        [class.modified]=\"isLineModified(line)\"\r\n                    >\r\n                        <td class=\"align-middle thumb\">\r\n                            <img\r\n                                *ngIf=\"line.featuredAsset\"\r\n                                [src]=\"line.featuredAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                        <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                        <td class=\"align-middle unit-price\">\r\n                            {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.unitPrice | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"align-middle quantity\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                [value]=\"line.quantity\"\r\n                                (input)=\"updateLineQuantity(line, $event.target.value)\"\r\n                            />\r\n                            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                            <vdr-line-fulfillment\r\n                                [line]=\"line\"\r\n                                [orderState]=\"order.state\"\r\n                            ></vdr-line-fulfillment>\r\n                        </td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\r\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                                <vdr-custom-field-control\r\n                                    [customField]=\"customField\"\r\n                                    [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.get([i])\"\r\n                                    entityName=\"OrderLine\"\r\n                                    [compact]=\"true\"\r\n                                ></vdr-custom-field-control>\r\n                            </ng-container>\r\n                        </td>\r\n                        <td class=\"align-middle total\">\r\n                            {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.linePrice | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr\r\n                        *ngFor=\"let addedLine of addedLines; trackBy: trackByProductVariantId; let i = index\"\r\n                        class=\"modified\"\r\n                    >\r\n                        <td class=\"align-middle thumb\">\r\n                            <img\r\n                                *ngIf=\"addedLine.productAsset\"\r\n                                [src]=\"addedLine.productAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"align-middle name\">{{ addedLine.productVariantName }}</td>\r\n                        <td class=\"align-middle sku\">{{ addedLine.sku }}</td>\r\n                        <td class=\"align-middle unit-price\">\r\n                            {{ addedLine.priceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ addedLine.price | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"align-middle quantity\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                [value]=\"addedLine.quantity\"\r\n                                (input)=\"updateAddedItemQuantity(addedLine, $event.target.value)\"\r\n                            />\r\n                            <button class=\"icon-button\" (click)=\"removeAddedItem(i)\">\r\n                                <clr-icon shape=\"trash\"></clr-icon>\r\n                            </button>\r\n                        </td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\r\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                                <vdr-custom-field-control\r\n                                    [customField]=\"customField\"\r\n                                    [customFieldsFormGroup]=\"addItemCustomFieldsFormArray.get([i])\"\r\n                                    entityName=\"OrderLine\"\r\n                                    [compact]=\"true\"\r\n                                ></vdr-custom-field-control>\r\n                            </ng-container>\r\n                        </td>\r\n                        <td class=\"align-middle total\">\r\n                            {{\r\n                                (addedLine.priceWithTax * addedLine.quantity) / 100\r\n                                    | currency: order.currencyCode\r\n                            }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{\r\n                                    (addedLine.price * addedLine.quantity) / 100\r\n                                        | currency: order.currencyCode\r\n                                }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n                        <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                        <td class=\"align-middle\"></td>\r\n                        <td></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"align-middle total\">\r\n                            {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ surcharge.price | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr\r\n                        class=\"surcharge modified\"\r\n                        *ngFor=\"let surcharge of modifyOrderInput.surcharges; let i = index\"\r\n                    >\r\n                        <td class=\"align-middle name left\" colspan=\"2\">\r\n                            {{ surcharge.description }}\r\n                            <button class=\"icon-button\" (click)=\"removeSurcharge(i)\">\r\n                                <clr-icon shape=\"trash\"></clr-icon>\r\n                            </button>\r\n                        </td>\r\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                        <td class=\"align-middle\"></td>\r\n                        <td></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"align-middle total\">\r\n                            <ng-container *ngIf=\"getSurchargePrices(surcharge) as surchargePrice\">\r\n                                {{ surchargePrice.priceWithTax | localeCurrency: order.currencyCode }}\r\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                    {{ surchargePrice.price | localeCurrency: order.currencyCode }}\r\n                                </div>\r\n                            </ng-container>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"shipping\">\r\n                        <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\r\n                        <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\r\n                        <td colspan=\"3\"></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"clr-align-middle\">\r\n                            {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ order.shipping | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <h4 class=\"mb2\">{{ 'order.modifications' | translate }}</h4>\r\n            <clr-accordion>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.add-item-to-order' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-product-selector class=\"mb4\" (productSelected)=\"addItemSelectedVariant = $event\">\r\n                        </vdr-product-selector>\r\n                        <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb4\">\r\n                            <img\r\n                                *ngIf=\"addItemSelectedVariant.productAsset as asset\"\r\n                                [src]=\"asset | assetPreview: 'tiny'\"\r\n                                class=\"mr4\"\r\n                            />\r\n                            <div>\r\n                                <strong class=\"mr4\">{{ addItemSelectedVariant.productVariantName }}</strong>\r\n                                <small>{{ addItemSelectedVariant.sku }}</small>\r\n                                <div>\r\n                                    {{\r\n                                        getSelectedItemPrice(addItemSelectedVariant)\r\n                                            | localeCurrency: order.currencyCode\r\n                                    }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                            <vdr-custom-field-control\r\n                                [readonly]=\"!addItemSelectedVariant\"\r\n                                [customField]=\"customField\"\r\n                                [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\r\n                                entityName=\"OrderLine\"\r\n                                [compact]=\"true\"\r\n                            ></vdr-custom-field-control>\r\n                        </ng-container>\r\n                        <button\r\n                            class=\"btn btn-secondary\"\r\n                            [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\r\n                            (click)=\"addItemToOrder(addItemSelectedVariant)\"\r\n                        >\r\n                            {{ 'order.add-item-to-order' | translate }}\r\n                        </button>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.set-coupon-codes' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <ng-select\r\n                            [items]=\"availableCouponCodes$ | async\"\r\n                            appendTo=\"body\"\r\n                            bindLabel=\"code\"\r\n                            bindValue=\"code\"\r\n                            [addTag]=\"false\"\r\n                            [multiple]=\"true\"\r\n                            [hideSelected]=\"true\"\r\n                            [minTermLength]=\"2\"\r\n                            typeToSearchText=\"\"\r\n                            [typeahead]=\"couponCodeInput$\"\r\n                            [formControl]=\"couponCodesControl\"\r\n                        >\r\n                            <ng-template ng-option-tmp let-item=\"item\">\r\n                                <vdr-chip>{{ item.code }}</vdr-chip> {{ item.promotionName }}\r\n                            </ng-template>\r\n                        </ng-select>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.add-surcharge' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\r\n                            <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\r\n                                ><input id=\"description\" type=\"text\" formControlName=\"description\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\r\n                                ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\"\r\n                                ><vdr-currency-input\r\n                                    [currencyCode]=\"order.currencyCode\"\r\n                                    id=\"price\"\r\n                                    formControlName=\"price\"\r\n                                ></vdr-currency-input\r\n                            ></vdr-form-field>\r\n                            <vdr-form-field\r\n                                [label]=\"\r\n                                    'catalog.price-includes-tax-at'\r\n                                        | translate: { rate: surchargeForm.get('taxRate')?.value }\r\n                                \"\r\n                                for=\"priceIncludesTax\"\r\n                                ><input\r\n                                    id=\"priceIncludesTax\"\r\n                                    type=\"checkbox\"\r\n                                    clrCheckbox\r\n                                    formControlName=\"priceIncludesTax\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\"\r\n                                ><vdr-affixed-input suffix=\"%\"\r\n                                    ><input\r\n                                        id=\"taxRate\"\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        max=\"100\"\r\n                                        formControlName=\"taxRate\" /></vdr-affixed-input\r\n                            ></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\r\n                                ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\r\n                            /></vdr-form-field>\r\n                            <button\r\n                                class=\"btn btn-secondary\"\r\n                                [disabled]=\"\r\n                                    surchargeForm.invalid ||\r\n                                    surchargeForm.pristine ||\r\n                                    surchargeForm.get('price')?.value === 0\r\n                                \"\r\n                            >\r\n                                {{ 'order.add-surcharge' | translate }}\r\n                            </button>\r\n                        </form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.edit-shipping-address' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-address-form\r\n                            [formGroup]=\"shippingAddressForm\"\r\n                            [availableCountries]=\"availableCountries$ | async\"\r\n                            [customFields]=\"addressCustomFields\"\r\n                        ></vdr-address-form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.edit-billing-address' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-address-form\r\n                            [formGroup]=\"billingAddressForm\"\r\n                            [availableCountries]=\"availableCountries$ | async\"\r\n                            [customFields]=\"addressCustomFields\"\r\n                        ></vdr-address-form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n            </clr-accordion>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.modification-summary' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <ul>\r\n                        <li *ngIf=\"modifyOrderInput.addItems?.length\">\r\n                            {{\r\n                                'order.modification-adding-items'\r\n                                    | translate: { count: modifyOrderInput.addItems?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"modifyOrderInput.adjustOrderLines?.length\">\r\n                            {{\r\n                                'order.modification-adjusting-lines'\r\n                                    | translate: { count: modifyOrderInput.adjustOrderLines?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"modifyOrderInput.surcharges?.length\">\r\n                            {{\r\n                                'order.modification-adding-surcharges'\r\n                                    | translate: { count: modifyOrderInput.surcharges?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"shippingAddressForm.dirty\">\r\n                            {{ 'order.modification-updating-shipping-address' | translate }}\r\n                        </li>\r\n                        <li *ngIf=\"billingAddressForm.dirty\">\r\n                            {{ 'order.modification-updating-billing-address' | translate }}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <label class=\"clr-control-label\">{{ 'order.note' | translate }}</label>\r\n                    <textarea [(ngModel)]=\"note\" name=\"note\" clrTextarea required></textarea>\r\n                    <clr-checkbox-wrapper class=\"\">\r\n                        <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"recalculateShipping\" />\r\n                        <label>{{ 'order.modification-recalculate-shipping' | translate }}</label>\r\n                    </clr-checkbox-wrapper>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                    <button\r\n                        class=\"btn btn-primary\"\r\n                        [disabled]=\"!canPreviewChanges()\"\r\n                        (click)=\"previewAndModify(order)\"\r\n                    >\r\n                        {{ 'order.preview-changes' | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    AddItemInput,\r\n    AdjustOrderLineInput,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    ErrorResult,\r\n    GetAvailableCountries,\r\n    HistoryEntryType,\r\n    LanguageCode,\r\n    ModalService,\r\n    ModifyOrderInput,\r\n    NotificationService,\r\n    OrderAddressFragment,\r\n    OrderDetail,\r\n    ProductSelectorSearch,\r\n    ServerConfigService,\r\n    SortOrder,\r\n    SurchargeInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { concat, EMPTY, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    distinctUntilChanged,\r\n    map,\r\n    mapTo,\r\n    shareReplay,\r\n    startWith,\r\n    switchMap,\r\n    takeUntil,\r\n} from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport {\r\n    OrderEditResultType,\r\n    OrderEditsPreviewDialogComponent,\r\n} from '../order-edits-preview-dialog/order-edits-preview-dialog.component';\r\n\r\ninterface AddedLine {\r\n    productVariantId: string;\r\n    productAsset?: ProductSelectorSearch.ProductAsset | null;\r\n    productVariantName: string;\r\n    sku: string;\r\n    priceWithTax: number;\r\n    price: number;\r\n    quantity: number;\r\n}\r\n\r\ntype ModifyOrderData = Omit<ModifyOrderInput, 'addItems' | 'adjustOrderLines'> & {\r\n    addItems: Array<AddItemInput & { customFields?: any }>;\r\n    adjustOrderLines: Array<AdjustOrderLineInput & { customFields?: any }>;\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-order-editor',\r\n    templateUrl: './order-editor.component.html',\r\n    styleUrls: ['./order-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditorComponent\r\n    extends BaseDetailComponent<OrderDetail.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    availableCouponCodes$: Observable<Array<{ code: string; promotionName: string }>>;\r\n    couponCodeInput$ = new Subject<string>();\r\n    addressCustomFields: CustomFieldConfig[];\r\n    detailForm = new FormGroup({});\r\n    couponCodesControl = new FormControl();\r\n    orderLineCustomFieldsFormArray: FormArray;\r\n    addItemCustomFieldsFormArray: FormArray;\r\n    addItemCustomFieldsForm: FormGroup;\r\n    addItemSelectedVariant: ProductSelectorSearch.Items | undefined;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    modifyOrderInput: ModifyOrderData = {\r\n        dryRun: true,\r\n        orderId: '',\r\n        addItems: [],\r\n        adjustOrderLines: [],\r\n        surcharges: [],\r\n        note: '',\r\n        updateShippingAddress: {},\r\n        updateBillingAddress: {},\r\n    };\r\n    surchargeForm: FormGroup;\r\n    shippingAddressForm: FormGroup;\r\n    billingAddressForm: FormGroup;\r\n    note = '';\r\n    recalculateShipping = true;\r\n    previousState: string;\r\n    private addedVariants = new Map<string, ProductSelectorSearch.Items>();\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n    }\r\n\r\n    get addedLines(): AddedLine[] {\r\n        const getSinglePriceValue = (price: ProductSelectorSearch.Price) =>\r\n            price.__typename === 'SinglePrice' ? price.value : 0;\r\n        return (this.modifyOrderInput.addItems || [])\r\n            .map(row => {\r\n                const variantInfo = this.addedVariants.get(row.productVariantId);\r\n                if (variantInfo) {\r\n                    return {\r\n                        ...variantInfo,\r\n                        price: getSinglePriceValue(variantInfo.price),\r\n                        priceWithTax: getSinglePriceValue(variantInfo.priceWithTax),\r\n                        quantity: row.quantity,\r\n                    };\r\n                }\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.dataService.promotion.getPromotions();\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id') as string;\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.entity$.pipe(takeUntil(this.destroy$)).subscribe(order => {\r\n            if (order.couponCodes.length) {\r\n                this.couponCodesControl.setValue(order.couponCodes);\r\n            }\r\n            this.surchargeForm = new FormGroup({\r\n                description: new FormControl('', Validators.required),\r\n                sku: new FormControl(''),\r\n                price: new FormControl(0, Validators.required),\r\n                priceIncludesTax: new FormControl(true),\r\n                taxRate: new FormControl(0),\r\n                taxDescription: new FormControl(''),\r\n            });\r\n            if (!this.shippingAddressForm) {\r\n                this.shippingAddressForm = new FormGroup({\r\n                    fullName: new FormControl(order.shippingAddress?.fullName),\r\n                    company: new FormControl(order.shippingAddress?.company),\r\n                    streetLine1: new FormControl(order.shippingAddress?.streetLine1),\r\n                    streetLine2: new FormControl(order.shippingAddress?.streetLine2),\r\n                    city: new FormControl(order.shippingAddress?.city),\r\n                    province: new FormControl(order.shippingAddress?.province),\r\n                    postalCode: new FormControl(order.shippingAddress?.postalCode),\r\n                    countryCode: new FormControl(order.shippingAddress?.countryCode),\r\n                    phoneNumber: new FormControl(order.shippingAddress?.phoneNumber),\r\n                });\r\n                this.addAddressCustomFieldsFormGroup(this.shippingAddressForm, order.shippingAddress);\r\n            }\r\n            if (!this.billingAddressForm) {\r\n                this.billingAddressForm = new FormGroup({\r\n                    fullName: new FormControl(order.billingAddress?.fullName),\r\n                    company: new FormControl(order.billingAddress?.company),\r\n                    streetLine1: new FormControl(order.billingAddress?.streetLine1),\r\n                    streetLine2: new FormControl(order.billingAddress?.streetLine2),\r\n                    city: new FormControl(order.billingAddress?.city),\r\n                    province: new FormControl(order.billingAddress?.province),\r\n                    postalCode: new FormControl(order.billingAddress?.postalCode),\r\n                    countryCode: new FormControl(order.billingAddress?.countryCode),\r\n                    phoneNumber: new FormControl(order.billingAddress?.phoneNumber),\r\n                });\r\n                this.addAddressCustomFieldsFormGroup(this.billingAddressForm, order.billingAddress);\r\n            }\r\n            this.orderLineCustomFieldsFormArray = new FormArray([]);\r\n            for (const line of order.lines) {\r\n                const formGroup = new FormGroup({});\r\n                for (const { name } of this.orderLineCustomFields) {\r\n                    formGroup.addControl(name, new FormControl((line as any).customFields[name]));\r\n                }\r\n                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(\r\n                        l => l.orderLineId === line.id,\r\n                    );\r\n                    if (!modifyRow) {\r\n                        modifyRow = {\r\n                            orderLineId: line.id,\r\n                            quantity: line.quantity,\r\n                        };\r\n                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);\r\n                    }\r\n                    if (this.orderLineCustomFields.length) {\r\n                        modifyRow.customFields = value;\r\n                    }\r\n                });\r\n                this.orderLineCustomFieldsFormArray.push(formGroup);\r\n            }\r\n        });\r\n        this.availableCouponCodes$ = concat(\r\n            this.couponCodeInput$.pipe(\r\n                distinctUntilChanged(),\r\n                switchMap(\r\n                    term =>\r\n                        this.dataService.promotion.getPromotions(10, 0, {\r\n                            couponCode: { contains: term },\r\n                        }).single$,\r\n                ),\r\n                map(({ promotions }) =>\r\n                    // tslint:disable-next-line:no-non-null-assertion\r\n                    promotions.items.map(p => ({ code: p.couponCode!, promotionName: p.name })),\r\n                ),\r\n                startWith([]),\r\n            ),\r\n        );\r\n        this.addItemCustomFieldsFormArray = new FormArray([]);\r\n        this.addItemCustomFieldsForm = new FormGroup({});\r\n        for (const customField of this.orderLineCustomFields) {\r\n            this.addItemCustomFieldsForm.addControl(customField.name, new FormControl());\r\n        }\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n        this.dataService.order\r\n            .getOrderHistory(this.id, {\r\n                take: 1,\r\n                sort: {\r\n                    createdAt: SortOrder.DESC,\r\n                },\r\n                filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },\r\n            })\r\n            .single$.subscribe(({ order }) => {\r\n                this.previousState = order?.history.items[0].data.from;\r\n            });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    transitionToPriorState(order: OrderDetail.Fragment) {\r\n        this.orderTransitionService\r\n            .transitionToPreModifyingState(order.id, order.nextStates)\r\n            .subscribe(result => {\r\n                this.router.navigate(['..'], { relativeTo: this.route });\r\n            });\r\n    }\r\n\r\n    canPreviewChanges(): boolean {\r\n        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;\r\n        return (\r\n            !!addItems?.length ||\r\n            !!surcharges?.length ||\r\n            !!adjustOrderLines?.length ||\r\n            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||\r\n            (this.billingAddressForm.dirty && this.billingAddressForm.valid) ||\r\n            this.couponCodesControl.dirty\r\n        );\r\n    }\r\n\r\n    isLineModified(line: OrderDetail.Lines): boolean {\r\n        return !!this.modifyOrderInput.adjustOrderLines?.find(\r\n            l => l.orderLineId === line.id && l.quantity !== line.quantity,\r\n        );\r\n    }\r\n\r\n    updateLineQuantity(line: OrderDetail.Lines, quantity: string) {\r\n        const { adjustOrderLines } = this.modifyOrderInput;\r\n        let row = adjustOrderLines?.find(l => l.orderLineId === line.id);\r\n        if (row && +quantity === line.quantity) {\r\n            // Remove the modification if the quantity is the same as\r\n            // the original order\r\n            adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);\r\n        }\r\n        if (!row) {\r\n            row = { orderLineId: line.id, quantity: +quantity };\r\n            adjustOrderLines?.push(row);\r\n        }\r\n        row.quantity = +quantity;\r\n    }\r\n\r\n    updateAddedItemQuantity(item: AddedLine, quantity: string) {\r\n        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariantId);\r\n        if (row) {\r\n            row.quantity = +quantity;\r\n        }\r\n    }\r\n\r\n    trackByProductVariantId(index: number, item: AddedLine) {\r\n        return item.productVariantId;\r\n    }\r\n\r\n    getSelectedItemPrice(result: ProductSelectorSearch.Items | undefined): number {\r\n        switch (result?.priceWithTax.__typename) {\r\n            case 'SinglePrice':\r\n                return result.priceWithTax.value;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    addItemToOrder(result: ProductSelectorSearch.Items | undefined) {\r\n        if (!result) {\r\n            return;\r\n        }\r\n        const customFields = this.orderLineCustomFields.length\r\n            ? this.addItemCustomFieldsForm.value\r\n            : undefined;\r\n        let row = this.modifyOrderInput.addItems?.find(l =>\r\n            this.isMatchingAddItemRow(l, result, customFields),\r\n        );\r\n        if (!row) {\r\n            row = { productVariantId: result.productVariantId, quantity: 1 };\r\n            if (customFields) {\r\n                row.customFields = customFields;\r\n            }\r\n            this.modifyOrderInput.addItems?.push(row);\r\n        } else {\r\n            row.quantity++;\r\n        }\r\n        if (customFields) {\r\n            const formGroup = new FormGroup({});\r\n            for (const [key, value] of Object.entries(customFields)) {\r\n                formGroup.addControl(key, new FormControl(value));\r\n            }\r\n            this.addItemCustomFieldsFormArray.push(formGroup);\r\n            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                if (row) {\r\n                    row.customFields = value;\r\n                }\r\n            });\r\n        }\r\n        this.addItemCustomFieldsForm.reset({});\r\n        this.addItemSelectedVariant = undefined;\r\n        this.addedVariants.set(result.productVariantId, result);\r\n    }\r\n\r\n    private isMatchingAddItemRow(\r\n        row: ModifyOrderData['addItems'][number],\r\n        result: ProductSelectorSearch.Items,\r\n        customFields: any,\r\n    ): boolean {\r\n        return (\r\n            row.productVariantId === result.productVariantId &&\r\n            JSON.stringify(row.customFields) === JSON.stringify(customFields)\r\n        );\r\n    }\r\n\r\n    removeAddedItem(index: number) {\r\n        this.modifyOrderInput.addItems.splice(index, 1);\r\n        if (-1 < index) {\r\n            this.addItemCustomFieldsFormArray.removeAt(index);\r\n        }\r\n    }\r\n\r\n    getSurchargePrices(surcharge: SurchargeInput) {\r\n        const priceWithTax = surcharge.priceIncludesTax\r\n            ? surcharge.price\r\n            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));\r\n        const price = surcharge.priceIncludesTax\r\n            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))\r\n            : surcharge.price;\r\n        return {\r\n            price,\r\n            priceWithTax,\r\n        };\r\n    }\r\n\r\n    addSurcharge(value: any) {\r\n        this.modifyOrderInput.surcharges?.push(value);\r\n        this.surchargeForm.reset({\r\n            price: 0,\r\n            priceIncludesTax: true,\r\n            taxRate: 0,\r\n        });\r\n    }\r\n\r\n    removeSurcharge(index: number) {\r\n        this.modifyOrderInput.surcharges?.splice(index, 1);\r\n    }\r\n\r\n    previewAndModify(order: OrderDetail.Fragment) {\r\n        const input: ModifyOrderInput = {\r\n            ...this.modifyOrderInput,\r\n            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),\r\n            ...(this.shippingAddressForm.dirty\r\n                ? { updateShippingAddress: this.shippingAddressForm.value }\r\n                : {}),\r\n            dryRun: true,\r\n            couponCodes: this.couponCodesControl.dirty ? this.couponCodesControl.value : undefined,\r\n            note: this.note ?? '',\r\n            options: {\r\n                recalculateShipping: this.recalculateShipping,\r\n            },\r\n        };\r\n        const originalTotalWithTax = order.totalWithTax;\r\n        this.dataService.order\r\n            .modifyOrder(input)\r\n            .pipe(\r\n                switchMap(({ modifyOrder }) => {\r\n                    switch (modifyOrder.__typename) {\r\n                        case 'Order':\r\n                            return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {\r\n                                size: 'xl',\r\n                                closable: false,\r\n                                locals: {\r\n                                    originalTotalWithTax,\r\n                                    order: modifyOrder,\r\n                                    orderLineCustomFields: this.orderLineCustomFields,\r\n                                    modifyOrderInput: input,\r\n                                },\r\n                            });\r\n                        case 'InsufficientStockError':\r\n                        case 'NegativeQuantityError':\r\n                        case 'NoChangesSpecifiedError':\r\n                        case 'OrderLimitError':\r\n                        case 'OrderModificationStateError':\r\n                        case 'PaymentMethodMissingError':\r\n                        case 'RefundPaymentIdMissingError':\r\n                        case 'CouponCodeLimitError':\r\n                        case 'CouponCodeExpiredError':\r\n                        case 'CouponCodeInvalidError': {\r\n                            this.notificationService.error(modifyOrder.message);\r\n                            return of(false as const);\r\n                        }\r\n                        case null:\r\n                        case undefined:\r\n                            return of(false as const);\r\n                        default:\r\n                            assertNever(modifyOrder);\r\n                    }\r\n                }),\r\n                switchMap(result => {\r\n                    if (!result || result.result === OrderEditResultType.Cancel) {\r\n                        // re-fetch so that the preview values get overwritten in the cache.\r\n                        return this.dataService.order.getOrder(this.id).mapSingle(() => false);\r\n                    } else {\r\n                        // Do the modification\r\n                        const wetRunInput = {\r\n                            ...input,\r\n                            dryRun: false,\r\n                        };\r\n                        if (result.result === OrderEditResultType.Refund) {\r\n                            wetRunInput.refund = {\r\n                                paymentId: result.refundPaymentId,\r\n                                reason: result.refundNote,\r\n                            };\r\n                        }\r\n                        return this.dataService.order.modifyOrder(wetRunInput).pipe(\r\n                            switchMap(({ modifyOrder }) => {\r\n                                if (modifyOrder.__typename === 'Order') {\r\n                                    const priceDelta = modifyOrder.totalWithTax - originalTotalWithTax;\r\n                                    const nextState =\r\n                                        0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;\r\n\r\n                                    return this.dataService.order\r\n                                        .transitionToState(order.id, nextState)\r\n                                        .pipe(mapTo(true));\r\n                                } else {\r\n                                    this.notificationService.error((modifyOrder as ErrorResult).message);\r\n                                    return EMPTY;\r\n                                }\r\n                            }),\r\n                        );\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.router.navigate(['../'], { relativeTo: this.route });\r\n                }\r\n            });\r\n    }\r\n\r\n    private addAddressCustomFieldsFormGroup(\r\n        parentFormGroup: FormGroup,\r\n        address?: OrderAddressFragment | null,\r\n    ) {\r\n        if (address && this.addressCustomFields.length) {\r\n            const addressCustomFieldsFormGroup = new FormGroup({});\r\n            for (const customFieldDef of this.addressCustomFields) {\r\n                const name = customFieldDef.name;\r\n                const value = (address as any).customFields?.[name];\r\n                addressCustomFieldsFormGroup.addControl(name, new FormControl(value));\r\n            }\r\n            parentFormGroup.addControl('customFields', addressCustomFieldsFormGroup);\r\n        }\r\n    }\r\n\r\n    protected setFormValues(entity: OrderDetail.Fragment, languageCode: LanguageCode): void {\r\n        /* not used */\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"search-form\">\r\n            <div class=\"btn-group btn-outline-primary\" *ngIf=\"activePreset$ | async as activePreset\">\r\n                <button\r\n                    class=\"btn\"\r\n                    *ngFor=\"let preset of filterPresets\"\r\n                    [class.btn-primary]=\"activePreset === preset.name\"\r\n                    (click)=\"selectFilterPreset(preset.name)\"\r\n                >\r\n                    {{ preset.label | translate }}\r\n                </button>\r\n                <button\r\n                    class=\"btn\"\r\n                    [class.btn-primary]=\"activePreset === 'custom'\"\r\n                    (click)=\"selectFilterPreset('custom')\"\r\n                >\r\n                    {{ 'order.filter-custom' | translate }}\r\n                    <clr-icon shape=\"angle down\"></clr-icon>\r\n                </button>\r\n            </div>\r\n\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"searchOrderCodeControl\"\r\n                [placeholder]=\"'order.search-by-order-code' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"searchLastNameControl\"\r\n                [placeholder]=\"'order.search-by-customer-last-name' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n        </div>\r\n        <div class=\"custom-filters\" [class.expanded]=\"(activePreset$ | async) === 'custom'\">\r\n            <form [formGroup]=\"customFilterForm\">\r\n                <div class=\"flex align-center\">\r\n                    <ng-select\r\n                        [items]=\"orderStates\"\r\n                        appendTo=\"body\"\r\n                        [addTag]=\"false\"\r\n                        [multiple]=\"true\"\r\n                        formControlName=\"states\"\r\n                        [placeholder]=\"'state.all-orders' | translate\"\r\n                        [clearable]=\"true\"\r\n                        [searchable]=\"false\"\r\n                    >\r\n                        <ng-template ng-option-tmp let-item=\"item\">{{ item | stateI18nToken | translate }}</ng-template>\r\n                        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                            <span class=\"ng-value-label\"> {{ item | stateI18nToken | translate }}</span>\r\n                            <span class=\"ng-value-icon right\" (click)=\"clear(item)\" aria-hidden=\"true\">×</span>\r\n                        </ng-template>\r\n                    </ng-select>\r\n                    <button\r\n                        class=\"btn btn-secondary\"\r\n                        [disabled]=\"customFilterForm.pristine\"\r\n                        (click)=\"applyCustomFilters()\"\r\n                    >\r\n                        {{ 'order.apply-filters' | translate }}\r\n                        <clr-icon shape=\"filter\"></clr-icon>\r\n                    </button>\r\n                </div>\r\n                <div class=\"flex\">\r\n                    <div>\r\n                        <label>{{ 'order.placed-at-start' | translate }}</label>\r\n                        <vdr-datetime-picker formControlName=\"placedAtStart\"></vdr-datetime-picker>\r\n                    </div>\r\n                    <div>\r\n                        <label>{{ 'order.placed-at-end' | translate }}</label>\r\n                        <vdr-datetime-picker formControlName=\"placedAtEnd\"></vdr-datetime-picker>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-list\"></vdr-action-bar-items>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.customer' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.placed-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.shipping' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-order=\"item\">\r\n        <td class=\"left align-middle\">{{ order.code }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </td>\r\n        <td class=\"left align-middle\">{{ order.total | localeCurrency: order.currencyCode }}</td>\r\n        <td class=\"left align-middle\">{{ order.updatedAt | timeAgo }}</td>\r\n        <td class=\"left align-middle\">{{ order.orderPlacedAt | localeDate: 'medium' }}</td>\r\n        <td class=\"left align-middle\">{{ getShippingNames(order) }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"shopping-cart\"\r\n                [label]=\"'common.open' | translate\"\r\n                [linkTo]=\"order.state === 'Modifying' ? ['./', order.id, 'modify'] : ['./', order.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetOrderList,\r\n    LocalStorageService,\r\n    OrderListOptions,\r\n    ServerConfigService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { Order } from '@vendure/common/lib/generated-types';\r\nimport { merge, Observable } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, map, skip, takeUntil, tap } from 'rxjs/operators';\r\n\r\ninterface OrderFilterConfig {\r\n    active?: boolean;\r\n    states?: string[];\r\n}\r\n\r\ninterface FilterPreset {\r\n    name: string;\r\n    label: string;\r\n    config: OrderFilterConfig;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-order-list',\r\n    templateUrl: './order-list.component.html',\r\n    styleUrls: ['./order-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderListComponent\r\n    extends BaseListComponent<GetOrderList.Query, GetOrderList.Items>\r\n    implements OnInit {\r\n    searchOrderCodeControl = new FormControl('');\r\n    searchLastNameControl = new FormControl('');\r\n    customFilterForm: FormGroup;\r\n    orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);\r\n    filterPresets: FilterPreset[] = [\r\n        {\r\n            name: 'open',\r\n            label: _('order.filter-preset-open'),\r\n            config: {\r\n                active: false,\r\n                states: this.orderStates.filter(\r\n                    s => s !== 'Delivered' && s !== 'Cancelled' && s !== 'Shipped',\r\n                ),\r\n            },\r\n        },\r\n        {\r\n            name: 'shipped',\r\n            label: _('order.filter-preset-shipped'),\r\n            config: {\r\n                active: false,\r\n                states: ['Shipped'],\r\n            },\r\n        },\r\n        {\r\n            name: 'completed',\r\n            label: _('order.filter-preset-completed'),\r\n            config: {\r\n                active: false,\r\n                states: ['Delivered', 'Cancelled'],\r\n            },\r\n        },\r\n        {\r\n            name: 'active',\r\n            label: _('order.filter-preset-active'),\r\n            config: {\r\n                active: true,\r\n            },\r\n        },\r\n    ];\r\n    activePreset$: Observable<string>;\r\n\r\n    constructor(\r\n        private serverConfigService: ServerConfigService,\r\n        private dataService: DataService,\r\n        private localStorageService: LocalStorageService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (take, skip) => this.dataService.order.getOrders({ take, skip }).refetchOnChannelChange(),\r\n            data => data.orders,\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (skip, take) =>\r\n                this.createQueryOptions(\r\n                    skip,\r\n                    take,\r\n                    this.searchOrderCodeControl.value,\r\n                    this.searchLastNameControl.value,\r\n                    this.route.snapshot.queryParamMap.get('filter') || 'open',\r\n                ),\r\n        );\r\n        const lastFilters = this.localStorageService.get('orderListLastCustomFilters');\r\n        if (lastFilters) {\r\n            this.setQueryParam(lastFilters, { replaceUrl: true });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.activePreset$ = this.route.queryParamMap.pipe(\r\n            map(qpm => qpm.get('filter') || 'open'),\r\n            distinctUntilChanged(),\r\n        );\r\n        const searchTerms$ = merge(\r\n            this.searchOrderCodeControl.valueChanges,\r\n            this.searchLastNameControl.valueChanges,\r\n        ).pipe(\r\n            filter(value => 2 < value.length || value.length === 0),\r\n            debounceTime(250),\r\n        );\r\n        merge(searchTerms$, this.route.queryParamMap)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(val => {\r\n                this.refresh();\r\n            });\r\n\r\n        const queryParamMap = this.route.snapshot.queryParamMap;\r\n        this.customFilterForm = new FormGroup({\r\n            states: new FormControl(queryParamMap.getAll('states') ?? []),\r\n            placedAtStart: new FormControl(queryParamMap.get('placedAtStart')),\r\n            placedAtEnd: new FormControl(queryParamMap.get('placedAtEnd')),\r\n        });\r\n    }\r\n\r\n    selectFilterPreset(presetName: string) {\r\n        const lastCustomFilters = this.localStorageService.get('orderListLastCustomFilters') ?? {};\r\n        const emptyCustomFilters = { states: undefined, placedAtStart: undefined, placedAtEnd: undefined };\r\n        const filters = presetName === 'custom' ? lastCustomFilters : emptyCustomFilters;\r\n        this.setQueryParam(\r\n            {\r\n                filter: presetName,\r\n                page: 1,\r\n                ...filters,\r\n            },\r\n            { replaceUrl: true },\r\n        );\r\n    }\r\n\r\n    applyCustomFilters() {\r\n        const formValue = this.customFilterForm.value;\r\n        const customFilters = {\r\n            states: formValue.states,\r\n            placedAtStart: formValue.placedAtStart,\r\n            placedAtEnd: formValue.placedAtEnd,\r\n        };\r\n        this.setQueryParam({\r\n            filter: 'custom',\r\n            ...customFilters,\r\n        });\r\n        this.customFilterForm.markAsPristine();\r\n        this.localStorageService.set('orderListLastCustomFilters', customFilters);\r\n    }\r\n\r\n    private createQueryOptions(\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        skip: number,\r\n        take: number,\r\n        orderCodeSearchTerm: string,\r\n        customerNameSearchTerm: string,\r\n        activeFilterPreset?: string,\r\n    ): { options: OrderListOptions } {\r\n        const filterConfig = this.filterPresets.find(p => p.name === activeFilterPreset);\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        const filter: any = {};\r\n        if (filterConfig) {\r\n            if (filterConfig.config.active != null) {\r\n                filter.active = {\r\n                    eq: filterConfig.config.active,\r\n                };\r\n            }\r\n            if (filterConfig.config.states) {\r\n                filter.state = {\r\n                    in: filterConfig.config.states,\r\n                };\r\n            }\r\n        } else if (activeFilterPreset === 'custom') {\r\n            const queryParams = this.route.snapshot.queryParamMap;\r\n            const states = queryParams.getAll('states') ?? [];\r\n            const placedAtStart = queryParams.get('placedAtStart');\r\n            const placedAtEnd = queryParams.get('placedAtEnd');\r\n            if (states.length) {\r\n                filter.state = {\r\n                    in: states,\r\n                };\r\n            }\r\n            if (placedAtStart && placedAtEnd) {\r\n                filter.orderPlacedAt = {\r\n                    between: {\r\n                        start: placedAtStart,\r\n                        end: placedAtEnd,\r\n                    },\r\n                };\r\n            } else if (placedAtStart) {\r\n                filter.orderPlacedAt = {\r\n                    after: placedAtStart,\r\n                };\r\n            } else if (placedAtEnd) {\r\n                filter.orderPlacedAt = {\r\n                    before: placedAtEnd,\r\n                };\r\n            }\r\n        }\r\n        if (customerNameSearchTerm) {\r\n            filter.customerLastName = {\r\n                contains: customerNameSearchTerm,\r\n            };\r\n        }\r\n        if (orderCodeSearchTerm) {\r\n            filter.code = {\r\n                contains: orderCodeSearchTerm,\r\n            };\r\n        }\r\n        return {\r\n            options: {\r\n                skip,\r\n                take,\r\n                filter: {\r\n                    ...(filter ?? {}),\r\n                },\r\n                sort: {\r\n                    updatedAt: SortOrder.DESC,\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    getShippingNames(order: Order) {\r\n        if (order.shippingLines.length) {\r\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrderResolver extends BaseEntityResolver<OrderDetail.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Order',\r\n                id: '',\r\n                code: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                total: 0,\r\n            } as any,\r\n            id => dataService.order.getOrder(id).mapStream(data => data.order),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BreadcrumbLabelLinkPair,\r\n    CanDeactivateDetailGuard,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    OrderDetail,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\r\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\nimport { OrderResolver } from './providers/routing/order-resolver';\r\n\r\nexport const orderRoutes: Route[] = [\r\n    {\r\n        path: '',\r\n        component: OrderListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.orders'),\r\n        },\r\n    },\r\n    {\r\n        path: ':id',\r\n        component: OrderDetailComponent,\r\n        resolve: createResolveData(OrderResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: orderBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: ':id/modify',\r\n        component: OrderEditorComponent,\r\n        resolve: createResolveData(OrderResolver),\r\n        // canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: modifyingOrderBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function orderBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<OrderDetail.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.orders',\r\n        getName: order => order.code,\r\n        route: '',\r\n    });\r\n}\r\n\r\nexport function modifyingOrderBreadcrumb(data: any, params: any) {\r\n    return orderBreadcrumb(data, params).pipe(\r\n        map((breadcrumbs: BreadcrumbLabelLinkPair[]) => {\r\n            const modifiedBreadcrumbs = breadcrumbs.slice();\r\n            modifiedBreadcrumbs[0].link[0] = '../';\r\n            modifiedBreadcrumbs[1].link[0] = '../orders';\r\n            return modifiedBreadcrumbs.concat({ label: _('breadcrumb.modifying'), link: [''] });\r\n        }) as any,\r\n    );\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddManualPaymentDialogComponent } from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\nimport { CancelOrderDialogComponent } from './components/cancel-order-dialog/cancel-order-dialog.component';\nimport { FulfillOrderDialogComponent } from './components/fulfill-order-dialog/fulfill-order-dialog.component';\nimport { FulfillmentCardComponent } from './components/fulfillment-card/fulfillment-card.component';\nimport { FulfillmentDetailComponent } from './components/fulfillment-detail/fulfillment-detail.component';\nimport { FulfillmentStateLabelComponent } from './components/fulfillment-state-label/fulfillment-state-label.component';\nimport { LineFulfillmentComponent } from './components/line-fulfillment/line-fulfillment.component';\nimport { LineRefundsComponent } from './components/line-refunds/line-refunds.component';\nimport { ModificationDetailComponent } from './components/modification-detail/modification-detail.component';\nimport { OrderCustomFieldsCardComponent } from './components/order-custom-fields-card/order-custom-fields-card.component';\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\nimport { OrderEditsPreviewDialogComponent } from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\nimport { OrderListComponent } from './components/order-list/order-list.component';\nimport { OrderPaymentCardComponent } from './components/order-payment-card/order-payment-card.component';\nimport { OrderProcessGraphDialogComponent } from './components/order-process-graph-dialog/order-process-graph-dialog.component';\nimport { OrderProcessEdgeComponent } from './components/order-process-graph/order-process-edge.component';\nimport { OrderProcessGraphComponent } from './components/order-process-graph/order-process-graph.component';\nimport { OrderProcessNodeComponent } from './components/order-process-graph/order-process-node.component';\nimport { OrderStateSelectDialogComponent } from './components/order-state-select-dialog/order-state-select-dialog.component';\nimport { OrderTableComponent } from './components/order-table/order-table.component';\nimport { PaymentDetailComponent } from './components/payment-detail/payment-detail.component';\nimport { PaymentStateLabelComponent } from './components/payment-state-label/payment-state-label.component';\nimport { RefundOrderDialogComponent } from './components/refund-order-dialog/refund-order-dialog.component';\nimport { RefundStateLabelComponent } from './components/refund-state-label/refund-state-label.component';\nimport { SettleRefundDialogComponent } from './components/settle-refund-dialog/settle-refund-dialog.component';\nimport { SimpleItemListComponent } from './components/simple-item-list/simple-item-list.component';\nimport { orderRoutes } from './order.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(orderRoutes)],\n    declarations: [\n        OrderListComponent,\n        OrderDetailComponent,\n        FulfillOrderDialogComponent,\n        LineFulfillmentComponent,\n        RefundOrderDialogComponent,\n        CancelOrderDialogComponent,\n        PaymentStateLabelComponent,\n        LineRefundsComponent,\n        OrderPaymentCardComponent,\n        RefundStateLabelComponent,\n        SettleRefundDialogComponent,\n        OrderHistoryComponent,\n        FulfillmentDetailComponent,\n        PaymentDetailComponent,\n        SimpleItemListComponent,\n        OrderCustomFieldsCardComponent,\n        OrderProcessGraphComponent,\n        OrderProcessNodeComponent,\n        OrderProcessEdgeComponent,\n        OrderProcessGraphDialogComponent,\n        FulfillmentStateLabelComponent,\n        FulfillmentCardComponent,\n        OrderEditorComponent,\n        OrderTableComponent,\n        OrderEditsPreviewDialogComponent,\n        ModificationDetailComponent,\n        AddManualPaymentDialogComponent,\n        OrderStateSelectDialogComponent,\n    ],\n})\nexport class OrderModule {}\n"]}