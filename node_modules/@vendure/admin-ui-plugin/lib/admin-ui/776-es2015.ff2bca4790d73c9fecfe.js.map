{"version":3,"mappings":"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","names":["e","constructor","o","t","this","c","M","V","r","selectedMemberIds","indexOf","id","ngOnInit","membersCurrentPage$","route","paramMap","pipe","get","p","membersItemsPerPage$","W","filterTermControl","valueChanges","ae","setContentsPageNumber","Q","X","refresh$","ce","destroy$","subscribe","n","a","l","fetchParamsChange","emit","filterTerm","skip","take","ngOnDestroy","next","complete","setParam","setContentsItemsPerPage","refresh","router","navigate","Object","snapshot","params","relativeTo","queryParamsHandling","areAllSelected","members","length","toggleSelectAll","selectionChange","map","toggleSelectMember","includes","filter","b","selectors","fetchGroupMembers$","dataService","customer","getCustomerList","mapStream","customers","customers$","items","customersTotal$","totalItems","cancel","resolveWith","add","selectedCustomerIds","N","addressForm","changeDetector","markForCheck","save","L","value","dataDependenciesPopulated","editAddress","ngOnChanges","customFields","availableCountries","getCountryName","find","code","name","setAsDefaultBillingAddress","setAsDefaultBilling","markAsDirty","setAsDefaultShippingAddress","setAsDefaultShipping","delete","deleteAddress","modalService","fromComponent","locals","size","closable","S","groups$","getCustomerGroupList","customerGroups","selectedGroupIds","F","y","oxw","updateNote","deleteNote","d","getDisplayType","type","getTimelineIcon","isFeatured","getName","administrator","firstName","lastName","addNoteToCustomer","addNote","note","O","u","h","super","Set","getCustomFieldConfig","addressCustomFields","detailForm","formBuilder","group","title","phoneNumber","emailAddress","password","reduce","f","B","addresses","init","availableCountries$","settings","getAvailableCountries","mapSingle","countries","Ge","entity$","s","orderListUpdates$","orders$","orders","ordersCount$","history$","fetchHistory","g","getCustomerHistory","sort","createdAt","history","destroy","getAddressFormControls","controls","setDefaultBillingAddressId","defaultBillingAddressId","addressDefaultsUpdated","setDefaultShippingAddressId","defaultShippingAddressId","toggleDeleteAddress","addressesToDeleteIds","has","addAddress","fullName","company","streetLine1","streetLine2","city","province","postalCode","countryCode","defaultShippingAddress","defaultBillingAddress","addControl","push","setOrderItemsPerPage","ordersPerPage","fetchOrdersList","setOrderCurrentPage","currentOrdersPage","create","createCustomer","__typename","notificationService","success","entity","notify","message","m","translationVars","duration","markAsPristine","error","le","dirty","updateCustomer","deleteCustomerAddress","updateCustomerAddress","createCustomerAddress","Me","getCustomer","single$","addToGroup","Pe","Z","addCustomersToGroup","customerCount","groupName","removeFromGroup","dialog","buttons","label","returnValue","removeCustomersFromGroup","displayPrivacyControls","data","updateCustomerNote","noteId","body","deleteCustomerNote","setFormValues","patchValue","qe","country","ho","fe","fo","Co","setControl","setCustomFieldFormValues","te","we","J","serverConfigService","getCustomFieldsFor","form","T","listIsEmpty$","activeGroup$","refreshActiveGroupMembers$","getCustomerGroupWithCustomers","contains","customerGroup","_e","members$","membersTotal$","createCustomerGroup","customerIds","deleteCustomerGroup","result","errorMessage","update","updateCustomerGroup","closeMembers","contents","verticalAlign","I","setQueryFn","refetchOnChannelChange","options","searchTerm","filterOperator","mo","ie","deleteCustomer","q","updatedAt","user","D","factory","ge","path","component","pathMatch","breadcrumb","resolve","canDeactivate","he","breadcrumbKey","w","C"],"sources":["webpack:///src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.html","webpack:///src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.ts","webpack:///src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.html","webpack:///src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.ts","webpack:///src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.html","webpack:///src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.ts","webpack:///src/lib/customer/src/components/address-card/address-card.component.html","webpack:///src/lib/customer/src/components/address-card/address-card.component.ts","webpack:///src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.html","webpack:///src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.ts","webpack:///src/lib/customer/src/components/customer-status-label/customer-status-label.component.html","webpack:///src/lib/customer/src/components/customer-status-label/customer-status-label.component.ts","webpack:///src/lib/customer/src/components/customer-history/customer-history.component.html","webpack:///src/lib/customer/src/components/customer-history/customer-history.component.ts","webpack:///src/lib/customer/src/components/customer-detail/customer-detail.component.html","webpack:///src/lib/customer/src/components/customer-detail/customer-detail.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/merge.js","webpack:///src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.html","webpack:///src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.ts","webpack:///src/lib/customer/src/components/customer-group-list/customer-group-list.component.html","webpack:///src/lib/customer/src/components/customer-group-list/customer-group-list.component.ts","webpack:///src/lib/customer/src/components/customer-list/customer-list.component.html","webpack:///src/lib/customer/src/components/customer-list/customer-list.component.ts","webpack:///src/lib/customer/src/providers/routing/customer-resolver.ts","webpack:///src/lib/customer/src/customer.routes.ts","webpack:///src/lib/customer/src/customer.module.ts"],"sourcesContent":["<input\r\n    type=\"text\"\r\n    name=\"searchTerm\"\r\n    [formControl]=\"filterTermControl\"\r\n    [placeholder]=\"'customer.search-customers-by-email' | translate\"\r\n    class=\"search-input\"\r\n/>\r\n\r\n<vdr-data-table\r\n    [items]=\"members\"\r\n    [itemsPerPage]=\"membersItemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems\"\r\n    [currentPage]=\"membersCurrentPage$ | async\"\r\n    (pageChange)=\"setContentsPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\r\n    [allSelected]=\"areAllSelected()\"\r\n    [isRowSelectedFn]=\"('UpdateCustomerGroup' | hasPermission) && isMemberSelected\"\r\n    (rowSelectChange)=\"toggleSelectMember($event)\"\r\n    (allSelectChange)=\"toggleSelectAll()\"\r\n>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-customer=\"item\">\r\n        <td class=\"left align-middle\">\r\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\r\n        </td>\r\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['/customer', 'customers', customer.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Customer, DataService, GetCustomerGroupWithCustomers } from '@vendure/admin-ui/core';\r\nimport { ZoneMember } from '@vendure/admin-ui/settings';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map, startWith, takeUntil, tap } from 'rxjs/operators';\r\n\r\nexport interface CustomerGroupMemberFetchParams {\r\n    skip: number;\r\n    take: number;\r\n    filterTerm: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-member-list',\r\n    templateUrl: './customer-group-member-list.component.html',\r\n    styleUrls: ['./customer-group-member-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupMemberListComponent implements OnInit, OnDestroy {\r\n    @Input() members: Array<\r\n        Pick<Customer, 'id' | 'createdAt' | 'updatedAt' | 'title' | 'firstName' | 'lastName' | 'emailAddress'>\r\n    >;\r\n    @Input() totalItems: number;\r\n    @Input() route: ActivatedRoute;\r\n    @Input() selectedMemberIds: string[] = [];\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @Output() fetchParamsChange = new EventEmitter<CustomerGroupMemberFetchParams>();\r\n\r\n    membersItemsPerPage$: Observable<number>;\r\n    membersCurrentPage$: Observable<number>;\r\n    filterTermControl = new FormControl('');\r\n    private refresh$ = new BehaviorSubject<boolean>(true);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private router: Router, private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.membersCurrentPage$ = this.route.paramMap.pipe(\r\n            map((qpm) => qpm.get('membersPage')),\r\n            map((page) => (!page ? 1 : +page)),\r\n            startWith(1),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.membersItemsPerPage$ = this.route.paramMap.pipe(\r\n            map((qpm) => qpm.get('membersPerPage')),\r\n            map((perPage) => (!perPage ? 10 : +perPage)),\r\n            startWith(10),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\r\n            debounceTime(250),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(''),\r\n        );\r\n\r\n        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {\r\n                const take = itemsPerPage;\r\n                const skip = (currentPage - 1) * itemsPerPage;\r\n                this.fetchParamsChange.emit({\r\n                    filterTerm,\r\n                    skip,\r\n                    take,\r\n                });\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setContentsPageNumber(page: number) {\r\n        this.setParam('membersPage', page);\r\n    }\r\n\r\n    setContentsItemsPerPage(perPage: number) {\r\n        this.setParam('membersPerPage', perPage);\r\n    }\r\n\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n\r\n    private setParam(key: string, value: any) {\r\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n        });\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        if (this.members) {\r\n            return this.selectedMemberIds.length === this.members.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectionChange.emit([]);\r\n        } else {\r\n            this.selectionChange.emit(this.members.map((v) => v.id));\r\n        }\r\n    }\r\n\r\n    toggleSelectMember(member: ZoneMember) {\r\n        if (this.selectedMemberIds.includes(member.id)) {\r\n            this.selectionChange.emit(this.selectedMemberIds.filter((id) => id !== member.id));\r\n        } else {\r\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\r\n        }\r\n    }\r\n\r\n    isMemberSelected = (member: ZoneMember): boolean => {\r\n        return -1 < this.selectedMemberIds.indexOf(member.id);\r\n    };\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\r\n</ng-template>\r\n\r\n<vdr-customer-group-member-list\r\n    [members]=\"customers$ | async\"\r\n    [totalItems]=\"customersTotal$ | async\"\r\n    [route]=\"route\"\r\n    [selectedMemberIds]=\"selectedCustomerIds\"\r\n    (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\r\n    (selectionChange)=\"selectedCustomerIds = $event\"\r\n>\r\n\r\n</vdr-customer-group-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedCustomerIds.length\" class=\"btn btn-primary\">\r\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\r\n\r\n@Component({\r\n    selector: 'vdr-add-customer-to-group-dialog',\r\n    templateUrl: './add-customer-to-group-dialog.component.html',\r\n    styleUrls: ['./add-customer-to-group-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddCustomerToGroupDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    group: GetCustomerGroups.Items;\r\n    route: ActivatedRoute;\r\n    selectedCustomerIds: string[] = [];\r\n    customers$: Observable<GetCustomerList.Items[]>;\r\n    customersTotal$: Observable<number>;\r\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\r\n        skip: 0,\r\n        take: 10,\r\n        filterTerm: '',\r\n    });\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        const customerResult$ = this.fetchGroupMembers$.pipe(\r\n            switchMap(({ skip, take, filterTerm }) => {\r\n                return this.dataService.customer\r\n                    .getCustomerList(take, skip, filterTerm)\r\n                    .mapStream((res) => res.customers);\r\n            }),\r\n        );\r\n\r\n        this.customers$ = customerResult$.pipe(map((res) => res.items));\r\n        this.customersTotal$ = customerResult$.pipe(map((res) => res.totalItems));\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedCustomerIds);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"addressForm.get('streetLine1')?.value as streetLine1\">{{ streetLine1 }},</span>\r\n    <span *ngIf=\"addressForm.get('countryCode')?.value as countryCode\"> {{ countryCode }}</span>\r\n</ng-template>\r\n\r\n<vdr-address-form\r\n    [formGroup]=\"addressForm\"\r\n    [availableCountries]=\"availableCountries\"\r\n    [customFields]=\"customFields\"\r\n></vdr-address-form>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"save()\"\r\n        [disabled]=\"!addressForm.valid || !addressForm.touched\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.update' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, Dialog, GetAvailableCountries } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-address-detail-dialog',\r\n    templateUrl: './address-detail-dialog.component.html',\r\n    styleUrls: ['./address-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddressDetailDialogComponent implements Dialog<FormGroup>, OnInit {\r\n    addressForm: FormGroup;\r\n    customFields: CustomFieldConfig;\r\n    availableCountries: GetAvailableCountries.Items[] = [];\r\n    resolveWith: (result?: FormGroup) => void;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.addressForm);\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"addressForm.value as address\">\r\n    <div class=\"card-header\">\r\n        <div class=\"address-title\">\r\n            <span class=\"street-line\" *ngIf=\"address.streetLine1\">{{ address.streetLine1 }},</span>\r\n            {{ address.countryCode }}\r\n        </div>\r\n        <div class=\"default-controls\">\r\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultShipping\">\r\n                <clr-icon shape=\"truck\"></clr-icon>\r\n                {{ 'customer.default-shipping-address' | translate }}\r\n            </vdr-chip>\r\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultBilling\">\r\n                <clr-icon shape=\"credit-card\"></clr-icon>\r\n                {{ 'customer.default-billing-address' | translate }}\r\n            </vdr-chip>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text\">\r\n            <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <vdr-entity-info [entity]=\"address\"></vdr-entity-info>\r\n        <ng-container *ngIf=\"editable\">\r\n            <button class=\"btn btn-sm btn-link\" (click)=\"editAddress()\">\r\n                {{ 'common.edit' | translate }}\r\n            </button>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-sm btn-link\" vdrDropdownTrigger>\r\n                    {{ 'common.more' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu>\r\n                    <button\r\n                        vdrDropdownItem\r\n                        class=\"button\"\r\n                        [disabled]=\"isDefaultShipping\"\r\n                        (click)=\"setAsDefaultShippingAddress()\"\r\n                    >\r\n                        {{ 'customer.set-as-default-shipping-address' | translate }}\r\n                    </button>\r\n                    <button\r\n                        vdrDropdownItem\r\n                        class=\"button\"\r\n                        [disabled]=\"isDefaultBilling\"\r\n                        (click)=\"setAsDefaultBillingAddress()\"\r\n                    >\r\n                        {{ 'customer.set-as-default-billing-address' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"delete()\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, GetAvailableCountries, ModalService } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\n\r\nimport { AddressDetailDialogComponent } from '../address-detail-dialog/address-detail-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-address-card',\r\n    templateUrl: './address-card.component.html',\r\n    styleUrls: ['./address-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddressCardComponent implements OnInit, OnChanges {\r\n    @Input() addressForm: FormGroup;\r\n    @Input() customFields: CustomFieldConfig;\r\n    @Input() availableCountries: GetAvailableCountries.Items[] = [];\r\n    @Input() isDefaultBilling: string;\r\n    @Input() isDefaultShipping: string;\r\n    @Input() editable = true;\r\n    @Output() setAsDefaultShipping = new EventEmitter<string>();\r\n    @Output() setAsDefaultBilling = new EventEmitter<string>();\r\n    @Output() deleteAddress = new EventEmitter<string>();\r\n    private dataDependenciesPopulated = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {\r\n        const streetLine1 = this.addressForm.get('streetLine1') as FormControl;\r\n        // Make the address dialog display automatically if there is no address line\r\n        // as is the case when adding a new address.\r\n        if (!streetLine1.value) {\r\n            this.dataDependenciesPopulated\r\n                .pipe(\r\n                    filter(value => value),\r\n                    take(1),\r\n                )\r\n                .subscribe(() => {\r\n                    this.editAddress();\r\n                });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (this.customFields != null && this.availableCountries != null) {\r\n            this.dataDependenciesPopulated.next(true);\r\n        }\r\n    }\r\n\r\n    getCountryName(countryCode: string) {\r\n        if (!this.availableCountries) {\r\n            return '';\r\n        }\r\n        const match = this.availableCountries.find(c => c.code === countryCode);\r\n        return match ? match.name : '';\r\n    }\r\n\r\n    setAsDefaultBillingAddress() {\r\n        this.setAsDefaultBilling.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n\r\n    setAsDefaultShippingAddress() {\r\n        this.setAsDefaultShipping.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n\r\n    delete() {\r\n        this.deleteAddress.emit(this.addressForm.value.id);\r\n        this.addressForm.markAsDirty();\r\n    }\r\n\r\n    editAddress() {\r\n        this.modalService\r\n            .fromComponent(AddressDetailDialogComponent, {\r\n                locals: {\r\n                    addressForm: this.addressForm,\r\n                    customFields: this.customFields,\r\n                    availableCountries: this.availableCountries,\r\n                },\r\n                size: 'md',\r\n                closable: true,\r\n            })\r\n            .subscribe(() => {\r\n                this.changeDetector.markForCheck();\r\n            });\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'customer.add-customer-to-group' | translate }}\r\n</ng-template>\r\n\r\n<ng-select\r\n    [items]=\"groups$ | async\"\r\n    appendTo=\"body\"\r\n    [addTag]=\"false\"\r\n    [multiple]=\"true\"\r\n    bindValue=\"id\"\r\n    [(ngModel)]=\"selectedGroupIds\"\r\n    [clearable]=\"true\"\r\n    [searchable]=\"false\"\r\n>\r\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n        <span aria-hidden=\"true\" class=\"ng-value-icon left\" (click)=\"clear(item)\"> × </span>\r\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\r\n    </ng-template>\r\n    <ng-template ng-option-tmp let-item=\"item\">\r\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\r\n    </ng-template>\r\n</ng-select>\r\n\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedGroupIds.length\" class=\"btn btn-primary\">\r\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-select-customer-group-dialog',\r\n    templateUrl: './select-customer-group-dialog.component.html',\r\n    styleUrls: ['./select-customer-group-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectCustomerGroupDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    groups$: Observable<GetCustomerGroups.Items[]>;\r\n    selectedGroupIds: string[] = [];\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.groups$ = this.dataService.customer\r\n            .getCustomerGroupList()\r\n            .mapStream((res) => res.customerGroups.items);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedGroupIds);\r\n    }\r\n}\r\n","<vdr-chip *ngIf=\"customer.user?.id\">\r\n    <ng-container *ngIf=\"customer.user?.verified\">\r\n        <clr-icon shape=\"check-circle\" class=\"verified-user-icon\"></clr-icon>\r\n        {{ 'customer.verified' | translate }}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!customer.user?.verified\">\r\n        <clr-icon shape=\"check-circle\" class=\"registered-user-icon\"></clr-icon>\r\n        {{ 'customer.registered' | translate }}\r\n    </ng-container>\r\n</vdr-chip>\r\n<vdr-chip *ngIf=\"!customer.user?.id\">{{ 'customer.guest' | translate }}</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { Customer } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-status-label',\r\n    templateUrl: './customer-status-label.component.html',\r\n    styleUrls: ['./customer-status-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerStatusLabelComponent {\r\n    @Input() customer: Customer.Fragment;\r\n}\r\n","<h4>{{ 'customer.customer-history' | translate }}</h4>\r\n<div class=\"entry-list\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" *vdrIfPermissions=\"'UpdateCustomer'\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToCustomer()\">\r\n                {{ 'order.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry\r\n        *ngFor=\"let entry of history\"\r\n        [displayType]=\"getDisplayType(entry)\"\r\n        [iconShape]=\"getTimelineIcon(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"getName(entry)\"\r\n        [featured]=\"isFeatured(entry)\"\r\n    >\r\n        <ng-container [ngSwitch]=\"entry.type\">\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REGISTERED\">\r\n                <div class=\"title\">\r\n                    {{ 'customer.history-customer-registered' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\r\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\r\n                </ng-container>\r\n                <ng-template #namedStrategy>\r\n                    {{\r\n                    'customer.history-using-external-auth-strategy'\r\n                        | translate: { strategy: entry.data.strategy }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_VERIFIED\">\r\n                <div class=\"title\">\r\n                    {{ 'customer.history-customer-verified' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\r\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\r\n                </ng-container>\r\n                <ng-template #namedStrategy>\r\n                    {{\r\n                        'customer.history-using-external-auth-strategy'\r\n                            | translate: { strategy: entry.data.strategy }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_DETAIL_UPDATED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-detail-updated' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDED_TO_GROUP\">\r\n                {{\r\n                    'customer.history-customer-added-to-group'\r\n                        | translate: { groupName: entry.data.groupName }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REMOVED_FROM_GROUP\">\r\n                {{\r\n                    'customer.history-customer-removed-from-group'\r\n                        | translate: { groupName: entry.data.groupName }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_CREATED\">\r\n                {{ 'customer.history-customer-address-created' | translate }}\r\n                <div class=\"flex\">\r\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_UPDATED\">\r\n                {{ 'customer.history-customer-address-updated' | translate }}\r\n                <div class=\"flex\">\r\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_DELETED\">\r\n                {{ 'customer.history-customer-address-deleted' | translate }}\r\n                <div class=\"address-string\">{{ entry.data.address }}</div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_UPDATED\">\r\n                {{ 'customer.history-customer-password-updated' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\">\r\n                {{ 'customer.history-customer-password-reset-requested' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\">\r\n                {{ 'customer.history-customer-password-reset-verified' | translate }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-email-update-requested' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\r\n                            entry.data.oldEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\r\n                            entry.data.newEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\">\r\n                <div class=\"flex\">\r\n                    {{ 'customer.history-customer-email-update-verified' | translate }}\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\r\n                            entry.data.oldEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\r\n                            entry.data.newEmailAddress\r\n                        }}</vdr-labeled-data>\r\n                    </vdr-history-entry-detail>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_NOTE\">\r\n                <div class=\"flex\">\r\n                    <div class=\"note-text\">\r\n                        {{ entry.data.note }}\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <vdr-dropdown>\r\n                        <button class=\"icon-button\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"updateNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </button>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"deleteNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry [isLast]=\"true\"></vdr-timeline-entry>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport {\r\n    Customer,\r\n    GetCustomerHistory,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    TimelineDisplayType,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-history',\r\n    templateUrl: './customer-history.component.html',\r\n    styleUrls: ['./customer-history.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerHistoryComponent {\r\n    @Input() customer: Customer.Fragment;\r\n    @Input() history: GetCustomerHistory.Items[];\r\n    @Output() addNote = new EventEmitter<{ note: string }>();\r\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\r\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\r\n    note = '';\r\n    readonly type = HistoryEntryType;\r\n\r\n    getDisplayType(entry: GetCustomerHistory.Items): TimelineDisplayType {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:\r\n            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:\r\n                return 'success';\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n                return 'muted';\r\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\r\n                return 'error';\r\n            default:\r\n                return 'default';\r\n        }\r\n    }\r\n\r\n    getTimelineIcon(entry: GetCustomerHistory.Items): string | [string, string] | undefined {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n                return 'user';\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n                return ['assign-user', 'is-solid'];\r\n            case HistoryEntryType.CUSTOMER_NOTE:\r\n                return 'note';\r\n            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:\r\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\r\n                return 'users';\r\n        }\r\n    }\r\n\r\n    isFeatured(entry: GetCustomerHistory.Items): boolean {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.CUSTOMER_REGISTERED:\r\n            case HistoryEntryType.CUSTOMER_VERIFIED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getName(entry: GetCustomerHistory.Items): string {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        } else {\r\n            return `${this.customer.firstName} ${this.customer.lastName}`;\r\n        }\r\n    }\r\n\r\n    addNoteToCustomer() {\r\n        this.addNote.emit({ note: this.note });\r\n        this.note = '';\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-customer-status-label [customer]=\"entity$ | async\"></vdr-customer-status-label>\r\n            <div\r\n                class=\"last-login\"\r\n                *ngIf=\"(entity$ | async)?.user?.lastLogin as lastLogin\"\r\n                [title]=\"lastLogin | localeDate: 'medium'\"\r\n            >\r\n                {{ 'customer.last-login' | translate }}: {{ lastLogin | timeAgo }}\r\n            </div>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"'UpdateCustomer'\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm.get('customer')\">\r\n    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\" [readOnlyToggle]=\"!(isNew$ | async)\">\r\n        <input id=\"title\" type=\"text\" formControlName=\"title\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.first-name' | translate\"\r\n        for=\"firstName\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.last-name' | translate\"\r\n        for=\"lastName\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.email-address' | translate\"\r\n        for=\"emailAddress\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'customer.phone-number' | translate\"\r\n        for=\"phoneNumber\"\r\n        [readOnlyToggle]=\"!(isNew$ | async)\"\r\n    >\r\n        <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'customer.password' | translate\" for=\"password\" *ngIf=\"isNew$ | async\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Customer\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get(['customer', 'customFields'])\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"customer-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n\r\n<div class=\"groups\" *ngIf=\"(entity$ | async)?.groups as groups\">\r\n    <label class=\"clr-control-label\">{{ 'customer.customer-groups' | translate }}</label>\r\n    <ng-container *ngIf=\"groups.length; else noGroups\">\r\n        <vdr-chip\r\n            *ngFor=\"let group of groups\"\r\n            [colorFrom]=\"group.id\"\r\n            icon=\"times\"\r\n            (iconClick)=\"removeFromGroup(group)\"\r\n            >{{ group.name }}</vdr-chip\r\n        >\r\n    </ng-container>\r\n    <ng-template #noGroups>\r\n        {{ 'customer.not-a-member-of-any-groups' | translate }}\r\n    </ng-template>\r\n    <div>\r\n        <button\r\n            class=\"btn btn-sm btn-secondary\"\r\n            (click)=\"addToGroup()\"\r\n            *vdrIfPermissions=\"'UpdateCustomerGroup'\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.add-customer-to-group' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\r\n    <div class=\"clr-col-md-4\">\r\n        <h3>{{ 'customer.addresses' | translate }}</h3>\r\n        <vdr-address-card\r\n            *ngFor=\"let addressForm of getAddressFormControls()\"\r\n            [class.to-delete]=\"addressesToDeleteIds.has(addressForm.value.id)\"\r\n            [availableCountries]=\"availableCountries$ | async\"\r\n            [isDefaultBilling]=\"defaultBillingAddressId === addressForm.value.id\"\r\n            [isDefaultShipping]=\"defaultShippingAddressId === addressForm.value.id\"\r\n            [addressForm]=\"addressForm\"\r\n            [customFields]=\"addressCustomFields\"\r\n            [editable]=\"(['UpdateCustomer'] | hasPermission) && !addressesToDeleteIds.has(addressForm.value.id)\"\r\n            (setAsDefaultBilling)=\"setDefaultBillingAddressId($event)\"\r\n            (setAsDefaultShipping)=\"setDefaultShippingAddressId($event)\"\r\n            (deleteAddress)=\"toggleDeleteAddress($event)\"\r\n        ></vdr-address-card>\r\n        <button class=\"btn btn-secondary\" (click)=\"addAddress()\" *vdrIfPermissions=\"'UpdateCustomer'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-address' | translate }}\r\n        </button>\r\n    </div>\r\n    <div class=\"clr-col-md-8\">\r\n        <h3>{{ 'customer.orders' | translate }}</h3>\r\n        <vdr-data-table\r\n            [items]=\"orders$ | async\"\r\n            [itemsPerPage]=\"ordersPerPage\"\r\n            [totalItems]=\"ordersCount$ | async\"\r\n            [currentPage]=\"currentOrdersPage\"\r\n            [emptyStateLabel]=\"'customer.no-orders-placed' | translate\"\r\n            (itemsPerPageChange)=\"setOrderItemsPerPage($event)\"\r\n            (pageChange)=\"setOrderCurrentPage($event)\"\r\n        >\r\n            <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\r\n            <vdr-dt-column></vdr-dt-column>\r\n            <ng-template let-order=\"item\">\r\n                <td class=\"left\">{{ order.code }}</td>\r\n                <td class=\"left\">{{ order.state }}</td>\r\n                <td class=\"left\">{{ order.totalWithTax | localeCurrency: order.currencyCode }}</td>\r\n                <td class=\"left\">{{ order.updatedAt | localeDate: 'medium' }}</td>\r\n                <td class=\"right\">\r\n                    <vdr-table-row-action\r\n                        iconShape=\"shopping-cart\"\r\n                        [label]=\"'common.open' | translate\"\r\n                        [linkTo]=\"['/orders/', order.id]\"\r\n                    ></vdr-table-row-action>\r\n                </td>\r\n            </ng-template>\r\n        </vdr-data-table>\r\n    </div>\r\n</div>\r\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\r\n    <div class=\"clr-col-md-6\">\r\n        <vdr-customer-history\r\n            [customer]=\"entity$ | async\"\r\n            [history]=\"history$ | async\"\r\n            (addNote)=\"addNoteToCustomer($event)\"\r\n            (updateNote)=\"updateNote($event)\"\r\n            (deleteNote)=\"deleteNote($event)\"\r\n        ></vdr-customer-history>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateAddressInput,\r\n    CreateCustomerAddress,\r\n    CreateCustomerAddressMutation,\r\n    CreateCustomerInput,\r\n    Customer,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    DeleteCustomerAddress,\r\n    EditNoteDialogComponent,\r\n    GetAvailableCountries,\r\n    GetCustomer,\r\n    GetCustomerHistory,\r\n    GetCustomerQuery,\r\n    HistoryEntry,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    SortOrder,\r\n    UpdateCustomer,\r\n    UpdateCustomerAddress,\r\n    UpdateCustomerAddressMutation,\r\n    UpdateCustomerInput,\r\n    UpdateCustomerMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, forkJoin, from, Observable, Subject } from 'rxjs';\r\nimport {\r\n    concatMap,\r\n    filter,\r\n    map,\r\n    merge,\r\n    mergeMap,\r\n    shareReplay,\r\n    startWith,\r\n    switchMap,\r\n    take,\r\n} from 'rxjs/operators';\r\n\r\nimport { SelectCustomerGroupDialogComponent } from '../select-customer-group-dialog/select-customer-group-dialog.component';\r\n\r\ntype CustomerWithOrders = NonNullable<GetCustomerQuery['customer']>;\r\n\r\n@Component({\r\n    selector: 'vdr-customer-detail',\r\n    templateUrl: './customer-detail.component.html',\r\n    styleUrls: ['./customer-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerDetailComponent\r\n    extends BaseDetailComponent<CustomerWithOrders>\r\n    implements OnInit, OnDestroy\r\n{\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    addressCustomFields: CustomFieldConfig[];\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    orders$: Observable<GetCustomer.Items[]>;\r\n    ordersCount$: Observable<number>;\r\n    history$: Observable<GetCustomerHistory.Items[] | undefined>;\r\n    fetchHistory = new Subject<void>();\r\n    defaultShippingAddressId: string;\r\n    defaultBillingAddressId: string;\r\n    addressesToDeleteIds = new Set<string>();\r\n    addressDefaultsUpdated = false;\r\n    ordersPerPage = 10;\r\n    currentOrdersPage = 1;\r\n    private orderListUpdates$ = new Subject<CustomerWithOrders>();\r\n\r\n    constructor(\r\n        route: ActivatedRoute,\r\n        router: Router,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private formBuilder: FormBuilder,\r\n        protected dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n\r\n        this.customFields = this.getCustomFieldConfig('Customer');\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.detailForm = this.formBuilder.group({\r\n            customer: this.formBuilder.group({\r\n                title: '',\r\n                firstName: ['', Validators.required],\r\n                lastName: ['', Validators.required],\r\n                phoneNumber: '',\r\n                emailAddress: ['', [Validators.required, Validators.email]],\r\n                password: '',\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            addresses: new FormArray([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n\r\n        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));\r\n        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));\r\n        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));\r\n        this.history$ = this.fetchHistory.pipe(\r\n            startWith(null),\r\n            switchMap(() => {\r\n                return this.dataService.customer\r\n                    .getCustomerHistory(this.id, {\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    })\r\n                    .mapStream(data => data.customer?.history.items);\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n        this.orderListUpdates$.complete();\r\n    }\r\n\r\n    getAddressFormControls(): FormControl[] {\r\n        const formArray = this.detailForm.get(['addresses']) as FormArray;\r\n        return formArray.controls as FormControl[];\r\n    }\r\n\r\n    setDefaultBillingAddressId(id: string) {\r\n        this.defaultBillingAddressId = id;\r\n        this.addressDefaultsUpdated = true;\r\n    }\r\n\r\n    setDefaultShippingAddressId(id: string) {\r\n        this.defaultShippingAddressId = id;\r\n        this.addressDefaultsUpdated = true;\r\n    }\r\n\r\n    toggleDeleteAddress(id: string) {\r\n        if (this.addressesToDeleteIds.has(id)) {\r\n            this.addressesToDeleteIds.delete(id);\r\n        } else {\r\n            this.addressesToDeleteIds.add(id);\r\n        }\r\n    }\r\n\r\n    addAddress() {\r\n        const addressFormArray = this.detailForm.get('addresses') as FormArray;\r\n        const newAddress = this.formBuilder.group({\r\n            fullName: '',\r\n            company: '',\r\n            streetLine1: ['', Validators.required],\r\n            streetLine2: '',\r\n            city: '',\r\n            province: '',\r\n            postalCode: '',\r\n            countryCode: ['', Validators.required],\r\n            phoneNumber: '',\r\n            defaultShippingAddress: false,\r\n            defaultBillingAddress: false,\r\n        });\r\n        if (this.addressCustomFields.length) {\r\n            const customFieldsGroup = this.formBuilder.group({});\r\n            for (const fieldDef of this.addressCustomFields) {\r\n                customFieldsGroup.addControl(fieldDef.name, new FormControl(''));\r\n            }\r\n            newAddress.addControl('customFields', customFieldsGroup);\r\n        }\r\n        addressFormArray.push(newAddress);\r\n    }\r\n\r\n    setOrderItemsPerPage(itemsPerPage: number) {\r\n        this.ordersPerPage = +itemsPerPage;\r\n        this.fetchOrdersList();\r\n    }\r\n\r\n    setOrderCurrentPage(page: number) {\r\n        this.currentOrdersPage = +page;\r\n        this.fetchOrdersList();\r\n    }\r\n\r\n    create() {\r\n        const customerForm = this.detailForm.get('customer');\r\n        if (!customerForm) {\r\n            return;\r\n        }\r\n        const formValue = customerForm.value;\r\n        const customFields = customerForm.get('customFields')?.value;\r\n        const customer: CreateCustomerInput = {\r\n            title: formValue.title,\r\n            emailAddress: formValue.emailAddress,\r\n            firstName: formValue.firstName,\r\n            lastName: formValue.lastName,\r\n            phoneNumber: formValue.phoneNumber,\r\n            customFields,\r\n        };\r\n        this.dataService.customer\r\n            .createCustomer(customer, formValue.password)\r\n            .subscribe(({ createCustomer }) => {\r\n                switch (createCustomer.__typename) {\r\n                    case 'Customer':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Customer',\r\n                        });\r\n                        if (createCustomer.emailAddress && !formValue.password) {\r\n                            this.notificationService.notify({\r\n                                message: _('customer.email-verification-sent'),\r\n                                translationVars: { emailAddress: formValue.emailAddress },\r\n                                type: 'info',\r\n                                duration: 10000,\r\n                            });\r\n                        }\r\n                        this.detailForm.markAsPristine();\r\n                        this.addressDefaultsUpdated = false;\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'EmailAddressConflictError':\r\n                        this.notificationService.error(createCustomer.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    save() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const saveOperations: Array<\r\n                        Observable<\r\n                            | UpdateCustomer.UpdateCustomer\r\n                            | CreateCustomerAddress.CreateCustomerAddress\r\n                            | UpdateCustomerAddress.UpdateCustomerAddress\r\n                            | DeleteCustomerAddress.DeleteCustomerAddress\r\n                        >\r\n                    > = [];\r\n                    const customerForm = this.detailForm.get('customer');\r\n                    if (customerForm && customerForm.dirty) {\r\n                        const formValue = customerForm.value;\r\n                        const customFields = customerForm.get('customFields')?.value;\r\n                        const customer: UpdateCustomerInput = {\r\n                            id,\r\n                            title: formValue.title,\r\n                            emailAddress: formValue.emailAddress,\r\n                            firstName: formValue.firstName,\r\n                            lastName: formValue.lastName,\r\n                            phoneNumber: formValue.phoneNumber,\r\n                            customFields,\r\n                        };\r\n                        saveOperations.push(\r\n                            this.dataService.customer\r\n                                .updateCustomer(customer)\r\n                                .pipe(map(res => res.updateCustomer)),\r\n                        );\r\n                    }\r\n                    const addressFormArray = this.detailForm.get('addresses') as FormArray;\r\n                    if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {\r\n                        for (const addressControl of addressFormArray.controls) {\r\n                            if (addressControl.dirty || this.addressDefaultsUpdated) {\r\n                                const address = addressControl.value;\r\n                                const input: CreateAddressInput = {\r\n                                    fullName: address.fullName,\r\n                                    company: address.company,\r\n                                    streetLine1: address.streetLine1,\r\n                                    streetLine2: address.streetLine2,\r\n                                    city: address.city,\r\n                                    province: address.province,\r\n                                    postalCode: address.postalCode,\r\n                                    countryCode: address.countryCode,\r\n                                    phoneNumber: address.phoneNumber,\r\n                                    defaultShippingAddress: this.defaultShippingAddressId === address.id,\r\n                                    defaultBillingAddress: this.defaultBillingAddressId === address.id,\r\n                                    customFields: address.customFields,\r\n                                };\r\n                                if (!address.id) {\r\n                                    saveOperations.push(\r\n                                        this.dataService.customer\r\n                                            .createCustomerAddress(id, input)\r\n                                            .pipe(map(res => res.createCustomerAddress)),\r\n                                    );\r\n                                } else {\r\n                                    if (this.addressesToDeleteIds.has(address.id)) {\r\n                                        saveOperations.push(\r\n                                            this.dataService.customer\r\n                                                .deleteCustomerAddress(address.id)\r\n                                                .pipe(map(res => res.deleteCustomerAddress)),\r\n                                        );\r\n                                    } else {\r\n                                        saveOperations.push(\r\n                                            this.dataService.customer\r\n                                                .updateCustomerAddress({\r\n                                                    ...input,\r\n                                                    id: address.id,\r\n                                                })\r\n                                                .pipe(map(res => res.updateCustomerAddress)),\r\n                                        );\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return forkJoin(saveOperations);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    let notified = false;\r\n                    for (const result of data) {\r\n                        switch (result.__typename) {\r\n                            case 'Customer':\r\n                            case 'Address':\r\n                            case 'Success':\r\n                                if (!notified) {\r\n                                    this.notificationService.success(_('common.notify-update-success'), {\r\n                                        entity: 'Customer',\r\n                                    });\r\n                                    notified = true;\r\n                                    this.detailForm.markAsPristine();\r\n                                    this.addressDefaultsUpdated = false;\r\n                                    this.changeDetector.markForCheck();\r\n                                    this.fetchHistory.next();\r\n                                    this.dataService.customer.getCustomer(this.id).single$.subscribe();\r\n                                }\r\n                                break;\r\n                            case 'EmailAddressConflictError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    addToGroup() {\r\n        this.modalService\r\n            .fromComponent(SelectCustomerGroupDialogComponent, {\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)),\r\n                concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])),\r\n            )\r\n            .subscribe({\r\n                next: res => {\r\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\r\n                        customerCount: 1,\r\n                        groupName: res.addCustomersToGroup.name,\r\n                    });\r\n                },\r\n                complete: () => {\r\n                    this.dataService.customer.getCustomer(this.id, { take: 0 }).single$.subscribe();\r\n                    this.fetchHistory.next();\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromGroup(group: GetCustomer.Groups) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('customer.confirm-remove-customer-from-group'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])\r\n                        : EMPTY,\r\n                ),\r\n                switchMap(() => this.dataService.customer.getCustomer(this.id, { take: 0 }).single$),\r\n            )\r\n            .subscribe(result => {\r\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\r\n                    customerCount: 1,\r\n                    groupName: group.name,\r\n                });\r\n                this.fetchHistory.next();\r\n            });\r\n    }\r\n\r\n    addNoteToCustomer({ note }: { note: string }) {\r\n        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {\r\n            this.fetchHistory.next();\r\n            this.notificationService.success(_('common.notify-create-success'), {\r\n                entity: 'Note',\r\n            });\r\n        });\r\n    }\r\n\r\n    updateNote(entry: HistoryEntry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    displayPrivacyControls: false,\r\n                    note: entry.data.note,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.customer.updateCustomerNote({\r\n                            noteId: entry.id,\r\n                            note: result.note,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-update-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    deleteNote(entry: HistoryEntry) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('common.confirm-delete-note'),\r\n                body: entry.data.note,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: CustomerWithOrders): void {\r\n        const customerGroup = this.detailForm.get('customer');\r\n        if (customerGroup) {\r\n            customerGroup.patchValue({\r\n                title: entity.title,\r\n                firstName: entity.firstName,\r\n                lastName: entity.lastName,\r\n                phoneNumber: entity.phoneNumber,\r\n                emailAddress: entity.emailAddress,\r\n            });\r\n        }\r\n\r\n        if (entity.addresses) {\r\n            const addressesArray = new FormArray([]);\r\n            for (const address of entity.addresses) {\r\n                const { customFields, ...rest } = address as any;\r\n                const addressGroup = this.formBuilder.group({\r\n                    ...rest,\r\n                    countryCode: address.country.code,\r\n                });\r\n                addressesArray.push(addressGroup);\r\n                if (address.defaultShippingAddress) {\r\n                    this.defaultShippingAddressId = address.id;\r\n                }\r\n                if (address.defaultBillingAddress) {\r\n                    this.defaultBillingAddressId = address.id;\r\n                }\r\n\r\n                if (this.addressCustomFields.length) {\r\n                    const customFieldsGroup = this.formBuilder.group({});\r\n                    for (const fieldDef of this.addressCustomFields) {\r\n                        const key = fieldDef.name;\r\n                        const value = (address as any).customFields?.[key];\r\n                        const control = new FormControl(value);\r\n                        customFieldsGroup.addControl(key, control);\r\n                    }\r\n                    addressGroup.addControl('customFields', customFieldsGroup);\r\n                }\r\n            }\r\n            this.detailForm.setControl('addresses', addressesArray);\r\n        }\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customer', 'customFields']),\r\n                entity,\r\n            );\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    /**\r\n     * Refetch the customer with the current order list settings.\r\n     */\r\n    private fetchOrdersList() {\r\n        this.dataService.customer\r\n            .getCustomer(this.id, {\r\n                take: this.ordersPerPage,\r\n                skip: (this.currentOrdersPage - 1) * this.ordersPerPage,\r\n            })\r\n            .single$.pipe(\r\n                map(data => data.customer),\r\n                filter(notNullOrUndefined),\r\n            )\r\n            .subscribe(result => this.orderListUpdates$.next(result));\r\n    }\r\n}\r\n","import { merge as mergeStatic } from '../observable/merge';\nexport function merge(...observables) {\n    return (source) => source.lift.call(mergeStatic(source, ...observables));\n}\n","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\r\n    <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\r\n</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"CustomerGroup\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"form.get('customFields')\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!form.valid\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\r\n        <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n    CreateCustomerGroupInput,\r\n    CustomFieldConfig,\r\n    Dialog,\r\n    ServerConfigService,\r\n    UpdateCustomerGroupInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-detail-dialog',\r\n    templateUrl: './customer-group-detail-dialog.component.html',\r\n    styleUrls: ['./customer-group-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupDetailDialogComponent implements Dialog<CreateCustomerGroupInput>, OnInit {\r\n    group: { id?: string; name: string; customFields?: { [name: string]: any } };\r\n    resolveWith: (result?: CreateCustomerGroupInput) => void;\r\n    customFields: CustomFieldConfig[];\r\n    form: FormGroup;\r\n\r\n    constructor(private serverConfigService: ServerConfigService, private formBuilder: FormBuilder) {\r\n        this.customFields = this.serverConfigService.getCustomFieldsFor('CustomerGroup');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            name: [this.group.name, Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.form.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = this.group.customFields?.[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.form.value);\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left> </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-group-list\"></vdr-action-bar-items>\r\n        <button class=\"btn btn-primary\" *vdrIfPermissions=\"'CreateCustomerGroup'\" (click)=\"create()\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-customer-group' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"group-wrapper\">\r\n    <div class=\"group-list\">\r\n        <table\r\n            class=\"table mt0\"\r\n            [class.expanded]=\"activeGroup$ | async\"\r\n            *ngIf=\"!(listIsEmpty$ | async); else emptyPlaceholder\"\r\n        >\r\n            <tbody>\r\n                <tr\r\n                    *ngFor=\"let group of groups$ | async\"\r\n                    [class.active]=\"group.id === (activeGroup$ | async)?.id\"\r\n                >\r\n                    <td class=\"left align-middle\"><vdr-entity-info [entity]=\"group\"></vdr-entity-info></td>\r\n                    <td class=\"left align-middle\">\r\n                        <vdr-chip [colorFrom]=\"group.id\">{{ group.name }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"text-right align-middle\">\r\n                        <a\r\n                            class=\"btn btn-link btn-sm\"\r\n                            [routerLink]=\"['./', { contents: group.id }]\"\r\n                            queryParamsHandling=\"preserve\"\r\n                        >\r\n                            <clr-icon shape=\"view-list\"></clr-icon>\r\n                            {{ 'customer.view-group-members' | translate }}\r\n                        </a>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <button class=\"btn btn-link btn-sm\" (click)=\"update(group)\">\r\n                            <clr-icon shape=\"edit\"></clr-icon>\r\n                            {{ 'common.edit' | translate }}\r\n                        </button>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    class=\"button\"\r\n                                    vdrDropdownItem\r\n                                    (click)=\"delete(group.id)\"\r\n                                    [disabled]=\"!('DeleteCustomerGroup' | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <ng-template #emptyPlaceholder>\r\n        <vdr-empty-placeholder></vdr-empty-placeholder>\r\n    </ng-template>\r\n    <div class=\"group-members\" [class.expanded]=\"activeGroup$ | async\">\r\n        <ng-container *ngIf=\"activeGroup$ | async as activeGroup\">\r\n            <div class=\"flex\">\r\n                <div class=\"header-title-row\">{{ activeGroup.name }} ({{ membersTotal$ | async }})</div>\r\n                <div class=\"flex-spacer\"></div>\r\n                <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\r\n                    <clr-icon shape=\"close\"></clr-icon>\r\n                </button>\r\n            </div>\r\n            <div class=\"controls\">\r\n                <vdr-dropdown>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn btn-secondary btn-sm\"\r\n                        vdrDropdownTrigger\r\n                        [disabled]=\"selectedCustomerIds.length === 0\"\r\n                    >\r\n                        {{ 'common.with-selected' | translate }}\r\n                        <clr-icon shape=\"caret down\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"removeFromGroup(activeGroup, selectedCustomerIds)\"\r\n                            vdrDropdownItem\r\n                            [disabled]=\"!('UpdateCustomerGroup' | hasPermission)\"\r\n                        >\r\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'customer.remove-from-group' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <button class=\"btn btn-secondary btn-sm\" (click)=\"addToGroup(activeGroup)\">\r\n                    {{ 'customer.add-customers-to-group' | translate: { groupName: activeGroup.name } }}\r\n                </button>\r\n            </div>\r\n            <vdr-customer-group-member-list\r\n                [members]=\"members$ | async\"\r\n                [route]=\"route\"\r\n                [totalItems]=\"membersTotal$ | async\"\r\n                [selectedMemberIds]=\"selectedCustomerIds\"\r\n                (selectionChange)=\"selectedCustomerIds = $event\"\r\n                (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\r\n            ></vdr-customer-group-member-list>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetCustomerGroups,\r\n    GetCustomerGroupWithCustomers,\r\n    GetZones,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { AddCustomerToGroupDialogComponent } from '../add-customer-to-group-dialog/add-customer-to-group-dialog.component';\r\nimport { CustomerGroupDetailDialogComponent } from '../customer-group-detail-dialog/customer-group-detail-dialog.component';\r\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-group-list',\r\n    templateUrl: './customer-group-list.component.html',\r\n    styleUrls: ['./customer-group-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CustomerGroupListComponent implements OnInit {\r\n    activeGroup$: Observable<GetCustomerGroups.Items | undefined>;\r\n    groups$: Observable<GetCustomerGroups.Items[]>;\r\n    listIsEmpty$: Observable<boolean>;\r\n    members$: Observable<GetCustomerGroupWithCustomers.Items[]>;\r\n    membersTotal$: Observable<number>;\r\n    selectedCustomerIds: string[] = [];\r\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\r\n        skip: 0,\r\n        take: 0,\r\n        filterTerm: '',\r\n    });\r\n    private refreshActiveGroupMembers$ = new BehaviorSubject<void>(undefined);\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        public route: ActivatedRoute,\r\n        private router: Router,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this.groups$ = this.dataService.customer\r\n            .getCustomerGroupList()\r\n            .mapStream(data => data.customerGroups.items);\r\n        const activeGroupId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n            tap(() => (this.selectedCustomerIds = [])),\r\n        );\r\n        this.listIsEmpty$ = this.groups$.pipe(map(groups => groups.length === 0));\r\n        this.activeGroup$ = combineLatest(this.groups$, activeGroupId$).pipe(\r\n            map(([groups, activeGroupId]) => {\r\n                if (activeGroupId) {\r\n                    return groups.find(g => g.id === activeGroupId);\r\n                }\r\n            }),\r\n        );\r\n        const membersResult$ = combineLatest(\r\n            this.activeGroup$,\r\n            this.fetchGroupMembers$,\r\n            this.refreshActiveGroupMembers$,\r\n        ).pipe(\r\n            switchMap(([activeGroup, { skip, take, filterTerm }]) => {\r\n                if (activeGroup) {\r\n                    return this.dataService.customer\r\n                        .getCustomerGroupWithCustomers(activeGroup.id, {\r\n                            skip,\r\n                            take,\r\n                            filter: {\r\n                                emailAddress: {\r\n                                    contains: filterTerm,\r\n                                },\r\n                            },\r\n                        })\r\n                        .mapStream(res => res.customerGroup?.customers);\r\n                } else {\r\n                    return of(undefined);\r\n                }\r\n            }),\r\n        );\r\n\r\n        this.members$ = membersResult$.pipe(map(res => res?.items ?? []));\r\n        this.membersTotal$ = membersResult$.pipe(map(res => res?.totalItems ?? 0));\r\n    }\r\n\r\n    create() {\r\n        this.modalService\r\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group: { name: '' } } })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result\r\n                        ? this.dataService.customer.createCustomerGroup({ ...result, customerIds: [] })\r\n                        : EMPTY,\r\n                ),\r\n                // refresh list\r\n                switchMap(() => this.dataService.customer.getCustomerGroupList().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    delete(groupId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('customer.confirm-delete-customer-group'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.customer.deleteCustomerGroup(groupId) : EMPTY,\r\n                ),\r\n\r\n                switchMap(result => {\r\n                    if (result.deleteCustomerGroup.result === DeletionResult.DELETED) {\r\n                        // refresh list\r\n                        return this.dataService.customer\r\n                            .getCustomerGroupList()\r\n                            .mapSingle(() => ({ errorMessage: false }));\r\n                    } else {\r\n                        return of({ errorMessage: result.deleteCustomerGroup.message });\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    if (typeof result.errorMessage === 'string') {\r\n                        this.notificationService.error(result.errorMessage);\r\n                    } else {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'CustomerGroup',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    update(group: GetCustomerGroups.Items) {\r\n        this.modalService\r\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group } })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result\r\n                        ? this.dataService.customer.updateCustomerGroup({ id: group.id, ...result })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'CustomerGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeMembers() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    addToGroup(group: GetCustomerGroupWithCustomers.CustomerGroup) {\r\n        this.modalService\r\n            .fromComponent(AddCustomerToGroupDialogComponent, {\r\n                locals: {\r\n                    group,\r\n                    route: this.route,\r\n                },\r\n                size: 'md',\r\n                verticalAlign: 'top',\r\n            })\r\n            .pipe(\r\n                switchMap(customerIds =>\r\n                    customerIds\r\n                        ? this.dataService.customer\r\n                              .addCustomersToGroup(group.id, customerIds)\r\n                              .pipe(mapTo(customerIds))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe({\r\n                next: result => {\r\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\r\n                        customerCount: result.length,\r\n                        groupName: group.name,\r\n                    });\r\n                    this.refreshActiveGroupMembers$.next();\r\n                    this.selectedCustomerIds = [];\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromGroup(group: GetZones.Zones, customerIds: string[]) {\r\n        this.dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({\r\n            complete: () => {\r\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\r\n                    customerCount: customerIds.length,\r\n                    groupName: group.name,\r\n                });\r\n                this.refreshActiveGroupMembers$.next();\r\n                this.selectedCustomerIds = [];\r\n            },\r\n        });\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"emailSearchTerm\"\r\n            [formControl]=\"searchTerm\"\r\n            [placeholder]=\"'customer.search-customers-by-email-last-name-postal-code' | translate\"\r\n            class=\"search-input ml3\"\r\n        />\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"customer-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateCustomer'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'customer.create-new-customer' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'customer.customer-type' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-customer=\"item\">\r\n        <td class=\"left align-middle\">\r\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\r\n        </td>\r\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-customer-status-label [customer]=\"customer\"></vdr-customer-status-label>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', customer.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteCustomer(customer)\"\r\n                        [disabled]=\"!('DeleteCustomer' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetCustomerList,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\r\nimport { EMPTY } from 'rxjs';\r\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-customer-list',\r\n    templateUrl: './customer-list.component.html',\r\n    styleUrls: ['./customer-list.component.scss'],\r\n})\r\nexport class CustomerListComponent\r\n    extends BaseListComponent<GetCustomerList.Query, GetCustomerList.Items>\r\n    implements OnInit\r\n{\r\n    searchTerm = new FormControl('');\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.customer.getCustomerList(...args).refetchOnChannelChange(),\r\n            data => data.customers,\r\n            (skip, take) => ({\r\n                options: {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        emailAddress: {\r\n                            contains: this.searchTerm.value,\r\n                        },\r\n                        lastName: {\r\n                            contains: this.searchTerm.value,\r\n                        },\r\n                        postalCode: {\r\n                            contains: this.searchTerm.value,\r\n                        },\r\n                    },\r\n                    filterOperator: LogicalOperator.OR,\r\n                    sort: {\r\n                        createdAt: SortOrder.DESC,\r\n                    },\r\n                },\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.searchTerm.valueChanges\r\n            .pipe(\r\n                filter(value => 2 < value.length || value.length === 0),\r\n                debounceTime(250),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(() => this.refresh());\r\n    }\r\n\r\n    deleteCustomer(customer: GetCustomerList.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-customer'),\r\n                body: `${customer.firstName} ${customer.lastName}`,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomer(customer.id) : EMPTY)))\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Customer',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Customer } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CustomerResolver extends BaseEntityResolver<Customer.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Customer',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                title: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                emailAddress: '',\r\n                phoneNumber: null,\r\n                addresses: null,\r\n                user: null,\r\n            },\r\n            id => dataService.customer.getCustomer(id).mapStream(data => data.customer),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CanDeactivateDetailGuard,\r\n    createResolveData,\r\n    Customer,\r\n    detailBreadcrumb,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\r\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\r\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\r\nimport { CustomerResolver } from './providers/routing/customer-resolver';\r\n\r\nexport const customerRoutes: Route[] = [\r\n    {\r\n        path: 'customers',\r\n        component: CustomerListComponent,\r\n        pathMatch: '',\r\n        data: {\r\n            breadcrumb: _('breadcrumb.customers'),\r\n        },\r\n    },\r\n    {\r\n        path: 'customers/:id',\r\n        component: CustomerDetailComponent,\r\n        resolve: createResolveData(CustomerResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: customerBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'groups',\r\n        component: CustomerGroupListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.customer-groups'),\r\n        },\r\n    },\r\n];\r\n\r\nexport function customerBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Customer.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.customers',\r\n        getName: (customer) => `${customer.firstName} ${customer.lastName}`,\r\n        route: 'customers',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddCustomerToGroupDialogComponent } from './components/add-customer-to-group-dialog/add-customer-to-group-dialog.component';\r\nimport { AddressCardComponent } from './components/address-card/address-card.component';\r\nimport { AddressDetailDialogComponent } from './components/address-detail-dialog/address-detail-dialog.component';\r\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\r\nimport { CustomerGroupDetailDialogComponent } from './components/customer-group-detail-dialog/customer-group-detail-dialog.component';\r\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\r\nimport { CustomerGroupMemberListComponent } from './components/customer-group-member-list/customer-group-member-list.component';\r\nimport { CustomerHistoryComponent } from './components/customer-history/customer-history.component';\r\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\r\nimport { CustomerStatusLabelComponent } from './components/customer-status-label/customer-status-label.component';\r\nimport { SelectCustomerGroupDialogComponent } from './components/select-customer-group-dialog/select-customer-group-dialog.component';\r\nimport { customerRoutes } from './customer.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(customerRoutes)],\r\n    declarations: [\r\n        CustomerListComponent,\r\n        CustomerDetailComponent,\r\n        CustomerStatusLabelComponent,\r\n        AddressCardComponent,\r\n        CustomerGroupListComponent,\r\n        CustomerGroupDetailDialogComponent,\r\n        AddCustomerToGroupDialogComponent,\r\n        CustomerGroupMemberListComponent,\r\n        SelectCustomerGroupDialogComponent,\r\n        CustomerHistoryComponent,\r\n        AddressDetailDialogComponent,\r\n    ],\r\n    exports: [AddressCardComponent],\r\n})\r\nexport class CustomerModule {}\r\n"]}