{"version":3,"mappings":"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","names":["Y","constructor","n","e","selectors","$","j","this","selectedMemberIds","indexOf","id","filteredMembers","filterTerm","toLocaleLowerCase","members","filter","t","name","includes","code","areAllSelected","length","toggleSelectAll","selectionChange","emit","map","toggleSelectMember","re","ngOnInit","currentMembers","availableCountries$","dataService","settings","getCountries","mapStream","countries","items","pipe","L","i","cancel","resolveWith","add","z","buildGrid","setPermission","readonly","permissionChange","permission","value","toggleAll","some","activePermissions","_step","Map","r","permissionDefinitions","l","_step2","test","h","match","f","get","push","set","assignable","gridData","label","description","permissions","Array","from","entries","_ref2","d","extractCrudDescription","replace","ae","super","customFields","getCustomFieldConfig","detailForm","formBuilder","group","emailAddress","a","firstName","lastName","password","roles","reduce","y","Object","getAvailableChannels","values","selectedRolePermissions","init","administrator$","entity$","allRoles$","administrator","getRoles","se","client","userStatus","single$","subscribe","s","disable","serverConfigService","getPermissionDefinitions","ngOnDestroy","destroy","rolesChanged","buildPermissionsMap","getPermissionsForSelectedChannel","_ref7","selectedChannelId","channelId","create","roleIds","createAdministrator","notificationService","success","c","entity","markAsPristine","changeDetector","markForCheck","router","navigate","relativeTo","route","error","save","F","T","updateAdministrator","setFormValues","patchValue","user","setCustomFieldFormValues","setValidators","_step3","_iterator3","channels","_step5","Set","forEach","_loop","keys","_i2","_step4","_iterator4","has","channelCode","le","getAdministrators","administrators","deleteAdministrator","modalService","dialog","title","body","buttons","type","returnValue","b","q","refresh","ce","token","pricesIncludeTax","currencyCode","defaultShippingZoneId","defaultLanguageCode","defaultTaxZoneId","zones$","getZones","mapSingle","zones","availableLanguageCodes$","getAvailableLanguages","saveButtonEnabled","dirty","valid","createChannel","_ref9","auth","currentUser","me","_ref10","_ref11","updateUserChannels","__typename","message","updateChannel","generateToken","defaultShippingZone","defaultTaxZone","Math","random","toString","substr","concat","de","Je","channels$","refresh$","Ye","getChannels","isDefaultChannel","deleteChannel","next","enabled","country$","O","languageCode$","translatable","updatedFields","customFieldConfig","languageCode","defaultTranslation","createCountry","updateCountry","ue","contentLanguage$","uiState","contentLanguage","searchTerm","valueChanges","Se","countriesWithZones$","_ref21","find","availableLanguages$","destroy$","complete","setLanguage","setContentLanguage","deleteCountry","result","isZone","hasOwnProperty","clear","call","pe","availableLanguages","trackInventory","outOfStockThreshold","updateGlobalSettings","refreshGlobalSettings","ln","globalSettings","ge","checker","handler","getPaymentMethodOperations","checkers","paymentMethodEligibilityCheckers","handlers","paymentMethodHandlers","selectedCheckerDefinition","selectedHandlerDefinition","updateCode","pristine","setValue","Ie","configArgsIsPopulated","controls","selectChecker","selectedChecker","clearValidators","updateValueAndValidity","onlySelf","markAsDirty","selectHandler","selectedHandler","removeChecker","removeHandler","createPaymentMethod","updatePaymentMethod","args","_e","getPaymentMethods","refetchOnChannelChange","paymentMethods","deletePaymentMethod","showModalAndDelete","he","updateActiveAdministrator","fe","channelIds","role$","kn","createRole","updateRole","detectChanges","Ze","visibleRoles$","items$","toggleDisplayLimit","displayLimit","initialLimit","isDefaultRole","deleteRole","be","E","lines","unitPriceWithTax","quantity","loadFromLocalStorage","orderLinesChange","getActiveChannel","activeChannel","selectResult","addToLines","productVariantId","productVariantName","preview","productAsset","sku","priceWithTax","persistToLocalStorage","updateQuantity","removeLine","localStorageService","setForCurrentLocation","getForCurrentLocation","H","getAvailableCountries","city","countryCode","postalCode","province","addressChange","form","subscription","unsubscribe","ve","Ce","fulfillmentHandler","calculator","shippingMethod","getShippingMethodOperations","shippingEligibilityCheckers","calculators","shippingCalculators","fulfillmentHandlers","selectedCalculatorDefinition","activeChannel$","testResult$","fetchTestResult$","selectedCalculator","Ge","shippingAddress","streetLine1","testShippingMethod","eo","to","testDataUpdated","selectCalculator","getUpdatedShippingMethod","createShippingMethod","updateShippingMethod","setTestOrderLines","testOrderLines","setTestAddress","testAddress","allTestDataPresent","runTest","fulfillmentHandlerCode","ye","getShippingMethods","shippingMethods","testEligibleShippingMethods","deleteShippingMethod","xe","isDefault","taxCategory$","createTaxCategory","updateTaxCategory","Te","queryResult","getTaxCategories","taxCategories$","taxCategories","deleteTaxCategory","ref","refetch","Ae","taxCategoryId","zoneId","customerGroupId","categoryId","createTaxRate","updateTaxRate","category","zone","customerGroup","Le","getTaxRates","taxRates","deleteTaxRate","G","getCustomFieldsFor","_step6","_iterator6","Fe","data","paramMap","ui","activeZone$","fromComponent","locals","createZone","memberIds","delete","deleteZone","errorMessage","update","updateZone","closeMembers","snapshot","params","contents","queryParamsHandling","addToZone","zoneName","size","addMembersToZone","pi","countryCount","removeFromZone","removeMembersFromZone","V","createdAt","updatedAt","getAdministrator","factory","ɵfac","B","getChannel","channel","K","translations","getCountry","country","W","getGlobalSettings","X","getPaymentMethod","paymentMethod","ee","getActiveAdministrator","activeAdministrator","te","getRole","role","ne","getShippingMethod","oe","getTaxCategory","taxCategory","ie","getTaxRate","taxRate","Ke","path","component","resolve","canDeactivate","breadcrumb","We","Xe","et","tt","nt","ot","it","rt","o","breadcrumbKey","getName","qe","g"],"sources":["webpack:///src/lib/settings/src/components/zone-member-list/zone-member-controls.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list-header.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.html","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.ts","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.html","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.ts","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.html","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.ts","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.html","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.ts","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.html","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.ts","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.html","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.ts","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.html","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.ts","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.html","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.ts","webpack:///src/lib/settings/src/components/country-list/country-list.component.html","webpack:///src/lib/settings/src/components/country-list/country-list.component.ts","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.html","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.ts","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.html","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.ts","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.html","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.ts","webpack:///src/lib/settings/src/components/profile/profile.component.html","webpack:///src/lib/settings/src/components/profile/profile.component.ts","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.html","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.ts","webpack:///src/lib/settings/src/components/role-list/role-list.component.html","webpack:///src/lib/settings/src/components/role-list/role-list.component.ts","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.ts","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.html","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.ts","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.html","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.ts","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.ts","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.html","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.ts","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.html","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.ts","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.html","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.ts","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.html","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.ts","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.html","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.ts","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.html","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.ts","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.html","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.ts","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.html","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.ts","webpack:///src/lib/settings/src/providers/routing/administrator-resolver.ts","webpack:///src/lib/settings/src/providers/routing/channel-resolver.ts","webpack:///src/lib/settings/src/providers/routing/country-resolver.ts","webpack:///src/lib/settings/src/providers/routing/global-settings-resolver.ts","webpack:///src/lib/settings/src/providers/routing/payment-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/profile-resolver.ts","webpack:///src/lib/settings/src/providers/routing/role-resolver.ts","webpack:///src/lib/settings/src/providers/routing/shipping-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-category-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-rate-resolver.ts","webpack:///src/lib/settings/src/settings.routes.ts","webpack:///src/lib/settings/src/settings.module.ts"],"sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[vdrZoneMemberControls]',\r\n})\r\nexport class ZoneMemberControlsDirective {\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[vdrZoneMemberListHeader]',\r\n})\r\nexport class ZoneMemberListHeaderDirective {\r\n    constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","<div class=\"members-header\">\r\n    <ng-container *ngIf=\"headerTemplate\">\r\n        <ng-container *ngTemplateOutlet=\"headerTemplate.templateRef\"></ng-container>\r\n    </ng-container>\r\n    <input\r\n        type=\"text\"\r\n        [placeholder]=\"'settings.filter-by-member-name' | translate\"\r\n        [(ngModel)]=\"filterTerm\"\r\n    />\r\n</div>\r\n<vdr-data-table\r\n    [items]=\"filteredMembers()\"\r\n    [allSelected]=\"areAllSelected()\"\r\n    [isRowSelectedFn]=\"(['UpdateSettings', 'UpdateZone'] | hasPermission) && isMemberSelected\"\r\n    (rowSelectChange)=\"toggleSelectMember($event)\"\r\n    (allSelectChange)=\"toggleSelectAll()\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-member=\"item\">\r\n        <td class=\"left align-middle\">{{ member.code }}</td>\r\n        <td class=\"left align-middle\">{{ member.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <clr-icon\r\n                [class.is-success]=\"member.enabled\"\r\n                [attr.shape]=\"member.enabled ? 'check' : 'times'\"\r\n            ></clr-icon>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <ng-container *ngIf=\"controlsTemplate\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"controlsTemplate.templateRef; context: { member: member }\"\r\n                ></ng-container>\r\n            </ng-container>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GetZones } from '@vendure/admin-ui/core';\r\n\r\nimport { ZoneMemberControlsDirective } from './zone-member-controls.directive';\r\nimport { ZoneMemberListHeaderDirective } from './zone-member-list-header.directive';\r\n\r\nexport type ZoneMember = { id: string; name: string; code: string };\r\n\r\n@Component({\r\n    selector: 'vdr-zone-member-list',\r\n    templateUrl: './zone-member-list.component.html',\r\n    styleUrls: ['./zone-member-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneMemberListComponent {\r\n    @Input() members: ZoneMember[] = [];\r\n    @Input() selectedMemberIds: string[] = [];\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @ContentChild(ZoneMemberListHeaderDirective) headerTemplate: ZoneMemberListHeaderDirective;\r\n    @ContentChild(ZoneMemberControlsDirective) controlsTemplate: ZoneMemberControlsDirective;\r\n    filterTerm = '';\r\n\r\n    filteredMembers(): ZoneMember[] {\r\n        if (this.filterTerm !== '') {\r\n            const term = this.filterTerm.toLocaleLowerCase();\r\n            return this.members.filter(\r\n                m => m.name.toLocaleLowerCase().includes(term) || m.code.toLocaleLowerCase().includes(term),\r\n            );\r\n        } else {\r\n            return this.members;\r\n        }\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        if (this.members) {\r\n            return this.selectedMemberIds.length === this.members.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectionChange.emit([]);\r\n        } else {\r\n            this.selectionChange.emit(this.members.map(v => v.id));\r\n        }\r\n    }\r\n\r\n    toggleSelectMember(member: ZoneMember) {\r\n        if (this.selectedMemberIds.includes(member.id)) {\r\n            this.selectionChange.emit(this.selectedMemberIds.filter(id => id !== member.id));\r\n        } else {\r\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\r\n        }\r\n    }\r\n\r\n    isMemberSelected = (member: ZoneMember): boolean => {\r\n        return -1 < this.selectedMemberIds.indexOf(member.id);\r\n    };\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\r\n\r\n<vdr-zone-member-list\r\n    [members]=\"availableCountries$ | async\"\r\n    [selectedMemberIds]=\"selectedMemberIds\"\r\n    (selectionChange)=\"selectedMemberIds = $event\"\r\n>\r\n</vdr-zone-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\r\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { DataService, Dialog, GetCountryList, GetZones } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-add-country-to-zone-dialog',\r\n    templateUrl: './add-country-to-zone-dialog.component.html',\r\n    styleUrls: ['./add-country-to-zone-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddCountryToZoneDialogComponent implements Dialog<string[]>, OnInit {\r\n    resolveWith: (result?: string[]) => void;\r\n    zoneName: string;\r\n    currentMembers: GetZones.Members[] = [];\r\n    availableCountries$: Observable<GetCountryList.Items[]>;\r\n    selectedMemberIds: string[] = [];\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        const currentMemberIds = this.currentMembers.map(m => m.id);\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getCountries(999)\r\n            .mapStream(data => data.countries.items)\r\n            .pipe(map(countries => countries.filter(c => !currentMemberIds.includes(c.id))));\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    add() {\r\n        this.resolveWith(this.selectedMemberIds);\r\n    }\r\n}\r\n","<table class=\"table\">\r\n    <tbody>\r\n        <tr *ngFor=\"let section of gridData\">\r\n            <td class=\"permission-group left\">\r\n                <div><strong>{{ section.label | translate }}</strong></div>\r\n                <small>{{ section.description | translate }}</small><br>\r\n                <button *ngIf=\"1 < section.permissions.length && !readonly\" class=\"btn btn-sm btn-link\" (click)=\"toggleAll(section.permissions)\">\r\n                    {{ 'common.toggle-all' | translate }}\r\n                </button>\r\n            </td>\r\n            <td *ngFor=\"let permission of section.permissions\" [attr.colspan]=\"section.permissions.length === 1 ? 4 : 1\">\r\n                <vdr-select-toggle\r\n                    size=\"small\"\r\n                    [title]=\"permission.description\"\r\n                    [label]=\"permission.name\"\r\n                    [disabled]=\"readonly\"\r\n                    [selected]=\"activePermissions?.includes(permission.name)\"\r\n                    (selectedChange)=\"setPermission(permission.name, $event)\"\r\n                ></vdr-select-toggle>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { PermissionDefinition } from '@vendure/admin-ui/core';\n\nexport interface PermissionGridRow {\n    label: string;\n    description: string;\n    permissions: PermissionDefinition[];\n}\n\n/**\n * A table showing and allowing the setting of all possible CRUD permissions.\n */\n@Component({\n    selector: 'vdr-permission-grid',\n    templateUrl: './permission-grid.component.html',\n    styleUrls: ['./permission-grid.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PermissionGridComponent implements OnInit {\n    @Input() permissionDefinitions: PermissionDefinition[];\n    @Input() activePermissions: string[];\n    @Input() readonly = false;\n    @Output() permissionChange = new EventEmitter<{ permission: string; value: boolean }>();\n    gridData: PermissionGridRow[];\n\n    ngOnInit() {\n        this.buildGrid();\n    }\n\n    setPermission(permission: string, value: boolean) {\n        if (!this.readonly) {\n            this.permissionChange.emit({ permission, value });\n        }\n    }\n\n    toggleAll(defs: PermissionDefinition[]) {\n        const value = defs.some(d => !this.activePermissions.includes(d.name));\n        for (const def of defs) {\n            this.permissionChange.emit({ permission: def.name, value });\n        }\n    }\n\n    private buildGrid() {\n        const crudGroups = new Map<string, PermissionDefinition[]>();\n        const nonCrud: PermissionDefinition[] = [];\n        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;\n        for (const def of this.permissionDefinitions) {\n            const isCrud = crudRe.test(def.name);\n            if (isCrud) {\n                const groupName = def.name.match(crudRe)?.[2];\n                if (groupName) {\n                    const existing = crudGroups.get(groupName);\n                    if (existing) {\n                        existing.push(def);\n                    } else {\n                        crudGroups.set(groupName, [def]);\n                    }\n                }\n            } else if (def.assignable) {\n                nonCrud.push(def);\n            }\n        }\n        this.gridData = [\n            ...nonCrud.map(d => ({\n                label: d.name,\n                description: d.description,\n                permissions: [d],\n            })),\n            ...Array.from(crudGroups.entries()).map(([label, defs]) => {\n                return {\n                    label,\n                    description: this.extractCrudDescription(defs[0]),\n                    permissions: defs,\n                };\n            }),\n        ];\n    }\n\n    private extractCrudDescription(def: PermissionDefinition): string {\n        return def.description.replace(/Grants permission to [\\w]+/, 'Grants permissions on');\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\r\n        <input\r\n            id=\"emailAddress\"\r\n            type=\"text\"\r\n            formControlName=\"emailAddress\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n        <input\r\n            id=\"firstName\"\r\n            type=\"text\"\r\n            formControlName=\"firstName\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n        <input\r\n            id=\"lastName\"\r\n            type=\"text\"\r\n            formControlName=\"lastName\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        *ngIf=\"!(isNew$ | async) && ('UpdateAdministrator' | hasPermission)\"\r\n        [label]=\"'settings.password' | translate\"\r\n        for=\"password\"\r\n        [readOnlyToggle]=\"true\"\r\n    >\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Administrator\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"administrator-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n    <label class=\"clr-control-label\">{{ 'settings.roles' | translate }}</label>\r\n    <ng-select\r\n        [items]=\"allRoles$ | async\"\r\n        [multiple]=\"true\"\r\n        [hideSelected]=\"true\"\r\n        formControlName=\"roles\"\r\n        (change)=\"rolesChanged($event)\"\r\n        bindLabel=\"description\"\r\n    ></ng-select>\r\n\r\n    <ul class=\"nav\" role=\"tablist\">\r\n        <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\r\n            <button\r\n                [id]=\"channel.channelId\"\r\n                (click)=\"selectedChannelId = channel.channelId\"\r\n                class=\"btn btn-link nav-link\"\r\n                [class.active]=\"selectedChannelId === channel.channelId\"\r\n                [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\r\n                type=\"button\"\r\n            >\r\n                {{ channel.channelCode | channelCodeToLabel | translate }}\r\n            </button>\r\n        </li>\r\n    </ul>\r\n    <vdr-permission-grid\r\n        [activePermissions]=\"getPermissionsForSelectedChannel()\"\r\n        [permissionDefinitions]=\"permissionDefinitions\"\r\n        [readonly]=\"true\"\r\n    ></vdr-permission-grid>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseDetailComponent, CustomFieldConfig, PermissionDefinition } from '@vendure/admin-ui/core';\r\nimport {\r\n    Administrator,\r\n    CreateAdministratorInput,\r\n    GetAdministrator,\r\n    LanguageCode,\r\n    Permission,\r\n    Role,\r\n    RoleFragment,\r\n    UpdateAdministratorInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { CUSTOMER_ROLE_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\nexport interface PermissionsByChannel {\r\n    channelId: string;\r\n    channelCode: string;\r\n    permissions: { [K in Permission]: boolean };\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-admin-detail',\r\n    templateUrl: './admin-detail.component.html',\r\n    styleUrls: ['./admin-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AdminDetailComponent\r\n    extends BaseDetailComponent<GetAdministrator.Administrator>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    administrator$: Observable<GetAdministrator.Administrator>;\r\n    permissionDefinitions: PermissionDefinition[];\r\n    allRoles$: Observable<Role.Fragment[]>;\r\n    selectedRoles: Role.Fragment[] = [];\r\n    detailForm: FormGroup;\r\n    selectedRolePermissions: { [channelId: string]: PermissionsByChannel } = {} as any;\r\n    selectedChannelId: string | null = null;\r\n\r\n    getAvailableChannels(): PermissionsByChannel[] {\r\n        return Object.values(this.selectedRolePermissions);\r\n    }\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Administrator');\r\n        this.detailForm = this.formBuilder.group({\r\n            emailAddress: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            password: [''],\r\n            roles: [[]],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.administrator$ = this.entity$;\r\n        this.allRoles$ = this.dataService.administrator\r\n            .getRoles(999)\r\n            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));\r\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\r\n            if (!userStatus.permissions.includes(Permission.UpdateAdministrator)) {\r\n                const rolesSelect = this.detailForm.get('roles');\r\n                if (rolesSelect) {\r\n                    rolesSelect.disable();\r\n                }\r\n            }\r\n        });\r\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    rolesChanged(roles: Role[]) {\r\n        this.buildPermissionsMap();\r\n    }\r\n\r\n    getPermissionsForSelectedChannel(): string[] {\r\n        function getActivePermissions(input: PermissionsByChannel['permissions']): string[] {\r\n            return Object.entries(input)\r\n                .filter(([permission, active]) => active)\r\n                .map(([permission, active]) => permission);\r\n        }\r\n        if (this.selectedChannelId) {\r\n            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];\r\n            if (selectedChannel) {\r\n                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;\r\n                return getActivePermissions(permissionMap);\r\n            }\r\n        }\r\n        const channels = Object.values(this.selectedRolePermissions);\r\n        if (0 < channels.length) {\r\n            this.selectedChannelId = channels[0].channelId;\r\n            return getActivePermissions(channels[0].permissions);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    create() {\r\n        const formValue = this.detailForm.value;\r\n        const administrator: CreateAdministratorInput = {\r\n            emailAddress: formValue.emailAddress,\r\n            firstName: formValue.firstName,\r\n            lastName: formValue.lastName,\r\n            password: formValue.password,\r\n            customFields: formValue.customFields,\r\n            roleIds: formValue.roles.map(role => role.id),\r\n        };\r\n        this.dataService.administrator.createAdministrator(administrator).subscribe(\r\n            data => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'Administrator',\r\n                });\r\n                this.detailForm.markAsPristine();\r\n                this.changeDetector.markForCheck();\r\n                this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'Administrator',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        this.administrator$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const administrator: UpdateAdministratorInput = {\r\n                        id,\r\n                        emailAddress: formValue.emailAddress,\r\n                        firstName: formValue.firstName,\r\n                        lastName: formValue.lastName,\r\n                        password: formValue.password,\r\n                        customFields: formValue.customFields,\r\n                        roleIds: formValue.roles.map(role => role.id),\r\n                    };\r\n                    return this.dataService.administrator.updateAdministrator(administrator);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            emailAddress: administrator.emailAddress,\r\n            firstName: administrator.firstName,\r\n            lastName: administrator.lastName,\r\n            roles: administrator.user.roles,\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                administrator,\r\n            );\r\n        }\r\n        const passwordControl = this.detailForm.get('password');\r\n        if (passwordControl) {\r\n            if (!administrator.id) {\r\n                passwordControl.setValidators([Validators.required]);\r\n            } else {\r\n                passwordControl.setValidators([]);\r\n            }\r\n        }\r\n        this.buildPermissionsMap();\r\n    }\r\n\r\n    private buildPermissionsMap() {\r\n        const permissionsControl = this.detailForm.get('roles');\r\n        if (permissionsControl) {\r\n            const roles: RoleFragment[] = permissionsControl.value;\r\n            const channelIdPermissionsMap = new Map<string, Set<Permission>>();\r\n            const channelIdCodeMap = new Map<string, string>();\r\n\r\n            for (const role of roles) {\r\n                for (const channel of role.channels) {\r\n                    const channelPermissions = channelIdPermissionsMap.get(channel.id);\r\n                    const permissionSet = channelPermissions || new Set<Permission>();\r\n\r\n                    role.permissions.forEach(p => permissionSet.add(p));\r\n                    channelIdPermissionsMap.set(channel.id, permissionSet);\r\n                    channelIdCodeMap.set(channel.id, channel.code);\r\n                }\r\n            }\r\n\r\n            this.selectedRolePermissions = {} as any;\r\n            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                const permissionSet = channelIdPermissionsMap.get(channelId)!;\r\n                const permissionsHash: { [K in Permission]: boolean } = {} as any;\r\n                for (const def of this.serverConfigService.getPermissionDefinitions()) {\r\n                    permissionsHash[def.name] = permissionSet.has(def.name as Permission);\r\n                }\r\n                this.selectedRolePermissions[channelId] = {\r\n                    // tslint:disable:no-non-null-assertion\r\n                    channelId,\r\n                    channelCode: channelIdCodeMap.get(channelId)!,\r\n                    permissions: permissionsHash,\r\n                    // tslint:enable:no-non-null-assertion\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'admin.create-new-administrator' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'settings.first-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.last-name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.email-address' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-administrator=\"item\">\r\n        <td class=\"left align-middle\">{{ administrator.firstName }}</td>\r\n        <td class=\"left align-middle\">{{ administrator.lastName }}</td>\r\n        <td class=\"left align-middle\">{{ administrator.emailAddress }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', administrator.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td>\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteAdministrator(administrator)\"\r\n                        [disabled]=\"!('DeleteAdministrator' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetAdministrators,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-administrator-list',\r\n    templateUrl: './administrator-list.component.html',\r\n    styleUrls: ['./administrator-list.component.scss'],\r\n})\r\nexport class AdministratorListComponent extends BaseListComponent<\r\n    GetAdministrators.Query,\r\n    GetAdministrators.Items\r\n> {\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.administrator.getAdministrators(...args),\r\n            (data) => data.administrators,\r\n        );\r\n    }\r\n\r\n    deleteAdministrator(administrator: GetAdministrators.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-administrator'),\r\n                body: `${administrator.firstName} ${administrator.lastName}`,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap((res) =>\r\n                    res ? this.dataService.administrator.deleteAdministrator(administrator.id) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                (err) => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"channel-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"['SuperAdmin', 'UpdateChannel']\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            formControlName=\"code\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.channel-token' | translate\" for=\"token\">\r\n        <input\r\n            id=\"token\"\r\n            type=\"text\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            formControlName=\"token\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.currency' | translate\" for=\"defaultTaxZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"currencyCode\"\r\n            formControlName=\"currencyCode\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let code of currencyCodes\" [value]=\"code\">{{ code | localeCurrencyName }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.default-language' | translate\" for=\"defaultLanguage\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultLanguageCode\"\r\n            formControlName=\"defaultLanguageCode\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let languageCode of availableLanguageCodes$ | async\" [value]=\"languageCode\">\r\n                {{ languageCode | localeLanguageName }} ({{ languageCode | uppercase }})\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.prices-include-tax' | translate\" for=\"pricesIncludeTax\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"pricesIncludeTax\"\r\n                formControlName=\"pricesIncludeTax\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.default-tax-zone' | translate\" for=\"defaultTaxZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultTaxZoneId\"\r\n            formControlName=\"defaultTaxZoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option selected value style=\"display: none\"></option>\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <clr-alert\r\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultTaxZoneId\"\r\n        clrAlertType=\"danger\"\r\n        [clrAlertClosable]=\"false\"\r\n    >\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'error.no-default-tax-zone-set' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <vdr-form-field [label]=\"'settings.default-shipping-zone' | translate\" for=\"defaultShippingZoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"defaultShippingZoneId\"\r\n            formControlName=\"defaultShippingZoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option selected value style=\"display: none\"></option>\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <clr-alert\r\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultShippingZoneId\"\r\n        clrAlertType=\"warning\"\r\n        [clrAlertClosable]=\"false\"\r\n    >\r\n        <clr-alert-item>\r\n            <span class=\"alert-text\">\r\n                {{ 'error.no-default-shipping-zone-set' | translate }}\r\n            </span>\r\n        </clr-alert-item>\r\n    </clr-alert>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Channel\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"channel-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\r\nimport {\r\n    Channel,\r\n    CreateChannelInput,\r\n    CurrencyCode,\r\n    GetZones,\r\n    LanguageCode,\r\n    UpdateChannelInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap, take } from 'rxjs/operators';\r\n@Component({\r\n    selector: 'vdr-channel-detail',\r\n    templateUrl: './channel-detail.component.html',\r\n    styleUrls: ['./channel-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChannelDetailComponent\r\n    extends BaseDetailComponent<Channel.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    detailForm: FormGroup;\r\n    currencyCodes = Object.values(CurrencyCode);\r\n    availableLanguageCodes$: Observable<LanguageCode[]>;\r\n    readonly updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        protected serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Channel');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            token: ['', Validators.required],\r\n            pricesIncludeTax: [false],\r\n            currencyCode: [''],\r\n            defaultShippingZoneId: ['', Validators.required],\r\n            defaultLanguageCode: [],\r\n            defaultTaxZoneId: ['', Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\r\n        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return this.detailForm.dirty && this.detailForm.valid;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input: CreateChannelInput = {\r\n            code: formValue.code,\r\n            token: formValue.token,\r\n            defaultLanguageCode: formValue.defaultLanguageCode,\r\n            pricesIncludeTax: formValue.pricesIncludeTax,\r\n            currencyCode: formValue.currencyCode,\r\n            defaultShippingZoneId: formValue.defaultShippingZoneId,\r\n            defaultTaxZoneId: formValue.defaultTaxZoneId,\r\n            customFields: formValue.customFields,\r\n        };\r\n        this.dataService.settings\r\n            .createChannel(input)\r\n            .pipe(\r\n                mergeMap(({ createChannel }) =>\r\n                    this.dataService.auth.currentUser().single$.pipe(\r\n                        map(({ me }) => ({\r\n                            me,\r\n                            createChannel,\r\n                        })),\r\n                    ),\r\n                ),\r\n                mergeMap(({ me, createChannel }) =>\r\n                    // tslint:disable-next-line:no-non-null-assertion\r\n                    this.dataService.client.updateUserChannels(me!.channels).pipe(map(() => createChannel)),\r\n                ),\r\n            )\r\n            .subscribe(data => {\r\n                switch (data.__typename) {\r\n                    case 'Channel':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Channel',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', data.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'LanguageNotAvailableError':\r\n                        this.notificationService.error(data.message);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(channel => {\r\n                    const input = {\r\n                        id: channel.id,\r\n                        code: formValue.code,\r\n                        token: formValue.token,\r\n                        pricesIncludeTax: formValue.pricesIncludeTax,\r\n                        currencyCode: formValue.currencyCode,\r\n                        defaultShippingZoneId: formValue.defaultShippingZoneId,\r\n                        defaultLanguageCode: formValue.defaultLanguageCode,\r\n                        defaultTaxZoneId: formValue.defaultTaxZoneId,\r\n                        customFields: formValue.customFields,\r\n                    } as UpdateChannelInput;\r\n                    return this.dataService.settings.updateChannel(input);\r\n                }),\r\n            )\r\n            .subscribe(({ updateChannel }) => {\r\n                switch (updateChannel.__typename) {\r\n                    case 'Channel':\r\n                        this.notificationService.success(_('common.notify-update-success'), {\r\n                            entity: 'Channel',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        break;\r\n                    case 'LanguageNotAvailableError':\r\n                        this.notificationService.error(updateChannel.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: Channel.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            code: entity.code,\r\n            token: entity.token || this.generateToken(),\r\n            pricesIncludeTax: entity.pricesIncludeTax,\r\n            currencyCode: entity.currencyCode,\r\n            defaultShippingZoneId: entity.defaultShippingZone ? entity.defaultShippingZone.id : '',\r\n            defaultLanguageCode: entity.defaultLanguageCode,\r\n            defaultTaxZoneId: entity.defaultTaxZone ? entity.defaultTaxZone.id : '',\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\r\n        }\r\n        if (entity.code === DEFAULT_CHANNEL_CODE) {\r\n            const codeControl = this.detailForm.get('code');\r\n            if (codeControl) {\r\n                codeControl.disable();\r\n            }\r\n        }\r\n    }\r\n\r\n    private generateToken(): string {\r\n        const randomString = () => Math.random().toString(36).substr(3, 10);\r\n        return `${randomString()}${randomString()}`;\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"channel-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['SuperAdmin', 'CreateChannel']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-channel' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table [items]=\"channels$ | async\">\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-channel=\"item\">\r\n        <td class=\"left align-middle\">\r\n            <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n            {{ channel.code | channelCodeToLabel | translate }}\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', channel.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultChannel(channel.code)\">\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteChannel(channel.id)\"\r\n                        [disabled]=\"!(['SuperAdmin', 'DeleteChannel'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { mergeMap, startWith, switchMap } from 'rxjs/operators';\r\n\r\nimport { Channel } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-channel-list',\r\n    templateUrl: './channel-list.component.html',\r\n    styleUrls: ['./channel-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChannelListComponent {\r\n    channels$: Observable<Channel.Fragment[]>;\r\n    private refresh$ = new Subject();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        this.channels$ = this.refresh$.pipe(\r\n            startWith(1),\r\n            switchMap(() => this.dataService.settings.getChannels().mapStream(data => data.channels)),\r\n        );\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    deleteChannel(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.settings.deleteChannel(id) : EMPTY)),\r\n                mergeMap(() => this.dataService.auth.currentUser().single$),\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                mergeMap(data => this.dataService.client.updateUserChannels(data.me!.channels)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Channel',\r\n                    });\r\n                    this.refresh$.next(1);\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Channel',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"country-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                formControlName=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Country\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"country-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    Country,\r\n    CreateCountryInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    findTranslation,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    UpdateCountryInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-country-detail',\r\n    templateUrl: './country-detail.component.html',\r\n    styleUrls: ['./country-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CountryDetailComponent\r\n    extends BaseDetailComponent<Country.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    country$: Observable<Country.Fragment>;\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Country');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            enabled: [true],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.country$ = this.entity$;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.country$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([country, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: CreateCountryInput = createUpdatedTranslatable({\r\n                        translatable: country,\r\n                        updatedFields: formValue,\r\n                        customFieldConfig: this.customFields,\r\n                        languageCode,\r\n                        defaultTranslation: {\r\n                            name: formValue.name,\r\n                            languageCode,\r\n                        },\r\n                    });\r\n                    return this.dataService.settings.createCountry(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Country',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Country',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.country$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([country, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: UpdateCountryInput = createUpdatedTranslatable({\r\n                        translatable: country,\r\n                        updatedFields: formValue,\r\n                        customFieldConfig: this.customFields,\r\n                        languageCode,\r\n                        defaultTranslation: {\r\n                            name: formValue.name,\r\n                            languageCode,\r\n                        },\r\n                    });\r\n                    return this.dataService.settings.updateCountry(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Country',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Country',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(country: Country, languageCode: LanguageCode): void {\r\n        const currentTranslation = findTranslation(country, languageCode);\r\n\r\n        this.detailForm.patchValue({\r\n            code: country.code,\r\n            name: currentTranslation ? currentTranslation.name : '',\r\n            enabled: country.enabled,\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                country,\r\n                currentTranslation,\r\n            );\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"searchTerm\"\r\n            [formControl]=\"searchTerm\"\r\n            [placeholder]=\"'settings.search-country-by-name' | translate\"\r\n            class=\"search-input\"\r\n        />\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"contentLanguage$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"country-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-country' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"countriesWithZones$ | async\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-country=\"item\">\r\n        <td class=\"left align-middle\">{{ country.code }}</td>\r\n        <td class=\"left align-middle\">{{ country.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <a [routerLink]=\"['/settings', 'zones', { contents: zone.id }]\" *ngFor=\"let zone of country.zones\">\r\n                <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\r\n            </a>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <clr-icon\r\n                [class.is-success]=\"country.enabled\"\r\n                [attr.shape]=\"country.enabled ? 'check' : 'times'\"\r\n            ></clr-icon>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', country.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteCountry(country.id)\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteCountry'] | hasPermission)\"\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetCountryList,\r\n    GetZones,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    Zone,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\r\nimport { map, startWith, switchMap, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-country-list',\r\n    templateUrl: './country-list.component.html',\r\n    styleUrls: ['./country-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CountryListComponent implements OnInit, OnDestroy {\r\n    searchTerm = new FormControl('');\r\n    countriesWithZones$: Observable<Array<GetCountryList.Items & { zones: GetZones.Zones[] }>>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n\r\n    private countries: GetCountryList.Items[] = [];\r\n    private destroy$ = new Subject<void>();\r\n    private refresh$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private serverConfigService: ServerConfigService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage);\r\n\r\n        const countries$ = combineLatest(\r\n            this.contentLanguage$,\r\n            this.searchTerm.valueChanges.pipe(startWith(null)),\r\n        ).pipe(\r\n            map(([__, term]) => term),\r\n            switchMap(term => this.dataService.settings.getCountries(999, 0, term).single$),\r\n            tap(data => {\r\n                this.countries = data.countries.items;\r\n            }),\r\n            map(data => data.countries.items),\r\n        );\r\n\r\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\r\n\r\n        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(\r\n            map(([countries, zones]) => {\r\n                return countries.map(country => ({\r\n                    ...country,\r\n                    zones: zones.filter(z => !!z.members.find(c => c.id === country.id)),\r\n                }));\r\n            }),\r\n        );\r\n\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next(undefined);\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    deleteCountry(countryId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-country'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.settings.deleteCountry(countryId) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                response => {\r\n                    if (response.deleteCountry.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'Country',\r\n                        });\r\n                        this.dataService.settings.getCountries(999, 0).single$.subscribe();\r\n                    } else {\r\n                        this.notificationService.error(response.deleteCountry.message || '');\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Country',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private isZone(input: Zone.Fragment | { name: string } | string): input is Zone.Fragment {\r\n        return input.hasOwnProperty('id');\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"global-settings-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            *vdrIfPermissions=\"updatePermission\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.available-languages' | translate\" for=\"availableLanguages\">\r\n        <ng-select\r\n            [items]=\"languageCodes\"\r\n            [addTag]=\"false\"\r\n            [hideSelected]=\"true\"\r\n            multiple=\"true\"\r\n            appendTo=\"body\"\r\n            formControlName=\"availableLanguages\"\r\n        >\r\n            <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                <span class=\"ng-value-icon left\" (click)=\"clear.call(null, item)\" aria-hidden=\"true\">\r\n                    ×\r\n                </span>\r\n                <span class=\"ng-value-label\">{{ item | localeLanguageName }} ({{ item }})</span>\r\n            </ng-template>\r\n            <ng-template ng-option-tmp let-item=\"item\">\r\n                {{ item | localeLanguageName }} ({{ item }})\r\n            </ng-template>\r\n        </ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'settings.global-out-of-stock-threshold' | translate\"\r\n        for=\"outOfStockThreshold\"\r\n        [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\r\n    >\r\n        <input\r\n            id=\"outOfStockThreshold\"\r\n            type=\"number\"\r\n            formControlName=\"outOfStockThreshold\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'settings.track-inventory-default' | translate\"\r\n        for=\"enabled\"\r\n        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\r\n    >\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                name=\"enabled\"\r\n                formControlName=\"trackInventory\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"GlobalSettings\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"global-settings-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GlobalSettings,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { switchMap, tap, withLatestFrom } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-global-settings',\r\n    templateUrl: './global-settings.component.html',\r\n    styleUrls: ['./global-settings.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class GlobalSettingsComponent extends BaseDetailComponent<GlobalSettings> implements OnInit {\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    languageCodes = Object.values(LanguageCode);\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('GlobalSettings');\r\n        this.detailForm = this.formBuilder.group({\r\n            availableLanguages: [''],\r\n            trackInventory: false,\r\n            outOfStockThreshold: [0, Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\r\n            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {\r\n                const languagesSelect = this.detailForm.get('availableLanguages');\r\n                if (languagesSelect) {\r\n                    languagesSelect.disable();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n\r\n        this.dataService.settings\r\n            .updateGlobalSettings(this.detailForm.value)\r\n            .pipe(\r\n                tap(({ updateGlobalSettings }) => {\r\n                    switch (updateGlobalSettings.__typename) {\r\n                        case 'GlobalSettings':\r\n                            this.detailForm.markAsPristine();\r\n                            this.changeDetector.markForCheck();\r\n                            this.notificationService.success(_('common.notify-update-success'), {\r\n                                entity: 'Settings',\r\n                            });\r\n                            break;\r\n                        case 'ChannelDefaultLanguageError':\r\n                            this.notificationService.error(updateGlobalSettings.message);\r\n                    }\r\n                }),\r\n                switchMap(() => this.serverConfigService.refreshGlobalSettings()),\r\n                withLatestFrom(this.dataService.client.uiState().single$),\r\n            )\r\n            .subscribe(([{ globalSettings }, { uiState }]) => {\r\n                const availableLangs = globalSettings.availableLanguages;\r\n                if (availableLangs.length && !availableLangs.includes(uiState.contentLanguage)) {\r\n                    this.dataService.client.setContentLanguage(availableLangs[0]).subscribe();\r\n                }\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: GlobalSettings, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            availableLanguages: entity.availableLanguages,\r\n            trackInventory: entity.trackInventory,\r\n            outOfStockThreshold: entity.outOfStockThreshold,\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"payment-method-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            [disabled]=\"detailForm.pristine || detailForm.invalid\"\r\n            (click)=\"create()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as paymentMethod\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            (input)=\"updateCode(paymentMethod.code, $event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-rich-text-editor\r\n        formControlName=\"description\"\r\n        [readonly]=\"!(updatePermission | hasPermission)\"\r\n        [label]=\"'common.description' | translate\"\r\n    ></vdr-rich-text-editor>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"description\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"enabled\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"PaymentMethod\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"payment-method-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n\r\n    <div class=\"clr-row mt4\">\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.payment-eligibility-checker' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                [operation]=\"selectedChecker\"\r\n                [operationDefinition]=\"selectedCheckerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"removeChecker()\"\r\n                formControlName=\"checker\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let checker of checkers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectChecker(checker)\"\r\n                        >\r\n                            {{ checker.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.payment-handler' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedHandler && selectedHandlerDefinition\"\r\n                [operation]=\"selectedHandler\"\r\n                [operationDefinition]=\"selectedHandlerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"removeHandler()\"\r\n                formControlName=\"handler\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedHandler || !selectedHandlerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let handler of handlers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectHandler(handler)\"\r\n                        >\r\n                            {{ handler.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    ConfigArgDefinition,\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    CreatePaymentMethodInput,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    getConfigArgValue,\r\n    NotificationService,\r\n    PaymentMethod,\r\n    Permission,\r\n    ServerConfigService,\r\n    toConfigurableOperationInput,\r\n    UpdatePaymentMethodInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-method-detail',\r\n    templateUrl: './payment-method-detail.component.html',\r\n    styleUrls: ['./payment-method-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodDetailComponent\r\n    extends BaseDetailComponent<PaymentMethod.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    checkers: ConfigurableOperationDefinition[] = [];\r\n    handlers: ConfigurableOperationDefinition[] = [];\r\n    selectedChecker?: ConfigurableOperation | null;\r\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\r\n    selectedHandler?: ConfigurableOperation | null;\r\n    selectedHandlerDefinition?: ConfigurableOperationDefinition;\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('PaymentMethod');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            description: '',\r\n            enabled: [true, Validators.required],\r\n            checker: {},\r\n            handler: {},\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        combineLatest([\r\n            this.dataService.settings.getPaymentMethodOperations().single$,\r\n            this.entity$.pipe(take(1)),\r\n        ]).subscribe(([data, entity]) => {\r\n            this.checkers = data.paymentMethodEligibilityCheckers;\r\n            this.handlers = data.paymentMethodHandlers;\r\n            this.changeDetector.markForCheck();\r\n            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(\r\n                c => c.code === (entity.checker && entity.checker.code),\r\n            );\r\n            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(\r\n                c => c.code === (entity.handler && entity.handler.code),\r\n            );\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    configArgsIsPopulated(): boolean {\r\n        const configArgsGroup = this.detailForm.get('configArgs') as FormGroup | undefined;\r\n        if (!configArgsGroup) {\r\n            return false;\r\n        }\r\n        return 0 < Object.keys(configArgsGroup.controls).length;\r\n    }\r\n\r\n    selectChecker(checker: ConfigurableOperationDefinition) {\r\n        this.selectedCheckerDefinition = checker;\r\n        this.selectedChecker = configurableDefinitionToInstance(checker);\r\n        const formControl = this.detailForm.get('checker');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedChecker);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    selectHandler(handler: ConfigurableOperationDefinition) {\r\n        this.selectedHandlerDefinition = handler;\r\n        this.selectedHandler = configurableDefinitionToInstance(handler);\r\n        const formControl = this.detailForm.get('handler');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedHandler);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeChecker() {\r\n        this.selectedChecker = null;\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeHandler() {\r\n        this.selectedHandler = null;\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    create() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedHandler = this.selectedHandler;\r\n        if (!selectedHandler) {\r\n            return;\r\n        }\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: CreatePaymentMethodInput = {\r\n                        name: formValue.name,\r\n                        code: formValue.code,\r\n                        description: formValue.description,\r\n                        enabled: formValue.enabled,\r\n                        checker: selectedChecker\r\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\r\n                            : null,\r\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.settings.createPaymentMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedHandler = this.selectedHandler;\r\n        if (!selectedHandler) {\r\n            return;\r\n        }\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input: UpdatePaymentMethodInput = {\r\n                        id,\r\n                        name: formValue.name,\r\n                        code: formValue.code,\r\n                        description: formValue.description,\r\n                        enabled: formValue.enabled,\r\n                        checker: selectedChecker\r\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\r\n                            : null,\r\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.settings.updatePaymentMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(paymentMethod: PaymentMethod.Fragment): void {\r\n        this.detailForm.patchValue({\r\n            name: paymentMethod.name,\r\n            code: paymentMethod.code,\r\n            description: paymentMethod.description,\r\n            enabled: paymentMethod.enabled,\r\n            checker: paymentMethod.checker || {},\r\n            handler: paymentMethod.handler || {},\r\n        });\r\n        if (!this.selectedChecker) {\r\n            this.selectedChecker = paymentMethod.checker && {\r\n                code: paymentMethod.checker.code,\r\n                args: paymentMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (!this.selectedHandler) {\r\n            this.selectedHandler = paymentMethod.handler && {\r\n                code: paymentMethod.handler.code,\r\n                args: paymentMethod.handler.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get('customFields'),\r\n                paymentMethod,\r\n            );\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"payment-method-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreatePaymentMethod']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-payment-method' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-paymentMethod=\"item\">\r\n        <td class=\"left align-middle\">{{ paymentMethod.code }}</td>\r\n        <td class=\"left align-middle\">{{ paymentMethod.enabled }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', paymentMethod.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deletePaymentMethod(paymentMethod.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeletePaymentMethod'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetPaymentMethodList,\r\n    ModalService,\r\n    NotificationService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-method-list',\r\n    templateUrl: './payment-method-list.component.html',\r\n    styleUrls: ['./payment-method-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentMethodListComponent extends BaseListComponent<\r\n    GetPaymentMethodList.Query,\r\n    GetPaymentMethodList.Items\r\n> {\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getPaymentMethods(...args).refetchOnChannelChange(),\r\n            data => data.paymentMethods,\r\n        );\r\n    }\r\n\r\n    deletePaymentMethod(paymentMethodId: string) {\r\n        this.showModalAndDelete(paymentMethodId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(paymentMethodId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                // Refresh the cached facets to reflect the changes\r\n                switchMap(() => this.dataService.settings.getPaymentMethods(100).single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'PaymentMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(paymentMethodId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-payment-method'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res =>\r\n                    res ? this.dataService.settings.deletePaymentMethod(paymentMethodId, !!message) : EMPTY,\r\n                ),\r\n                map(res => res.deletePaymentMethod),\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\r\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.password' | translate\" for=\"password\" [readOnlyToggle]=\"true\">\r\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"Administrator\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Administrator,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GetActiveAdministrator,\r\n    LanguageCode,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    UpdateActiveAdministratorInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-profile',\r\n    templateUrl: './profile.component.html',\r\n    styleUrls: ['./profile.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProfileComponent\r\n    extends BaseDetailComponent<GetActiveAdministrator.ActiveAdministrator>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Administrator');\r\n        this.detailForm = this.formBuilder.group({\r\n            emailAddress: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            password: [''],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    save() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(({ id }) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const administrator: UpdateActiveAdministratorInput = {\r\n                        emailAddress: formValue.emailAddress,\r\n                        firstName: formValue.firstName,\r\n                        lastName: formValue.lastName,\r\n                        password: formValue.password,\r\n                        customFields: formValue.customFields,\r\n                    };\r\n                    return this.dataService.administrator.updateActiveAdministrator(administrator);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Administrator',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            emailAddress: administrator.emailAddress,\r\n            firstName: administrator.firstName,\r\n            lastName: administrator.lastName,\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get('customFields'),\r\n                administrator,\r\n            );\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"role-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\">\r\n        <input\r\n            id=\"description\"\r\n            type=\"text\"\r\n            formControlName=\"description\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n            (input)=\"updateCode($event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"'UpdateAdministrator' | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.channel' | translate\">\r\n        <vdr-channel-assignment-control\r\n            formControlName=\"channelIds\"\r\n            [vdrDisabled]=\"!('UpdateAdministrator' | hasPermission)\"\r\n        ></vdr-channel-assignment-control>\r\n    </vdr-form-field>\r\n    <label>{{ 'settings.permissions' | translate }}</label>\r\n    <vdr-permission-grid\r\n        [permissionDefinitions]=\"permissionDefinitions\"\r\n        [activePermissions]=\"detailForm.get('permissions')?.value\"\r\n        (permissionChange)=\"setPermission($event)\"\r\n        [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\r\n    ></vdr-permission-grid>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateRoleInput,\n    DataService,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    PermissionDefinition,\n    Role,\n    ServerConfigService,\n    UpdateRoleInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-detail',\n    templateUrl: './role-detail.component.html',\n    styleUrls: ['./role-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleDetailComponent extends BaseDetailComponent<Role> implements OnInit, OnDestroy {\n    role$: Observable<Role>;\n    detailForm: FormGroup;\n    permissionDefinitions: PermissionDefinition[];\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            description: ['', Validators.required],\n            channelIds: [],\n            permissions: [],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.role$ = this.entity$;\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(nameValue: string) {\n        const codeControl = this.detailForm.get(['code']);\n        if (codeControl && codeControl.pristine) {\n            codeControl.setValue(normalizeString(nameValue, '-'));\n        }\n    }\n\n    setPermission(change: { permission: string; value: boolean }) {\n        const permissionsControl = this.detailForm.get('permissions');\n        if (permissionsControl) {\n            const currentPermissions = permissionsControl.value as string[];\n            const newValue =\n                change.value === true\n                    ? unique([...currentPermissions, change.permission])\n                    : currentPermissions.filter(p => p !== change.permission);\n            permissionsControl.setValue(newValue);\n            permissionsControl.markAsDirty();\n        }\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const role: CreateRoleInput = formValue;\n        this.dataService.administrator.createRole(role).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), { entity: 'Role' });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Role',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.role$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const role: UpdateRoleInput = { id, ...formValue };\n                    return this.dataService.administrator.updateRole(role);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Role' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(role: Role, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            description: role.description,\n            code: role.code,\n            channelIds: role.channels.map(c => c.id),\n            permissions: role.permissions,\n        });\n        // This was required to get the channel selector component to\n        // correctly display its contents. A while spent debugging the root\n        // cause did not yield a solution, therefore this next line.\n        this.changeDetector.detectChanges();\n    }\n}\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"role-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-role' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"visibleRoles$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.description' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.channel' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.permissions' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-role=\"item\">\r\n        <td class=\"left align-middle\">{{ role.description }}</td>\r\n        <td class=\"left align-middle\"><span *ngIf=\"!isDefaultRole(role)\">{{ role.code }}</span></td>\r\n        <td class=\"left align-middle\">\r\n            <ng-container *ngIf=\"!isDefaultRole(role)\">\r\n                <vdr-chip *ngFor=\"let channel of role.channels\">\r\n                    <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                    {{ channel.code | channelCodeToLabel | translate }}\r\n                </vdr-chip>\r\n            </ng-container>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <ng-container *ngIf=\"!isDefaultRole(role); else defaultRole\">\r\n                <vdr-chip *ngFor=\"let permission of role.permissions |  slice: 0:displayLimit[role.id] || 3\">{{ permission }}</vdr-chip>\r\n                <button\r\n                    class=\"btn btn-sm btn-secondary btn-icon\"\r\n                    *ngIf=\"role.permissions.length > initialLimit\"\r\n                    (click)=\"toggleDisplayLimit(role)\"\r\n                >\r\n                    <ng-container *ngIf=\"(displayLimit[role.id] || 0) < role.permissions.length; else collapse\">\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ role.permissions.length - initialLimit }}\r\n                    </ng-container>\r\n                    <ng-template #collapse>\r\n                        <clr-icon shape=\"minus\"></clr-icon>\r\n                    </ng-template>\r\n                </button>\r\n            </ng-container>\r\n            <ng-template #defaultRole>\r\n                <span class=\"default-role-label\">{{ 'settings.default-role-label' | translate }}</span>\r\n            </ng-template>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                *ngIf=\"!isDefaultRole(role)\"\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', role.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultRole(role)\">\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteRole(role.id)\"\r\n                        [disabled]=\"!('SuperAdmin' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseListComponent } from '@vendure/admin-ui/core';\r\nimport { GetRoles, Role } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\nimport { CUSTOMER_ROLE_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-role-list',\r\n    templateUrl: './role-list.component.html',\r\n    styleUrls: ['./role-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RoleListComponent extends BaseListComponent<GetRoles.Query, GetRoles.Items> implements OnInit {\r\n    readonly initialLimit = 3;\r\n    displayLimit: { [id: string]: number } = {};\r\n    visibleRoles$: Observable<GetRoles.Items[]>;\r\n\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.administrator.getRoles(...args),\r\n            data => data.roles,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.visibleRoles$ = this.items$.pipe(\r\n            map(roles => roles.filter(role => role.code !== CUSTOMER_ROLE_CODE)),\r\n        );\r\n    }\r\n\r\n    toggleDisplayLimit(role: GetRoles.Items) {\r\n        if (this.displayLimit[role.id] === role.permissions.length) {\r\n            this.displayLimit[role.id] = this.initialLimit;\r\n        } else {\r\n            this.displayLimit[role.id] = role.permissions.length;\r\n        }\r\n    }\r\n\r\n    isDefaultRole(role: Role): boolean {\r\n        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;\r\n    }\r\n\r\n    deleteRole(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-role'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(response => (response ? this.dataService.administrator.deleteRole(id) : EMPTY)))\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Role',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Role',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<div class=\"test-result card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-result' | translate }}\r\n    </div>\r\n    <div class=\"card-block\" *ngFor=\"let quote of testResult\">\r\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\r\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\r\n                {{ quote.name }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\r\n                    {{ quote.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\r\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\" *ngIf=\"testResult?.length === 0\">\r\n        <clr-icon shape=\"ban\" class=\"is-solid error\"></clr-icon>\r\n        {{ 'settings.no-eligible-shipping-methods' | translate }}\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\r\n            {{ 'settings.test-shipping-methods' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CurrencyCode, ShippingMethodQuote } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-eligibility-test-result',\r\n    templateUrl: './shipping-eligibility-test-result.component.html',\r\n    styleUrls: ['./shipping-eligibility-test-result.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingEligibilityTestResultComponent {\r\n    @Input() testResult: ShippingMethodQuote[];\r\n    @Input() okToRun = false;\r\n    @Input() testDataUpdated = false;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() runTest = new EventEmitter<void>();\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-order' | translate }}\r\n    </div>\r\n    <table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th>{{ 'order.product-name' | translate }}</th>\r\n                <th>{{ 'order.product-sku' | translate }}</th>\r\n                <th>{{ 'order.unit-price' | translate }}</th>\r\n                <th>{{ 'order.quantity' | translate }}</th>\r\n                <th>{{ 'order.total' | translate }}</th>\r\n            </tr>\r\n        </thead>\r\n        <tr *ngFor=\"let line of lines\" class=\"order-line\">\r\n            <td class=\"align-middle thumb\">\r\n                <img [src]=\"line.preview + '?preset=tiny'\" />\r\n            </td>\r\n            <td class=\"align-middle name\">{{ line.name }}</td>\r\n            <td class=\"align-middle sku\">{{ line.sku }}</td>\r\n            <td class=\"align-middle unit-price\">\r\n                {{ line.unitPriceWithTax | localeCurrency: currencyCode }}\r\n            </td>\r\n            <td class=\"align-middle quantity\">\r\n                <input\r\n                    [(ngModel)]=\"line.quantity\"\r\n                    (change)=\"updateQuantity()\"\r\n                    type=\"number\"\r\n                    max=\"9999\"\r\n                    min=\"1\"\r\n                />\r\n                <button class=\"icon-button\" (click)=\"removeLine(line)\">\r\n                    <clr-icon shape=\"trash\"></clr-icon>\r\n                </button>\r\n            </td>\r\n            <td class=\"align-middle total\">\r\n                {{ (line.unitPriceWithTax * line.quantity) | localeCurrency: currencyCode }}\r\n            </td>\r\n        </tr>\r\n        <tr class=\"sub-total\">\r\n            <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>{{ subTotal | localeCurrency: currencyCode }}</td>\r\n        </tr>\r\n    </table>\r\n\r\n    <ng-template #emptyPlaceholder>\r\n        <div class=\"card-block empty-placeholder\">\r\n            <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\r\n            <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\r\n        </div>\r\n    </ng-template>\r\n    <div class=\"card-block\">\r\n        <vdr-product-selector (productSelected)=\"selectResult($event)\"> </vdr-product-selector>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    LocalStorageService,\r\n    ProductSelectorSearch,\r\n} from '@vendure/admin-ui/core';\r\n\r\nexport interface TestOrderLine {\r\n    id: string;\r\n    name: string;\r\n    preview: string;\r\n    sku: string;\r\n    unitPriceWithTax: number;\r\n    quantity: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-test-order-builder',\r\n    templateUrl: './test-order-builder.component.html',\r\n    styleUrls: ['./test-order-builder.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TestOrderBuilderComponent implements OnInit {\r\n    @Output() orderLinesChange = new EventEmitter<TestOrderLine[]>();\r\n    lines: TestOrderLine[] = [];\r\n    currencyCode: CurrencyCode;\r\n    get subTotal(): number {\r\n        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);\r\n    }\r\n\r\n    constructor(private dataService: DataService, private localStorageService: LocalStorageService) {}\r\n\r\n    ngOnInit() {\r\n        this.lines = this.loadFromLocalStorage();\r\n        if (this.lines) {\r\n            this.orderLinesChange.emit(this.lines);\r\n        }\r\n        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {\r\n            this.currencyCode = result.activeChannel.currencyCode;\r\n        });\r\n    }\r\n\r\n    selectResult(result: ProductSelectorSearch.Items) {\r\n        if (result) {\r\n            this.addToLines(result);\r\n        }\r\n    }\r\n\r\n    private addToLines(result: ProductSelectorSearch.Items) {\r\n        if (!this.lines.find(l => l.id === result.productVariantId)) {\r\n            this.lines.push({\r\n                id: result.productVariantId,\r\n                name: result.productVariantName,\r\n                preview: result.productAsset?.preview ?? '',\r\n                quantity: 1,\r\n                sku: result.sku,\r\n                unitPriceWithTax:\r\n                    (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,\r\n            });\r\n            this.persistToLocalStorage();\r\n            this.orderLinesChange.emit(this.lines);\r\n        }\r\n    }\r\n\r\n    updateQuantity() {\r\n        this.persistToLocalStorage();\r\n        this.orderLinesChange.emit(this.lines);\r\n    }\r\n\r\n    removeLine(line: TestOrderLine) {\r\n        this.lines = this.lines.filter(l => l.id !== line.id);\r\n        this.persistToLocalStorage();\r\n        this.orderLinesChange.emit(this.lines);\r\n    }\r\n\r\n    private persistToLocalStorage() {\r\n        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);\r\n    }\r\n\r\n    private loadFromLocalStorage(): TestOrderLine[] {\r\n        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-address' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <form [formGroup]=\"form\">\r\n            <clr-input-container>\r\n                <label>{{ 'customer.city' | translate }}</label>\r\n                <input formControlName=\"city\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.province' | translate }}</label>\r\n                <input formControlName=\"province\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.postal-code' | translate }}</label>\r\n                <input formControlName=\"postalCode\" type=\"text\" clrInput />\r\n            </clr-input-container>\r\n            <clr-input-container>\r\n                <label>{{ 'customer.country' | translate }}</label>\r\n                <select name=\"countryCode\" formControlName=\"countryCode\" clrInput clrSelect>\r\n                    <option *ngFor=\"let country of availableCountries$ | async\" [value]=\"country.code\">\r\n                        {{ country.name }}\r\n                    </option>\r\n                </select>\r\n            </clr-input-container>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { DataService, GetAvailableCountries, LocalStorageService } from '@vendure/admin-ui/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\nexport interface TestAddress {\r\n    city: string;\r\n    province: string;\r\n    postalCode: string;\r\n    countryCode: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-test-address-form',\r\n    templateUrl: './test-address-form.component.html',\r\n    styleUrls: ['./test-address-form.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TestAddressFormComponent implements OnInit, OnDestroy {\r\n    @Output() addressChange = new EventEmitter<TestAddress>();\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    form: FormGroup;\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private dataService: DataService,\r\n        private localStorageService: LocalStorageService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items);\r\n        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');\r\n        const initialValue: TestAddress = storedValue\r\n            ? storedValue\r\n            : {\r\n                  city: '',\r\n                  countryCode: '',\r\n                  postalCode: '',\r\n                  province: '',\r\n              };\r\n        this.addressChange.emit(initialValue);\r\n\r\n        this.form = this.formBuilder.group(initialValue);\r\n        this.subscription = this.form.valueChanges.subscribe(value => {\r\n            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);\r\n            this.addressChange.emit(value);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","<div\r\n    class=\"test-result card\"\r\n    [ngClass]=\"{\r\n        success: testResult?.eligible === true,\r\n        error: testResult?.eligible === false,\r\n        unknown: !testResult\r\n    }\"\r\n>\r\n    <div class=\"card-header\">\r\n        {{ 'settings.test-result' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\r\n            <vdr-labeled-data [label]=\"'settings.eligible' | translate\">\r\n                <div class=\"eligible-icon\">\r\n                    <clr-icon\r\n                        shape=\"success-standard\"\r\n                        class=\"is-solid success\"\r\n                        *ngIf=\"testResult?.eligible\"\r\n                    ></clr-icon>\r\n                    <clr-icon\r\n                        shape=\"ban\"\r\n                        class=\"is-solid error\"\r\n                        *ngIf=\"testResult?.eligible === false\"\r\n                    ></clr-icon>\r\n                    <clr-icon shape=\"unknown-status\" *ngIf=\"!testResult\"></clr-icon>\r\n                </div>\r\n                {{ testResult?.eligible }}\r\n            </vdr-labeled-data>\r\n            <div class=\"price-row\">\r\n                <vdr-labeled-data\r\n                    [label]=\"'common.price' | translate\"\r\n                    *ngIf=\"testResult?.quote?.price != null\"\r\n                >\r\n                    {{ testResult.quote?.price | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n                <vdr-labeled-data\r\n                    [label]=\"'common.price-with-tax' | translate\"\r\n                    *ngIf=\"testResult?.quote?.priceWithTax != null\"\r\n                >\r\n                    {{ testResult.quote?.priceWithTax | localeCurrency: currencyCode }}\r\n                </vdr-labeled-data>\r\n            </div>\r\n            <vdr-object-tree\r\n                *ngIf=\"testResult?.quote?.metadata\"\r\n                [value]=\"testResult?.quote?.metadata\"\r\n            ></vdr-object-tree>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\r\n            {{ 'settings.test-shipping-method' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\nimport { CurrencyCode, TestShippingMethodResult } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-test-result',\r\n    templateUrl: './shipping-method-test-result.component.html',\r\n    styleUrls: ['./shipping-method-test-result.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodTestResultComponent {\r\n    @Input() testResult: TestShippingMethodResult;\r\n    @Input() okToRun = false;\r\n    @Input() testDataUpdated = false;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() runTest = new EventEmitter<void>();\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"shipping-method-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                [disabled]=\"\r\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as shippingMethod\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n            (input)=\"updateCode(shippingMethod.code, $event.target.value)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field\r\n        [label]=\"'common.code' | translate\"\r\n        for=\"code\"\r\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n    >\r\n        <input\r\n            id=\"code\"\r\n            type=\"text\"\r\n            formControlName=\"code\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-rich-text-editor\r\n        formControlName=\"description\"\r\n        [readonly]=\"!(updatePermission | hasPermission)\"\r\n        [label]=\"'common.description' | translate\"\r\n    ></vdr-rich-text-editor>\r\n    <vdr-form-field [label]=\"'settings.fulfillment-handler' | translate\" for=\"fulfillmentHandler\" class=\"mb2\">\r\n        <select\r\n            name=\"fulfillmentHandler\"\r\n            formControlName=\"fulfillmentHandler\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\r\n                {{ handler.code }}: {{ handler.description }}\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"ShippingMethod\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"shipping-method-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n\r\n    <div class=\"clr-row mt4\">\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.shipping-eligibility-checker' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                [operation]=\"selectedChecker\"\r\n                [operationDefinition]=\"selectedCheckerDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"selectedChecker = null\"\r\n                formControlName=\"checker\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let checker of checkers\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectChecker(checker)\"\r\n                        >\r\n                            {{ checker.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <label class=\"clr-control-label\">{{ 'settings.shipping-calculator' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\r\n                [operation]=\"selectedCalculator\"\r\n                [operationDefinition]=\"selectedCalculatorDefinition\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (remove)=\"selectedCalculator = null\"\r\n                formControlName=\"calculator\"\r\n            ></vdr-configurable-input>\r\n            <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'common.select' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let calculator of calculators\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"selectCalculator(calculator)\"\r\n                        >\r\n                            {{ calculator.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n<div class=\"testing-tool\">\r\n    <clr-accordion>\r\n        <clr-accordion-panel>\r\n            <clr-accordion-title>{{ 'settings.test-shipping-method' | translate }}</clr-accordion-title>\r\n            <clr-accordion-content *clrIfExpanded>\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-order-builder\r\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                        ></vdr-test-order-builder>\r\n                    </div>\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-address-form\r\n                            (addressChange)=\"setTestAddress($event)\"\r\n                        ></vdr-test-address-form>\r\n                        <vdr-shipping-method-test-result\r\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                            [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\r\n                            [testDataUpdated]=\"testDataUpdated\"\r\n                            [testResult]=\"testResult$ | async\"\r\n                            (runTest)=\"runTest()\"\r\n                        ></vdr-shipping-method-test-result>\r\n                    </div>\r\n                </div>\r\n            </clr-accordion-content>\r\n        </clr-accordion-panel>\r\n    </clr-accordion>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    CreateShippingMethodInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    findTranslation,\r\n    GetActiveChannel,\r\n    getConfigArgValue,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    ShippingMethod,\r\n    TestShippingMethodInput,\r\n    TestShippingMethodResult,\r\n    toConfigurableOperationInput,\r\n    UpdateShippingMethodInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\r\nimport { mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';\r\n\r\nimport { TestAddress } from '../test-address-form/test-address-form.component';\r\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-detail',\r\n    templateUrl: './shipping-method-detail.component.html',\r\n    styleUrls: ['./shipping-method-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodDetailComponent\r\n    extends BaseDetailComponent<ShippingMethod.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    detailForm: FormGroup;\r\n    checkers: ConfigurableOperationDefinition[] = [];\r\n    calculators: ConfigurableOperationDefinition[] = [];\r\n    fulfillmentHandlers: ConfigurableOperationDefinition[] = [];\r\n    selectedChecker?: ConfigurableOperation | null;\r\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\r\n    selectedCalculator?: ConfigurableOperation | null;\r\n    selectedCalculatorDefinition?: ConfigurableOperationDefinition;\r\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\r\n    testAddress: TestAddress;\r\n    testOrderLines: TestOrderLine[];\r\n    testDataUpdated = false;\r\n    testResult$: Observable<TestShippingMethodResult | undefined>;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];\r\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('ShippingMethod');\r\n        this.detailForm = this.formBuilder.group({\r\n            code: ['', Validators.required],\r\n            name: ['', Validators.required],\r\n            description: '',\r\n            fulfillmentHandler: ['', Validators.required],\r\n            checker: {},\r\n            calculator: {},\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        combineLatest([\r\n            this.dataService.shippingMethod.getShippingMethodOperations().single$,\r\n            this.entity$.pipe(take(1)),\r\n        ]).subscribe(([data, entity]) => {\r\n            this.checkers = data.shippingEligibilityCheckers;\r\n            this.calculators = data.shippingCalculators;\r\n            this.fulfillmentHandlers = data.fulfillmentHandlers;\r\n            this.changeDetector.markForCheck();\r\n            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(\r\n                c => c.code === (entity.checker && entity.checker.code),\r\n            );\r\n            this.selectedCalculatorDefinition = data.shippingCalculators.find(\r\n                c => c.code === (entity.calculator && entity.calculator.code),\r\n            );\r\n        });\r\n\r\n        this.activeChannel$ = this.dataService.settings\r\n            .getActiveChannel()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.testResult$ = this.fetchTestResult$.pipe(\r\n            switchMap(([address, lines]) => {\r\n                if (!this.selectedChecker || !this.selectedCalculator) {\r\n                    return of(undefined);\r\n                }\r\n                const formValue = this.detailForm.value;\r\n                const input: TestShippingMethodInput = {\r\n                    shippingAddress: { ...address, streetLine1: 'test' },\r\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\r\n                    checker: toConfigurableOperationInput(this.selectedChecker, formValue.checker),\r\n                    calculator: toConfigurableOperationInput(this.selectedCalculator, formValue.calculator),\r\n                };\r\n                return this.dataService.shippingMethod\r\n                    .testShippingMethod(input)\r\n                    .mapSingle(result => result.testShippingMethod);\r\n            }),\r\n        );\r\n\r\n        // tslint:disable:no-non-null-assertion\r\n        merge(\r\n            this.detailForm.get(['checker'])!.valueChanges,\r\n            this.detailForm.get(['calculator'])!.valueChanges,\r\n        )\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(() => (this.testDataUpdated = true));\r\n        // tslint:enable:no-non-null-assertion\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    selectChecker(checker: ConfigurableOperationDefinition) {\r\n        this.selectedCheckerDefinition = checker;\r\n        this.selectedChecker = configurableDefinitionToInstance(checker);\r\n        const formControl = this.detailForm.get('checker');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedChecker);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    selectCalculator(calculator: ConfigurableOperationDefinition) {\r\n        this.selectedCalculatorDefinition = calculator;\r\n        this.selectedCalculator = configurableDefinitionToInstance(calculator);\r\n        const formControl = this.detailForm.get('calculator');\r\n        if (formControl) {\r\n            formControl.clearValidators();\r\n            formControl.updateValueAndValidity({ onlySelf: true });\r\n            formControl.patchValue(this.selectedCalculator);\r\n        }\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    create() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedCalculator = this.selectedCalculator;\r\n        if (!selectedChecker || !selectedCalculator) {\r\n            return;\r\n        }\r\n        combineLatest([this.entity$, this.languageCode$])\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([shippingMethod, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input = {\r\n                        ...(this.getUpdatedShippingMethod(\r\n                            shippingMethod,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as CreateShippingMethodInput),\r\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\r\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\r\n                    };\r\n                    return this.dataService.shippingMethod.createShippingMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const selectedChecker = this.selectedChecker;\r\n        const selectedCalculator = this.selectedCalculator;\r\n        if (!selectedChecker || !selectedCalculator) {\r\n            return;\r\n        }\r\n        combineLatest([this.entity$, this.languageCode$])\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([shippingMethod, languageCode]) => {\r\n                    const formValue = this.detailForm.value;\r\n                    const input = {\r\n                        ...(this.getUpdatedShippingMethod(\r\n                            shippingMethod,\r\n                            this.detailForm,\r\n                            languageCode,\r\n                        ) as UpdateShippingMethodInput),\r\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\r\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\r\n                    };\r\n                    return this.dataService.shippingMethod.updateShippingMethod(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setTestOrderLines(event: TestOrderLine[]) {\r\n        this.testOrderLines = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    setTestAddress(event: TestAddress) {\r\n        this.testAddress = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    allTestDataPresent(): boolean {\r\n        return !!(\r\n            this.testAddress &&\r\n            this.testOrderLines &&\r\n            this.testOrderLines.length &&\r\n            this.selectedChecker &&\r\n            this.selectedCalculator\r\n        );\r\n    }\r\n\r\n    runTest() {\r\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\r\n        this.testDataUpdated = false;\r\n    }\r\n\r\n    /**\r\n     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedShippingMethod(\r\n        shippingMethod: ShippingMethod.Fragment,\r\n        formGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): Omit<CreateShippingMethodInput | UpdateShippingMethodInput, 'checker' | 'calculator'> {\r\n        const formValue = formGroup.value;\r\n        const input = createUpdatedTranslatable({\r\n            translatable: shippingMethod,\r\n            updatedFields: formValue,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: shippingMethod.name || '',\r\n                description: shippingMethod.description || '',\r\n            },\r\n        });\r\n        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };\r\n    }\r\n\r\n    protected setFormValues(shippingMethod: ShippingMethod.Fragment, languageCode: LanguageCode): void {\r\n        const currentTranslation = findTranslation(shippingMethod, languageCode);\r\n        this.detailForm.patchValue({\r\n            name: currentTranslation?.name ?? '',\r\n            description: currentTranslation?.description ?? '',\r\n            code: shippingMethod.code,\r\n            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,\r\n            checker: shippingMethod.checker || {},\r\n            calculator: shippingMethod.calculator || {},\r\n        });\r\n        if (!this.selectedChecker) {\r\n            this.selectedChecker = shippingMethod.checker && {\r\n                code: shippingMethod.checker.code,\r\n                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (!this.selectedCalculator) {\r\n            this.selectedCalculator = shippingMethod.calculator && {\r\n                code: shippingMethod.calculator?.code,\r\n                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\r\n            };\r\n        }\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                shippingMethod,\r\n                currentTranslation,\r\n            );\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"contentLanguage$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"shipping-method-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            [routerLink]=\"['./create']\"\r\n            *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-shipping-method' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-shippingMethod=\"item\">\r\n        <td class=\"left align-middle\">{{ shippingMethod.code }}</td>\r\n        <td class=\"left align-middle\">{{ shippingMethod.name }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', shippingMethod.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteShippingMethod(shippingMethod.id)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteShippingMethod'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n\r\n<div class=\"testing-tool\">\r\n    <clr-accordion>\r\n        <clr-accordion-panel>\r\n            <clr-accordion-title>{{ 'settings.test-shipping-methods' | translate }}</clr-accordion-title>\r\n            <clr-accordion-content *clrIfExpanded>\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-order-builder\r\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                        ></vdr-test-order-builder>\r\n                    </div>\r\n                    <div class=\"clr-col\">\r\n                        <vdr-test-address-form\r\n                            (addressChange)=\"setTestAddress($event)\"\r\n                        ></vdr-test-address-form>\r\n                        <vdr-shipping-eligibility-test-result\r\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                            [okToRun]=\"allTestDataPresent()\"\r\n                            [testDataUpdated]=\"testDataUpdated\"\r\n                            [testResult]=\"testResult$ | async\"\r\n                            (runTest)=\"runTest()\"\r\n                        ></vdr-shipping-eligibility-test-result>\r\n                    </div>\r\n                </div>\r\n            </clr-accordion-content>\r\n        </clr-accordion-panel>\r\n    </clr-accordion>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetActiveChannel,\r\n    GetShippingMethodList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n    ShippingMethodQuote,\r\n    TestEligibleShippingMethodsInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { TestAddress } from '../test-address-form/test-address-form.component';\r\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\r\n\r\n@Component({\r\n    selector: 'vdr-shipping-method-list',\r\n    templateUrl: './shipping-method-list.component.html',\r\n    styleUrls: ['./shipping-method-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ShippingMethodListComponent\r\n    extends BaseListComponent<GetShippingMethodList.Query, GetShippingMethodList.Items>\r\n    implements OnInit {\r\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\r\n    testAddress: TestAddress;\r\n    testOrderLines: TestOrderLine[];\r\n    testDataUpdated = false;\r\n    testResult$: Observable<ShippingMethodQuote[] | undefined>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\r\n\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) =>\r\n                this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(),\r\n            data => data.shippingMethods,\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.testResult$ = this.fetchTestResult$.pipe(\r\n            switchMap(([address, lines]) => {\r\n                const input: TestEligibleShippingMethodsInput = {\r\n                    shippingAddress: { ...address, streetLine1: 'test' },\r\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\r\n                };\r\n                return this.dataService.shippingMethod\r\n                    .testEligibleShippingMethods(input)\r\n                    .mapSingle(result => result.testEligibleShippingMethods);\r\n            }),\r\n        );\r\n        this.activeChannel$ = this.dataService.settings\r\n            .getActiveChannel()\r\n            .mapStream(data => data.activeChannel);\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n    }\r\n\r\n    deleteShippingMethod(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-shipping-method'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ShippingMethod',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setTestOrderLines(event: TestOrderLine[]) {\r\n        this.testOrderLines = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    setTestAddress(event: TestAddress) {\r\n        this.testAddress = event;\r\n        this.testDataUpdated = true;\r\n    }\r\n\r\n    allTestDataPresent(): boolean {\r\n        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);\r\n    }\r\n\r\n    runTest() {\r\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\r\n        this.testDataUpdated = false;\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-category-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.default-tax-category' | translate\" for=\"isDefault\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"isDefault\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"isDefault\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"TaxCategory\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"tax-category-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\r\nimport {\r\n    ConfigurableOperation,\r\n    CreateTaxCategoryInput,\r\n    LanguageCode,\r\n    TaxCategory,\r\n    UpdateTaxCategoryInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-detail',\r\n    templateUrl: './tax-category-detail.component.html',\r\n    styleUrls: ['./tax-category-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxCategoryDetailComponent\r\n    extends BaseDetailComponent<TaxCategory.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    taxCategory$: Observable<TaxCategory.Fragment>;\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];\r\n\r\n    private taxCondition: ConfigurableOperation;\r\n    private taxAction: ConfigurableOperation;\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('TaxCategory');\r\n        this.detailForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            isDefault: false,\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.taxCategory$ = this.entity$;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return this.detailForm.dirty && this.detailForm.valid;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input = {\r\n            name: formValue.name,\r\n            isDefault: formValue.isDefault,\r\n            customFields: formValue.customFields,\r\n        } as CreateTaxCategoryInput;\r\n        this.dataService.settings.createTaxCategory(input).subscribe(\r\n            data => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'TaxCategory',\r\n                });\r\n                this.detailForm.markAsPristine();\r\n                this.changeDetector.markForCheck();\r\n                this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'TaxCategory',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.taxCategory$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(taxCategory => {\r\n                    const input = {\r\n                        id: taxCategory.id,\r\n                        name: formValue.name,\r\n                        isDefault: formValue.isDefault,\r\n                        customFields: formValue.customFields,\r\n                    } as UpdateTaxCategoryInput;\r\n                    return this.dataService.settings.updateTaxCategory(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'TaxCategory',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'TaxCategory',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: TaxCategory.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            name: entity.name,\r\n            isDefault: entity.isDefault,\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-category-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxCategory']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-tax-category' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table [items]=\"taxCategories$ | async\">\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-taxCategory=\"item\">\r\n        <td class=\"left align-middle\">{{ taxCategory.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-chip *ngIf=\"taxCategory.isDefault\">{{ 'common.default-tax-category' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', taxCategory.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteTaxCategory(taxCategory)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxCategory'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { DeletionResult, GetTaxCategories, TaxCategory } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { QueryResult } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-list',\r\n    templateUrl: './tax-category-list.component.html',\r\n    styleUrls: ['./tax-category-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxCategoryListComponent {\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    private queryResult: QueryResult<GetTaxCategories.Query>;\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        this.queryResult = this.dataService.settings.getTaxCategories();\r\n        this.taxCategories$ = this.queryResult.mapStream(data => data.taxCategories);\r\n    }\r\n\r\n    deleteTaxCategory(taxCategory: TaxCategory.Fragment) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-tax-category'),\r\n                body: taxCategory.name,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.settings.deleteTaxCategory(taxCategory.id) : EMPTY)),\r\n                map(res => res.deleteTaxCategory),\r\n            )\r\n            .subscribe(\r\n                res => {\r\n                    if (res.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                        this.queryResult.ref.refetch();\r\n                    } else {\r\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-rate-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n                *vdrIfPermissions=\"updatePermission\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\r\n        <clr-toggle-wrapper>\r\n            <input\r\n                type=\"checkbox\"\r\n                clrToggle\r\n                id=\"enabled\"\r\n                formControlName=\"enabled\"\r\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </clr-toggle-wrapper>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.rate' | translate\" for=\"value\">\r\n        <vdr-affixed-input suffix=\"%\">\r\n            <input\r\n                id=\"value\"\r\n                type=\"number\"\r\n                step=\"0.1\"\r\n                formControlName=\"value\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n            />\r\n        </vdr-affixed-input>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.tax-category' | translate\" for=\"taxCategoryId\">\r\n        <select\r\n            clrSelect\r\n            name=\"taxCategoryId\"\r\n            formControlName=\"taxCategoryId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let taxCategory of taxCategories$ | async\" [value]=\"taxCategory.id\">\r\n                {{ taxCategory.name }}\r\n            </option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'settings.zone' | translate\" for=\"zoneId\">\r\n        <select\r\n            clrSelect\r\n            name=\"zoneId\"\r\n            formControlName=\"zoneId\"\r\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n        >\r\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\r\n        </select>\r\n    </vdr-form-field>\r\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n        <label>{{ 'common.custom-fields' | translate }}</label>\r\n        <vdr-tabbed-custom-fields\r\n            entityName=\"TaxRate\"\r\n            [customFields]=\"customFields\"\r\n            [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n            [readonly]=\"!(updatePermission | hasPermission)\"\r\n        ></vdr-tabbed-custom-fields>\r\n    </section>\r\n    <vdr-custom-detail-component-host\r\n        locationId=\"tax-rate-detail\"\r\n        [entity$]=\"entity$\"\r\n        [detailForm]=\"detailForm\"\r\n    ></vdr-custom-detail-component-host>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateTaxRateInput,\r\n    CustomerGroup,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    GetZones,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    TaxCategory,\r\n    TaxRate,\r\n    UpdateTaxRateInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-rate-detail',\r\n    templateUrl: './tax-rate-detail.component.html',\r\n    styleUrls: ['./tax-rate-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxRateDetailComponent\r\n    extends BaseDetailComponent<TaxRate.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    groups$: Observable<CustomerGroup[]>;\r\n    detailForm: FormGroup;\r\n    customFields: CustomFieldConfig[];\r\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('TaxRate');\r\n        this.detailForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            enabled: [true],\r\n            value: [0, Validators.required],\r\n            taxCategoryId: [''],\r\n            zoneId: [''],\r\n            customerGroupId: [''],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.taxCategories$ = this.dataService.settings\r\n            .getTaxCategories()\r\n            .mapSingle(data => data.taxCategories);\r\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return this.detailForm.dirty && this.detailForm.valid;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input = {\r\n            name: formValue.name,\r\n            enabled: formValue.enabled,\r\n            value: formValue.value,\r\n            categoryId: formValue.taxCategoryId,\r\n            zoneId: formValue.zoneId,\r\n            customerGroupId: formValue.customerGroupId,\r\n            customFields: formValue.customFields,\r\n        } as CreateTaxRateInput;\r\n        this.dataService.settings.createTaxRate(input).subscribe(\r\n            data => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'TaxRate',\r\n                });\r\n                this.detailForm.markAsPristine();\r\n                this.changeDetector.markForCheck();\r\n                this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'TaxRate',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(taxRate => {\r\n                    const input = {\r\n                        id: taxRate.id,\r\n                        name: formValue.name,\r\n                        enabled: formValue.enabled,\r\n                        value: formValue.value,\r\n                        categoryId: formValue.taxCategoryId,\r\n                        zoneId: formValue.zoneId,\r\n                        customerGroupId: formValue.customerGroupId,\r\n                        customFields: formValue.customFields,\r\n                    } as UpdateTaxRateInput;\r\n                    return this.dataService.settings.updateTaxRate(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: TaxRate.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            name: entity.name,\r\n            enabled: entity.enabled,\r\n            value: entity.value,\r\n            taxCategoryId: entity.category ? entity.category.id : '',\r\n            zoneId: entity.zone ? entity.zone.id : '',\r\n            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',\r\n        });\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"tax-rate-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-tax-rate' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.tax-category' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'settings.tax-rate' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-taxRate=\"item\">\r\n        <td class=\"left align-middle\">{{ taxRate.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.category.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.zone.name }}</td>\r\n        <td class=\"left align-middle\">{{ taxRate.value }}%</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', taxRate.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteTaxRate(taxRate)\"\r\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxRate'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { EMPTY } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\nimport { BaseListComponent } from '@vendure/admin-ui/core';\r\nimport { DeletionResult, GetTaxRateList } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-tax-rate-list',\r\n    templateUrl: './tax-rate-list.component.html',\r\n    styleUrls: ['./tax-rate-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class TaxRateListComponent extends BaseListComponent<GetTaxRateList.Query, GetTaxRateList.Items> {\r\n    constructor(\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getTaxRates(...args),\r\n            data => data.taxRates,\r\n        );\r\n    }\r\n\r\n    deleteTaxRate(taxRate: GetTaxRateList.Items) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('settings.confirm-delete-tax-rate'),\r\n                body: taxRate.name,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.settings.deleteTaxRate(taxRate.id) : EMPTY)),\r\n                map(res => res.deleteTaxRate),\r\n            )\r\n            .subscribe(\r\n                res => {\r\n                    if (res.result === DeletionResult.DELETED) {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                        this.refresh();\r\n                    } else {\r\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\r\n                            entity: 'TaxRate',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'TaxRate',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\r\n    <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\r\n</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n            [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-tabbed-custom-fields\r\n        entityName=\"Zone\"\r\n        [customFields]=\"customFields\"\r\n        [customFieldsFormGroup]=\"form.get('customFields')\"\r\n        [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n    ></vdr-tabbed-custom-fields>\r\n</form>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\r\n        <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\r\n        <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CreateZoneInput, CustomFieldConfig, Dialog, ServerConfigService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-zone-detail-dialog',\r\n    templateUrl: './zone-detail-dialog.component.html',\r\n    styleUrls: ['./zone-detail-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneDetailDialogComponent implements Dialog<CreateZoneInput>, OnInit {\r\n    zone: { id?: string; name: string; customFields?: { [name: string]: any } };\r\n    resolveWith: (result?: CreateZoneInput) => void;\r\n\r\n    customFields: CustomFieldConfig[];\r\n    form: FormGroup;\r\n\r\n    constructor(private serverConfigService: ServerConfigService, private formBuilder: FormBuilder) {\r\n        this.customFields = this.serverConfigService.getCustomFieldsFor('CustomerGroup');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            name: [this.zone.name, Validators.required],\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.form.get('customFields') as FormGroup;\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value = this.zone.customFields?.[key];\r\n                const control = customFieldsGroup.get(key);\r\n                if (control) {\r\n                    control.patchValue(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    save() {\r\n        this.resolveWith(this.form.value);\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"zone-list\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *vdrIfPermissions=\"['CreateSettings', 'CreateZone']\"\r\n            (click)=\"create()\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'settings.create-new-zone' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"zone-wrapper\">\r\n    <div class=\"zone-list\">\r\n        <table class=\"table mt0\">\r\n            <tbody>\r\n                <tr\r\n                    *ngFor=\"let zone of zones$ | async\"\r\n                    [class.active]=\"zone.id === (activeZone$ | async)?.id\"\r\n                >\r\n                    <td class=\"left align-middle\"><vdr-entity-info [entity]=\"zone\"></vdr-entity-info></td>\r\n                    <td class=\"left align-middle\">\r\n                        <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\r\n                    </td>\r\n                    <td class=\"text-right align-middle\">\r\n                        <a\r\n                            class=\"btn btn-link btn-sm\"\r\n                            [routerLink]=\"['./', { contents: zone.id }]\"\r\n                            queryParamsHandling=\"preserve\"\r\n                        >\r\n                            <clr-icon shape=\"view-list\"></clr-icon>\r\n                            {{ 'settings.view-zone-members' | translate }}\r\n                        </a>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <button class=\"btn btn-link btn-sm\" (click)=\"update(zone)\">\r\n                            <clr-icon shape=\"edit\"></clr-icon>\r\n                            {{ 'common.edit' | translate }}\r\n                        </button>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    class=\"button\"\r\n                                    vdrDropdownItem\r\n                                    (click)=\"delete(zone.id)\"\r\n                                    [disabled]=\"!(['DeleteSettings', 'DeleteZone'] | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"zone-members\" [class.expanded]=\"activeZone$ | async\">\r\n        <ng-container *ngIf=\"activeZone$ | async as activeZone\">\r\n            <vdr-zone-member-list\r\n                [members]=\"activeZone.members\"\r\n                [selectedMemberIds]=\"selectedMemberIds\"\r\n                (selectionChange)=\"selectedMemberIds = $event\"\r\n            >\r\n                <div *vdrZoneMemberListHeader>\r\n                    <div class=\"flex\">\r\n                        <div class=\"header-title-row\">\r\n                            {{ activeZone.name }} ({{ activeZone.members.length }})\r\n                        </div>\r\n                        <div class=\"flex-spacer\"></div>\r\n                        <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\r\n                            <clr-icon shape=\"close\"></clr-icon>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"controls\">\r\n                        <vdr-dropdown>\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"btn btn-secondary btn-sm\"\r\n                                vdrDropdownTrigger\r\n                                [disabled]=\"selectedMemberIds.length === 0\"\r\n                            >\r\n                                {{ 'common.with-selected' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"delete-button\"\r\n                                    (click)=\"removeFromZone(activeZone, selectedMemberIds)\"\r\n                                    vdrDropdownItem\r\n                                    [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'settings.remove-from-zone' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                        <button class=\"btn btn-secondary btn-sm\" (click)=\"addToZone(activeZone)\">\r\n                            {{ 'settings.add-countries-to-zone' | translate: { zoneName: activeZone.name } }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div *vdrZoneMemberControls=\"let member = member\">\r\n                    <vdr-dropdown>\r\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                            {{ 'common.actions' | translate }}\r\n                            <clr-icon shape=\"caret down\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <a\r\n                                type=\"button\"\r\n                                [routerLink]=\"['/settings', 'countries', member.id]\"\r\n                                vdrDropdownItem\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </a>\r\n                            <button\r\n                                type=\"button\"\r\n                                class=\"delete-button\"\r\n                                (click)=\"removeFromZone(activeZone, [member.id])\"\r\n                                vdrDropdownItem\r\n                                [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'settings.remove-from-zone' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-zone-member-list>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    DeletionResult,\r\n    GetZones,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { AddCountryToZoneDialogComponent } from '../add-country-to-zone-dialog/add-country-to-zone-dialog.component';\r\nimport { ZoneDetailDialogComponent } from '../zone-detail-dialog/zone-detail-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-zone-list',\r\n    templateUrl: './zone-list.component.html',\r\n    styleUrls: ['./zone-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZoneListComponent implements OnInit {\r\n    activeZone$: Observable<GetZones.Zones | undefined>;\r\n    zones$: Observable<GetZones.Zones[]>;\r\n    members$: Observable<GetZones.Members[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    selectedMemberIds: string[] = [];\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private serverConfigService: ServerConfigService,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        const zonesQueryRef = this.dataService.settings.getZones().ref;\r\n        this.zones$ = zonesQueryRef.valueChanges.pipe(map(data => data.data.zones));\r\n        const activeZoneId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n            tap(() => (this.selectedMemberIds = [])),\r\n        );\r\n        this.activeZone$ = combineLatest(this.zones$, activeZoneId$).pipe(\r\n            map(([zones, activeZoneId]) => {\r\n                if (activeZoneId) {\r\n                    return zones.find(z => z.id === activeZoneId);\r\n                }\r\n            }),\r\n        );\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => zonesQueryRef.refetch()));\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    create() {\r\n        this.modalService\r\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone: { name: '' } } })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result ? this.dataService.settings.createZone({ ...result, memberIds: [] }) : EMPTY,\r\n                ),\r\n                // refresh list\r\n                switchMap(() => this.dataService.settings.getZones().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    delete(zoneId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-zone'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.settings.deleteZone(zoneId) : EMPTY)),\r\n\r\n                switchMap(result => {\r\n                    if (result.deleteZone.result === DeletionResult.DELETED) {\r\n                        // refresh list\r\n                        return this.dataService.settings\r\n                            .getZones()\r\n                            .mapSingle(() => ({ errorMessage: false }));\r\n                    } else {\r\n                        return of({ errorMessage: result.deleteZone.message });\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    if (typeof result.errorMessage === 'string') {\r\n                        this.notificationService.error(result.errorMessage);\r\n                    } else {\r\n                        this.notificationService.success(_('common.notify-delete-success'), {\r\n                            entity: 'Zone',\r\n                        });\r\n                    }\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    update(zone: GetZones.Zones) {\r\n        this.modalService\r\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone } })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result ? this.dataService.settings.updateZone({ id: zone.id, ...result }) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Zone',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeMembers() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    addToZone(zone: GetZones.Zones) {\r\n        this.modalService\r\n            .fromComponent(AddCountryToZoneDialogComponent, {\r\n                locals: {\r\n                    zoneName: zone.name,\r\n                    currentMembers: zone.members,\r\n                },\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(memberIds =>\r\n                    memberIds\r\n                        ? this.dataService.settings\r\n                              .addMembersToZone(zone.id, memberIds)\r\n                              .pipe(mapTo(memberIds))\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe({\r\n                next: result => {\r\n                    this.notificationService.success(_(`settings.add-countries-to-zone-success`), {\r\n                        countryCount: result.length,\r\n                        zoneName: zone.name,\r\n                    });\r\n                },\r\n                error: err => {\r\n                    this.notificationService.error(err);\r\n                },\r\n            });\r\n    }\r\n\r\n    removeFromZone(zone: GetZones.Zones, memberIds: string[]) {\r\n        this.dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({\r\n            complete: () => {\r\n                this.notificationService.success(_(`settings.remove-countries-from-zone-success`), {\r\n                    countryCount: memberIds.length,\r\n                    zoneName: zone.name,\r\n                });\r\n            },\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Administrator, Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AdministratorResolver extends BaseEntityResolver<Administrator.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Administrator' as 'Administrator',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                emailAddress: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                user: { roles: [] } as any,\r\n            },\r\n            id => dataService.administrator.getAdministrator(id).mapStream(data => data.administrator),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Channel, CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ChannelResolver extends BaseEntityResolver<Channel.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Channel',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                token: '',\r\n                pricesIncludeTax: false,\r\n                currencyCode: CurrencyCode.USD,\r\n                defaultLanguageCode: getDefaultUiLanguage(),\r\n                defaultShippingZone: {} as any,\r\n                defaultTaxZone: {} as any,\r\n            },\r\n            (id) => dataService.settings.getChannel(id).mapStream((data) => data.channel),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Country } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CountryResolver extends BaseEntityResolver<Country.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Country',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                name: '',\r\n                enabled: false,\r\n                translations: [],\r\n            },\r\n            id => dataService.settings.getCountry(id).mapStream(data => data.country),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { GetGlobalSettings } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the global settings.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class GlobalSettingsResolver extends BaseEntityResolver<GetGlobalSettings.GlobalSettings> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            // we will never be creating a new GlobalSettings entity, so this part is not used.\r\n            {} as any,\r\n            () => dataService.settings.getGlobalSettings().mapStream(data => data.globalSettings),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { PaymentMethod } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PaymentMethodResolver extends BaseEntityResolver<PaymentMethod.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'PaymentMethod',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                code: '',\r\n                description: '',\r\n                enabled: true,\r\n                checker: undefined as any,\r\n                handler: undefined as any,\r\n            },\r\n            id => dataService.settings.getPaymentMethod(id).mapStream(data => data.paymentMethod),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Administrator, Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProfileResolver extends BaseEntityResolver<Administrator.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Administrator' as 'Administrator',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                emailAddress: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                user: { roles: [] } as any,\r\n            },\r\n            id =>\r\n                dataService.administrator\r\n                    .getActiveAdministrator()\r\n                    .mapStream(data => data.activeAdministrator),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { Role } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class RoleResolver extends BaseEntityResolver<Role.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Role' as 'Role',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                code: '',\r\n                description: '',\r\n                permissions: [],\r\n                channels: [],\r\n            },\r\n            id => dataService.administrator.getRole(id).mapStream(data => data.role),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { ShippingMethod } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ShippingMethodResolver extends BaseEntityResolver<ShippingMethod.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'ShippingMethod',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                id: '',\r\n                code: '',\r\n                name: '',\r\n                description: '',\r\n                fulfillmentHandlerCode: undefined as any,\r\n                checker: undefined as any,\r\n                calculator: undefined as any,\r\n                translations: [],\r\n            },\r\n            id => dataService.shippingMethod.getShippingMethod(id).mapStream(data => data.shippingMethod),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, TaxCategory } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TaxCategoryResolver extends BaseEntityResolver<TaxCategory.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'TaxCategory',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                isDefault: false,\r\n            },\r\n            id => dataService.settings.getTaxCategory(id).mapStream(data => data.taxCategory),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, TaxRate } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TaxRateResolver extends BaseEntityResolver<TaxRate.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'TaxRate',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                value: 0,\r\n                enabled: true,\r\n                category: {} as any,\r\n                zone: {} as any,\r\n                customerGroup: null,\r\n            },\r\n            id => dataService.settings.getTaxRate(id).mapStream(data => data.taxRate),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Administrator,\r\n    CanDeactivateDetailGuard,\r\n    Channel,\r\n    Country,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    Role,\r\n    ShippingMethod,\r\n    TaxCategory,\r\n    TaxRate,\r\n} from '@vendure/admin-ui/core';\r\n\r\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\r\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\r\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\r\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\r\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\r\nimport { CountryListComponent } from './components/country-list/country-list.component';\r\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\r\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\r\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\r\nimport { RoleListComponent } from './components/role-list/role-list.component';\r\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\r\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\r\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\r\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\r\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\r\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\r\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\r\nimport { AdministratorResolver } from './providers/routing/administrator-resolver';\r\nimport { ChannelResolver } from './providers/routing/channel-resolver';\r\nimport { CountryResolver } from './providers/routing/country-resolver';\r\nimport { GlobalSettingsResolver } from './providers/routing/global-settings-resolver';\r\nimport { PaymentMethodResolver } from './providers/routing/payment-method-resolver';\r\nimport { ProfileResolver } from './providers/routing/profile-resolver';\r\nimport { RoleResolver } from './providers/routing/role-resolver';\r\nimport { ShippingMethodResolver } from './providers/routing/shipping-method-resolver';\r\nimport { TaxCategoryResolver } from './providers/routing/tax-category-resolver';\r\nimport { TaxRateResolver } from './providers/routing/tax-rate-resolver';\r\n\r\nexport const settingsRoutes: Route[] = [\r\n    {\r\n        path: 'profile',\r\n        component: ProfileComponent,\r\n        resolve: createResolveData(ProfileResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: _('breadcrumb.profile'),\r\n        },\r\n    },\r\n    {\r\n        path: 'administrators',\r\n        component: AdministratorListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.administrators'),\r\n        },\r\n    },\r\n    {\r\n        path: 'administrators/:id',\r\n        component: AdminDetailComponent,\r\n        resolve: createResolveData(AdministratorResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: administratorBreadcrumb },\r\n    },\r\n    {\r\n        path: 'channels',\r\n        component: ChannelListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.channels'),\r\n        },\r\n    },\r\n    {\r\n        path: 'channels/:id',\r\n        component: ChannelDetailComponent,\r\n        resolve: createResolveData(ChannelResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: channelBreadcrumb },\r\n    },\r\n    {\r\n        path: 'roles',\r\n        component: RoleListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.roles'),\r\n        },\r\n    },\r\n    {\r\n        path: 'roles/:id',\r\n        component: RoleDetailComponent,\r\n        resolve: createResolveData(RoleResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: { breadcrumb: roleBreadcrumb },\r\n    },\r\n    {\r\n        path: 'tax-categories',\r\n        component: TaxCategoryListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.tax-categories'),\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-categories/:id',\r\n        component: TaxCategoryDetailComponent,\r\n        resolve: createResolveData(TaxCategoryResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: taxCategoryBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-rates',\r\n        component: TaxRateListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.tax-rates'),\r\n        },\r\n    },\r\n    {\r\n        path: 'tax-rates/:id',\r\n        component: TaxRateDetailComponent,\r\n        resolve: createResolveData(TaxRateResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: taxRateBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'countries',\r\n        component: CountryListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.countries'),\r\n        },\r\n    },\r\n    {\r\n        path: 'countries/:id',\r\n        component: CountryDetailComponent,\r\n        resolve: createResolveData(CountryResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: countryBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'zones',\r\n        component: ZoneListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.zones'),\r\n        },\r\n    },\r\n    {\r\n        path: 'shipping-methods',\r\n        component: ShippingMethodListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.shipping-methods'),\r\n        },\r\n    },\r\n    {\r\n        path: 'shipping-methods/:id',\r\n        component: ShippingMethodDetailComponent,\r\n        resolve: createResolveData(ShippingMethodResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: shippingMethodBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'payment-methods',\r\n        component: PaymentMethodListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.payment-methods'),\r\n        },\r\n    },\r\n    {\r\n        path: 'payment-methods/:id',\r\n        component: PaymentMethodDetailComponent,\r\n        resolve: createResolveData(PaymentMethodResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: paymentMethodBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'global-settings',\r\n        component: GlobalSettingsComponent,\r\n        resolve: createResolveData(GlobalSettingsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: _('breadcrumb.global-settings'),\r\n        },\r\n    },\r\n];\r\n\r\nexport function administratorBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Administrator>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.administrators',\r\n        getName: admin => `${admin.firstName} ${admin.lastName}`,\r\n        route: 'administrators',\r\n    });\r\n}\r\n\r\nexport function channelBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Channel>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.channels',\r\n        getName: channel => channel.code,\r\n        route: 'channels',\r\n    });\r\n}\r\n\r\nexport function roleBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Role>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.roles',\r\n        getName: role => role.description,\r\n        route: 'roles',\r\n    });\r\n}\r\n\r\nexport function taxCategoryBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<TaxCategory.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.tax-categories',\r\n        getName: category => category.name,\r\n        route: 'tax-categories',\r\n    });\r\n}\r\n\r\nexport function taxRateBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<TaxRate.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.tax-rates',\r\n        getName: category => category.name,\r\n        route: 'tax-rates',\r\n    });\r\n}\r\n\r\nexport function countryBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Country.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.countries',\r\n        getName: promotion => promotion.name,\r\n        route: 'countries',\r\n    });\r\n}\r\n\r\nexport function shippingMethodBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ShippingMethod.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.shipping-methods',\r\n        getName: method => method.name,\r\n        route: 'shipping-methods',\r\n    });\r\n}\r\n\r\nexport function paymentMethodBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<ShippingMethod.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.payment-methods',\r\n        getName: method => method.code,\r\n        route: 'payment-methods',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddCountryToZoneDialogComponent } from './components/add-country-to-zone-dialog/add-country-to-zone-dialog.component';\r\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\r\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\r\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\r\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\r\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\r\nimport { CountryListComponent } from './components/country-list/country-list.component';\r\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\r\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\r\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\r\nimport { PermissionGridComponent } from './components/permission-grid/permission-grid.component';\r\nimport { ProfileComponent } from './components/profile/profile.component';\r\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\r\nimport { RoleListComponent } from './components/role-list/role-list.component';\r\nimport { ShippingEligibilityTestResultComponent } from './components/shipping-eligibility-test-result/shipping-eligibility-test-result.component';\r\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\r\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\r\nimport { ShippingMethodTestResultComponent } from './components/shipping-method-test-result/shipping-method-test-result.component';\r\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\r\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\r\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\r\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\r\nimport { TestAddressFormComponent } from './components/test-address-form/test-address-form.component';\r\nimport { TestOrderBuilderComponent } from './components/test-order-builder/test-order-builder.component';\r\nimport { ZoneDetailDialogComponent } from './components/zone-detail-dialog/zone-detail-dialog.component';\r\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\r\nimport { ZoneMemberControlsDirective } from './components/zone-member-list/zone-member-controls.directive';\r\nimport { ZoneMemberListHeaderDirective } from './components/zone-member-list/zone-member-list-header.directive';\r\nimport { ZoneMemberListComponent } from './components/zone-member-list/zone-member-list.component';\r\nimport { settingsRoutes } from './settings.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(settingsRoutes)],\r\n    declarations: [\r\n        TaxCategoryListComponent,\r\n        TaxCategoryDetailComponent,\r\n        AdministratorListComponent,\r\n        RoleListComponent,\r\n        RoleDetailComponent,\r\n        AdminDetailComponent,\r\n        PermissionGridComponent,\r\n        CountryListComponent,\r\n        CountryDetailComponent,\r\n        TaxRateListComponent,\r\n        TaxRateDetailComponent,\r\n        ChannelListComponent,\r\n        ChannelDetailComponent,\r\n        ShippingMethodListComponent,\r\n        ShippingMethodDetailComponent,\r\n        PaymentMethodListComponent,\r\n        PaymentMethodDetailComponent,\r\n        GlobalSettingsComponent,\r\n        TestOrderBuilderComponent,\r\n        TestAddressFormComponent,\r\n        ShippingMethodTestResultComponent,\r\n        ShippingEligibilityTestResultComponent,\r\n        ZoneListComponent,\r\n        AddCountryToZoneDialogComponent,\r\n        ZoneMemberListComponent,\r\n        ZoneMemberListHeaderDirective,\r\n        ZoneMemberControlsDirective,\r\n        ZoneDetailDialogComponent,\r\n        ProfileComponent,\r\n    ],\r\n})\r\nexport class SettingsModule {}\r\n"]}