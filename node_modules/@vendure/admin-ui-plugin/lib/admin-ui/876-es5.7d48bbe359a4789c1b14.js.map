{"version":3,"mappings":"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","names":["t","tt","constructor","n","e","o","a","r","c","super","this","l","customFields","getCustomFieldConfig","ngOnInit","detailForm","name","tags","formBuilder","group","reduce","Object","init","ngOnDestroy","destroy","onAssetChange","get","setValue","markAsDirty","save","dataService","product","updateAsset","id","value","subscribe","notificationService","success","m","entity","error","setFormValues","length","setCustomFieldFormValues","s","selectors","nt","B","getAssetList","assets","d","h","searchTerm$","g","p","filterByTags$","map","f","options","skip","take","filter","contains","sort","createdAt","tagsOperator","paginationConfig$","O","itemsPerPage$","currentPage$","totalItems$","pipe","C","itemsPerPage","_ref2","currentPage","totalItems","et","D","destroy$","refresh","allTags$","getTagList","mapStream","items","filesSelected","uploading","createAssets","ke","_step","__typename","message","count","deleteAssets","showModalAndDelete","y","result","modalService","dialog","title","translationVars","body","buttons","type","label","returnValue","U","$","slice","selectAssets","fromComponent","size","kt","concat","featuredAsset","emitChangeEvent","changeDetector","markForCheck","setAsFeatured","isFeatured","previewAsset","closable","locals","asset","removeAsset","change","emit","dropListDropped","S","previousContainer","data","container","z","se","contentsCurrentPage$","route","paramMap","Vt","Lt","contentsItemsPerPage$","filterTermControl","valueChanges","Jt","setContentsPageNumber","collectionIdChange$","refresh$","collection","getCollectionContents","mapSingle","M","contents$","productVariants","contentsTotalItems$","ngOnChanges","next","collectionId","currentValue","complete","setParam","setContentsItemsPerPage","router","navigate","snapshot","params","relativeTo","queryParamsHandling","st","slug","description","visible","filters","array","getCollectionFilters","single$","allFilters","collectionFilters","getFilterDefinition","find","code","assetsChanged","values","assetChanges","updateSlug","entity$","languageCode$","w","pristine","R","addFilter","findIndex","args","push","control","removeFilter","removeAt","splice","create","dirty","P","getUpdatedCollection","parentId","createCollection","markAsPristine","updateCollection","contentsComponent","canDeactivate","patchValue","isPrivate","forEach","translatable","updatedFields","customFieldConfig","languageCode","defaultTranslation","assetIds","featuredAssetId","mapOperationsToInputs","arguments","i","Map","set","children","_step2","_step3","hasOwnProperty","expanded","parent","Q","collections","collectionTree","le","allMoveListItems","onDrop","item","Error","rearrange","index","currentIndex","onMove","onDelete","deleteCollection","getMoveListItems","calculateAllMoveListItems","ancestorIdPath","has","path","join","Set","isRootNode","lt","queryResult","getCollections","refetchOnChannelChange","items$","Mt","activeCollectionId$","activeCollectionTitle$","availableLanguages$","serverConfigService","getAvailableLanguages","contentLanguage$","client","uiState","contentLanguage","completed$","onRearrange","moveCollection","closeContents","contents","setLanguage","setContentLanguage","ref","refetch","dt","customValueFields","facet","updateCode","updateValueCode","customValueFieldIsSet","getValuesFormArray","addFacetValue","_step4","addControl","insert","getUpdatedFacet","createFacet","getAllFacets","Fn","updateFacet","getCreatedFacetValues","createFacetValues","getFacet","getUpdatedFacetValues","updateFacetValues","N","deleteFacetValue","deleteFacetValues","x","Z","at","A","I","_step5","J","Ot","Et","controls","translations","facetId","toString","q","ut","getFacets","facets","Gn","de","toggleDisplayLimit","displayLimit","initialLimit","deleteFacet","ao","call","ro","Wt","_assertThisInitialized","_next","notifyNext","notifyComplete","mt","ngAfterViewInit","setTimeout","selector","focus","selectValues","resolveWith","selectedValues","cancel","K","productVariantIds","userStatus","activeChannelId","settings","getChannels","channels","currentChannel","availableChannels","selectedChannelIdControl","selectChannel","variantsPreview$","mo","getTopVariants","priceFactorControl","_ref24","price","pricePreview","selectedChannel","assign","isProductVariantMode","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","getProduct","_ref25","variantList","includes","toPromise","lastIndexOf","substr","replace","Y","getTaxCategories","taxCategories","createProductWithVariants","createProduct","groups","createProductOptionGroups","_ref27","addOptionGroupToProduct","productId","optionGroupId","optionGroups","variants","optionValues","optionIds","_toConsumableArray","createProductVariants","createProductOptionGroup","sku","stockOnHand","stock","_ref29","updateProduct","autoUpdate","productInput","variantsInput","getProductVariants","_step6","jt","Le","oe","Dt","ee","_loop","updateProductVariants","updateProductOption","_step7","_iterator7","deleteProductVariant","Fo","factory","ɵfac","oxw","filterInput","W","customVariantFields","customOptionGroupFields","customOptionFields","enabled","autoUpdateVariantNames","facetValueIds","product$","_ref33","co","_ref35","filterOperator","bufferSize","refCount","variants$","ue","_step8","productVariantMap","taxCategories$","productDetailService","activeTab$","buildVariantFormArray","facets$","facetValues","getProductFormGroup","facetValues$","productChannels$","channelPriceIncludesTax$","getActiveChannel","activeChannel","pricesIncludeTax","navigateToTab","location","replaceState","createUrlTree","tab","isDefaultChannel","pe","setPage","setItemsPerPage","assignToChannel","currentChannelIds","removeFromChannel","removeProductsFromChannel","assignVariantToChannel","removeVariantFromChannel","variant","removeVariantsFromChannel","variantAssetsChanged","keys","variantAssetChanges","variantAssetChange","variantId","selectProductFacetValue","displayFacetValueModal","_ref45","removeProductFacetValue","selectVariantFacetValue","me","_step9","variantFacetValueChanges","_loop2","variantsToCreateAreValid","createVariantsConfig","every","getUpdatedProduct","console","getUpdatedProductVariants","updateSlugAfterSave","priceWithTax","taxCategoryId","taxCategory","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","emitEvent","selectTag","gt","isFacetValueItem","indexOf","toLowerCase","facetValue","toLocaleLowerCase","setSearchTerm","selectComponent","select","selectedItems","unselect","setFacetValues","onSelectChange","Array","isArray","lastTerm","searchTermChange","lastFacetValueIds","facetValueChange","addTagFn","isSearchHeaderSelected","itemsList","markedIndex","provide","Nt","useValue","decls","_t","queryParamMap","searchTerm","productSearchInput","selectedFacetValueIds$","getAll","_key","searchProducts","search","input","term","facetValueOperator","groupByProduct","result$","_e","getPendingSearchIndexUpdates","pendingSearchIndexUpdates","setQueryParam","page","setFacetValueIds","fvids","rebuildSearchIndex","reindex","info","jobQueueService","addJob","state","Intl","NumberFormat","format","duration","indexedItemCount","time","runPendingSearchIndexUpdates","deleteProduct","ht","optionGroupCustomFields","optionCustomFields","optionGroups$","getOptionGroups","getOptions","invalid","getUpdatedOptionGroup","updateProductOptionGroup","getUpdatedOption","_loop3","_step12","updatedAt","_iterator13","_step13","setControl","ft","confirm","fe","useExisting","E","multi","registerOnChange","onChangeFn","registerOnTouched","onTouchFn","setDisabledState","disabled","writeValue","textArea","nativeElement","removeOption","locked","handleKey","key","addOptionValue","preventDefault","lastSelected","removeLastOption","handleBlur","isFocussed","parseInputIntoOptions","split","trim","ve","_i2","vt","initOptionsAndVariants","currencyCode","onFormChanged","formValueChanged","getVariantsToAdd","generatedVariants","existing","getVariantName","addOption","isNew","generateVariants","getVariantPrototype","productVariantId","isDefault","optionsAreEqual","optionsAreSubset","Fi","deleteVariant","reFetchProduct","checkUniqueSkus","confirmDeletionOfObsoleteVariants","addOptionGroupsToProduct","addNewOptionsToGroups","fetchOptionGroups","createNewProductVariants","deleteObsoleteVariants","getObsoleteVariants","hasOnlyDefaultVariant","productOptionGroupId","addOptionToGroup","getProductOptionGroup","productOptionGroup","apply","getProductVariantsOptions","toOptionString","Ct","fileSize","mimeType","width","height","source","preview","focalPoint","getAsset","xt","getCollection","Zt","bt","X","Ce","component","breadcrumb","resolve","xe","Ze","be","Ae","Te","Pe","breadcrumbKey","getName","link","j","depth","parentName","permissions","hasUpdatePermission$","hasDeletePermission$","expandAll","previousValue","trackByFn","moveListItems","root","move","moveUp","moveDown","drop","previousIndex","delete","pipes","ne","At","variantFormValues","copyFromDefault","onFormChange","handleEnter","stopPropagation","variantsChange","Tt","productOption","activeLanguage","customFieldsForm","_step14","_iterator14","update","updateVariantName","codeInputTouched","Pt","getTaxRatesSimple","taxRates","taxRate$","taxCategoryIdChange$","defaultTaxZone","zone","category","grossPrice$","priceChange$","_ref64","Math","round","selectFacetValueClick","yt","getGlobalSettings","globalSettings","globalTrackInventory","globalOutOfStockThreshold","subscription","formArray","add","buildFormGroupMap","unsubscribe","trackById","inventoryIsNotTracked","getTaxCategoryName","getSaleableStockLevel","stockAllocated","areAllSelected","selectedVariantIds","assetChange","toggleSelectAll","selectionChange","toggleSelectVariant","optionGroupName","optionName","pendingFacetValues","getFacetValueIds","existingFacetValues","removeFacetValue","formGroupMap","isVariantSelected","editOption","clear","_step15","Ft","getFeaturedAsset","pendingAssetChanges","_step16","qt","b","$t"],"sources":["webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.html","webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.html","webpack:///src/lib/catalog/src/components/assets/assets.component.html","webpack:///src/lib/catalog/src/components/assets/assets.component.ts","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.html","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.html","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","webpack:///src/lib/catalog/src/components/collection-tree/array-to-tree.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.html","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.ts","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.html","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.html","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipUntil.js","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.html","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.html","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","webpack:///src/lib/catalog/src/providers/product-detail/replace-last.ts","webpack:///src/lib/catalog/src/providers/product-detail/product-detail.service.ts","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.html","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.ts","webpack:///src/lib/catalog/src/components/product-search-input/product-search-input.component.html","webpack:///src/lib/catalog/src/components/product-search-input/product-search-input.component.ts","webpack:///src/lib/catalog/src/components/product-list/product-list.component.html","webpack:///src/lib/catalog/src/components/product-list/product-list.component.ts","webpack:///src/lib/catalog/src/components/product-options-editor/product-options-editor.component.html","webpack:///src/lib/catalog/src/components/product-options-editor/product-options-editor.component.ts","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.html","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.ts","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.html","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.html","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","webpack:///src/lib/catalog/src/providers/routing/asset-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/collection-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/facet-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-variants-resolver.ts","webpack:///src/lib/catalog/src/catalog.routes.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.html","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.html","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.html","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.html","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.ts","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.html","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","webpack:///src/lib/catalog/src/catalog.module.ts"],"sourcesContent":["<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"asset-detail\"></vdr-action-bar-items>\r\n        <button\r\n            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<vdr-asset-preview\r\n    [asset]=\"entity$ | async\"\r\n    [editable]=\"true\"\r\n    [customFields]=\"customFields\"\r\n    [customFieldsForm]=\"detailForm.get('customFields')\"\r\n    (assetChange)=\"onAssetChange($event)\"\r\n></vdr-asset-preview>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    GetAsset,\r\n    LanguageCode,\r\n} from '@vendure/admin-ui/core';\r\nimport { DataService, NotificationService, ServerConfigService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-detail',\r\n    templateUrl: './asset-detail.component.html',\r\n    styleUrls: ['./asset-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssetDetailComponent extends BaseDetailComponent<GetAsset.Asset> implements OnInit, OnDestroy {\r\n    detailForm = new FormGroup({});\r\n    customFields: CustomFieldConfig[];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Asset');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.detailForm = new FormGroup({\r\n            name: new FormControl(''),\r\n            tags: new FormControl([]),\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\r\n        this.detailForm.get('name')?.setValue(event.name);\r\n        this.detailForm.get('tags')?.setValue(event.tags);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    save() {\r\n        this.dataService.product\r\n            .updateAsset({\r\n                id: this.id,\r\n                name: this.detailForm.value.name,\r\n                tags: this.detailForm.value.tags,\r\n                customFields: this.detailForm.value.customFields,\r\n            })\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Asset',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(entity: GetAsset.Asset, languageCode: LanguageCode): void {\r\n        this.detailForm.get('name')?.setValue(entity.name);\r\n        this.detailForm.get('tags')?.setValue(entity.tags);\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetAssetList,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SortOrder,\r\n    TagFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\r\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-list',\r\n    templateUrl: './asset-list.component.html',\r\n    styleUrls: ['./asset-list.component.scss'],\r\n})\r\nexport class AssetListComponent\r\n    extends BaseListComponent<GetAssetList.Query, GetAssetList.Items, GetAssetList.Variables>\r\n    implements OnInit {\r\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\r\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\r\n    uploading = false;\r\n    allTags$: Observable<TagFragment[]>;\r\n    paginationConfig$: Observable<PaginationInstance>;\r\n\r\n    constructor(\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.product.getAssetList(...args),\r\n            data => data.assets,\r\n            (skip, take) => {\r\n                const searchTerm = this.searchTerm$.value;\r\n                const tags = this.filterByTags$.value?.map(t => t.value);\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        ...(searchTerm\r\n                            ? {\r\n                                  filter: {\r\n                                      name: { contains: searchTerm },\r\n                                  },\r\n                              }\r\n                            : {}),\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                        tags,\r\n                        tagsOperator: LogicalOperator.AND,\r\n                    },\r\n                };\r\n            },\r\n            { take: 25, skip: 0 },\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\r\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\r\n        );\r\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n\r\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\r\n    }\r\n\r\n    filesSelected(files: File[]) {\r\n        if (files.length) {\r\n            this.uploading = true;\r\n            this.dataService.product\r\n                .createAssets(files)\r\n                .pipe(finalize(() => (this.uploading = false)))\r\n                .subscribe(({ createAssets }) => {\r\n                    let successCount = 0;\r\n                    for (const result of createAssets) {\r\n                        switch (result.__typename) {\r\n                            case 'Asset':\r\n                                successCount++;\r\n                                break;\r\n                            case 'MimeTypeError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (0 < successCount) {\r\n                        super.refresh();\r\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\r\n                            count: successCount,\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAssets(assets: Asset[]) {\r\n        this.showModalAndDelete(assets.map(a => a.id))\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(\r\n                            assets.map(a => a.id),\r\n                            response.message || '',\r\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(assetIds: string[], message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-assets'),\r\n                translationVars: {\r\n                    count: assetIds.length,\r\n                },\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\r\n                map(res => res.deleteAssets),\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left [grow]=\"true\">\r\n        <vdr-asset-search-input\r\n            class=\"pr4 mt1\"\r\n            [tags]=\"allTags$ | async\"\r\n            (searchTermChange)=\"searchTerm$.next($event)\"\r\n            (tagsChange)=\"filterByTags$.next($event)\"\r\n        ></vdr-asset-search-input>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"asset-list\"></vdr-action-bar-items>\r\n        <vdr-asset-file-input\r\n            (selectFiles)=\"filesSelected($event)\"\r\n            [uploading]=\"uploading\"\r\n            dropZoneTarget=\".content-area\"\r\n        ></vdr-asset-file-input>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-asset-gallery\r\n    [assets]=\"(items$ | async)! | paginate: (paginationConfig$ | async) || {}\"\r\n    [multiSelect]=\"true\"\r\n    [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\r\n    (deleteAssets)=\"deleteAssets($event)\"\r\n></vdr-asset-gallery>\r\n\r\n<div class=\"paging-controls\">\r\n    <vdr-items-per-page-controls\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    ></vdr-items-per-page-controls>\r\n\r\n    <vdr-pagination-controls\r\n        [currentPage]=\"currentPage$ | async\"\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        [totalItems]=\"totalItems$ | async\"\r\n        (pageChange)=\"setPageNumber($event)\"\r\n    ></vdr-pagination-controls>\r\n</div>\r\n","<div class=\"card\" *ngIf=\"!compact; else compactView\">\r\n    <div class=\"card-img\">\r\n        <div class=\"featured-asset\">\r\n            <img\r\n                *ngIf=\"featuredAsset\"\r\n                [src]=\"featuredAsset | assetPreview:'small'\"\r\n                (click)=\"previewAsset(featuredAsset)\"\r\n            />\r\n            <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\">\r\n                <clr-icon shape=\"image\" size=\"128\"></clr-icon>\r\n                <div>{{ 'catalog.no-featured-asset' | translate }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\"><ng-container *ngTemplateOutlet=\"assetList\"></ng-container></div>\r\n    <div class=\"card-footer\" *vdrIfPermissions=\"updatePermissions\">\r\n        <button class=\"btn\" (click)=\"selectAssets()\">\r\n            <clr-icon shape=\"attachment\"></clr-icon>\r\n            {{ 'asset.add-asset' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #compactView>\r\n    <div class=\"featured-asset compact\">\r\n        <img\r\n            *ngIf=\"featuredAsset\"\r\n            [src]=\"featuredAsset | assetPreview:'thumb'\"\r\n            (click)=\"previewAsset(featuredAsset)\"\r\n        />\r\n\r\n        <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\"><clr-icon shape=\"image\" size=\"150\"></clr-icon></div>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"assetList\"></ng-container>\r\n    <button\r\n        *vdrIfPermissions=\"updatePermissions\"\r\n        class=\"compact-select btn btn-icon btn-sm btn-block\"\r\n        [title]=\"'asset.add-asset' | translate\"\r\n        (click)=\"selectAssets()\"\r\n    >\r\n        <clr-icon shape=\"attachment\"></clr-icon>\r\n        {{ 'asset.add-asset' | translate }}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #assetList>\r\n    <div class=\"all-assets\" [class.compact]=\"compact\" cdkDropListGroup>\r\n        <div\r\n            *ngFor=\"let asset of assets; let index = index\"\r\n            class=\"drop-list\"\r\n            cdkDropList\r\n            cdkDropListOrientation=\"horizontal\"\r\n            [cdkDropListData]=\"index\"\r\n            [cdkDropListDisabled]=\"!(updatePermissions | hasPermission)\"\r\n            (cdkDropListDropped)=\"dropListDropped($event)\"\r\n        >\r\n            <vdr-dropdown cdkDrag>\r\n                <div\r\n                    class=\"asset-thumb\"\r\n                    vdrDropdownTrigger\r\n                    [class.featured]=\"isFeatured(asset)\"\r\n                    [title]=\"\"\r\n                    tabindex=\"0\"\r\n                >\r\n                    <img [src]=\"asset | assetPreview:'tiny'\" />\r\n                </div>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button type=\"button\" vdrDropdownItem (click)=\"previewAsset(asset)\">\r\n                        {{ 'asset.preview' | translate }}\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        [disabled]=\"isFeatured(asset) || !(updatePermissions | hasPermission)\"\r\n                        vdrDropdownItem\r\n                        (click)=\"setAsFeatured(asset)\"\r\n                    >\r\n                        {{ 'asset.set-as-featured-asset' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"remove-asset\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"!(updatePermissions | hasPermission)\"\r\n                        (click)=\"removeAsset(asset)\"\r\n                    >\r\n                        {{ 'asset.remove-asset' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    HostBinding,\r\n    Input,\r\n    Output,\r\n} from '@angular/core';\r\nimport {\r\n    Asset,\r\n    AssetPickerDialogComponent,\r\n    AssetPreviewDialogComponent,\r\n    ModalService,\r\n    Permission,\r\n} from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport interface AssetChange {\r\n    assets: Asset[];\r\n    featuredAsset: Asset | undefined;\r\n}\r\n\r\n/**\r\n * A component which displays the Assets, and allows assets to be removed and\r\n * added, and for the featured asset to be set.\r\n *\r\n * Note: rather complex code for drag drop is due to a limitation of the default CDK implementation\r\n * which is addressed by a work-around from here: https://github.com/angular/components/issues/13372#issuecomment-483998378\r\n */\r\n@Component({\r\n    selector: 'vdr-assets',\r\n    templateUrl: './assets.component.html',\r\n    styleUrls: ['./assets.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssetsComponent {\r\n    @Input('assets') set assetsSetter(val: Asset[]) {\r\n        // create a new non-readonly array of assets\r\n        this.assets = (val || []).slice();\r\n    }\r\n\r\n    @Input() featuredAsset: Asset | undefined;\r\n    @HostBinding('class.compact')\r\n    @Input()\r\n    compact = false;\r\n    @Output() change = new EventEmitter<AssetChange>();\r\n\r\n    public assets: Asset[] = [];\r\n\r\n    @Input()\r\n    updatePermissions: string | string[] | Permission | Permission[];\r\n\r\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    selectAssets() {\r\n        this.modalService\r\n            .fromComponent(AssetPickerDialogComponent, {\r\n                size: 'xl',\r\n            })\r\n            .subscribe(result => {\r\n                if (result && result.length) {\r\n                    this.assets = unique(this.assets.concat(result), 'id');\r\n                    if (!this.featuredAsset) {\r\n                        this.featuredAsset = result[0];\r\n                    }\r\n                    this.emitChangeEvent(this.assets, this.featuredAsset);\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    setAsFeatured(asset: Asset) {\r\n        this.featuredAsset = asset;\r\n        this.emitChangeEvent(this.assets, asset);\r\n    }\r\n\r\n    isFeatured(asset: Asset): boolean {\r\n        return !!this.featuredAsset && this.featuredAsset.id === asset.id;\r\n    }\r\n\r\n    previewAsset(asset: Asset) {\r\n        this.modalService\r\n            .fromComponent(AssetPreviewDialogComponent, {\r\n                size: 'xl',\r\n                closable: true,\r\n                locals: { asset },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeAsset(asset: Asset) {\r\n        this.assets = this.assets.filter(a => a.id !== asset.id);\r\n        if (this.featuredAsset && this.featuredAsset.id === asset.id) {\r\n            this.featuredAsset = this.assets.length > 0 ? this.assets[0] : undefined;\r\n        }\r\n        this.emitChangeEvent(this.assets, this.featuredAsset);\r\n    }\r\n\r\n    private emitChangeEvent(assets: Asset[], featuredAsset: Asset | undefined) {\r\n        this.change.emit({\r\n            assets,\r\n            featuredAsset,\r\n        });\r\n    }\r\n\r\n    dropListDropped(event: CdkDragDrop<number>) {\r\n        moveItemInArray(this.assets, event.previousContainer.data, event.container.data);\r\n        this.emitChangeEvent(this.assets, this.featuredAsset);\r\n    }\r\n}\r\n","<div class=\"contents-header\">\r\n    <div class=\"header-title-row\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\r\n        ></ng-container>\r\n    </div>\r\n    <input\r\n        type=\"text\"\r\n        [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n        [formControl]=\"filterTermControl\"\r\n    />\r\n</div>\r\n<vdr-data-table\r\n    [items]=\"contents$ | async\"\r\n    [itemsPerPage]=\"contentsItemsPerPage$ | async\"\r\n    [totalItems]=\"contentsTotalItems$ | async\"\r\n    [currentPage]=\"contentsCurrentPage$ | async\"\r\n    (pageChange)=\"setContentsPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\r\n>\r\n    <ng-template let-variant=\"item\">\r\n        <td class=\"left align-middle\">{{ variant.name }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['/catalog/products', variant.productId, { tab: 'variants' }]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ContentChild,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    startWith,\r\n    switchMap,\r\n    takeUntil,\r\n    tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { GetCollectionContents } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-contents',\r\n    templateUrl: './collection-contents.component.html',\r\n    styleUrls: ['./collection-contents.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Input() collectionId: string;\r\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\r\n\r\n    contents$: Observable<GetCollectionContents.Items[]>;\r\n    contentsTotalItems$: Observable<number>;\r\n    contentsItemsPerPage$: Observable<number>;\r\n    contentsCurrentPage$: Observable<number>;\r\n    filterTermControl = new FormControl('');\r\n    private collectionIdChange$ = new BehaviorSubject<string>('');\r\n    private refresh$ = new BehaviorSubject<boolean>(true);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.contentsCurrentPage$ = this.route.paramMap.pipe(\r\n            map(qpm => qpm.get('contentsPage')),\r\n            map(page => (!page ? 1 : +page)),\r\n            startWith(1),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.contentsItemsPerPage$ = this.route.paramMap.pipe(\r\n            map(qpm => qpm.get('contentsPerPage')),\r\n            map(perPage => (!perPage ? 10 : +perPage)),\r\n            startWith(10),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\r\n            debounceTime(250),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(''),\r\n        );\r\n\r\n        const collection$ = combineLatest(\r\n            this.collectionIdChange$,\r\n            this.contentsCurrentPage$,\r\n            this.contentsItemsPerPage$,\r\n            filterTerm$,\r\n            this.refresh$,\r\n        ).pipe(\r\n            takeUntil(this.destroy$),\r\n            switchMap(([id, currentPage, itemsPerPage, filterTerm]) => {\r\n                const take = itemsPerPage;\r\n                const skip = (currentPage - 1) * itemsPerPage;\r\n                if (id) {\r\n                    return this.dataService.collection\r\n                        .getCollectionContents(id, take, skip, filterTerm)\r\n                        .mapSingle(data => data.collection);\r\n                } else {\r\n                    return of(null);\r\n                }\r\n            }),\r\n        );\r\n\r\n        this.contents$ = collection$.pipe(map(result => (result ? result.productVariants.items : [])));\r\n        this.contentsTotalItems$ = collection$.pipe(\r\n            map(result => (result ? result.productVariants.totalItems : 0)),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('collectionId' in changes) {\r\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setContentsPageNumber(page: number) {\r\n        this.setParam('contentsPage', page);\r\n    }\r\n\r\n    setContentsItemsPerPage(perPage: number) {\r\n        this.setParam('contentsPerPage', perPage);\r\n    }\r\n\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n\r\n    private setParam(key: string, value: any) {\r\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n        });\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"collection-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as category\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col\">\r\n            <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                <clr-toggle-wrapper>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrToggle\r\n                        formControlName=\"visible\"\r\n                        id=\"visibility\"\r\n                        [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                    />\r\n                    <label class=\"visible-toggle\">\r\n                        <ng-container *ngIf=\"detailForm.value.visible; else private\">{{ 'catalog.public' | translate }}</ng-container>\r\n                        <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                    </label>\r\n                </clr-toggle-wrapper>\r\n            </vdr-form-field>\r\n            <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                <input\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    formControlName=\"name\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    (input)=\"updateSlug($event.target.value)\"\r\n                />\r\n            </vdr-form-field>\r\n            <vdr-form-field\r\n                [label]=\"'catalog.slug' | translate\"\r\n                for=\"slug\"\r\n                [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\r\n            >\r\n                <input\r\n                    id=\"slug\"\r\n                    type=\"text\"\r\n                    formControlName=\"slug\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                />\r\n            </vdr-form-field>\r\n            <vdr-rich-text-editor\r\n                formControlName=\"description\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                [label]=\"'common.description' | translate\"\r\n            ></vdr-rich-text-editor>\r\n\r\n            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                <label>{{ 'common.custom-fields' | translate }}</label>\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Collection\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get(['customFields'])\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </section>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"collection-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n        </div>\r\n        <div class=\"clr-col-md-auto\">\r\n            <vdr-assets\r\n                [assets]=\"category.assets\"\r\n                [featuredAsset]=\"category.featuredAsset\"\r\n                [updatePermissions]=\"updatePermission\"\r\n                (change)=\"assetChanges = $event\"\r\n            ></vdr-assets>\r\n        </div>\r\n    </div>\r\n    <div class=\"clr-row\" formArrayName=\"filters\">\r\n        <div class=\"clr-col\">\r\n            <label>{{ 'catalog.filters' | translate }}</label>\r\n            <ng-container *ngFor=\"let filter of filters; index as i\">\r\n                <vdr-configurable-input\r\n                    (remove)=\"removeFilter($event)\"\r\n                    [operation]=\"filter\"\r\n                    [operationDefinition]=\"getFilterDefinition(filter)\"\r\n                    [formControlName]=\"i\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                ></vdr-configurable-input>\r\n            </ng-container>\r\n\r\n            <div *vdrIfPermissions=\"updatePermission\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'marketing.add-condition' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let filter of allFilters\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"addFilter(filter)\"\r\n                        >\r\n                            {{ filter.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <vdr-collection-contents [collectionId]=\"id\" #collectionContents>\r\n                <ng-template let-count>\r\n                    <div class=\"contents-title\">\r\n                        {{ 'catalog.collection-contents' | translate }} ({{\r\n                            'common.results-count' | translate: { count: count }\r\n                        }})\r\n                    </div>\r\n                </ng-template>\r\n            </vdr-collection-contents>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    Collection,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    ConfigurableOperationInput,\r\n    CreateCollectionInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    findTranslation,\r\n    getConfigArgValue,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    unicodePatternValidator,\r\n    UpdateCollectionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-detail',\r\n    templateUrl: './collection-detail.component.html',\r\n    styleUrls: ['./collection-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionDetailComponent\r\n    extends BaseDetailComponent<Collection.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\r\n    filters: ConfigurableOperation[] = [];\r\n    allFilters: ConfigurableOperationDefinition[] = [];\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\r\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Collection');\r\n        this.detailForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9_-]+$/)],\r\n            description: '',\r\n            visible: false,\r\n            filters: this.formBuilder.array([]),\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\r\n            this.allFilters = res.collectionFilters;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    getFilterDefinition(filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\r\n        return this.allFilters.find(f => f.code === filter.code);\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    /**\r\n     * If creating a new Collection, automatically generate the slug based on the collection name.\r\n     */\r\n    updateSlug(nameValue: string) {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(take(1))\r\n            .subscribe(([entity, languageCode]) => {\r\n                const slugControl = this.detailForm.get(['slug']);\r\n                const currentTranslation = findTranslation(entity, languageCode);\r\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\r\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\r\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\r\n                }\r\n            });\r\n    }\r\n\r\n    addFilter(collectionFilter: ConfigurableOperation) {\r\n        const filtersArray = this.detailForm.get('filters') as FormArray;\r\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\r\n        if (index === -1) {\r\n            const argsHash = collectionFilter.args.reduce(\r\n                (output, arg) => ({\r\n                    ...output,\r\n                    [arg.name]: getConfigArgValue(arg.value),\r\n                }),\r\n                {},\r\n            );\r\n            filtersArray.push(\r\n                this.formBuilder.control({\r\n                    code: collectionFilter.code,\r\n                    args: argsHash,\r\n                }),\r\n            );\r\n            this.filters.push({\r\n                code: collectionFilter.code,\r\n                args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\r\n            });\r\n        }\r\n    }\r\n\r\n    removeFilter(collectionFilter: ConfigurableOperation) {\r\n        const filtersArray = this.detailForm.get('filters') as FormArray;\r\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\r\n        if (index !== -1) {\r\n            filtersArray.removeAt(index);\r\n            this.filters.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([category, languageCode]) => {\r\n                    const input = this.getUpdatedCollection(\r\n                        category,\r\n                        this.detailForm,\r\n                        languageCode,\r\n                    ) as CreateCollectionInput;\r\n                    const parentId = this.route.snapshot.paramMap.get('parentId');\r\n                    if (parentId) {\r\n                        input.parentId = parentId;\r\n                    }\r\n                    return this.dataService.collection.createCollection(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.assetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([category, languageCode]) => {\r\n                    const input = this.getUpdatedCollection(\r\n                        category,\r\n                        this.detailForm,\r\n                        languageCode,\r\n                    ) as UpdateCollectionInput;\r\n                    return this.dataService.collection.updateCollection(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.assetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.contentsComponent.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the category or current language.\r\n     */\r\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(entity, languageCode);\r\n\r\n        this.detailForm.patchValue({\r\n            name: currentTranslation ? currentTranslation.name : '',\r\n            slug: currentTranslation ? currentTranslation.slug : '',\r\n            description: currentTranslation ? currentTranslation.description : '',\r\n            visible: !entity.isPrivate,\r\n        });\r\n\r\n        entity.filters.forEach(f => this.addFilter(f));\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                entity,\r\n                currentTranslation,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a category and the value of the form, this method creates an updated copy of the category which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedCollection(\r\n        category: Collection.Fragment,\r\n        form: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): CreateCollectionInput | UpdateCollectionInput {\r\n        const updatedCategory = createUpdatedTranslatable({\r\n            translatable: category,\r\n            updatedFields: form.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: category.name || '',\r\n                slug: category.slug || '',\r\n                description: category.description || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedCategory,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            isPrivate: !form.value.visible,\r\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\r\n     */\r\n    private mapOperationsToInputs(\r\n        operations: ConfigurableOperation[],\r\n        formValueOperations: any,\r\n    ): ConfigurableOperationInput[] {\r\n        return operations.map((o, i) => {\r\n            return {\r\n                code: o.code,\r\n                arguments: Object.values(formValueOperations[i].args).map((value: any, j) => ({\r\n                    name: o.args[j].name,\r\n                    value: encodeConfigArgValue(value),\r\n                })),\r\n            };\r\n        });\r\n    }\r\n}\r\n","export type HasParent = { id: string; parent?: { id: string } | null };\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\n\n/**\n * Builds a tree from an array of nodes which have a parent.\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\n */\nexport function arrayToTree<T extends HasParent>(nodes: T[], currentState?: RootNode<T>): RootNode<T> {\n    const topLevelNodes: Array<TreeNode<T>> = [];\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\n    const currentStateMap = treeToMap(currentState);\n\n    // First map the nodes of the array to an object -> create a hash table.\n    for (const node of nodes) {\n        mappedArr[node.id] = { ...(node as any), children: [] };\n    }\n\n    for (const id of nodes.map(n => n.id)) {\n        if (mappedArr.hasOwnProperty(id)) {\n            const mappedElem = mappedArr[id];\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? false;\n            const parent = mappedElem.parent;\n            if (!parent) {\n                continue;\n            }\n            // If the element is not at the root level, add it to its parent array of children.\n            const parentIsRoot = !mappedArr[parent.id];\n            if (!parentIsRoot) {\n                if (mappedArr[parent.id]) {\n                    mappedArr[parent.id].children.push(mappedElem);\n                } else {\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\n                }\n            } else {\n                topLevelNodes.push(mappedElem);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\n    return { id: rootId, children: topLevelNodes };\n}\n\n/**\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n */\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\n    const nodeMap = new Map<string, TreeNode<T>>();\n    function visit(node: TreeNode<T>) {\n        nodeMap.set(node.id, node);\n        node.children.forEach(visit);\n    }\n    if (tree) {\n        visit(tree as TreeNode<T>);\n    }\n    return nodeMap;\n}\n","<vdr-collection-tree-node\r\n    *ngIf=\"collectionTree\"\r\n    cdkDropListGroup\r\n    [expandAll]=\"expandAll\"\r\n    [collectionTree]=\"collectionTree\"\r\n    [activeCollectionId]=\"activeCollectionId\"\r\n></vdr-collection-tree-node>\r\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { Collection } from '@vendure/admin-ui/core';\r\n\r\nimport { arrayToTree, HasParent, RootNode, TreeNode } from './array-to-tree';\r\n\r\nexport type RearrangeEvent = { collectionId: string; parentId: string; index: number };\r\nexport type CollectionPartial = Pick<Collection.Fragment, 'id' | 'parent' | 'name'>;\r\n\r\n@Component({\r\n    selector: 'vdr-collection-tree',\r\n    templateUrl: 'collection-tree.component.html',\r\n    styleUrls: ['./collection-tree.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionTreeComponent implements OnChanges {\r\n    @Input() collections: CollectionPartial[];\r\n    @Input() activeCollectionId: string;\r\n    @Input() expandAll = false;\r\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\r\n    @Output() deleteCollection = new EventEmitter<string>();\r\n    collectionTree: RootNode<CollectionPartial>;\r\n    private allMoveListItems: Array<{ path: string; id: string; ancestorIdPath: Set<string> }> = [];\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ('collections' in changes && this.collections) {\r\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree);\r\n            this.allMoveListItems = [];\r\n        }\r\n    }\r\n\r\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\r\n        const item = event.item.data as CollectionPartial;\r\n        const newParent = event.container.data;\r\n        const newParentId = newParent.id;\r\n        if (newParentId == null) {\r\n            throw new Error(`Could not determine the ID of the root Collection`);\r\n        }\r\n        this.rearrange.emit({\r\n            collectionId: item.id,\r\n            parentId: newParentId,\r\n            index: event.currentIndex,\r\n        });\r\n    }\r\n\r\n    onMove(event: RearrangeEvent) {\r\n        this.rearrange.emit(event);\r\n    }\r\n\r\n    onDelete(id: string) {\r\n        this.deleteCollection.emit(id);\r\n    }\r\n\r\n    getMoveListItems(collection: CollectionPartial) {\r\n        if (this.allMoveListItems.length === 0) {\r\n            this.allMoveListItems = this.calculateAllMoveListItems();\r\n        }\r\n        return this.allMoveListItems.filter(\r\n            item =>\r\n                item.id !== collection.id &&\r\n                !item.ancestorIdPath.has(collection.id) &&\r\n                item.id !== collection.parent?.id,\r\n        );\r\n    }\r\n\r\n    calculateAllMoveListItems() {\r\n        const visit = (\r\n            node: TreeNode<any>,\r\n            parentPath: string[],\r\n            ancestorIdPath: Set<string>,\r\n            output: Array<{ path: string; id: string; ancestorIdPath: Set<string> }>,\r\n        ) => {\r\n            const path = parentPath.concat(node.name);\r\n            output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id, ancestorIdPath });\r\n            node.children.forEach(child =>\r\n                visit(child, path, new Set<string>([...ancestorIdPath, node.id]), output),\r\n            );\r\n            return output;\r\n        };\r\n        return visit(this.collectionTree, [], new Set<string>(), []);\r\n    }\r\n\r\n    private isRootNode<T extends HasParent>(node: T | RootNode<T>): node is RootNode<T> {\r\n        return !node.hasOwnProperty('parent');\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex center wrap\">\r\n            <vdr-language-selector\r\n                class=\"mt2\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n            <clr-checkbox-wrapper\r\n                class=\"expand-all-toggle ml3\"\r\n                [ngClass]=\"(availableLanguages$ | async)?.length === 1 ? 'mt3' : 'mt1'\"\r\n            >\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"expandAll\" />\r\n                <label>{{ 'catalog.expand-all-collections' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <input\r\n                type='text'\r\n                name='searchTerm'\r\n                [formControl]='filterTermControl'\r\n                [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n                class='clr-input search-input ml4'\r\n            />\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"collection-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\r\n            [routerLink]=\"['./create']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'catalog.create-new-collection' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"collection-wrapper\">\r\n    <vdr-collection-tree\r\n        [collections]=\"items$ | async\"\r\n        [activeCollectionId]=\"activeCollectionId$ | async\"\r\n        [expandAll]=\"expandAll\"\r\n        (rearrange)=\"onRearrange($event)\"\r\n        (deleteCollection)=\"deleteCollection($event)\"\r\n    ></vdr-collection-tree>\r\n\r\n    <div class=\"collection-contents\" [class.expanded]=\"activeCollectionId$ | async\">\r\n        <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\">\r\n            <ng-template let-count>\r\n                <div class=\"collection-title\">\r\n                    {{ activeCollectionTitle$ | async }} ({{\r\n                        'common.results-count' | translate: { count: count }\r\n                    }})\r\n                </div>\r\n                <button type=\"button\" class=\"close-button\" (click)=\"closeContents()\">\r\n                    <clr-icon shape=\"close\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n        </vdr-collection-contents>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    GetCollectionList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    QueryResult,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    shareReplay,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { RearrangeEvent } from '../collection-tree/collection-tree.component';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-list',\r\n    templateUrl: './collection-list.component.html',\r\n    styleUrls: ['./collection-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionListComponent implements OnInit, OnDestroy {\r\n    filterTermControl = new FormControl('');\r\n    activeCollectionId$: Observable<string | null>;\r\n    activeCollectionTitle$: Observable<string>;\r\n    items$: Observable<GetCollectionList.Items[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    expandAll = false;\r\n    private queryResult: QueryResult<any>;\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private serverConfigService: ServerConfigService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.queryResult = this.dataService.collection.getCollections(1000, 0).refetchOnChannelChange();\r\n        this.items$ = this.queryResult.mapStream(data => data.collections.items).pipe(shareReplay(1));\r\n        this.activeCollectionId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$).pipe(\r\n            map(([id, collections]) => {\r\n                if (id) {\r\n                    const match = collections.find(c => c.id === id);\r\n                    return match ? match.name : '';\r\n                }\r\n                return '';\r\n            }),\r\n        );\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n\r\n        this.filterTermControl.valueChanges\r\n            .pipe(debounceTime(250), takeUntil(this.destroy$))\r\n            .subscribe(() => this.refresh());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.queryResult.completed$.next();\r\n        this.destroy$.next(undefined);\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    onRearrange(event: RearrangeEvent) {\r\n        this.dataService.collection.moveCollection([event]).subscribe({\r\n            next: () => {\r\n                this.notificationService.success(_('common.notify-saved-changes'));\r\n                this.refresh();\r\n            },\r\n            error: err => {\r\n                this.notificationService.error(_('common.notify-save-changes-error'));\r\n            },\r\n        });\r\n    }\r\n\r\n    deleteCollection(id: string) {\r\n        this.items$\r\n            .pipe(\r\n                take(1),\r\n                map(items => -1 < items.findIndex(i => i.parent && i.parent.id === id)),\r\n                switchMap(hasChildren => {\r\n                    return this.modalService.dialog({\r\n                        title: _('catalog.confirm-delete-collection'),\r\n                        body: hasChildren\r\n                            ? _('catalog.confirm-delete-collection-and-children-body')\r\n                            : undefined,\r\n                        buttons: [\r\n                            { type: 'secondary', label: _('common.cancel') },\r\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                        ],\r\n                    });\r\n                }),\r\n                switchMap(response => (response ? this.dataService.collection.deleteCollection(id) : EMPTY)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeContents() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    private refresh() {\r\n        this.queryResult.ref.refetch({\r\n            options: {\r\n                skip: 0,\r\n                take: 1000,\r\n                ...(this.filterTermControl.value\r\n                    ? {\r\n                          filter: {\r\n                              name: {\r\n                                  contains: this.filterTermControl.value,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {}),\r\n            },\r\n        });\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"facet-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as facet\">\r\n    <section class=\"form-block\" formGroupName=\"facet\">\r\n        <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n            <clr-toggle-wrapper>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrToggle\r\n                    [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                    formControlName=\"visible\"\r\n                    id=\"visibility\"\r\n                />\r\n                <label class=\"visible-toggle\">\r\n                    <ng-container *ngIf=\"detailForm.value.facet.visible; else private\">{{\r\n                        'catalog.public' | translate\r\n                    }}</ng-container>\r\n                    <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                </label>\r\n            </clr-toggle-wrapper>\r\n        </vdr-form-field>\r\n        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n            <input\r\n                id=\"name\"\r\n                type=\"text\"\r\n                formControlName=\"name\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (input)=\"updateCode(facet.code, $event.target.value)\"\r\n            />\r\n        </vdr-form-field>\r\n        <vdr-form-field\r\n            [label]=\"'common.code' | translate\"\r\n            for=\"code\"\r\n            [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n        >\r\n            <input\r\n                id=\"code\"\r\n                type=\"text\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"code\"\r\n            />\r\n        </vdr-form-field>\r\n\r\n        <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n            <label>{{ 'common.custom-fields' | translate }}</label>\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Facet\"\r\n                [customFields]=\"customFields\"\r\n                [customFieldsFormGroup]=\"detailForm.get(['facet', 'customFields'])\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n            ></vdr-tabbed-custom-fields>\r\n        </section>\r\n        <vdr-custom-detail-component-host\r\n            locationId=\"facet-detail\"\r\n            [entity$]=\"entity$\"\r\n            [detailForm]=\"detailForm\"\r\n        ></vdr-custom-detail-component-host>\r\n    </section>\r\n\r\n    <section class=\"form-block\" *ngIf=\"!(isNew$ | async)\">\r\n        <label>{{ 'catalog.facet-values' | translate }}</label>\r\n\r\n        <table class=\"facet-values-list table\" formArrayName=\"values\" *ngIf=\"0 < getValuesFormArray().length\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'common.name' | translate }}</th>\r\n                    <th>{{ 'common.code' | translate }}</th>\r\n                    <ng-container *ngIf=\"customValueFields.length\">\r\n                        <th>{{ 'common.custom-fields' | translate }}</th>\r\n                    </ng-container>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr class=\"facet-value\" *ngFor=\"let value of values; let i = index\" [formGroupName]=\"i\">\r\n                    <td class=\"align-middle\">\r\n                        <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <input\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateValueCode(facet.values[i]?.code, $event.target.value, i)\"\r\n                        />\r\n                    </td>\r\n                    <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" readonly /></td>\r\n                    <td class=\"\" *ngIf=\"customValueFields.length\">\r\n                        <vdr-tabbed-custom-fields\r\n                            entityName=\"FacetValue\"\r\n                            [customFields]=\"customValueFields\"\r\n                            [compact]=\"true\"\r\n                            [customFieldsFormGroup]=\"detailForm.get(['values', i, 'customFields'])\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        ></vdr-tabbed-custom-fields>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"delete-button\"\r\n                                    (click)=\"deleteFacetValue(facet.values[i]?.id, i)\"\r\n                                    [disabled]=\"!(updatePermission | hasPermission)\"\r\n                                    vdrDropdownItem\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n\r\n        <div>\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary\"\r\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n                (click)=\"addFacetValue()\"\r\n            >\r\n                <clr-icon shape=\"add\"></clr-icon>\r\n                {{ 'catalog.add-facet-value' | translate }}\r\n            </button>\r\n        </div>\r\n    </section>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateFacetInput,\r\n    CreateFacetValueInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    DeletionResult,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    UpdateFacetInput,\r\n    UpdateFacetValueInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\r\nimport { map, mapTo, mergeMap, switchMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-facet-detail',\r\n    templateUrl: './facet-detail.component.html',\r\n    styleUrls: ['./facet-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FacetDetailComponent\r\n    extends BaseDetailComponent<FacetWithValues.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    customValueFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    values: Array<FacetWithValues.Values | { name: string; code: string }>;\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Facet');\r\n        this.customValueFields = this.getCustomFieldConfig('FacetValue');\r\n        this.detailForm = this.formBuilder.group({\r\n            facet: this.formBuilder.group({\r\n                code: ['', Validators.required],\r\n                name: '',\r\n                visible: true,\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            values: this.formBuilder.array([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['facet', 'code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    updateValueCode(currentCode: string, nameValue: string, index: number) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['values', index, 'code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    customValueFieldIsSet(index: number, name: string): boolean {\r\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\r\n    }\r\n\r\n    getValuesFormArray(): FormArray {\r\n        return this.detailForm.get('values') as FormArray;\r\n    }\r\n\r\n    addFacetValue() {\r\n        const valuesFormArray = this.detailForm.get('values') as FormArray | null;\r\n        if (valuesFormArray) {\r\n            const valueGroup = this.formBuilder.group({\r\n                id: '',\r\n                name: ['', Validators.required],\r\n                code: '',\r\n            });\r\n            const newValue: any = { name: '', code: '' };\r\n            if (this.customValueFields.length) {\r\n                const customValueFieldsGroup = new FormGroup({});\r\n                newValue.customFields = {};\r\n\r\n                for (const fieldDef of this.customValueFields) {\r\n                    const key = fieldDef.name;\r\n                    customValueFieldsGroup.addControl(key, new FormControl());\r\n                }\r\n\r\n                valueGroup.addControl('customFields', customValueFieldsGroup);\r\n            }\r\n            valuesFormArray.insert(valuesFormArray.length, valueGroup);\r\n            this.values.push(newValue);\r\n        }\r\n    }\r\n\r\n    create() {\r\n        const facetForm = this.detailForm.get('facet');\r\n        if (!facetForm || !facetForm.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([facet, languageCode]) => {\r\n                    const newFacet = this.getUpdatedFacet(\r\n                        facet,\r\n                        facetForm as FormGroup,\r\n                        languageCode,\r\n                    ) as CreateFacetInput;\r\n                    return this.dataService.facet.createFacet(newFacet);\r\n                }),\r\n                switchMap(data => this.dataService.facet.getAllFacets().single$.pipe(mapTo(data))),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Facet',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([facet, languageCode]) => {\r\n                    const facetGroup = this.detailForm.get('facet');\r\n                    const updateOperations: Array<Observable<any>> = [];\r\n\r\n                    if (facetGroup && facetGroup.dirty) {\r\n                        const newFacet = this.getUpdatedFacet(\r\n                            facet,\r\n                            facetGroup as FormGroup,\r\n                            languageCode,\r\n                        ) as UpdateFacetInput;\r\n                        if (newFacet) {\r\n                            updateOperations.push(this.dataService.facet.updateFacet(newFacet));\r\n                        }\r\n                    }\r\n                    const valuesArray = this.detailForm.get('values');\r\n                    if (valuesArray && valuesArray.dirty) {\r\n                        const createdValues = this.getCreatedFacetValues(\r\n                            facet,\r\n                            valuesArray as FormArray,\r\n                            languageCode,\r\n                        );\r\n                        if (createdValues.length) {\r\n                            updateOperations.push(\r\n                                this.dataService.facet\r\n                                    .createFacetValues(createdValues)\r\n                                    .pipe(switchMap(() => this.dataService.facet.getFacet(this.id).single$)),\r\n                            );\r\n                        }\r\n                        const updatedValues = this.getUpdatedFacetValues(\r\n                            facet,\r\n                            valuesArray as FormArray,\r\n                            languageCode,\r\n                        );\r\n                        if (updatedValues.length) {\r\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\r\n                        }\r\n                    }\r\n\r\n                    return forkJoin(updateOperations);\r\n                }),\r\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Facet',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    deleteFacetValue(facetValueId: string | undefined, index: number) {\r\n        if (!facetValueId) {\r\n            // deleting a newly-added (not persisted) FacetValue\r\n            const valuesFormArray = this.detailForm.get('values') as FormArray | null;\r\n            if (valuesFormArray) {\r\n                valuesFormArray.removeAt(index);\r\n            }\r\n            this.values.splice(index, 1);\r\n            return;\r\n        }\r\n        this.showModalAndDelete(facetValueId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                switchMap(deleted => (deleted ? this.dataService.facet.getFacet(this.id).single$ : [])),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(facetValueId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-facet-value'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\r\n                ),\r\n                map(result => result.deleteFacetValues[0]),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the facet or current language.\r\n     */\r\n    protected setFormValues(facet: FacetWithValues.Fragment, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(facet, languageCode);\r\n\r\n        this.detailForm.patchValue({\r\n            facet: {\r\n                code: facet.code,\r\n                visible: !facet.isPrivate,\r\n                name: currentTranslation?.name ?? '',\r\n            },\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get(['facet', 'customFields']) as FormGroup;\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['facet', 'customFields']),\r\n                facet,\r\n                currentTranslation,\r\n            );\r\n        }\r\n\r\n        const currentValuesFormArray = this.detailForm.get('values') as FormArray;\r\n        this.values = [...facet.values];\r\n        facet.values.forEach((value, i) => {\r\n            const valueTranslation = findTranslation(value, languageCode);\r\n            const group = {\r\n                id: value.id,\r\n                code: value.code,\r\n                name: valueTranslation ? valueTranslation.name : '',\r\n            };\r\n            const valueControl = currentValuesFormArray.at(i);\r\n            if (valueControl) {\r\n                valueControl.get('id')?.setValue(group.id);\r\n                valueControl.get('code')?.setValue(group.code);\r\n                valueControl.get('name')?.setValue(group.name);\r\n            } else {\r\n                currentValuesFormArray.insert(i, this.formBuilder.group(group));\r\n            }\r\n            if (this.customValueFields.length) {\r\n                let customValueFieldsGroup = this.detailForm.get(['values', i, 'customFields']) as FormGroup;\r\n                if (!customValueFieldsGroup) {\r\n                    customValueFieldsGroup = new FormGroup({});\r\n                    (this.detailForm.get(['values', i]) as FormGroup).addControl(\r\n                        'customFields',\r\n                        customValueFieldsGroup,\r\n                    );\r\n                }\r\n\r\n                if (customValueFieldsGroup) {\r\n                    for (const fieldDef of this.customValueFields) {\r\n                        const key = fieldDef.name;\r\n                        const fieldValue =\r\n                            fieldDef.type === 'localeString'\r\n                                ? (valueTranslation as any).customFields[key]\r\n                                : (value as any).customFields[key];\r\n                        const control = customValueFieldsGroup.get(key);\r\n                        if (control) {\r\n                            control.setValue(fieldValue);\r\n                        } else {\r\n                            customValueFieldsGroup.addControl(key, new FormControl(fieldValue));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedFacet(\r\n        facet: FacetWithValues.Fragment,\r\n        facetFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): CreateFacetInput | UpdateFacetInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: facet,\r\n            updatedFields: facetFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: facet.name || '',\r\n            },\r\n        });\r\n        input.isPrivate = !facetFormGroup.value.visible;\r\n        return input;\r\n    }\r\n\r\n    /**\r\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\r\n     * which can be persisted to the API via a createFacetValues mutation.\r\n     */\r\n    private getCreatedFacetValues(\r\n        facet: FacetWithValues.Fragment,\r\n        valuesFormArray: FormArray,\r\n        languageCode: LanguageCode,\r\n    ): CreateFacetValueInput[] {\r\n        return valuesFormArray.controls\r\n            .filter(c => !c.value.id)\r\n            .map(c => c.value)\r\n            .map(value =>\r\n                createUpdatedTranslatable({\r\n                    translatable: { ...value, translations: [] as any },\r\n                    updatedFields: value,\r\n                    customFieldConfig: this.customValueFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                }),\r\n            )\r\n            .map(input => ({\r\n                facetId: facet.id,\r\n                ...input,\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\r\n     * which can be persisted to the API via an updateFacetValues mutation.\r\n     */\r\n    private getUpdatedFacetValues(\r\n        facet: FacetWithValues.Fragment,\r\n        valuesFormArray: FormArray,\r\n        languageCode: LanguageCode,\r\n    ): UpdateFacetValueInput[] {\r\n        const dirtyValues = facet.values.filter((v, i) => {\r\n            const formRow = valuesFormArray.get(i.toString());\r\n            return formRow && formRow.dirty && formRow.value.id;\r\n        });\r\n        const dirtyValueValues = valuesFormArray.controls\r\n            .filter(c => c.dirty && c.value.id)\r\n            .map(c => c.value);\r\n\r\n        if (dirtyValues.length !== dirtyValueValues.length) {\r\n            throw new Error(_(`error.facet-value-form-values-do-not-match`));\r\n        }\r\n        return dirtyValues\r\n            .map((value, i) => {\r\n                return createUpdatedTranslatable({\r\n                    translatable: value,\r\n                    updatedFields: dirtyValueValues[i],\r\n                    customFieldConfig: this.customValueFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                });\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex center wrap\">\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"filterTermControl\"\r\n                [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n                class=\"clr-input search-input ml4\"\r\n            />\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"facet-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n            [routerLink]=\"['./create']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'catalog.create-new-facet' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'catalog.values' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'catalog.visibility' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-facet=\"item\">\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.code }}</td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.name }}</td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-facet-value-chip\r\n                *ngFor=\"let value of facet.values | slice: 0:displayLimit[facet.id] || 3\"\r\n                [facetValue]=\"value\"\r\n                [removable]=\"false\"\r\n                [displayFacetName]=\"false\"\r\n            ></vdr-facet-value-chip>\r\n            <button\r\n                class=\"btn btn-sm btn-secondary btn-icon\"\r\n                *ngIf=\"facet.values.length > initialLimit\"\r\n                (click)=\"toggleDisplayLimit(facet)\"\r\n            >\r\n                <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.values.length; else collapse\">\r\n                    <clr-icon shape=\"plus\"></clr-icon>\r\n                    {{ facet.values.length - initialLimit }}\r\n                </ng-container>\r\n                <ng-template #collapse>\r\n                    <clr-icon shape=\"minus\"></clr-icon>\r\n                </ng-template>\r\n            </button>\r\n        </td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-chip>\r\n                <ng-container *ngIf=\"!facet.isPrivate; else private\">{{\r\n                    'catalog.public' | translate\r\n                }}</ng-container>\r\n                <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n            </vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', facet.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteFacet(facet.id)\"\r\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteFacet'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetFacetList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { debounceTime, filter, map, switchMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-facet-list',\r\n    templateUrl: './facet-list.component.html',\r\n    styleUrls: ['./facet-list.component.scss'],\r\n})\r\nexport class FacetListComponent\r\n    extends BaseListComponent<GetFacetList.Query, GetFacetList.Items>\r\n    implements OnInit\r\n{\r\n    filterTermControl = new FormControl('');\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    readonly initialLimit = 3;\r\n    displayLimit: { [id: string]: number } = {};\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.facet.getFacets(...args).refetchOnChannelChange(),\r\n            data => data.facets,\r\n            (skip, take) => ({\r\n                options: {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        name: {\r\n                            contains: this.filterTermControl.value,\r\n                        },\r\n                    },\r\n                    sort: {\r\n                        createdAt: SortOrder.DESC,\r\n                    },\r\n                },\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n        this.filterTermControl.valueChanges\r\n            .pipe(\r\n                filter(value => 2 <= value.length || value.length === 0),\r\n                debounceTime(250),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(() => this.refresh());\r\n    }\r\n\r\n    toggleDisplayLimit(facet: GetFacetList.Items) {\r\n        if (this.displayLimit[facet.id] === facet.values.length) {\r\n            this.displayLimit[facet.id] = this.initialLimit;\r\n        } else {\r\n            this.displayLimit[facet.id] = facet.values.length;\r\n        }\r\n    }\r\n\r\n    deleteFacet(facetValueId: string) {\r\n        this.showModalAndDelete(facetValueId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                // Refresh the cached facets to reflect the changes\r\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    private showModalAndDelete(facetId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-facet'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.facet.deleteFacet(facetId, !!message) : EMPTY)),\r\n                map(res => res.deleteFacet),\r\n            );\r\n    }\r\n}\r\n","import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function skipUntil(notifier) {\n    return (source) => source.lift(new SkipUntilOperator(notifier));\n}\nclass SkipUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    }\n}\nclass SkipUntilSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier) {\n        super(destination);\n        this.hasValue = false;\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        this.add(innerSubscriber);\n        this.innerSubscription = innerSubscriber;\n        const innerSubscription = innerSubscribe(notifier, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            this.add(innerSubscription);\n            this.innerSubscription = innerSubscription;\n        }\n    }\n    _next(value) {\n        if (this.hasValue) {\n            super._next(value);\n        }\n    }\n    notifyNext() {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    }\n    notifyComplete() {\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\r\n\r\n<vdr-facet-value-selector\r\n    [facets]=\"facets\"\r\n    (selectedValuesChange)=\"selectedValues = $event\"\r\n></vdr-facet-value-selector>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"selectValues()\"\r\n        [disabled]=\"selectedValues.length === 0\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'catalog.add-facets' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Dialog, FacetValue, FacetValueSelectorComponent, FacetWithValues } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-apply-facet-dialog',\r\n    templateUrl: './apply-facet-dialog.component.html',\r\n    styleUrls: ['./apply-facet-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\r\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\r\n    resolveWith: (result?: FacetValue[]) => void;\r\n    selectedValues: FacetValue[] = [];\r\n    // Provided by caller\r\n    facets: FacetWithValues.Fragment[];\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.selector.focus(), 0);\r\n    }\r\n\r\n    selectValues() {\r\n        this.resolveWith(this.selectedValues);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\r\n        'catalog.assign-variants-to-channel' | translate\r\n    }}</ng-container>\r\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\r\n</ng-template>\r\n\r\n<div class=\"flex\">\r\n    <clr-input-container>\r\n        <label>{{ 'common.channel' | translate }}</label>\r\n        <vdr-channel-assignment-control\r\n            clrInput\r\n            [multiple]=\"false\"\r\n            [includeDefaultChannel]=\"false\"\r\n            [disableChannelIds]=\"currentChannelIds\"\r\n            [formControl]=\"selectedChannelIdControl\"\r\n        ></vdr-channel-assignment-control>\r\n    </clr-input-container>\r\n    <div class=\"flex-spacer\"></div>\r\n    <clr-input-container>\r\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\r\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\r\n    </clr-input-container>\r\n</div>\r\n\r\n<div class=\"channel-price-preview\">\r\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>{{ 'common.name' | translate }}</th>\r\n                <th>\r\n                    {{\r\n                        'catalog.price-in-channel'\r\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\r\n                    }}\r\n                </th>\r\n                <th>\r\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\r\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\r\n                    </ng-template>\r\n                    <ng-template #noSelection>\r\n                        {{ 'catalog.no-channel-selected' | translate }}\r\n                    </ng-template>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\r\n                <td>{{ row.name }}</td>\r\n                <td>{{ row.price | localeCurrency: currentChannel?.currencyCode }}</td>\r\n                <td>\r\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\r\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.currencyCode }}\r\n                    </ng-template>\r\n                    <ng-template #noChannelSelected> - </ng-template>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\r\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\r\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\r\n        </ng-template>\r\n        <ng-template #noSelection>\r\n            {{ 'catalog.no-channel-selected' | translate }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { GetChannels, ProductVariantFragment } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\nimport { combineLatest, from, Observable } from 'rxjs';\r\nimport { map, startWith, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-assign-products-to-channel-dialog',\r\n    templateUrl: './assign-products-to-channel-dialog.component.html',\r\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\r\n    selectedChannel: GetChannels.Channels | null | undefined;\r\n    currentChannel: GetChannels.Channels;\r\n    availableChannels: GetChannels.Channels[];\r\n    resolveWith: (result?: any) => void;\r\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\r\n    priceFactorControl = new FormControl(1);\r\n    selectedChannelIdControl = new FormControl();\r\n\r\n    // assigned by ModalService.fromComponent() call\r\n    productIds: string[];\r\n    productVariantIds: string[] | undefined;\r\n    currentChannelIds: string[];\r\n\r\n    get isProductVariantMode(): boolean {\r\n        return this.productVariantIds != null;\r\n    }\r\n\r\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\r\n\r\n    ngOnInit() {\r\n        const activeChannelId$ = this.dataService.client\r\n            .userStatus()\r\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\r\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\r\n\r\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\r\n            this.availableChannels = channels;\r\n        });\r\n\r\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\r\n            this.selectChannel(ids);\r\n        });\r\n\r\n        this.variantsPreview$ = combineLatest(\r\n            from(this.getTopVariants(10)),\r\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\r\n        ).pipe(\r\n            map(([variants, factor]) => {\r\n                return variants.map(v => ({\r\n                    id: v.id,\r\n                    name: v.name,\r\n                    price: v.price,\r\n                    pricePreview: v.price * +factor,\r\n                }));\r\n            }),\r\n        );\r\n    }\r\n\r\n    selectChannel(channelIds: string[]) {\r\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\r\n    }\r\n\r\n    assign() {\r\n        const selectedChannel = this.selectedChannel;\r\n        if (selectedChannel) {\r\n            if (!this.isProductVariantMode) {\r\n                this.dataService.product\r\n                    .assignProductsToChannel({\r\n                        channelId: selectedChannel.id,\r\n                        productIds: this.productIds,\r\n                        priceFactor: +this.priceFactorControl.value,\r\n                    })\r\n                    .subscribe(() => {\r\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\r\n                            channel: selectedChannel.code,\r\n                        });\r\n                        this.resolveWith(true);\r\n                    });\r\n            } else if (this.productVariantIds) {\r\n                this.dataService.product\r\n                    .assignVariantsToChannel({\r\n                        channelId: selectedChannel.id,\r\n                        productVariantIds: this.productVariantIds,\r\n                        priceFactor: +this.priceFactorControl.value,\r\n                    })\r\n                    .subscribe(() => {\r\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\r\n                            channel: selectedChannel.code,\r\n                        });\r\n                        this.resolveWith(true);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private async getTopVariants(take: number): Promise<ProductVariantFragment[]> {\r\n        const variants: ProductVariantFragment[] = [];\r\n\r\n        for (let i = 0; i < this.productIds.length && variants.length < take; i++) {\r\n            const productVariants = await this.dataService.product\r\n                .getProduct(this.productIds[i], { take: this.isProductVariantMode ? undefined : take })\r\n                .mapSingle(({ product }) => {\r\n                    const _variants = product ? product.variantList.items : [];\r\n                    return _variants.filter(v =>\r\n                        this.isProductVariantMode ? this.productVariantIds?.includes(v.id) : true,\r\n                    );\r\n                })\r\n                .toPromise();\r\n            variants.push(...(productVariants || []));\r\n        }\r\n        return variants.slice(0, take);\r\n    }\r\n}\r\n","/**\r\n * @description\r\n * Like String.prototype.replace(), but replaces the last instance\r\n * rather than the first.\r\n */\r\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\r\n    if (!target) {\r\n        return '';\r\n    }\r\n    const lastIndex = target.lastIndexOf(search);\r\n    if (lastIndex === -1) {\r\n        return target;\r\n    }\r\n    const head = target.substr(0, lastIndex);\r\n    const tail = target.substr(lastIndex).replace(search, replace);\r\n    return head + tail;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    CreateProductInput,\r\n    CreateProductVariantInput,\r\n    DataService,\r\n    DeletionResult,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    GetProductWithVariants,\r\n    LanguageCode,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\r\n\r\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\r\n\r\nimport { replaceLast } from './replace-last';\r\n\r\n/**\r\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\r\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductDetailService {\r\n    constructor(private dataService: DataService) {}\r\n\r\n    getFacets(): Observable<FacetWithValues.Fragment[]> {\r\n        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);\r\n    }\r\n\r\n    getTaxCategories() {\r\n        return this.dataService.settings\r\n            .getTaxCategories()\r\n            .mapSingle(data => data.taxCategories)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    createProductWithVariants(\r\n        input: CreateProductInput,\r\n        createVariantsConfig: CreateProductVariantsConfig,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const createProduct$ = this.dataService.product.createProduct(input);\r\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\r\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\r\n\r\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\r\n            mergeMap(([{ createProduct }, optionGroups]) => {\r\n                const addOptionsToProduct$ = optionGroups.length\r\n                    ? forkJoin(\r\n                          optionGroups.map(optionGroup => {\r\n                              return this.dataService.product.addOptionGroupToProduct({\r\n                                  productId: createProduct.id,\r\n                                  optionGroupId: optionGroup.id,\r\n                              });\r\n                          }),\r\n                      )\r\n                    : of([]);\r\n                return addOptionsToProduct$.pipe(\r\n                    map(() => {\r\n                        return { createProduct, optionGroups };\r\n                    }),\r\n                );\r\n            }),\r\n            mergeMap(({ createProduct, optionGroups }) => {\r\n                const variants = createVariantsConfig.variants.map(v => {\r\n                    const optionIds = optionGroups.length\r\n                        ? v.optionValues.map((optionName, index) => {\r\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\r\n                              if (!option) {\r\n                                  throw new Error(\r\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\r\n                                  );\r\n                              }\r\n                              return option.id;\r\n                          })\r\n                        : [];\r\n                    return {\r\n                        ...v,\r\n                        optionIds,\r\n                    };\r\n                });\r\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\r\n                return this.createProductVariants(createProduct, variants, options, languageCode);\r\n            }),\r\n        );\r\n    }\r\n\r\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\r\n        return groups.length\r\n            ? forkJoin(\r\n                  groups.map(c => {\r\n                      return this.dataService.product\r\n                          .createProductOptionGroups({\r\n                              code: normalizeString(c.name, '-'),\r\n                              translations: [{ languageCode, name: c.name }],\r\n                              options: c.values.map(v => ({\r\n                                  code: normalizeString(v, '-'),\r\n                                  translations: [{ languageCode, name: v }],\r\n                              })),\r\n                          })\r\n                          .pipe(map(data => data.createProductOptionGroup));\r\n                  }),\r\n              )\r\n            : of([]);\r\n    }\r\n\r\n    createProductVariants(\r\n        product: { name: string; id: string },\r\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\r\n        options: Array<{ id: string; name: string }>,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\r\n            const name = options.length\r\n                ? `${product.name} ${v.optionIds\r\n                      .map(id => options.find(o => o.id === id))\r\n                      .filter(notNullOrUndefined)\r\n                      .map(o => o.name)\r\n                      .join(' ')}`\r\n                : product.name;\r\n            return {\r\n                productId: product.id,\r\n                price: v.price,\r\n                sku: v.sku,\r\n                stockOnHand: v.stock,\r\n                translations: [\r\n                    {\r\n                        languageCode,\r\n                        name,\r\n                    },\r\n                ],\r\n                optionIds: v.optionIds,\r\n            };\r\n        });\r\n        return this.dataService.product.createProductVariants(variants).pipe(\r\n            map(({ createProductVariants }) => ({\r\n                createProductVariants,\r\n                productId: product.id,\r\n            })),\r\n        );\r\n    }\r\n\r\n    updateProduct(updateOptions: {\r\n        product: GetProductWithVariants.Product;\r\n        languageCode: LanguageCode;\r\n        autoUpdate: boolean;\r\n        productInput?: UpdateProductInput;\r\n        variantsInput?: UpdateProductVariantInput[];\r\n    }) {\r\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\r\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\r\n        const updateVariantsInput = variantsInput || [];\r\n\r\n        const variants$ = autoUpdate\r\n            ? this.dataService.product\r\n                  .getProductVariants({}, product.id)\r\n                  .mapSingle(({ productVariants }) => productVariants.items)\r\n            : of([]);\r\n\r\n        return variants$.pipe(\r\n            mergeMap(variants => {\r\n                if (productInput) {\r\n                    updateOperations.push(this.dataService.product.updateProduct(productInput));\r\n                    const productOldName = findTranslation(product, languageCode)?.name ?? '';\r\n                    const productNewName = findTranslation(productInput, languageCode)?.name;\r\n                    if (productNewName && productOldName !== productNewName && autoUpdate) {\r\n                        for (const variant of variants) {\r\n                            const currentVariantName = findTranslation(variant, languageCode)?.name || '';\r\n                            let variantInput: UpdateProductVariantInput;\r\n                            const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\r\n                            if (existingVariantInput) {\r\n                                variantInput = existingVariantInput;\r\n                            } else {\r\n                                variantInput = {\r\n                                    id: variant.id,\r\n                                    translations: [{ languageCode, name: currentVariantName }],\r\n                                };\r\n                                updateVariantsInput.push(variantInput);\r\n                            }\r\n                            const variantTranslation = findTranslation(variantInput, languageCode);\r\n                            if (variantTranslation) {\r\n                                if (variantTranslation.name) {\r\n                                    variantTranslation.name = replaceLast(\r\n                                        variantTranslation.name,\r\n                                        productOldName,\r\n                                        productNewName,\r\n                                    );\r\n                                } else {\r\n                                    // The variant translation was falsy, which occurs\r\n                                    // when defining the product name for a new translation\r\n                                    // language that had not yet been defined.\r\n                                    variantTranslation.name = [\r\n                                        productNewName,\r\n                                        ...variant.options.map(o => o.name),\r\n                                    ].join(' ');\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (updateVariantsInput.length) {\r\n                    updateOperations.push(\r\n                        this.dataService.product.updateProductVariants(updateVariantsInput),\r\n                    );\r\n                }\r\n                return forkJoin(updateOperations);\r\n            }),\r\n        );\r\n    }\r\n\r\n    updateProductOption(\r\n        input: UpdateProductOptionInput & { autoUpdate: boolean },\r\n        product: GetProductWithVariants.Product,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const variants$ = input.autoUpdate\r\n            ? this.dataService.product\r\n                  .getProductVariants({}, product.id)\r\n                  .mapSingle(({ productVariants }) => productVariants.items)\r\n            : of([]);\r\n\r\n        return variants$.pipe(\r\n            mergeMap(variants => {\r\n                let updateProductVariantNames$: Observable<any> = of([]);\r\n                if (input.autoUpdate) {\r\n                    // Update any ProductVariants' names which include the option name\r\n                    let oldOptionName: string | undefined;\r\n                    const newOptionName = findTranslation(input, languageCode)?.name;\r\n                    if (!newOptionName) {\r\n                        updateProductVariantNames$ = of([]);\r\n                    }\r\n                    const variantsToUpdate: UpdateProductVariantInput[] = [];\r\n                    for (const variant of variants) {\r\n                        if (variant.options.map(o => o.id).includes(input.id)) {\r\n                            if (!oldOptionName) {\r\n                                oldOptionName = findTranslation(\r\n                                    variant.options.find(o => o.id === input.id),\r\n                                    languageCode,\r\n                                )?.name;\r\n                            }\r\n                            const variantName = findTranslation(variant, languageCode)?.name || '';\r\n                            if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {\r\n                                variantsToUpdate.push({\r\n                                    id: variant.id,\r\n                                    translations: [\r\n                                        {\r\n                                            languageCode,\r\n                                            name: replaceLast(variantName, oldOptionName, newOptionName),\r\n                                        },\r\n                                    ],\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (variantsToUpdate.length) {\r\n                        updateProductVariantNames$ =\r\n                            this.dataService.product.updateProductVariants(variantsToUpdate);\r\n                    }\r\n                }\r\n                return this.dataService.product\r\n                    .updateProductOption(input)\r\n                    .pipe(mergeMap(() => updateProductVariantNames$));\r\n            }),\r\n        );\r\n    }\r\n\r\n    deleteProductVariant(id: string, productId: string) {\r\n        return this.dataService.product.deleteProductVariant(id).pipe(\r\n            switchMap(result => {\r\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\r\n                    return this.dataService.product.getProduct(productId).single$;\r\n                } else {\r\n                    return throwError(result.deleteProductVariant.message);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-flex-row\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrToggle\r\n                    name=\"enabled\"\r\n                    [formControl]=\"detailForm.get(['product', 'enabled'])\"\r\n                />\r\n                <label>{{ 'common.enabled' | translate }}</label>\r\n            </clr-toggle-wrapper>\r\n        </div>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine || !variantsToCreateAreValid()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"\r\n                    (detailForm.invalid || detailForm.pristine) && !assetsChanged() && !variantAssetsChanged()\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"product$ | async as product\">\r\n    <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\r\n    <clr-tabs>\r\n        <clr-tab>\r\n            <button clrTabLink (click)=\"navigateToTab('details')\">\r\n                {{ 'catalog.product-details' | translate }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'details'\">\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <section class=\"form-block\" formGroupName=\"product\">\r\n                            <ng-container *ngIf=\"!(isNew$ | async)\">\r\n                                <ng-container *vdrIfMultichannel>\r\n                                    <vdr-form-item\r\n                                        [label]=\"'common.channels' | translate\"\r\n                                        *vdrIfDefaultChannelActive\r\n                                    >\r\n                                        <div class=\"flex channel-assignment\">\r\n                                            <ng-container *ngFor=\"let channel of productChannels$ | async\">\r\n                                                <vdr-chip\r\n                                                    *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                                    icon=\"times-circle\"\r\n                                                    (iconClick)=\"removeFromChannel(channel.id)\"\r\n                                                >\r\n                                                    <vdr-channel-badge\r\n                                                        [channelCode]=\"channel.code\"\r\n                                                    ></vdr-channel-badge>\r\n                                                    {{ channel.code | channelCodeToLabel }}\r\n                                                </vdr-chip>\r\n                                            </ng-container>\r\n                                            <button class=\"btn btn-sm\" (click)=\"assignToChannel()\">\r\n                                                <clr-icon shape=\"layers\"></clr-icon>\r\n                                                {{ 'catalog.assign-to-channel' | translate }}\r\n                                            </button>\r\n                                        </div>\r\n                                    </vdr-form-item>\r\n                                </ng-container>\r\n                            </ng-container>\r\n                            <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\r\n                                <input\r\n                                    id=\"name\"\r\n                                    type=\"text\"\r\n                                    formControlName=\"name\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                    (input)=\"updateSlug($event.target.value)\"\r\n                                />\r\n                            </vdr-form-field>\r\n                            <div\r\n                                class=\"auto-rename-wrapper\"\r\n                                [class.visible]=\"\r\n                                    (isNew$ | async) === false && detailForm.get(['product', 'name'])?.dirty\r\n                                \"\r\n                            >\r\n                                <clr-checkbox-wrapper>\r\n                                    <input\r\n                                        clrCheckbox\r\n                                        type=\"checkbox\"\r\n                                        id=\"auto-update\"\r\n                                        formControlName=\"autoUpdateVariantNames\"\r\n                                    />\r\n                                    <label>{{\r\n                                        'catalog.auto-update-product-variant-name' | translate\r\n                                    }}</label>\r\n                                </clr-checkbox-wrapper>\r\n                            </div>\r\n                            <vdr-form-field\r\n                                [label]=\"'catalog.slug' | translate\"\r\n                                for=\"slug\"\r\n                                [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                            >\r\n                                <input\r\n                                    id=\"slug\"\r\n                                    type=\"text\"\r\n                                    formControlName=\"slug\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                />\r\n                            </vdr-form-field>\r\n                            <vdr-rich-text-editor\r\n                                formControlName=\"description\"\r\n                                [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                [label]=\"'common.description' | translate\"\r\n                            ></vdr-rich-text-editor>\r\n\r\n                            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                                <label>{{ 'common.custom-fields' | translate }}</label>\r\n                                <vdr-tabbed-custom-fields\r\n                                    entityName=\"Product\"\r\n                                    [customFields]=\"customFields\"\r\n                                    [customFieldsFormGroup]=\"detailForm.get(['product', 'customFields'])\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                ></vdr-tabbed-custom-fields>\r\n                            </section>\r\n                            <vdr-custom-detail-component-host\r\n                                locationId=\"product-detail\"\r\n                                [entity$]=\"entity$\"\r\n                                [detailForm]=\"detailForm\"\r\n                            ></vdr-custom-detail-component-host>\r\n                        </section>\r\n                    </div>\r\n                    <div class=\"clr-col-md-auto\">\r\n                        <vdr-assets\r\n                            [assets]=\"assetChanges.assets || product.assets\"\r\n                            [featuredAsset]=\"assetChanges.featuredAsset || product.featuredAsset\"\r\n                            [updatePermissions]=\"updatePermissions\"\r\n                            (change)=\"assetChanges = $event\"\r\n                        ></vdr-assets>\r\n                        <div class=\"facets\">\r\n                            <vdr-facet-value-chip\r\n                                *ngFor=\"let facetValue of facetValues$ | async\"\r\n                                [facetValue]=\"facetValue\"\r\n                                [removable]=\"['UpdateCatalog', 'UpdateProduct'] | hasPermission\"\r\n                                (remove)=\"removeProductFacetValue(facetValue.id)\"\r\n                            ></vdr-facet-value-chip>\r\n                            <button\r\n                                class=\"btn btn-sm btn-secondary\"\r\n                                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                                (click)=\"selectProductFacetValue()\"\r\n                            >\r\n                                <clr-icon shape=\"plus\"></clr-icon>\r\n                                {{ 'catalog.add-facets' | translate }}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div *ngIf=\"isNew$ | async\">\r\n                    <h4>{{ 'catalog.product-variants' | translate }}</h4>\r\n                    <vdr-generate-product-variants\r\n                        (variantsChange)=\"createVariantsConfig = $event\"\r\n                    ></vdr-generate-product-variants>\r\n                </div>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n        <clr-tab *ngIf=\"!(isNew$ | async)\">\r\n            <button clrTabLink (click)=\"navigateToTab('variants')\">\r\n                {{ 'catalog.product-variants' | translate }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'variants'\">\r\n                <section class=\"form-block\">\r\n                    <div class=\"view-mode\">\r\n                        <div class=\"btn-group\">\r\n                            <button\r\n                                class=\"btn btn-secondary-outline\"\r\n                                (click)=\"variantDisplayMode = 'card'\"\r\n                                [class.btn-primary]=\"variantDisplayMode === 'card'\"\r\n                            >\r\n                                <clr-icon shape=\"list\"></clr-icon>\r\n                                {{ 'catalog.display-variant-cards' | translate }}\r\n                            </button>\r\n                            <button\r\n                                class=\"btn\"\r\n                                (click)=\"variantDisplayMode = 'table'\"\r\n                                [class.btn-primary]=\"variantDisplayMode === 'table'\"\r\n                            >\r\n                                <clr-icon shape=\"table\"></clr-icon>\r\n                                {{ 'catalog.display-variant-table' | translate }}\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"variant-filter\">\r\n                            <input\r\n                                [formControl]=\"filterInput\"\r\n                                [placeholder]=\"'catalog.filter-by-name-or-sku' | translate\"\r\n                            />\r\n                            <button class=\"icon-button\" (click)=\"filterInput.setValue('')\">\r\n                                <clr-icon shape=\"times\"></clr-icon>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"flex-spacer\"></div>\r\n                        <a\r\n                            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                            [routerLink]=\"['./', 'manage-variants']\"\r\n                            class=\"btn btn-secondary edit-variants-btn\"\r\n                        >\r\n                            <clr-icon shape=\"add-text\"></clr-icon>\r\n                            {{ 'catalog.manage-variants' | translate }}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <div class=\"pagination-row mt4\" *ngIf=\"10 < (paginationConfig$ | async)?.totalItems\">\r\n                        <vdr-items-per-page-controls\r\n                            [itemsPerPage]=\"itemsPerPage$ | async\"\r\n                            (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n                        ></vdr-items-per-page-controls>\r\n\r\n                        <vdr-pagination-controls\r\n                            [id]=\"(paginationConfig$ | async)?.id\"\r\n                            [currentPage]=\"currentPage$ | async\"\r\n                            [itemsPerPage]=\"itemsPerPage$ | async\"\r\n                            (pageChange)=\"setPage($event)\"\r\n                        ></vdr-pagination-controls>\r\n                    </div>\r\n\r\n                    <vdr-product-variants-table\r\n                        *ngIf=\"variantDisplayMode === 'table'\"\r\n                        [variants]=\"variants$ | async\"\r\n                        [paginationConfig]=\"paginationConfig$ | async\"\r\n                        [optionGroups]=\"product.optionGroups\"\r\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\r\n                        [pendingAssetChanges]=\"variantAssetChanges\"\r\n                    ></vdr-product-variants-table>\r\n                    <vdr-product-variants-list\r\n                        *ngIf=\"variantDisplayMode === 'card'\"\r\n                        [variants]=\"variants$ | async\"\r\n                        [paginationConfig]=\"paginationConfig$ | async\"\r\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [facets]=\"facets$ | async\"\r\n                        [optionGroups]=\"product.optionGroups\"\r\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\r\n                        [taxCategories]=\"taxCategories$ | async\"\r\n                        [customFields]=\"customVariantFields\"\r\n                        [customOptionFields]=\"customOptionFields\"\r\n                        [activeLanguage]=\"languageCode$ | async\"\r\n                        [pendingAssetChanges]=\"variantAssetChanges\"\r\n                        (assignToChannel)=\"assignVariantToChannel($event)\"\r\n                        (removeFromChannel)=\"removeVariantFromChannel($event)\"\r\n                        (assetChange)=\"variantAssetChange($event)\"\r\n                        (updateProductOption)=\"updateProductOption($event)\"\r\n                        (selectionChange)=\"selectedVariantIds = $event\"\r\n                        (selectFacetValueClick)=\"selectVariantFacetValue($event)\"\r\n                    ></vdr-product-variants-list>\r\n                </section>\r\n                <div class=\"pagination-row mt4\" *ngIf=\"10 < (paginationConfig$ | async)?.totalItems\">\r\n                    <vdr-items-per-page-controls\r\n                        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n                        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n                    ></vdr-items-per-page-controls>\r\n\r\n                    <vdr-pagination-controls\r\n                        [id]=\"(paginationConfig$ | async)?.id\"\r\n                        [currentPage]=\"currentPage$ | async\"\r\n                        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n                        (pageChange)=\"setPage($event)\"\r\n                    ></vdr-pagination-controls>\r\n                </div>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n    </clr-tabs>\r\n</form>\r\n","import { Location } from '@angular/common';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    CreateProductInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    flattenFacetValues,\r\n    GetProductWithVariants,\r\n    GlobalFlag,\r\n    LanguageCode,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    ProductDetail,\r\n    ProductVariant,\r\n    ServerConfigService,\r\n    TaxCategory,\r\n    unicodePatternValidator,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { BehaviorSubject, combineLatest, EMPTY, merge, Observable } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    mergeMap,\r\n    shareReplay,\r\n    skip,\r\n    skipUntil,\r\n    startWith,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    tap,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\r\nimport { VariantAssetChange } from '../product-variants-list/product-variants-list.component';\r\n\r\nexport type TabName = 'details' | 'variants';\r\n\r\nexport interface VariantFormValue {\r\n    id: string;\r\n    enabled: boolean;\r\n    sku: string;\r\n    name: string;\r\n    price: number;\r\n    priceWithTax: number;\r\n    taxCategoryId: string;\r\n    stockOnHand: number;\r\n    useGlobalOutOfStockThreshold: boolean;\r\n    outOfStockThreshold: number;\r\n    trackInventory: GlobalFlag;\r\n    facetValueIds: string[];\r\n    customFields?: any;\r\n}\r\n\r\nexport interface SelectedAssets {\r\n    assets?: Asset[];\r\n    featuredAsset?: Asset;\r\n}\r\n\r\nexport interface PaginationConfig {\r\n    totalItems: number;\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-detail',\r\n    templateUrl: './product-detail.component.html',\r\n    styleUrls: ['./product-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductDetailComponent\r\n    extends BaseDetailComponent<GetProductWithVariants.Product>\r\n    implements OnInit, OnDestroy\r\n{\r\n    activeTab$: Observable<TabName>;\r\n    product$: Observable<GetProductWithVariants.Product>;\r\n    variants$: Observable<ProductVariant.Fragment[]>;\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    customFields: CustomFieldConfig[];\r\n    customVariantFields: CustomFieldConfig[];\r\n    customOptionGroupFields: CustomFieldConfig[];\r\n    customOptionFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    filterInput = new FormControl('');\r\n    assetChanges: SelectedAssets = {};\r\n    variantAssetChanges: { [variantId: string]: SelectedAssets } = {};\r\n    variantFacetValueChanges: { [variantId: string]: string[] } = {};\r\n    productChannels$: Observable<ProductDetail.Channels[]>;\r\n    facetValues$: Observable<ProductDetail.FacetValues[]>;\r\n    facets$: Observable<FacetWithValues.Fragment[]>;\r\n    totalItems$: Observable<number>;\r\n    currentPage$ = new BehaviorSubject(1);\r\n    itemsPerPage$ = new BehaviorSubject(10);\r\n    paginationConfig$: Observable<PaginationConfig>;\r\n    selectedVariantIds: string[] = [];\r\n    variantDisplayMode: 'card' | 'table' = 'card';\r\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [] };\r\n    channelPriceIncludesTax$: Observable<boolean>;\r\n    // Used to store all ProductVariants which have been loaded.\r\n    // It is needed when saving changes to variants.\r\n    private productVariantMap = new Map<string, ProductVariant.Fragment>();\r\n    public readonly updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n\r\n    constructor(\r\n        route: ActivatedRoute,\r\n        router: Router,\r\n        serverConfigService: ServerConfigService,\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: FormBuilder,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private location: Location,\r\n        private changeDetector: ChangeDetectorRef,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Product');\r\n        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');\r\n        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');\r\n        this.customOptionFields = this.getCustomFieldConfig('ProductOption');\r\n        this.detailForm = this.formBuilder.group({\r\n            product: this.formBuilder.group({\r\n                enabled: true,\r\n                name: ['', Validators.required],\r\n                autoUpdateVariantNames: true,\r\n                slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9_-]+$/)],\r\n                description: '',\r\n                facetValueIds: [[]],\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            variants: this.formBuilder.array([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.product$ = this.entity$;\r\n        this.totalItems$ = this.product$.pipe(map(product => product.variantList.totalItems));\r\n        this.paginationConfig$ = combineLatest(this.totalItems$, this.itemsPerPage$, this.currentPage$).pipe(\r\n            map(([totalItems, itemsPerPage, currentPage]) => ({\r\n                totalItems,\r\n                itemsPerPage,\r\n                currentPage,\r\n            })),\r\n        );\r\n        const variants$ = this.product$.pipe(map(product => product.variantList.items));\r\n        const filterTerm$ = this.filterInput.valueChanges.pipe(\r\n            startWith(''),\r\n            debounceTime(200),\r\n            shareReplay(),\r\n        );\r\n        const initialVariants$ = this.product$.pipe(map(p => p.variantList.items));\r\n        const updatedVariants$ = combineLatest(filterTerm$, this.currentPage$, this.itemsPerPage$).pipe(\r\n            skipUntil(initialVariants$),\r\n            skip(1),\r\n            switchMap(([term, currentPage, itemsPerPage]) => {\r\n                return this.dataService.product\r\n                    .getProductVariants(\r\n                        {\r\n                            skip: (currentPage - 1) * itemsPerPage,\r\n                            take: itemsPerPage,\r\n                            ...(term\r\n                                ? { filter: { name: { contains: term }, sku: { contains: term } } }\r\n                                : {}),\r\n                            filterOperator: LogicalOperator.OR,\r\n                        },\r\n                        this.id,\r\n                    )\r\n                    .mapStream(({ productVariants }) => productVariants.items);\r\n            }),\r\n            shareReplay({ bufferSize: 1, refCount: true }),\r\n        );\r\n        this.variants$ = merge(initialVariants$, updatedVariants$).pipe(\r\n            tap(variants => {\r\n                for (const variant of variants) {\r\n                    this.productVariantMap.set(variant.id, variant);\r\n                }\r\n            }),\r\n        );\r\n        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));\r\n        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab') as any));\r\n\r\n        combineLatest(updatedVariants$, this.languageCode$)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(([variants, languageCode]) => {\r\n                this.buildVariantFormArray(variants, languageCode);\r\n            });\r\n\r\n        // FacetValues are provided initially by the nested array of the\r\n        // Product entity, but once a fetch to get all Facets is made (as when\r\n        // opening the FacetValue selector modal), then these additional values\r\n        // are concatenated onto the initial array.\r\n        this.facets$ = this.productDetailService.getFacets();\r\n        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));\r\n        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));\r\n        const productGroup = this.getProductFormGroup();\r\n\r\n        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(\r\n            map(val => val.facetValueIds as string[]),\r\n            distinctUntilChanged(),\r\n        );\r\n        const formChangeFacetValues$ = combineLatest(\r\n            formFacetValueIdChanges$,\r\n            productFacetValues$,\r\n            allFacetValues$,\r\n        ).pipe(\r\n            map(([ids, productFacetValues, allFacetValues]) => {\r\n                const combined = [...productFacetValues, ...allFacetValues];\r\n                return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);\r\n            }),\r\n        );\r\n\r\n        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);\r\n        this.productChannels$ = this.product$.pipe(map(p => p.channels));\r\n        this.channelPriceIncludesTax$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    navigateToTab(tabName: TabName) {\r\n        this.location.replaceState(\r\n            this.router\r\n                .createUrlTree(['./', { ...this.route.snapshot.params, tab: tabName }], {\r\n                    queryParamsHandling: 'merge',\r\n                    relativeTo: this.route,\r\n                })\r\n                .toString(),\r\n        );\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    setPage(page: number) {\r\n        this.currentPage$.next(page);\r\n    }\r\n\r\n    setItemsPerPage(value: string) {\r\n        this.itemsPerPage$.next(+value);\r\n        this.currentPage$.next(1);\r\n    }\r\n\r\n    assignToChannel() {\r\n        this.productChannels$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(channels => {\r\n                    return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\r\n                        size: 'lg',\r\n                        locals: {\r\n                            productIds: [this.id],\r\n                            currentChannelIds: channels.map(c => c.id),\r\n                        },\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    removeFromChannel(channelId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.remove-product-from-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeProductsFromChannel({\r\n                              channelId,\r\n                              productIds: [this.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    assignVariantToChannel(variant: ProductVariant.Fragment) {\r\n        return this.modalService\r\n            .fromComponent(AssignProductsToChannelDialogComponent, {\r\n                size: 'lg',\r\n                locals: {\r\n                    productIds: [this.id],\r\n                    productVariantIds: [variant.id],\r\n                    currentChannelIds: variant.channels.map(c => c.id),\r\n                },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeVariantFromChannel({\r\n        channelId,\r\n        variant,\r\n    }: {\r\n        channelId: string;\r\n        variant: ProductVariant.Fragment;\r\n    }) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.remove-product-variant-from-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeVariantsFromChannel({\r\n                              channelId,\r\n                              productVariantIds: [variant.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    variantAssetsChanged(): boolean {\r\n        return !!Object.keys(this.variantAssetChanges).length;\r\n    }\r\n\r\n    variantAssetChange(event: VariantAssetChange) {\r\n        this.variantAssetChanges[event.variantId] = event;\r\n    }\r\n\r\n    /**\r\n     * If creating a new product, automatically generate the slug based on the product name.\r\n     */\r\n    updateSlug(nameValue: string) {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(take(1))\r\n            .subscribe(([entity, languageCode]) => {\r\n                const slugControl = this.detailForm.get(['product', 'slug']);\r\n                const currentTranslation = findTranslation(entity, languageCode);\r\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\r\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\r\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\r\n                }\r\n            });\r\n    }\r\n\r\n    selectProductFacetValue() {\r\n        this.displayFacetValueModal().subscribe(facetValueIds => {\r\n            if (facetValueIds) {\r\n                const productGroup = this.getProductFormGroup();\r\n                const currentFacetValueIds = productGroup.value.facetValueIds;\r\n                productGroup.patchValue({\r\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\r\n                });\r\n                productGroup.markAsDirty();\r\n            }\r\n        });\r\n    }\r\n\r\n    updateProductOption(input: UpdateProductOptionInput & { autoUpdate: boolean }) {\r\n        combineLatest(this.product$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) =>\r\n                    this.productDetailService.updateProductOption(input, product, languageCode),\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    removeProductFacetValue(facetValueId: string) {\r\n        const productGroup = this.getProductFormGroup();\r\n        const currentFacetValueIds = productGroup.value.facetValueIds;\r\n        productGroup.patchValue({\r\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\r\n        });\r\n        productGroup.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Opens a dialog to select FacetValues to apply to the select ProductVariants.\r\n     */\r\n    selectVariantFacetValue(selectedVariantIds: string[]) {\r\n        this.displayFacetValueModal()\r\n            .pipe(withLatestFrom(this.variants$))\r\n            .subscribe(([facetValueIds, variants]) => {\r\n                if (facetValueIds) {\r\n                    for (const variantId of selectedVariantIds) {\r\n                        const index = variants.findIndex(v => v.id === variantId);\r\n                        const variant = variants[index];\r\n                        const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];\r\n                        const variantFormGroup = (this.detailForm.get('variants') as FormArray).controls.find(\r\n                            c => c.value.id === variantId,\r\n                        );\r\n                        if (variantFormGroup) {\r\n                            const uniqueFacetValueIds = unique([...existingFacetValueIds, ...facetValueIds]);\r\n                            variantFormGroup.patchValue({\r\n                                facetValueIds: uniqueFacetValueIds,\r\n                            });\r\n                            variantFormGroup.markAsDirty();\r\n                            this.variantFacetValueChanges[variantId] = uniqueFacetValueIds;\r\n                        }\r\n                    }\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    variantsToCreateAreValid(): boolean {\r\n        return (\r\n            0 < this.createVariantsConfig.variants.length &&\r\n            this.createVariantsConfig.variants.every(v => {\r\n                return v.sku !== '';\r\n            })\r\n        );\r\n    }\r\n\r\n    private displayFacetValueModal(): Observable<string[] | undefined> {\r\n        return this.productDetailService.getFacets().pipe(\r\n            mergeMap(facets =>\r\n                this.modalService.fromComponent(ApplyFacetDialogComponent, {\r\n                    size: 'md',\r\n                    closable: true,\r\n                    locals: { facets },\r\n                }),\r\n            ),\r\n            map(facetValues => facetValues && facetValues.map(v => v.id)),\r\n        );\r\n    }\r\n\r\n    create() {\r\n        const productGroup = this.getProductFormGroup();\r\n        if (!productGroup.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.product$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) => {\r\n                    const newProduct = this.getUpdatedProduct(\r\n                        product,\r\n                        productGroup as FormGroup,\r\n                        languageCode,\r\n                    ) as CreateProductInput;\r\n                    return this.productDetailService.createProductWithVariants(\r\n                        newProduct,\r\n                        this.createVariantsConfig,\r\n                        languageCode,\r\n                    );\r\n                }),\r\n            )\r\n            .subscribe(\r\n                ({ createProductVariants, productId }) => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.assetChanges = {};\r\n                    this.variantAssetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(err);\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode, priceIncludesTax]) => {\r\n                    const productGroup = this.getProductFormGroup();\r\n                    let productInput: UpdateProductInput | undefined;\r\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\r\n\r\n                    if (productGroup.dirty || this.assetsChanged()) {\r\n                        productInput = this.getUpdatedProduct(\r\n                            product,\r\n                            productGroup as FormGroup,\r\n                            languageCode,\r\n                        ) as UpdateProductInput;\r\n                    }\r\n                    const variantsArray = this.detailForm.get('variants');\r\n                    if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {\r\n                        variantsInput = this.getUpdatedProductVariants(\r\n                            product,\r\n                            variantsArray as FormArray,\r\n                            languageCode,\r\n                            priceIncludesTax,\r\n                        );\r\n                    }\r\n\r\n                    return this.productDetailService.updateProduct({\r\n                        product,\r\n                        languageCode,\r\n                        autoUpdate:\r\n                            this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,\r\n                        productInput,\r\n                        variantsInput,\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    this.updateSlugAfterSave(result);\r\n                    this.detailForm.markAsPristine();\r\n                    this.assetChanges = {};\r\n                    this.variantAssetChanges = {};\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the product or current language.\r\n     */\r\n    protected setFormValues(product: GetProductWithVariants.Product, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(product, languageCode);\r\n        this.detailForm.patchValue({\r\n            product: {\r\n                enabled: product.enabled,\r\n                name: currentTranslation ? currentTranslation.name : '',\r\n                slug: currentTranslation ? currentTranslation.slug : '',\r\n                description: currentTranslation ? currentTranslation.description : '',\r\n                facetValueIds: product.facetValues.map(fv => fv.id),\r\n            },\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['product', 'customFields']),\r\n                product,\r\n                currentTranslation,\r\n            );\r\n        }\r\n        this.buildVariantFormArray(product.variantList.items, languageCode);\r\n    }\r\n\r\n    private buildVariantFormArray(variants: ProductVariant.Fragment[], languageCode: LanguageCode) {\r\n        const variantsFormArray = this.detailForm.get('variants') as FormArray;\r\n        variants.forEach((variant, i) => {\r\n            const variantTranslation = findTranslation(variant, languageCode);\r\n            const pendingFacetValueChanges = this.variantFacetValueChanges[variant.id];\r\n            const facetValueIds = pendingFacetValueChanges\r\n                ? pendingFacetValueChanges\r\n                : variant.facetValues.map(fv => fv.id);\r\n            const group: VariantFormValue = {\r\n                id: variant.id,\r\n                enabled: variant.enabled,\r\n                sku: variant.sku,\r\n                name: variantTranslation ? variantTranslation.name : '',\r\n                price: variant.price,\r\n                priceWithTax: variant.priceWithTax,\r\n                taxCategoryId: variant.taxCategory.id,\r\n                stockOnHand: variant.stockOnHand,\r\n                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\r\n                outOfStockThreshold: variant.outOfStockThreshold,\r\n                trackInventory: variant.trackInventory,\r\n                facetValueIds,\r\n            };\r\n\r\n            let variantFormGroup = variantsFormArray.controls.find(c => c.value.id === variant.id) as\r\n                | FormGroup\r\n                | undefined;\r\n            if (variantFormGroup) {\r\n                if (variantFormGroup.pristine) {\r\n                    variantFormGroup.patchValue(group);\r\n                }\r\n            } else {\r\n                variantFormGroup = this.formBuilder.group({\r\n                    ...group,\r\n                    facetValueIds: this.formBuilder.control(facetValueIds),\r\n                });\r\n                variantsFormArray.insert(i, variantFormGroup);\r\n            }\r\n            if (this.customVariantFields.length) {\r\n                let customFieldsGroup = variantFormGroup.get(['customFields']) as FormGroup | undefined;\r\n\r\n                if (!customFieldsGroup) {\r\n                    customFieldsGroup = this.formBuilder.group(\r\n                        this.customVariantFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                    );\r\n                    variantFormGroup.addControl('customFields', customFieldsGroup);\r\n                }\r\n                this.setCustomFieldFormValues(\r\n                    this.customVariantFields,\r\n                    customFieldsGroup,\r\n                    variant,\r\n                    variantTranslation,\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedProduct(\r\n        product: GetProductWithVariants.Product,\r\n        productFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductInput | CreateProductInput {\r\n        const updatedProduct = createUpdatedTranslatable({\r\n            translatable: product,\r\n            updatedFields: productFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: product.name || '',\r\n                slug: product.slug || '',\r\n                description: product.description || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedProduct,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            facetValueIds: productFormGroup.value.facetValueIds,\r\n        } as UpdateProductInput | CreateProductInput;\r\n    }\r\n\r\n    /**\r\n     * Given an array of product variants and the values from the detailForm, this method creates an new array\r\n     * which can be persisted to the API.\r\n     */\r\n    private getUpdatedProductVariants(\r\n        product: GetProductWithVariants.Product,\r\n        variantsFormArray: FormArray,\r\n        languageCode: LanguageCode,\r\n        priceIncludesTax: boolean,\r\n    ): UpdateProductVariantInput[] {\r\n        const dirtyFormControls = variantsFormArray.controls.filter(c => c.dirty);\r\n        const dirtyVariants = dirtyFormControls\r\n            .map(c => this.productVariantMap.get(c.value.id))\r\n            .filter(notNullOrUndefined);\r\n        const dirtyVariantValues = dirtyFormControls.map(c => c.value);\r\n\r\n        if (dirtyVariants.length !== dirtyVariantValues.length) {\r\n            throw new Error(_(`error.product-variant-form-values-do-not-match`));\r\n        }\r\n        return dirtyVariants\r\n            .map((variant, i) => {\r\n                const formValue: VariantFormValue = dirtyVariantValues.find(value => value.id === variant.id);\r\n                const result: UpdateProductVariantInput = createUpdatedTranslatable({\r\n                    translatable: variant,\r\n                    updatedFields: formValue,\r\n                    customFieldConfig: this.customVariantFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                });\r\n                result.taxCategoryId = formValue.taxCategoryId;\r\n                result.facetValueIds = formValue.facetValueIds;\r\n                result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;\r\n                const assetChanges = this.variantAssetChanges[variant.id];\r\n                if (assetChanges) {\r\n                    result.featuredAssetId = assetChanges.featuredAsset?.id;\r\n                    result.assetIds = assetChanges.assets?.map(a => a.id);\r\n                }\r\n                return result;\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    private getProductFormGroup(): FormGroup {\r\n        return this.detailForm.get('product') as FormGroup;\r\n    }\r\n\r\n    /**\r\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\r\n     */\r\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\r\n        const firstResult = results[0];\r\n        const slugControl = this.detailForm.get(['product', 'slug']);\r\n\r\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\r\n            return input.hasOwnProperty('updateProduct');\r\n        }\r\n\r\n        if (slugControl && isUpdateMutation(firstResult)) {\r\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\r\n        }\r\n    }\r\n}\r\n","<ng-select\r\n    [addTag]=\"addTagFn\"\r\n    [placeholder]=\"'catalog.search-product-name-or-code' | translate\"\r\n    [items]=\"facetValueResults\"\r\n    [searchFn]=\"filterFacetResults\"\r\n    [hideSelected]=\"true\"\r\n    [multiple]=\"true\"\r\n    [markFirst]=\"false\"\r\n    (change)=\"onSelectChange($event)\"\r\n    #selectComponent\r\n>\r\n    <ng-template ng-header-tmp>\r\n        <div\r\n            class=\"search-header\"\r\n            *ngIf=\"selectComponent.searchTerm\"\r\n            [class.selected]=\"isSearchHeaderSelected()\"\r\n            (click)=\"selectComponent.selectTag()\"\r\n        >\r\n            {{ 'catalog.search-for-term' | translate }}: {{ selectComponent.searchTerm }}\r\n        </div>\r\n    </ng-template>\r\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n        <ng-container *ngIf=\"item.facetValue\">\r\n            <vdr-facet-value-chip\r\n                [facetValue]=\"item.facetValue\"\r\n                [removable]=\"true\"\r\n                (remove)=\"clear(item)\"\r\n            ></vdr-facet-value-chip>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!item.facetValue\">\r\n            <vdr-chip [icon]=\"'times'\" (iconClick)=\"clear(item)\">\"{{ item.label }}\"</vdr-chip>\r\n        </ng-container>\r\n    </ng-template>\r\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\r\n        <ng-container *ngIf=\"item.facetValue\">\r\n            <vdr-facet-value-chip [facetValue]=\"item.facetValue\" [removable]=\"false\"></vdr-facet-value-chip>\r\n        </ng-container>\r\n    </ng-template>\r\n</ng-select>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { NgSelectComponent, SELECTION_MODEL_FACTORY } from '@ng-select/ng-select';\r\nimport { SearchProducts, SingleSearchSelectionModelFactory } from '@vendure/admin-ui/core';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-product-search-input',\r\n    templateUrl: './product-search-input.component.html',\r\n    styleUrls: ['./product-search-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{ provide: SELECTION_MODEL_FACTORY, useValue: SingleSearchSelectionModelFactory }],\r\n})\r\nexport class ProductSearchInputComponent {\r\n    @Input() facetValueResults: SearchProducts.FacetValues[];\r\n    @Output() searchTermChange = new EventEmitter<string>();\r\n    @Output() facetValueChange = new EventEmitter<string[]>();\r\n    @ViewChild('selectComponent', { static: true }) private selectComponent: NgSelectComponent;\r\n    private lastTerm = '';\r\n    private lastFacetValueIds: string[] = [];\r\n\r\n    setSearchTerm(term: string | null) {\r\n        if (term) {\r\n            this.selectComponent.select({ label: term, value: { label: term } });\r\n        } else {\r\n            const currentTerm = this.selectComponent.selectedItems.find(i => !this.isFacetValueItem(i.value));\r\n            if (currentTerm) {\r\n                this.selectComponent.unselect(currentTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    setFacetValues(ids: string[]) {\r\n        const items = this.selectComponent.items;\r\n\r\n        this.selectComponent.selectedItems.forEach(item => {\r\n            if (this.isFacetValueItem(item.value) && !ids.includes(item.value.facetValue.id)) {\r\n                this.selectComponent.unselect(item);\r\n            }\r\n        });\r\n\r\n        ids.map(id => {\r\n            return items?.find(item => this.isFacetValueItem(item) && item.facetValue.id === id);\r\n        })\r\n            .filter(notNullOrUndefined)\r\n            .forEach(item => {\r\n                const isSelected = this.selectComponent.selectedItems.find(i => {\r\n                    const val = i.value;\r\n                    if (this.isFacetValueItem(val)) {\r\n                        return val.facetValue.id === item.facetValue.id;\r\n                    }\r\n                    return false;\r\n                });\r\n                if (!isSelected) {\r\n                    this.selectComponent.select({ label: '', value: item });\r\n                }\r\n            });\r\n    }\r\n\r\n    filterFacetResults = (term: string, item: SearchProducts.FacetValues | { label: string }) => {\r\n        if (!this.isFacetValueItem(item)) {\r\n            return false;\r\n        }\r\n\r\n        const cix = term.indexOf(':');\r\n        const facetName = cix > -1 ? term.toLowerCase().slice(0, cix) : null;\r\n        const facetVal = cix > -1 ? term.toLowerCase().slice(cix + 1) : term.toLowerCase();\r\n\r\n        if (facetName) {\r\n            return (\r\n                item.facetValue.facet.name.toLowerCase().includes(facetName) &&\r\n                item.facetValue.name.toLocaleLowerCase().includes(facetVal)\r\n            );\r\n        }\r\n\r\n        return (\r\n            item.facetValue.name.toLowerCase().includes(term.toLowerCase()) ||\r\n            item.facetValue.facet.name.toLowerCase().includes(term.toLowerCase())\r\n        );\r\n    };\r\n\r\n    onSelectChange(selectedItems: Array<SearchProducts.FacetValues | { label: string }>) {\r\n        if (!Array.isArray(selectedItems)) {\r\n            selectedItems = [selectedItems];\r\n        }\r\n        const searchTermItem = selectedItems.find(item => !this.isFacetValueItem(item)) as\r\n            | { label: string }\r\n            | undefined;\r\n        const searchTerm = searchTermItem ? searchTermItem.label : '';\r\n\r\n        const facetValueIds = selectedItems.filter(this.isFacetValueItem).map(i => i.facetValue.id);\r\n\r\n        if (searchTerm !== this.lastTerm) {\r\n            this.searchTermChange.emit(searchTerm);\r\n            this.lastTerm = searchTerm;\r\n        }\r\n        if (this.lastFacetValueIds.join(',') !== facetValueIds.join(',')) {\r\n            this.facetValueChange.emit(facetValueIds);\r\n            this.lastFacetValueIds = facetValueIds;\r\n        }\r\n    }\r\n\r\n    addTagFn(item: any) {\r\n        return { label: item };\r\n    }\r\n\r\n    isSearchHeaderSelected(): boolean {\r\n        return this.selectComponent.itemsList.markedIndex === -1;\r\n    }\r\n\r\n    private isFacetValueItem = (input: unknown): input is SearchProducts.FacetValues => {\r\n        return typeof input === 'object' && !!input && input.hasOwnProperty('facetValue');\r\n    };\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left [grow]=\"true\">\r\n        <div class=\"search-form\">\r\n            <vdr-product-search-input\r\n                #productSearchInputComponent\r\n                [facetValueResults]=\"facetValues$ | async\"\r\n                (searchTermChange)=\"setSearchTerm($event)\"\r\n                (facetValueChange)=\"setFacetValueIds($event)\"\r\n            ></vdr-product-search-input>\r\n            <vdr-dropdown class=\"search-settings-menu mr3\">\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"icon-button search-index-button\"\r\n                    [title]=\"\r\n                        (pendingSearchIndexUpdates\r\n                            ? 'catalog.pending-search-index-updates'\r\n                            : 'catalog.search-index-controls'\r\n                        ) | translate\r\n                    \"\r\n                    vdrDropdownTrigger\r\n                >\r\n                    <clr-icon shape=\"cog\"></clr-icon>\r\n                    <vdr-status-badge *ngIf=\"pendingSearchIndexUpdates\" type=\"warning\"> </vdr-status-badge>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <h4 class=\"dropdown-header\">{{ 'catalog.search-index-controls' | translate }}</h4>\r\n                    <ng-container *ngIf=\"pendingSearchIndexUpdates\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"run-updates-button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"runPendingSearchIndexUpdates()\"\r\n                            [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                        >\r\n                            <vdr-status-badge type=\"warning\"> </vdr-status-badge>\r\n                            {{\r\n                                'catalog.run-pending-search-index-updates'\r\n                                    | translate: { count: pendingSearchIndexUpdates }\r\n                            }}\r\n                        </button>\r\n                        <div class=\"dropdown-divider\"></div>\r\n                    </ng-container>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"rebuildSearchIndex()\"\r\n                        [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                    >\r\n                        {{ 'catalog.rebuild-search-index' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n        <div class=\"flex wrap\">\r\n            <clr-checkbox-wrapper class=\"mt2\">\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"groupByProduct\" (ngModelChange)=\"refresh()\" />\r\n                <label>{{ 'catalog.group-by-product' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"product-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            [routerLink]=\"['./create']\"\r\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            <span class=\"full-label\">{{ 'catalog.create-new-product' | translate }}</span>\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <ng-template let-result=\"item\">\r\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <div class=\"image-placeholder\">\r\n                <img\r\n                    *ngIf=\"\r\n                        groupByProduct\r\n                            ? result.productAsset\r\n                            : result.productVariantAsset || result.productAsset as asset;\r\n                        else imagePlaceholder\r\n                    \"\r\n                    [src]=\"asset | assetPreview: 'tiny'\"\r\n                />\r\n                <ng-template #imagePlaceholder>\r\n                    <div class=\"placeholder\">\r\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </td>\r\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\r\n            {{ groupByProduct ? result.productName : result.productVariantName }}\r\n        </td>\r\n        <td class=\"align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-chip *ngIf=\"!result.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', result.productId]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteProduct(result.productId)\"\r\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteProduct'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    JobQueueService,\r\n    JobState,\r\n    LanguageCode,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SearchInput,\r\n    SearchProducts,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport {\r\n    delay,\r\n    distinctUntilChanged,\r\n    map,\r\n    shareReplay,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    tap,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { ProductSearchInputComponent } from '../product-search-input/product-search-input.component';\r\n\r\n@Component({\r\n    selector: 'vdr-products-list',\r\n    templateUrl: './product-list.component.html',\r\n    styleUrls: ['./product-list.component.scss'],\r\n})\r\nexport class ProductListComponent\r\n    extends BaseListComponent<SearchProducts.Query, SearchProducts.Items, SearchProducts.Variables>\r\n    implements OnInit, AfterViewInit\r\n{\r\n    searchTerm = '';\r\n    facetValueIds: string[] = [];\r\n    groupByProduct = true;\r\n    selectedFacetValueIds$: Observable<string[]>;\r\n    facetValues$: Observable<SearchProducts.FacetValues[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    pendingSearchIndexUpdates = 0;\r\n\r\n    @ViewChild('productSearchInputComponent', { static: true })\r\n    private productSearchInput: ProductSearchInputComponent;\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private jobQueueService: JobQueueService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        this.route.queryParamMap\r\n            .pipe(\r\n                map(qpm => qpm.get('q')),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(term => {\r\n                this.searchTerm = term || '';\r\n                if (this.productSearchInput) {\r\n                    this.productSearchInput.setSearchTerm(term);\r\n                }\r\n            });\r\n        this.selectedFacetValueIds$ = this.route.queryParamMap.pipe(map(qpm => qpm.getAll('fvids')));\r\n\r\n        this.selectedFacetValueIds$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\r\n            this.facetValueIds = ids;\r\n            if (this.productSearchInput) {\r\n                this.productSearchInput.setFacetValues(ids);\r\n            }\r\n        });\r\n        super.setQueryFn(\r\n            (...args: any[]) =>\r\n                this.dataService.product.searchProducts(this.searchTerm, ...args).refetchOnChannelChange(),\r\n            data => data.search,\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (skip, take) => ({\r\n                input: {\r\n                    skip,\r\n                    take,\r\n                    term: this.searchTerm,\r\n                    facetValueIds: this.facetValueIds,\r\n                    facetValueOperator: LogicalOperator.AND,\r\n                    groupByProduct: this.groupByProduct,\r\n                } as SearchInput,\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n\r\n        this.facetValues$ = this.result$.pipe(map(data => data.search.facetValues));\r\n\r\n        this.facetValues$\r\n            .pipe(take(1), delay(100), withLatestFrom(this.selectedFacetValueIds$))\r\n            .subscribe(([__, ids]) => {\r\n                this.productSearchInput.setFacetValues(ids);\r\n            });\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n\r\n        this.dataService.product\r\n            .getPendingSearchIndexUpdates()\r\n            .mapSingle(({ pendingSearchIndexUpdates }) => pendingSearchIndexUpdates)\r\n            .subscribe(value => (this.pendingSearchIndexUpdates = value));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.productSearchInput && this.searchTerm) {\r\n            setTimeout(() => this.productSearchInput.setSearchTerm(this.searchTerm));\r\n        }\r\n    }\r\n\r\n    setSearchTerm(term: string) {\r\n        this.searchTerm = term;\r\n        this.setQueryParam({ q: term || null, page: 1 });\r\n        this.refresh();\r\n    }\r\n\r\n    setFacetValueIds(ids: string[]) {\r\n        this.facetValueIds = ids;\r\n        this.setQueryParam({ fvids: ids, page: 1 });\r\n        this.refresh();\r\n    }\r\n\r\n    rebuildSearchIndex() {\r\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\r\n            this.notificationService.info(_('catalog.reindexing'));\r\n            this.jobQueueService.addJob(reindex.id, job => {\r\n                if (job.state === JobState.COMPLETED) {\r\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\r\n                    this.notificationService.success(_('catalog.reindex-successful'), {\r\n                        count: job.result.indexedItemCount,\r\n                        time,\r\n                    });\r\n                    this.refresh();\r\n                } else {\r\n                    this.notificationService.error(_('catalog.reindex-error'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    runPendingSearchIndexUpdates() {\r\n        this.dataService.product.runPendingSearchIndexUpdates().subscribe(value => {\r\n            this.notificationService.info(_('catalog.running-search-index-updates'), {\r\n                count: this.pendingSearchIndexUpdates,\r\n            });\r\n            this.pendingSearchIndexUpdates = 0;\r\n        });\r\n    }\r\n\r\n    deleteProduct(productId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\r\n                // Short delay to allow the product to be removed from the search index before\r\n                // refreshing.\r\n                delay(500),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <div class=\"flex center\">\r\n            <div class=\"mr2\">\r\n                <clr-checkbox-wrapper>\r\n                    <input\r\n                        clrCheckbox\r\n                        type=\"checkbox\"\r\n                        id=\"auto-update\"\r\n                        [(ngModel)]=\"autoUpdateVariantNames\"\r\n                    />\r\n                    <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\r\n                </clr-checkbox-wrapper>\r\n            </div>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.pristine || detailForm.invalid\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </div>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"optionGroups$ | async as optionGroups\">\r\n    <div formGroupName=\"optionGroups\" class=\"clr-row\">\r\n        <div class=\"clr-col-12 clr-col-xl-6\" *ngFor=\"let optionGroup of getOptionGroups(); index as i\">\r\n            <section class=\"card\" [formArrayName]=\"i\">\r\n                <div class=\"card-header option-group-header\">\r\n                    <vdr-entity-info [entity]=\"optionGroup.value\"></vdr-entity-info>\r\n                    <div class=\"ml2\">{{ optionGroup.value.code }}</div>\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            [id]=\"'name-' + i\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n                        <input\r\n                            [id]=\"'code-' + i\"\r\n                            type=\"text\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"code\"\r\n                        />\r\n                    </vdr-form-field>\r\n                </div>\r\n                <section class=\"card-block\">\r\n                    <table class=\"facet-values-list table mt2 mb4\" formGroupName=\"options\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>{{ 'common.name' | translate }}</th>\r\n                                <th>{{ 'common.code' | translate }}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr\r\n                                class=\"facet-value\"\r\n                                *ngFor=\"let option of getOptions(optionGroup); let i = index\"\r\n                                [formGroupName]=\"i\"\r\n                            >\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-entity-info [entity]=\"option.value\"></vdr-entity-info>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        formControlName=\"name\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                    />\r\n                                </td>\r\n                                <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" /></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </section>\r\n            </section>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateFacetInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    GetProductVariantOptions,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ProductOption,\r\n    ProductOptionGroup,\r\n    ServerConfigService,\r\n    UpdateFacetInput,\r\n    UpdateProductOptionGroupInput,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, forkJoin, Observable } from 'rxjs';\r\nimport { map, mergeMap, take } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\n\r\n@Component({\r\n    selector: 'vdr-product-options-editor',\r\n    templateUrl: './product-options-editor.component.html',\r\n    styleUrls: ['./product-options-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductOptionsEditorComponent\r\n    extends BaseDetailComponent<GetProductVariantOptions.Product>\r\n    implements OnInit\r\n{\r\n    detailForm: FormGroup;\r\n    optionGroups$: Observable<GetProductVariantOptions.OptionGroups[]>;\r\n    languageCode$: Observable<LanguageCode>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    optionGroupCustomFields: CustomFieldConfig[];\r\n    optionCustomFields: CustomFieldConfig[];\r\n    autoUpdateVariantNames = true;\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        protected serverConfigService: ServerConfigService,\r\n        protected dataService: DataService,\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: FormBuilder,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.optionGroupCustomFields = this.getCustomFieldConfig('ProductOptionGroup');\r\n        this.optionCustomFields = this.getCustomFieldConfig('ProductOption');\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.optionGroups$ = this.route.snapshot.data.entity.pipe(\r\n            map((product: GetProductVariantOptions.Product) => product.optionGroups),\r\n        );\r\n        this.detailForm = new FormGroup({\r\n            optionGroups: new FormArray([]),\r\n        });\r\n        super.init();\r\n    }\r\n\r\n    getOptionGroups(): FormGroup[] {\r\n        const optionGroups = this.detailForm.get('optionGroups');\r\n        return (optionGroups as FormArray).controls as FormGroup[];\r\n    }\r\n\r\n    getOptions(optionGroup: FormGroup): FormGroup[] {\r\n        const options = optionGroup.get('options');\r\n        return (options as FormArray).controls as FormGroup[];\r\n    }\r\n\r\n    save() {\r\n        if (this.detailForm.invalid || this.detailForm.pristine) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        const $product = this.dataService.product.getProduct(this.id).mapSingle(data => data.product!);\r\n        combineLatest(this.entity$, this.languageCode$, $product)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([{ optionGroups }, languageCode, product]) => {\r\n                    const updateOperations: Array<Observable<any>> = [];\r\n                    for (const optionGroupForm of this.getOptionGroups()) {\r\n                        if (optionGroupForm.get('name')?.dirty || optionGroupForm.get('code')?.dirty) {\r\n                            const optionGroupEntity = optionGroups.find(\r\n                                og => og.id === optionGroupForm.value.id,\r\n                            );\r\n                            if (optionGroupEntity) {\r\n                                const input = this.getUpdatedOptionGroup(\r\n                                    optionGroupEntity,\r\n                                    optionGroupForm,\r\n                                    languageCode,\r\n                                );\r\n                                updateOperations.push(\r\n                                    this.dataService.product.updateProductOptionGroup(input),\r\n                                );\r\n                            }\r\n                        }\r\n\r\n                        for (const optionForm of this.getOptions(optionGroupForm)) {\r\n                            if (optionForm.get('name')?.dirty || optionForm.get('code')?.dirty) {\r\n                                const optionGroup = optionGroups\r\n                                    .find(og => og.id === optionGroupForm.value.id)\r\n                                    ?.options.find(o => o.id === optionForm.value.id);\r\n                                if (optionGroup) {\r\n                                    const input = this.getUpdatedOption(\r\n                                        optionGroup,\r\n                                        optionForm,\r\n                                        languageCode,\r\n                                    );\r\n                                    updateOperations.push(\r\n                                        this.productDetailService.updateProductOption(\r\n                                            { ...input, autoUpdate: this.autoUpdateVariantNames },\r\n                                            product,\r\n                                            languageCode,\r\n                                        ),\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return forkJoin(updateOperations);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ProductOptionGroup',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ProductOptionGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private getUpdatedOptionGroup(\r\n        optionGroup: ProductOptionGroup.Fragment,\r\n        optionGroupFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductOptionGroupInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: optionGroup,\r\n            updatedFields: optionGroupFormGroup.value,\r\n            customFieldConfig: this.optionGroupCustomFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: optionGroup.name || '',\r\n            },\r\n        });\r\n        return input;\r\n    }\r\n\r\n    private getUpdatedOption(\r\n        option: ProductOption.Fragment,\r\n        optionFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductOptionInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: option,\r\n            updatedFields: optionFormGroup.value,\r\n            customFieldConfig: this.optionGroupCustomFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: option.name || '',\r\n            },\r\n        });\r\n        return input;\r\n    }\r\n\r\n    protected setFormValues(entity: GetProductVariantOptions.Product, languageCode: LanguageCode): void {\r\n        const groupsFormArray = new FormArray([]);\r\n        for (const optionGroup of entity.optionGroups) {\r\n            const groupTranslation = findTranslation(optionGroup, languageCode);\r\n            const group = {\r\n                id: optionGroup.id,\r\n                createdAt: optionGroup.createdAt,\r\n                updatedAt: optionGroup.updatedAt,\r\n                code: optionGroup.code,\r\n                name: groupTranslation ? groupTranslation.name : '',\r\n            };\r\n            const optionsFormArray = new FormArray([]);\r\n\r\n            for (const option of optionGroup.options) {\r\n                const optionTranslation = findTranslation(option, languageCode);\r\n                const optionControl = this.formBuilder.group({\r\n                    id: option.id,\r\n                    createdAt: option.createdAt,\r\n                    updatedAt: option.updatedAt,\r\n                    code: option.code,\r\n                    name: optionTranslation ? optionTranslation.name : '',\r\n                });\r\n                optionsFormArray.push(optionControl);\r\n            }\r\n\r\n            const groupControl = this.formBuilder.group(group);\r\n            groupControl.addControl('options', optionsFormArray);\r\n            groupsFormArray.push(groupControl);\r\n        }\r\n        this.detailForm.setControl('optionGroups', groupsFormArray);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.confirm-deletion-of-unused-variants-title' | translate }}\r\n</ng-template>\r\n{{ 'catalog.confirm-deletion-of-unused-variants-body' | translate }}\r\n<ul>\r\n    <li *ngFor=\"let variant of variants\">{{ variant.name }} ({{ variant.sku }})</li>\r\n</ul>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog, GetProductVariantOptions } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-confirm-variant-deletion-dialog',\r\n    templateUrl: './confirm-variant-deletion-dialog.component.html',\r\n    styleUrls: ['./confirm-variant-deletion-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ConfirmVariantDeletionDialogComponent implements Dialog<boolean> {\r\n    resolveWith: (result?: boolean) => void;\r\n    variants: GetProductVariantOptions.Variants[] = [];\r\n\r\n    confirm() {\r\n        this.resolveWith(true);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\r\n    <div class=\"chips\" *ngIf=\"0 < options.length\">\r\n        <vdr-chip\r\n            *ngFor=\"let option of options; last as isLast\"\r\n            [icon]=\"option.locked ? 'lock' : 'times'\"\r\n            [class.selected]=\"isLast && lastSelected\"\r\n            [class.locked]=\"option.locked\"\r\n            [colorFrom]=\"groupName\"\r\n            (iconClick)=\"removeOption(option)\"\r\n        >\r\n            {{ option.name }}\r\n        </vdr-chip>\r\n    </div>\r\n    <textarea\r\n        #textArea\r\n        (keyup)=\"handleKey($event)\"\r\n        (focus)=\"isFocussed = true\"\r\n        (blur)=\"handleBlur()\"\r\n        [(ngModel)]=\"input\"\r\n        [disabled]=\"disabled\"\r\n    ></textarea>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    forwardRef,\r\n    Input,\r\n    Provider,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => OptionValueInputComponent),\r\n    multi: true,\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-option-value-input',\r\n    templateUrl: './option-value-input.component.html',\r\n    styleUrls: ['./option-value-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\r\n})\r\nexport class OptionValueInputComponent implements ControlValueAccessor {\r\n    @Input() groupName = '';\r\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\r\n    options: Array<{ name: string; locked: boolean }>;\r\n    disabled = false;\r\n    input = '';\r\n    isFocussed = false;\r\n    lastSelected = false;\r\n    onChangeFn: (value: any) => void;\r\n    onTouchFn: (value: any) => void;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeFn = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchFn = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.options = obj || [];\r\n    }\r\n\r\n    focus() {\r\n        this.textArea.nativeElement.focus();\r\n    }\r\n\r\n    removeOption(option: { name: string; locked: boolean }) {\r\n        if (!option.locked) {\r\n            this.options = this.options.filter(o => o.name !== option.name);\r\n            this.onChangeFn(this.options);\r\n        }\r\n    }\r\n\r\n    handleKey(event: KeyboardEvent) {\r\n        switch (event.key) {\r\n            case ',':\r\n            case 'Enter':\r\n                this.addOptionValue();\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (this.lastSelected) {\r\n                    this.removeLastOption();\r\n                    this.lastSelected = false;\r\n                } else if (this.input === '') {\r\n                    this.lastSelected = true;\r\n                }\r\n                break;\r\n            default:\r\n                this.lastSelected = false;\r\n        }\r\n    }\r\n\r\n    handleBlur() {\r\n        this.isFocussed = false;\r\n        this.addOptionValue();\r\n    }\r\n\r\n    private addOptionValue() {\r\n        this.options = unique([...this.options, ...this.parseInputIntoOptions(this.input)]);\r\n        this.input = '';\r\n        this.onChangeFn(this.options);\r\n    }\r\n\r\n    private parseInputIntoOptions(input: string): Array<{ name: string; locked: boolean }> {\r\n        return input\r\n            .split(/[,\\n]/)\r\n            .map(s => s.trim())\r\n            .filter(s => s !== '')\r\n            .map(s => ({ name: s, locked: false }));\r\n    }\r\n\r\n    private removeLastOption() {\r\n        if (!this.options[this.options.length - 1].locked) {\r\n            this.options = this.options.slice(0, this.options.length - 1);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"!formValueChanged || getVariantsToAdd().length === 0\"\r\n        >\r\n            {{ 'common.add-new-variants' | translate: { count: getVariantsToAdd().length } }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\r\n    <div class=\"name\">\r\n        <label>{{ 'catalog.option' | translate }}</label>\r\n        <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\r\n    </div>\r\n    <div class=\"values\">\r\n        <label>{{ 'catalog.option-values' | translate }}</label>\r\n        <vdr-option-value-input\r\n            #optionValueInputComponent\r\n            [(ngModel)]=\"group.values\"\r\n            (ngModelChange)=\"generateVariants()\"\r\n            [groupName]=\"group.name\"\r\n            [disabled]=\"group.name === ''\"\r\n        ></vdr-option-value-input>\r\n    </div>\r\n</div>\r\n<button\r\n    class=\"btn btn-primary-outline btn-sm\"\r\n    (click)=\"addOption()\"\r\n>\r\n    <clr-icon shape=\"plus\"></clr-icon>\r\n    {{ 'catalog.add-option' | translate }}\r\n</button>\r\n\r\n<div class=\"variants-preview\">\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>{{ 'common.create' | translate }}</th>\r\n                <th>{{ 'catalog.variant' | translate }}</th>\r\n                <th>{{ 'catalog.sku' | translate }}</th>\r\n                <th>{{ 'catalog.price' | translate }}</th>\r\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tr *ngFor=\"let variant of generatedVariants\" [class.disabled]=\"!variant.enabled || variant.existing\">\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    *ngIf=\"!variant.existing\"\r\n                    [(ngModel)]=\"variant.enabled\"\r\n                    name=\"enabled\"\r\n                    clrCheckbox\r\n                    (ngModelChange)=\"formValueChanged = true\"\r\n                />\r\n            </td>\r\n            <td>\r\n                {{ getVariantName(variant) | translate }}\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        [(ngModel)]=\"variant.sku\"\r\n                        [placeholder]=\"'catalog.sku' | translate\"\r\n                        name=\"sku\"\r\n                        required\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    />\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.sku }}</span>\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <vdr-currency-input\r\n                        clrInput\r\n                        [(ngModel)]=\"variant.price\"\r\n                        name=\"price\"\r\n                        [currencyCode]=\"currencyCode\"\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    ></vdr-currency-input>\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.price | localeCurrency: currencyCode }}</span>\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <input\r\n                        clrInput\r\n                        type=\"number\"\r\n                        [(ngModel)]=\"variant.stock\"\r\n                        name=\"stock\"\r\n                        min=\"0\"\r\n                        step=\"1\"\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    />\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.stock }}</span>\r\n            </td>\r\n            <td>\r\n                <vdr-dropdown *ngIf=\"variant.productVariantId as productVariantId\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"deleteVariant(productVariantId)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.delete' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CreateProductOptionGroup,\r\n    CreateProductOptionInput,\r\n    CurrencyCode,\r\n    DataService,\r\n    DeactivateAware,\r\n    getDefaultUiLanguage,\r\n    GetProductVariantOptions,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ProductOptionGroupWithOptionsFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { EMPTY, forkJoin, Observable, of } from 'rxjs';\r\nimport { filter, map, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ConfirmVariantDeletionDialogComponent } from '../confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\n\r\nexport class GeneratedVariant {\r\n    isDefault: boolean;\r\n    options: Array<{ name: string; id?: string }>;\r\n    productVariantId?: string;\r\n    enabled: boolean;\r\n    existing: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n\r\n    constructor(config: Partial<GeneratedVariant>) {\r\n        for (const key of Object.keys(config)) {\r\n            this[key] = config[key];\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-editor',\r\n    templateUrl: './product-variants-editor.component.html',\r\n    styleUrls: ['./product-variants-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\r\n    formValueChanged = false;\r\n    generatedVariants: GeneratedVariant[] = [];\r\n    optionGroups: Array<{\r\n        id?: string;\r\n        isNew: boolean;\r\n        name: string;\r\n        values: Array<{\r\n            id?: string;\r\n            name: string;\r\n            locked: boolean;\r\n        }>;\r\n    }>;\r\n    product: GetProductVariantOptions.Product;\r\n    currencyCode: CurrencyCode;\r\n    private languageCode: LanguageCode;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private dataService: DataService,\r\n        private productDetailService: ProductDetailService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.initOptionsAndVariants();\r\n        this.languageCode =\r\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.currencyCode;\r\n        });\r\n    }\r\n\r\n    onFormChanged(variantInfo: GeneratedVariant) {\r\n        this.formValueChanged = true;\r\n        variantInfo.enabled = true;\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return !this.formValueChanged;\r\n    }\r\n\r\n    getVariantsToAdd() {\r\n        return this.generatedVariants.filter(v => !v.existing && v.enabled);\r\n    }\r\n\r\n    getVariantName(variant: GeneratedVariant) {\r\n        return variant.options.length === 0\r\n            ? _('catalog.default-variant')\r\n            : variant.options.map(o => o.name).join(' ');\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({\r\n            isNew: true,\r\n            name: '',\r\n            values: [],\r\n        });\r\n    }\r\n\r\n    generateVariants() {\r\n        const groups = this.optionGroups.map(g => g.values);\r\n        const previousVariants = this.generatedVariants;\r\n        const generatedVariantFactory = (\r\n            isDefault: boolean,\r\n            options: GeneratedVariant['options'],\r\n            existingVariant?: GetProductVariantOptions.Variants,\r\n            prototypeVariant?: GetProductVariantOptions.Variants,\r\n        ): GeneratedVariant => {\r\n            const prototype = this.getVariantPrototype(options, previousVariants);\r\n            return new GeneratedVariant({\r\n                enabled: true,\r\n                existing: !!existingVariant,\r\n                productVariantId: existingVariant?.id,\r\n                isDefault,\r\n                options,\r\n                price: existingVariant?.price ?? prototypeVariant?.price ?? prototype.price,\r\n                sku: existingVariant?.sku ?? prototypeVariant?.sku ?? prototype.sku,\r\n                stock: existingVariant?.stockOnHand ?? prototypeVariant?.stockOnHand ?? prototype.stock,\r\n            });\r\n        };\r\n        this.generatedVariants = groups.length\r\n            ? generateAllCombinations(groups).map(options => {\r\n                  const existingVariant = this.product.variants.find(v =>\r\n                      this.optionsAreEqual(v.options, options),\r\n                  );\r\n                  const prototypeVariant = this.product.variants.find(v =>\r\n                      this.optionsAreSubset(v.options, options),\r\n                  );\r\n                  return generatedVariantFactory(false, options, existingVariant, prototypeVariant);\r\n              })\r\n            : [generatedVariantFactory(true, [], this.product.variants[0])];\r\n    }\r\n\r\n    /**\r\n     * Returns one of the existing variants to base the newly-generated variant's\r\n     * details off.\r\n     */\r\n    private getVariantPrototype(\r\n        options: GeneratedVariant['options'],\r\n        previousVariants: GeneratedVariant[],\r\n    ): Pick<GeneratedVariant, 'sku' | 'price' | 'stock'> {\r\n        const variantsWithSimilarOptions = previousVariants.filter(v =>\r\n            options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)),\r\n        );\r\n        if (variantsWithSimilarOptions.length) {\r\n            return pick(previousVariants[0], ['sku', 'price', 'stock']);\r\n        }\r\n        return {\r\n            sku: '',\r\n            price: 0,\r\n            stock: 0,\r\n        };\r\n    }\r\n\r\n    deleteVariant(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product-variant'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY,\r\n                ),\r\n                switchMap(() => this.reFetchProduct(null)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                    this.initOptionsAndVariants();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const newOptionGroups = this.optionGroups\r\n            .filter(og => og.isNew)\r\n            .map(og => ({\r\n                name: og.name,\r\n                values: [],\r\n            }));\r\n\r\n        this.checkUniqueSkus()\r\n            .pipe(\r\n                mergeMap(() => this.confirmDeletionOfObsoleteVariants()),\r\n                mergeMap(() =>\r\n                    this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode),\r\n                ),\r\n                mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)),\r\n                mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)),\r\n                mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)),\r\n                mergeMap(groups => this.createNewProductVariants(groups)),\r\n                mergeMap(res => this.deleteObsoleteVariants(res.createProductVariants)),\r\n                mergeMap(variants => this.reFetchProduct(variants)),\r\n            )\r\n            .subscribe({\r\n                next: variants => {\r\n                    this.formValueChanged = false;\r\n                    this.notificationService.success(_('catalog.created-new-variants-success'), {\r\n                        count: variants.length,\r\n                    });\r\n                    this.initOptionsAndVariants();\r\n                },\r\n            });\r\n    }\r\n\r\n    private checkUniqueSkus() {\r\n        const withDuplicateSkus = this.generatedVariants.filter((variant, index) => {\r\n            return this.generatedVariants.find(gv => gv.sku.trim() === variant.sku.trim() && gv !== variant);\r\n        });\r\n        if (withDuplicateSkus.length) {\r\n            return this.modalService\r\n                .dialog({\r\n                    title: _('catalog.duplicate-sku-warning'),\r\n                    body: unique(withDuplicateSkus.map(v => `${v.sku}`)).join(', '),\r\n                    buttons: [{ label: _('common.close'), returnValue: false, type: 'primary' }],\r\n                })\r\n                .pipe(mergeMap(res => EMPTY));\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private confirmDeletionOfObsoleteVariants(): Observable<boolean> {\r\n        const obsoleteVariants = this.getObsoleteVariants();\r\n        if (obsoleteVariants.length) {\r\n            return this.modalService\r\n                .fromComponent(ConfirmVariantDeletionDialogComponent, {\r\n                    locals: {\r\n                        variants: obsoleteVariants,\r\n                    },\r\n                })\r\n                .pipe(\r\n                    mergeMap(res => {\r\n                        return res === true ? of(true) : EMPTY;\r\n                    }),\r\n                );\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private getObsoleteVariants() {\r\n        return this.product.variants.filter(\r\n            variant => !this.generatedVariants.find(gv => gv.productVariantId === variant.id),\r\n        );\r\n    }\r\n\r\n    private hasOnlyDefaultVariant(product: GetProductVariantOptions.Product): boolean {\r\n        return product.variants.length === 1 && product.optionGroups.length === 0;\r\n    }\r\n\r\n    private addOptionGroupsToProduct(\r\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\r\n    ): Observable<CreateProductOptionGroup.CreateProductOptionGroup[]> {\r\n        if (createdOptionGroups.length) {\r\n            return forkJoin(\r\n                createdOptionGroups.map(optionGroup => {\r\n                    return this.dataService.product.addOptionGroupToProduct({\r\n                        productId: this.product.id,\r\n                        optionGroupId: optionGroup.id,\r\n                    });\r\n                }),\r\n            ).pipe(map(() => createdOptionGroups));\r\n        } else {\r\n            return of([]);\r\n        }\r\n    }\r\n\r\n    private addNewOptionsToGroups(\r\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\r\n    ): Observable<string[]> {\r\n        const newOptions: CreateProductOptionInput[] = this.optionGroups\r\n            .map(og => {\r\n                const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);\r\n                const productOptionGroupId = createdGroup ? createdGroup.id : og.id;\r\n                if (!productOptionGroupId) {\r\n                    throw new Error('Could not get a productOptionGroupId');\r\n                }\r\n                return og.values\r\n                    .filter(v => !v.locked)\r\n                    .map(v => ({\r\n                        productOptionGroupId,\r\n                        code: normalizeString(v.name, '-'),\r\n                        translations: [{ name: v.name, languageCode: this.languageCode }],\r\n                    }));\r\n            })\r\n            .reduce((flat, options) => [...flat, ...options], []);\r\n\r\n        const allGroupIds = [\r\n            ...createdOptionGroups.map(g => g.id),\r\n            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),\r\n        ];\r\n\r\n        if (newOptions.length) {\r\n            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(\r\n                map(() => allGroupIds),\r\n            );\r\n        } else {\r\n            return of(allGroupIds);\r\n        }\r\n    }\r\n\r\n    private fetchOptionGroups(groupsIds: string[]): Observable<ProductOptionGroupWithOptionsFragment[]> {\r\n        return forkJoin(\r\n            groupsIds.map(id =>\r\n                this.dataService.product\r\n                    .getProductOptionGroup(id)\r\n                    .mapSingle(data => data.productOptionGroup)\r\n                    .pipe(filter(notNullOrUndefined)),\r\n            ),\r\n        );\r\n    }\r\n\r\n    private createNewProductVariants(groups: ProductOptionGroupWithOptionsFragment[]) {\r\n        const options = groups\r\n            .filter(notNullOrUndefined)\r\n            .map(og => og.options)\r\n            .reduce((flat, o) => [...flat, ...o], []);\r\n        const variants = this.generatedVariants\r\n            .filter(v => v.enabled && !v.existing)\r\n            .map(v => ({\r\n                price: v.price,\r\n                sku: v.sku,\r\n                stock: v.stock,\r\n                optionIds: v.options\r\n                    .map(name => options.find(o => o.name === name.name))\r\n                    .filter(notNullOrUndefined)\r\n                    .map(o => o.id),\r\n            }));\r\n        return this.productDetailService.createProductVariants(\r\n            this.product,\r\n            variants,\r\n            options,\r\n            this.languageCode,\r\n        );\r\n    }\r\n\r\n    private deleteObsoleteVariants<T>(input: T): Observable<T> {\r\n        const obsoleteVariants = this.getObsoleteVariants();\r\n        if (obsoleteVariants.length) {\r\n            const deleteOperations = obsoleteVariants.map(v =>\r\n                this.dataService.product.deleteProductVariant(v.id).pipe(map(() => input)),\r\n            );\r\n            return forkJoin(...deleteOperations);\r\n        } else {\r\n            return of(input);\r\n        }\r\n    }\r\n\r\n    private reFetchProduct<T>(input: T): Observable<T> {\r\n        // Re-fetch the Product to force an update to the view.\r\n        const id = this.route.snapshot.paramMap.get('id');\r\n        if (id) {\r\n            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));\r\n        } else {\r\n            return of(input);\r\n        }\r\n    }\r\n\r\n    initOptionsAndVariants() {\r\n        this.dataService.product\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id')!)\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            .mapSingle(({ product }) => product!)\r\n            .subscribe(p => {\r\n                this.product = p;\r\n                this.optionGroups = p.optionGroups.map(og => {\r\n                    return {\r\n                        id: og.id,\r\n                        isNew: false,\r\n                        name: og.name,\r\n                        values: og.options.map(o => ({\r\n                            id: o.id,\r\n                            name: o.name,\r\n                            locked: true,\r\n                        })),\r\n                    };\r\n                });\r\n                this.generateVariants();\r\n            });\r\n    }\r\n\r\n    private optionsAreEqual(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\r\n        return this.toOptionString(a) === this.toOptionString(b);\r\n    }\r\n\r\n    private optionsAreSubset(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\r\n        return this.toOptionString(b).includes(this.toOptionString(a));\r\n    }\r\n\r\n    private toOptionString(o: Array<{ name: string }>): string {\r\n        return o\r\n            .map(x => x.name)\r\n            .sort()\r\n            .join('|');\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Asset, AssetType, BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AssetResolver extends BaseEntityResolver<Asset.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Asset' as const,\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                type: AssetType.IMAGE,\r\n                fileSize: 0,\r\n                mimeType: '',\r\n                width: 0,\r\n                height: 0,\r\n                source: '',\r\n                preview: '',\r\n                focalPoint: null,\r\n            },\r\n            id => dataService.product.getAsset(id).mapStream(data => data.asset),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, Collection, DataService, getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CollectionResolver extends BaseEntityResolver<Collection.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Collection' as 'Collection',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                slug: '',\r\n                isPrivate: false,\r\n                description: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                translations: [],\r\n                filters: [],\r\n                parent: {} as any,\r\n                children: null,\r\n            },\r\n            id => dataService.collection.getCollection(id).mapStream(data => data.collection),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { FacetWithValues } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FacetResolver extends BaseEntityResolver<FacetWithValues.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Facet' as 'Facet',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                isPrivate: false,\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                code: '',\r\n                translations: [],\r\n                values: [],\r\n            },\r\n            (id) => dataService.facet.getFacet(id).mapStream((data) => data.facet),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n    BaseEntityResolver,\r\n    DataService,\r\n    getDefaultUiLanguage,\r\n    GetProductWithVariants,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductResolver extends BaseEntityResolver<GetProductWithVariants.Product> {\r\n    constructor(dataService: DataService, router: Router) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as 'Product',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                enabled: true,\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                slug: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                description: '',\r\n                translations: [],\r\n                optionGroups: [],\r\n                facetValues: [],\r\n                variantList: { items: [], totalItems: 0 },\r\n                channels: [],\r\n            },\r\n            id =>\r\n                dataService.product\r\n                    .getProduct(id, { take: 10 })\r\n                    .refetchOnChannelChange()\r\n                    .mapStream(data => data.product),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { GetProductVariantOptions } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptions.Product> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as 'Product',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                optionGroups: [],\r\n                variants: [],\r\n            },\r\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    CanDeactivateDetailGuard,\r\n    Collection,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    FacetWithValues,\r\n    GetProductWithVariants,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { AssetResolver } from './providers/routing/asset-resolver';\r\nimport { CollectionResolver } from './providers/routing/collection-resolver';\r\nimport { FacetResolver } from './providers/routing/facet-resolver';\r\nimport { ProductResolver } from './providers/routing/product-resolver';\r\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\r\n\r\nexport const catalogRoutes: Route[] = [\r\n    {\r\n        path: 'products',\r\n        component: ProductListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.products'),\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id',\r\n        component: ProductDetailComponent,\r\n        resolve: createResolveData(ProductResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id/manage-variants',\r\n        component: ProductVariantsEditorComponent,\r\n        resolve: createResolveData(ProductVariantsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productVariantEditorBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id/options',\r\n        component: ProductOptionsEditorComponent,\r\n        resolve: createResolveData(ProductVariantsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productOptionsEditorBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'facets',\r\n        component: FacetListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.facets'),\r\n        },\r\n    },\r\n    {\r\n        path: 'facets/:id',\r\n        component: FacetDetailComponent,\r\n        resolve: createResolveData(FacetResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: facetBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'collections',\r\n        component: CollectionListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.collections'),\r\n        },\r\n    },\r\n    {\r\n        path: 'collections/:id',\r\n        component: CollectionDetailComponent,\r\n        resolve: createResolveData(CollectionResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: collectionBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'assets',\r\n        component: AssetListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.assets'),\r\n        },\r\n    },\r\n    {\r\n        path: 'assets/:id',\r\n        component: AssetDetailComponent,\r\n        resolve: createResolveData(AssetResolver),\r\n        data: {\r\n            breadcrumb: assetBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function productBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<GetProductWithVariants.Product>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.products',\r\n        getName: product => product.name,\r\n        route: 'products',\r\n    });\r\n}\r\n\r\nexport function productVariantEditorBreadcrumb(data: any, params: any) {\r\n    return data.entity.pipe(\r\n        map((entity: any) => {\r\n            return [\r\n                {\r\n                    label: _('breadcrumb.products'),\r\n                    link: ['../', 'products'],\r\n                },\r\n                {\r\n                    label: `${entity.name}`,\r\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\r\n                },\r\n                {\r\n                    label: _('breadcrumb.manage-variants'),\r\n                    link: ['manage-variants'],\r\n                },\r\n            ];\r\n        }),\r\n    );\r\n}\r\n\r\nexport function productOptionsEditorBreadcrumb(data: any, params: any) {\r\n    return data.entity.pipe(\r\n        map((entity: any) => {\r\n            return [\r\n                {\r\n                    label: _('breadcrumb.products'),\r\n                    link: ['../', 'products'],\r\n                },\r\n                {\r\n                    label: `${entity.name}`,\r\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\r\n                },\r\n                {\r\n                    label: _('breadcrumb.product-options'),\r\n                    link: ['options'],\r\n                },\r\n            ];\r\n        }),\r\n    );\r\n}\r\n\r\nexport function facetBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<FacetWithValues.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.facets',\r\n        getName: facet => facet.name,\r\n        route: 'facets',\r\n    });\r\n}\r\n\r\nexport function collectionBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Collection.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.collections',\r\n        getName: collection => collection.name,\r\n        route: 'collections',\r\n    });\r\n}\r\n\r\nexport function assetBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Asset.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.assets',\r\n        getName: asset => asset.name,\r\n        route: 'assets',\r\n    });\r\n}\r\n","<div\r\n    cdkDropList\r\n    class=\"tree-node\"\r\n    #dropList\r\n    [cdkDropListData]=\"collectionTree\"\r\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\r\n    (cdkDropListDropped)=\"drop($event)\"\r\n>\r\n    <div\r\n        class=\"collection\"\r\n        [class.private]=\"collection.isPrivate\"\r\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\r\n        cdkDrag\r\n        [cdkDragData]=\"collection\"\r\n    >\r\n        <div\r\n            class=\"collection-detail\"\r\n            [ngClass]=\"'depth-' + depth\"\r\n            [class.active]=\"collection.id === activeCollectionId\"\r\n        >\r\n            <div class=\"name\">\r\n                <button\r\n                    class=\"icon-button folder-button\"\r\n                    [disabled]=\"expandAll\"\r\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\r\n                    (click)=\"collection.expanded = !collection.expanded\"\r\n                >\r\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\r\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\r\n                </button>\r\n                <ng-template #folderSpacer>\r\n                    <div class=\"folder-button-spacer\"></div>\r\n                </ng-template>\r\n                {{ collection.name }}\r\n            </div>\r\n            <div class=\"flex-spacer\"></div>\r\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\r\n            <a\r\n                class=\"btn btn-link btn-sm\"\r\n                [routerLink]=\"['./', { contents: collection.id }]\"\r\n                queryParamsHandling=\"preserve\"\r\n            >\r\n                <clr-icon shape=\"view-list\"></clr-icon>\r\n                {{ 'catalog.view-contents' | translate }}\r\n            </a>\r\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\r\n                <clr-icon shape=\"edit\"></clr-icon>\r\n                {{ 'common.edit' | translate }}\r\n            </a>\r\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\r\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\r\n            </div>\r\n            <vdr-dropdown>\r\n                <button class=\"icon-button\" vdrDropdownTrigger (click)=\"getMoveListItems(collection)\">\r\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <a\r\n                        class=\"dropdown-item\"\r\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\r\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\r\n                    >\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'catalog.create-new-collection' | translate }}\r\n                    </a>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\r\n                        (click)=\"moveUp(collection, i)\"\r\n                    >\r\n                        <clr-icon shape=\"caret up\"></clr-icon>\r\n                        {{ 'catalog.move-up' | translate }}\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"\r\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\r\n                        \"\r\n                        (click)=\"moveDown(collection, i)\"\r\n                    >\r\n                        <clr-icon shape=\"caret down\"></clr-icon>\r\n                        {{ 'catalog.move-down' | translate }}\r\n                    </button>\r\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        *ngFor=\"let item of moveListItems\"\r\n                        (click)=\"move(collection, item.id)\"\r\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\r\n                    >\r\n                        <div class=\"move-to-item\">\r\n                            <div class=\"move-icon\">\r\n                                <clr-icon shape=\"child-arrow\"></clr-icon>\r\n                            </div>\r\n                            <div class=\"path\">\r\n                                {{ item.path }}\r\n                            </div>\r\n                        </div>\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        class=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"delete(collection.id)\"\r\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n        <vdr-collection-tree-node\r\n            *ngIf=\"collection.expanded || expandAll\"\r\n            [expandAll]=\"expandAll\"\r\n            [collectionTree]=\"collection\"\r\n            [activeCollectionId]=\"activeCollectionId\"\r\n        ></vdr-collection-tree-node>\r\n    </div>\r\n</div>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Optional,\r\n    SimpleChanges,\r\n    SkipSelf,\r\n} from '@angular/core';\r\nimport { DataService, Permission } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\n\r\nimport { RootNode, TreeNode } from './array-to-tree';\r\nimport { CollectionPartial, CollectionTreeComponent } from './collection-tree.component';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-tree-node',\r\n    templateUrl: './collection-tree-node.component.html',\r\n    styleUrls: ['./collection-tree-node.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges {\r\n    depth = 0;\r\n    parentName: string;\r\n    @Input() collectionTree: TreeNode<CollectionPartial>;\r\n    @Input() activeCollectionId: string;\r\n    @Input() expandAll = false;\r\n    hasUpdatePermission$: Observable<boolean>;\r\n    hasDeletePermission$: Observable<boolean>;\r\n    moveListItems: Array<{ path: string; id: string }> = [];\r\n\r\n    constructor(\r\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\r\n        private root: CollectionTreeComponent,\r\n        private dataService: DataService,\r\n    ) {\r\n        if (parent) {\r\n            this.depth = parent.depth + 1;\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.parentName = this.collectionTree.name || '<root>';\r\n        const permissions$ = this.dataService.client\r\n            .userStatus()\r\n            .mapStream(data => data.userStatus.permissions)\r\n            .pipe(shareReplay(1));\r\n        this.hasUpdatePermission$ = permissions$.pipe(\r\n            map(\r\n                perms =>\r\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\r\n            ),\r\n        );\r\n        this.hasDeletePermission$ = permissions$.pipe(\r\n            map(\r\n                perms =>\r\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\r\n            ),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const expandAllChange = changes['expandAll'];\r\n        if (expandAllChange) {\r\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\r\n                this.collectionTree.children.forEach(c => (c.expanded = false));\r\n            }\r\n        }\r\n    }\r\n\r\n    trackByFn(index: number, item: CollectionPartial) {\r\n        return item.id;\r\n    }\r\n\r\n    getMoveListItems(collection: CollectionPartial) {\r\n        this.moveListItems = this.root.getMoveListItems(collection);\r\n    }\r\n\r\n    move(collection: CollectionPartial, parentId: string) {\r\n        this.root.onMove({\r\n            index: 0,\r\n            parentId,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    moveUp(collection: CollectionPartial, currentIndex: number) {\r\n        if (!collection.parent) {\r\n            return;\r\n        }\r\n        this.root.onMove({\r\n            index: currentIndex - 1,\r\n            parentId: collection.parent.id,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    moveDown(collection: CollectionPartial, currentIndex: number) {\r\n        if (!collection.parent) {\r\n            return;\r\n        }\r\n        this.root.onMove({\r\n            index: currentIndex + 1,\r\n            parentId: collection.parent.id,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\r\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\r\n        this.root.onDrop(event);\r\n    }\r\n\r\n    delete(id: string) {\r\n        this.root.onDelete(id);\r\n    }\r\n}\r\n","<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\r\n    <div class=\"name\">\r\n        <label>{{ 'catalog.option' | translate }}</label>\r\n        <input\r\n            placeholder=\"e.g. Size\"\r\n            clrInput\r\n            [(ngModel)]=\"group.name\"\r\n            name=\"name\"\r\n            required\r\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\r\n        />\r\n    </div>\r\n    <div class=\"values\">\r\n        <label>{{ 'catalog.option-values' | translate }}</label>\r\n        <vdr-option-value-input\r\n            #optionValueInputComponent\r\n            [(ngModel)]=\"group.values\"\r\n            (ngModelChange)=\"generateVariants()\"\r\n            [groupName]=\"group.name\"\r\n            [disabled]=\"group.name === ''\"\r\n        ></vdr-option-value-input>\r\n    </div>\r\n    <div class=\"remove-group\">\r\n        <button\r\n            class=\"btn btn-icon btn-warning-outline\"\r\n            [title]=\"'catalog.remove-option' | translate\"\r\n            (click)=\"removeOption(group.name)\"\r\n        >\r\n            <clr-icon shape=\"trash\"></clr-icon>\r\n        </button>\r\n    </div>\r\n</div>\r\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOption()\">\r\n    <clr-icon shape=\"plus\"></clr-icon>\r\n    {{ 'catalog.add-option' | translate }}\r\n</button>\r\n\r\n<div class=\"variants-preview\">\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\r\n                <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\r\n                <th>{{ 'catalog.sku' | translate }}</th>\r\n                <th>{{ 'catalog.price' | translate }}</th>\r\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n            </tr>\r\n        </thead>\r\n        <tr\r\n            *ngFor=\"let variant of variants; trackBy: trackByFn\"\r\n            [class.disabled]=\"!variantFormValues[variant.id].enabled\"\r\n        >\r\n            <td *ngIf=\"1 < variants.length\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    (change)=\"onFormChange()\"\r\n                    [(ngModel)]=\"variantFormValues[variant.id].enabled\"\r\n                    clrCheckbox\r\n                />\r\n            </td>\r\n            <td *ngIf=\"1 < variants.length\">\r\n                {{ variant.values.join(' ') }}\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        (change)=\"onFormChange()\"\r\n                        [(ngModel)]=\"variantFormValues[variant.id].sku\"\r\n                        [placeholder]=\"'catalog.sku' | translate\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <vdr-currency-input\r\n                        clrInput\r\n                        [(ngModel)]=\"variantFormValues[variant.id].price\"\r\n                        (ngModelChange)=\"onFormChange()\"\r\n                        [currencyCode]=\"currencyCode\"\r\n                    ></vdr-currency-input>\r\n                </clr-input-container>\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"number\"\r\n                        [(ngModel)]=\"variantFormValues[variant.id].stock\"\r\n                        (change)=\"onFormChange()\"\r\n                        min=\"0\"\r\n                        step=\"1\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</div>\r\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\r\n\r\nimport { CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\r\n\r\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\r\nexport type CreateVariantValues = {\r\n    optionValues: string[];\r\n    enabled: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n};\r\nexport type CreateProductVariantsConfig = {\r\n    groups: Array<{ name: string; values: string[] }>;\r\n    variants: CreateVariantValues[];\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-generate-product-variants',\r\n    templateUrl: './generate-product-variants.component.html',\r\n    styleUrls: ['./generate-product-variants.component.scss'],\r\n})\r\nexport class GenerateProductVariantsComponent implements OnInit {\r\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\r\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\r\n    currencyCode: CurrencyCode;\r\n    variants: Array<{ id: string; values: string[] }>;\r\n    variantFormValues: { [id: string]: CreateVariantValues } = {};\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.currencyCode;\r\n        });\r\n\r\n        this.generateVariants();\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({ name: '', values: [] });\r\n    }\r\n\r\n    removeOption(name: string) {\r\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\r\n        this.generateVariants();\r\n    }\r\n\r\n    generateVariants() {\r\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\r\n        const groups = totalValuesCount\r\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\r\n            : [[DEFAULT_VARIANT_CODE]];\r\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\r\n\r\n        this.variants.forEach(variant => {\r\n            if (!this.variantFormValues[variant.id]) {\r\n                this.variantFormValues[variant.id] = {\r\n                    optionValues: variant.values,\r\n                    enabled: true,\r\n                    price: this.copyFromDefault(variant.id, 'price', 0),\r\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\r\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\r\n                };\r\n            }\r\n        });\r\n        this.onFormChange();\r\n    }\r\n\r\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\r\n        return variant.values.join('|');\r\n    }\r\n\r\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        optionValueInputComponent.focus();\r\n    }\r\n\r\n    onFormChange() {\r\n        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);\r\n        this.variantsChange.emit({\r\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\r\n            variants: variantsToCreate,\r\n        });\r\n    }\r\n\r\n    private copyFromDefault<T extends keyof CreateVariantValues>(\r\n        variantId: string,\r\n        prop: T,\r\n        value: CreateVariantValues[T],\r\n    ): CreateVariantValues[T] {\r\n        return variantId !== DEFAULT_VARIANT_CODE\r\n            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]\r\n            : value;\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\r\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\r\n    <input\r\n        id=\"name\"\r\n        type=\"text\"\r\n        #nameInput=\"ngModel\"\r\n        [(ngModel)]=\"name\"\r\n        required\r\n        (input)=\"updateCode($event.target.value)\"\r\n    />\r\n</vdr-form-field>\r\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\r\n</vdr-form-field>\r\n<clr-checkbox-wrapper>\r\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\r\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\r\n</clr-checkbox-wrapper>\r\n<section *ngIf=\"customFields.length\">\r\n    <label>{{ 'common.custom-fields' | translate }}</label>\r\n    <vdr-tabbed-custom-fields\r\n        entityName=\"ProductOption\"\r\n        [customFields]=\"customFields\"\r\n        [customFieldsFormGroup]=\"customFieldsForm\"\r\n        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n    ></vdr-tabbed-custom-fields>\r\n</section>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"update()\"\r\n        [disabled]=\"\r\n            nameInput.invalid ||\r\n            codeInput.invalid ||\r\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\r\n        \"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'catalog.update-product-option' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n    CustomFieldConfig,\r\n    LanguageCode,\r\n    ProductVariant,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { createUpdatedTranslatable } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\n\r\n@Component({\r\n    selector: 'vdr-update-product-option-dialog',\r\n    templateUrl: './update-product-option-dialog.component.html',\r\n    styleUrls: ['./update-product-option-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UpdateProductOptionDialogComponent\r\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit {\r\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\r\n    updateVariantName = true;\r\n    // Provided by caller\r\n    productOption: ProductVariant.Options;\r\n    activeLanguage: LanguageCode;\r\n    name: string;\r\n    code: string;\r\n    customFields: CustomFieldConfig[];\r\n    codeInputTouched = false;\r\n    customFieldsForm: FormGroup;\r\n\r\n    ngOnInit(): void {\r\n        const currentTranslation = this.productOption.translations.find(\r\n            t => t.languageCode === this.activeLanguage,\r\n        );\r\n        this.name = currentTranslation?.name ?? '';\r\n        this.code = this.productOption.code;\r\n        this.customFieldsForm = new FormGroup({});\r\n        if (this.customFields) {\r\n            const cfCurrentTranslation =\r\n                (currentTranslation && (currentTranslation as any).customFields) || {};\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value =\r\n                    fieldDef.type === 'localeString'\r\n                        ? cfCurrentTranslation[key]\r\n                        : (this.productOption as any).customFields[key];\r\n                this.customFieldsForm.addControl(fieldDef.name, new FormControl(value));\r\n            }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        const result = createUpdatedTranslatable({\r\n            translatable: this.productOption,\r\n            languageCode: this.activeLanguage,\r\n            updatedFields: {\r\n                code: this.code,\r\n                name: this.name,\r\n                customFields: this.customFieldsForm.value,\r\n            },\r\n            customFieldConfig: this.customFields,\r\n            defaultTranslation: {\r\n                languageCode: this.activeLanguage,\r\n                name: '',\r\n            },\r\n        });\r\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    updateCode(nameValue: string) {\r\n        if (!this.codeInputTouched && !this.productOption.code) {\r\n            this.code = normalizeString(nameValue, '-');\r\n        }\r\n    }\r\n}\r\n","<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\r\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\r\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\r\n</div>\r\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\r\n    {{\r\n        'catalog.price-with-tax-in-default-zone'\r\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\r\n    }}\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-variant-price-detail',\r\n    templateUrl: './variant-price-detail.component.html',\r\n    styleUrls: ['./variant-price-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\r\n    @Input() priceIncludesTax: boolean;\r\n    @Input() price: number;\r\n    @Input() currencyCode: string;\r\n    @Input() taxCategoryId: string;\r\n\r\n    grossPrice$: Observable<number>;\r\n    taxRate$: Observable<number>;\r\n\r\n    private priceChange$ = new BehaviorSubject<number>(0);\r\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        const taxRates$ = this.dataService.settings\r\n            .getTaxRatesSimple(999, 0, 'cache-first')\r\n            .mapStream(data => data.taxRates.items);\r\n        const activeChannel$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\r\n            map(([channel, taxRates, taxCategoryId]) => {\r\n                const defaultTaxZone = channel.defaultTaxZone;\r\n                if (!defaultTaxZone) {\r\n                    return 0;\r\n                }\r\n                const applicableRate = taxRates.find(\r\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\r\n                );\r\n\r\n                if (!applicableRate) {\r\n                    return 0;\r\n                }\r\n                return applicableRate.value;\r\n            }),\r\n        );\r\n\r\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\r\n            map(([taxRate, price]) => {\r\n                return Math.round(price * ((100 + taxRate) / 100));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('price' in changes) {\r\n            this.priceChange$.next(changes.price.currentValue);\r\n        }\r\n        if ('taxCategoryId' in changes) {\r\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\r\n        }\r\n    }\r\n}\r\n","<div class=\"variants-list\">\r\n    <div\r\n        class=\"variant-container card\"\r\n        *ngFor=\"\r\n            let variant of variants | paginate: paginationConfig || { itemsPerPage: 10, currentPage: 1 };\r\n            trackBy: trackById;\r\n            let i = index\r\n        \"\r\n        [class.disabled]=\"!formGroupMap.get(variant.id)?.get('enabled')?.value\"\r\n    >\r\n        <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\r\n            <div class=\"card-block header-row\">\r\n                <div class=\"details\">\r\n                    <vdr-title-input class=\"sku\" [readonly]=\"!(updatePermission | hasPermission)\">\r\n                        <clr-input-container>\r\n                            <input\r\n                                clrInput\r\n                                type=\"text\"\r\n                                formControlName=\"sku\"\r\n                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                [placeholder]=\"'catalog.sku' | translate\"\r\n                            />\r\n                        </clr-input-container>\r\n                    </vdr-title-input>\r\n                    <vdr-title-input class=\"name\" [readonly]=\"!(updatePermission | hasPermission)\">\r\n                        <clr-input-container>\r\n                            <input\r\n                                clrInput\r\n                                type=\"text\"\r\n                                formControlName=\"name\"\r\n                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                [placeholder]=\"'common.name' | translate\"\r\n                            />\r\n                        </clr-input-container>\r\n                    </vdr-title-input>\r\n                </div>\r\n                <div class=\"right-controls\">\r\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermission\">\r\n                        <input type=\"checkbox\" clrToggle name=\"enabled\" formControlName=\"enabled\" />\r\n                        <label>{{ 'common.enabled' | translate }}</label>\r\n                    </clr-toggle-wrapper>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <div class=\"variant-body\">\r\n                    <div class=\"assets\">\r\n                        <vdr-assets\r\n                            [compact]=\"true\"\r\n                            [assets]=\"pendingAssetChanges[variant.id]?.assets || variant.assets\"\r\n                            [featuredAsset]=\"\r\n                                pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset\r\n                            \"\r\n                            [updatePermissions]=\"updatePermission\"\r\n                            (change)=\"onAssetChange(variant.id, $event)\"\r\n                        ></vdr-assets>\r\n                    </div>\r\n                    <div class=\"variant-form-inputs\">\r\n                        <div class=\"standard-fields\">\r\n                            <div class=\"variant-form-input-row\">\r\n                                <div class=\"tax-category\">\r\n                                    <clr-select-container\r\n                                        *vdrIfPermissions=\"updatePermission; else taxCategoryLabel\"\r\n                                    >\r\n                                        <label>{{ 'catalog.tax-category' | translate }}</label>\r\n                                        <select clrSelect name=\"options\" formControlName=\"taxCategoryId\">\r\n                                            <option\r\n                                                *ngFor=\"let taxCategory of taxCategories\"\r\n                                                [value]=\"taxCategory.id\"\r\n                                            >\r\n                                                {{ taxCategory.name }}\r\n                                            </option>\r\n                                        </select>\r\n                                    </clr-select-container>\r\n                                    <ng-template #taxCategoryLabel>\r\n                                        <label class=\"clr-control-label\">{{\r\n                                            'catalog.tax-category' | translate\r\n                                        }}</label>\r\n                                        <div class=\"tax-category-label\">\r\n                                            {{ getTaxCategoryName(formGroup) }}\r\n                                        </div>\r\n                                    </ng-template>\r\n                                </div>\r\n                                <div class=\"price\">\r\n                                    <clr-input-container>\r\n                                        <label>{{ 'catalog.price' | translate }}</label>\r\n                                        <vdr-currency-input\r\n                                            *ngIf=\"!channelPriceIncludesTax\"\r\n                                            clrInput\r\n                                            [currencyCode]=\"variant.currencyCode\"\r\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                            formControlName=\"price\"\r\n                                        ></vdr-currency-input>\r\n                                        <vdr-currency-input\r\n                                            *ngIf=\"channelPriceIncludesTax\"\r\n                                            clrInput\r\n                                            [currencyCode]=\"variant.currencyCode\"\r\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                            formControlName=\"priceWithTax\"\r\n                                        ></vdr-currency-input>\r\n                                    </clr-input-container>\r\n                                </div>\r\n                                <vdr-variant-price-detail\r\n                                    [price]=\"formGroup.get('price')!.value\"\r\n                                    [currencyCode]=\"variant.currencyCode\"\r\n                                    [priceIncludesTax]=\"channelPriceIncludesTax\"\r\n                                    [taxCategoryId]=\"formGroup.get('taxCategoryId')!.value\"\r\n                                ></vdr-variant-price-detail>\r\n                            </div>\r\n                            <div class=\"variant-form-input-row\">\r\n                                <clr-select-container *vdrIfPermissions=\"updatePermission\">\r\n                                    <label\r\n                                        >{{ 'catalog.track-inventory' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.track-inventory-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip>\r\n                                    </label>\r\n                                    <select clrSelect name=\"options\" formControlName=\"trackInventory\">\r\n                                        <option [value]=\"GlobalFlag.TRUE\">\r\n                                            {{ 'catalog.track-inventory-true' | translate }}\r\n                                        </option>\r\n                                        <option [value]=\"GlobalFlag.FALSE\">\r\n                                            {{ 'catalog.track-inventory-false' | translate }}\r\n                                        </option>\r\n                                        <option [value]=\"GlobalFlag.INHERIT\">\r\n                                            {{ 'catalog.track-inventory-inherit' | translate }}\r\n                                        </option>\r\n                                    </select>\r\n                                </clr-select-container>\r\n                                <clr-input-container>\r\n                                    <label\r\n                                        >{{ 'catalog.stock-on-hand' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-on-hand-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <input\r\n                                        [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\r\n                                        clrInput\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        step=\"1\"\r\n                                        formControlName=\"stockOnHand\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                        [vdrDisabled]=\"inventoryIsNotTracked(formGroup)\"\r\n                                    />\r\n                                </clr-input-container>\r\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.stock-allocated' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-allocated-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"value\">\r\n                                        {{ variant.stockAllocated }}\r\n                                    </div>\r\n                                </div>\r\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.stock-saleable' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-saleable-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"value\">\r\n                                        {{ getSaleableStockLevel(variant) }}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"variant-form-input-row\">\r\n                                <div\r\n                                    class=\"out-of-stock-threshold-wrapper\"\r\n                                    [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\r\n                                >\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.out-of-stock-threshold' | translate\r\n                                        }}<vdr-help-tooltip\r\n                                            [content]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"flex\">\r\n                                        <clr-input-container>\r\n                                            <input\r\n                                                clrInput\r\n                                                type=\"number\"\r\n                                                [formControl]=\"formGroup.get('outOfStockThreshold')\"\r\n                                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                                [vdrDisabled]=\"\r\n                                                    formGroup.get('useGlobalOutOfStockThreshold')?.value !==\r\n                                                        false || inventoryIsNotTracked(formGroup)\r\n                                                \"\r\n                                            />\r\n                                        </clr-input-container>\r\n                                        <clr-toggle-wrapper>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                clrToggle\r\n                                                name=\"useGlobalOutOfStockThreshold\"\r\n                                                formControlName=\"useGlobalOutOfStockThreshold\"\r\n                                                [vdrDisabled]=\"\r\n                                                    !(updatePermission | hasPermission) ||\r\n                                                    inventoryIsNotTracked(formGroup)\r\n                                                \"\r\n                                            />\r\n                                            <label\r\n                                                >{{ 'catalog.use-global-value' | translate }} ({{\r\n                                                    globalOutOfStockThreshold\r\n                                                }})</label\r\n                                            >\r\n                                        </clr-toggle-wrapper>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"custom-fields\">\r\n                            <div class=\"variant-form-input-row\">\r\n                                <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                                    <vdr-tabbed-custom-fields\r\n                                        entityName=\"ProductVariant\"\r\n                                        [customFields]=\"customFields\"\r\n                                        [compact]=\"true\"\r\n                                        [customFieldsFormGroup]=\"formGroup.get('customFields')\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                    ></vdr-tabbed-custom-fields>\r\n                                </section>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <div class=\"options-facets\">\r\n                    <vdr-entity-info [entity]=\"variant\"></vdr-entity-info>\r\n                    <div *ngIf=\"variant.options.length\">\r\n                        <div class=\"options\">\r\n                            <vdr-chip\r\n                                *ngFor=\"let option of variant.options | sort: 'groupId'\"\r\n                                [colorFrom]=\"optionGroupName(option.groupId)\"\r\n                                [invert]=\"true\"\r\n                                (iconClick)=\"editOption(option)\"\r\n                                [icon]=\"(updatePermission | hasPermission) && 'pencil'\"\r\n                            >\r\n                                <span class=\"option-group-name\">{{ optionGroupName(option.groupId) }}</span>\r\n                                {{ optionName(option) }}\r\n                            </vdr-chip>\r\n                            <a [routerLink]=\"['./', 'options']\" class=\"btn btn-link btn-sm\"\r\n                                >{{ 'catalog.edit-options' | translate }}...</a\r\n                            >\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <div class=\"facets\">\r\n                        <vdr-facet-value-chip\r\n                            *ngFor=\"let facetValue of existingFacetValues(variant)\"\r\n                            [facetValue]=\"facetValue\"\r\n                            [removable]=\"updatePermission | hasPermission\"\r\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\r\n                        ></vdr-facet-value-chip>\r\n                        <vdr-facet-value-chip\r\n                            *ngFor=\"let facetValue of pendingFacetValues(variant)\"\r\n                            [facetValue]=\"facetValue\"\r\n                            [removable]=\"updatePermission | hasPermission\"\r\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\r\n                        ></vdr-facet-value-chip>\r\n                        <button\r\n                            *vdrIfPermissions=\"updatePermission\"\r\n                            class=\"btn btn-sm btn-secondary\"\r\n                            (click)=\"selectFacetValueClick.emit([variant.id])\"\r\n                        >\r\n                            <clr-icon shape=\"plus\"></clr-icon>\r\n                            {{ 'catalog.add-facets' | translate }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ng-container *vdrIfMultichannel>\r\n                <div class=\"card-block\" *vdrIfDefaultChannelActive>\r\n                    <div class=\"flex channel-assignment\">\r\n                        <ng-container *ngFor=\"let channel of variant.channels\">\r\n                            <vdr-chip\r\n                                *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                icon=\"times-circle\"\r\n                                [title]=\"'catalog.remove-from-channel' | translate\"\r\n                                (iconClick)=\"\r\n                                    removeFromChannel.emit({ channelId: channel.id, variant: variant })\r\n                                \"\r\n                            >\r\n                                <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                                {{ channel.code | channelCodeToLabel }}\r\n                            </vdr-chip>\r\n                        </ng-container>\r\n                        <button class=\"btn btn-sm\" (click)=\"assignToChannel.emit(variant)\">\r\n                            <clr-icon shape=\"layers\"></clr-icon>\r\n                            {{ 'catalog.assign-to-channel' | translate }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { FormArray, FormGroup } from '@angular/forms';\r\nimport {\r\n    CustomFieldConfig,\r\n    DataService,\r\n    FacetValue,\r\n    FacetWithValues,\r\n    flattenFacetValues,\r\n    GlobalFlag,\r\n    LanguageCode,\r\n    ModalService,\r\n    Permission,\r\n    ProductDetail,\r\n    ProductOptionFragment,\r\n    ProductVariant,\r\n    TaxCategory,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\nimport { AssetChange } from '../assets/assets.component';\r\nimport {\r\n    PaginationConfig,\r\n    SelectedAssets,\r\n    VariantFormValue,\r\n} from '../product-detail/product-detail.component';\r\nimport { UpdateProductOptionDialogComponent } from '../update-product-option-dialog/update-product-option-dialog.component';\r\n\r\nexport interface VariantAssetChange extends AssetChange {\r\n    variantId: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-list',\r\n    templateUrl: './product-variants-list.component.html',\r\n    styleUrls: ['./product-variants-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductVariantsListComponent implements OnChanges, OnInit, OnDestroy {\r\n    @Input('productVariantsFormArray') formArray: FormArray;\r\n    @Input() variants: ProductVariant.Fragment[];\r\n    @Input() paginationConfig: PaginationConfig;\r\n    @Input() channelPriceIncludesTax: boolean;\r\n    @Input() taxCategories: TaxCategory[];\r\n    @Input() facets: FacetWithValues.Fragment[];\r\n    @Input() optionGroups: ProductDetail.OptionGroups[];\r\n    @Input() customFields: CustomFieldConfig[];\r\n    @Input() customOptionFields: CustomFieldConfig[];\r\n    @Input() activeLanguage: LanguageCode;\r\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\r\n    @Output() assignToChannel = new EventEmitter<ProductVariant.Fragment>();\r\n    @Output() removeFromChannel = new EventEmitter<{\r\n        channelId: string;\r\n        variant: ProductVariant.Fragment;\r\n    }>();\r\n    @Output() assetChange = new EventEmitter<VariantAssetChange>();\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @Output() selectFacetValueClick = new EventEmitter<string[]>();\r\n    @Output() updateProductOption = new EventEmitter<UpdateProductOptionInput & { autoUpdate: boolean }>();\r\n    selectedVariantIds: string[] = [];\r\n    formGroupMap = new Map<string, FormGroup>();\r\n    GlobalFlag = GlobalFlag;\r\n    globalTrackInventory: boolean;\r\n    globalOutOfStockThreshold: number;\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n    private facetValues: FacetValue.Fragment[];\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private changeDetector: ChangeDetectorRef,\r\n        private modalService: ModalService,\r\n        private dataService: DataService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\r\n            this.globalTrackInventory = globalSettings.trackInventory;\r\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\r\n            this.changeDetector.markForCheck();\r\n        });\r\n        this.subscription = this.formArray.valueChanges.subscribe(() => this.changeDetector.markForCheck());\r\n\r\n        this.subscription.add(\r\n            this.formArray.valueChanges\r\n                .pipe(\r\n                    map(value => value.length),\r\n                    debounceTime(1),\r\n                    distinctUntilChanged(),\r\n                )\r\n                .subscribe(() => {\r\n                    this.buildFormGroupMap();\r\n                }),\r\n        );\r\n\r\n        this.buildFormGroupMap();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ('facets' in changes && !!changes['facets'].currentValue) {\r\n            this.facetValues = flattenFacetValues(this.facets);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    trackById(index: number, item: ProductVariant.Fragment) {\r\n        return item.id;\r\n    }\r\n\r\n    inventoryIsNotTracked(formGroup: FormGroup): boolean {\r\n        const trackInventory = formGroup.get('trackInventory')?.value;\r\n        return (\r\n            trackInventory === GlobalFlag.FALSE ||\r\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\r\n        );\r\n    }\r\n\r\n    getTaxCategoryName(group: FormGroup): string {\r\n        const control = group.get(['taxCategoryId']);\r\n        if (control && this.taxCategories) {\r\n            const match = this.taxCategories.find(t => t.id === control.value);\r\n            return match ? match.name : '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    getSaleableStockLevel(variant: ProductVariant.Fragment) {\r\n        const effectiveOutOfStockThreshold = variant.useGlobalOutOfStockThreshold\r\n            ? this.globalOutOfStockThreshold\r\n            : variant.outOfStockThreshold;\r\n        return variant.stockOnHand - variant.stockAllocated - effectiveOutOfStockThreshold;\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        return !!this.variants && this.selectedVariantIds.length === this.variants.length;\r\n    }\r\n\r\n    onAssetChange(variantId: string, event: AssetChange) {\r\n        this.assetChange.emit({\r\n            variantId,\r\n            ...event,\r\n        });\r\n        const index = this.variants.findIndex(v => v.id === variantId);\r\n        this.formArray.at(index).markAsDirty();\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectedVariantIds = [];\r\n        } else {\r\n            this.selectedVariantIds = this.variants.map(v => v.id);\r\n        }\r\n        this.selectionChange.emit(this.selectedVariantIds);\r\n    }\r\n\r\n    toggleSelectVariant(variantId: string) {\r\n        const index = this.selectedVariantIds.indexOf(variantId);\r\n        if (-1 < index) {\r\n            this.selectedVariantIds.splice(index, 1);\r\n        } else {\r\n            this.selectedVariantIds.push(variantId);\r\n        }\r\n        this.selectionChange.emit(this.selectedVariantIds);\r\n    }\r\n\r\n    optionGroupName(optionGroupId: string): string | undefined {\r\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\r\n        if (group) {\r\n            const translation =\r\n                group?.translations.find(t => t.languageCode === this.activeLanguage) ??\r\n                group.translations[0];\r\n            return translation.name;\r\n        }\r\n    }\r\n\r\n    optionName(option: ProductOptionFragment) {\r\n        const translation =\r\n            option.translations.find(t => t.languageCode === this.activeLanguage) ?? option.translations[0];\r\n        return translation.name;\r\n    }\r\n\r\n    pendingFacetValues(variant: ProductVariant.Fragment) {\r\n        if (this.facets) {\r\n            const formFacetValueIds = this.getFacetValueIds(variant.id);\r\n            const variantFacetValueIds = variant.facetValues.map(fv => fv.id);\r\n            return formFacetValueIds\r\n                .filter(x => !variantFacetValueIds.includes(x))\r\n                .map(id => this.facetValues.find(fv => fv.id === id))\r\n                .filter(notNullOrUndefined);\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    existingFacetValues(variant: ProductVariant.Fragment) {\r\n        const formFacetValueIds = this.getFacetValueIds(variant.id);\r\n        const intersection = [...formFacetValueIds].filter(x =>\r\n            variant.facetValues.map(fv => fv.id).includes(x),\r\n        );\r\n        return intersection\r\n            .map(id => variant.facetValues.find(fv => fv.id === id))\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    removeFacetValue(variant: ProductVariant.Fragment, facetValueId: string) {\r\n        const formGroup = this.formGroupMap.get(variant.id);\r\n        if (formGroup) {\r\n            const newValue = (formGroup.value as VariantFormValue).facetValueIds.filter(\r\n                id => id !== facetValueId,\r\n            );\r\n            formGroup.patchValue({\r\n                facetValueIds: newValue,\r\n            });\r\n            formGroup.markAsDirty();\r\n        }\r\n    }\r\n\r\n    isVariantSelected(variantId: string): boolean {\r\n        return -1 < this.selectedVariantIds.indexOf(variantId);\r\n    }\r\n\r\n    editOption(option: ProductVariant.Options) {\r\n        this.modalService\r\n            .fromComponent(UpdateProductOptionDialogComponent, {\r\n                size: 'md',\r\n                locals: {\r\n                    productOption: option,\r\n                    activeLanguage: this.activeLanguage,\r\n                    customFields: this.customOptionFields,\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.updateProductOption.emit(result);\r\n                }\r\n            });\r\n    }\r\n\r\n    private buildFormGroupMap() {\r\n        this.formGroupMap.clear();\r\n        for (const controlGroup of this.formArray.controls) {\r\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    private getFacetValueIds(id: string): string[] {\r\n        const formValue: VariantFormValue = this.formGroupMap.get(id)?.value;\r\n        return formValue.facetValueIds;\r\n    }\r\n}\r\n","<table class=\"table\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'common.name' | translate }}</th>\r\n            <th>{{ 'catalog.sku' | translate }}</th>\r\n            <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\r\n                <th>{{ optionGroup.name }}</th>\r\n            </ng-container>\r\n            <th>{{ 'catalog.price' | translate }}</th>\r\n            <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n            <th>{{ 'common.enabled' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let variant of variants | paginate: paginationConfig; index as i; trackBy: trackByFn\">\r\n            <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <div class=\"card-img\">\r\n                        <div class=\"featured-asset\">\r\n                            <img\r\n                                *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\r\n                                [src]=\"featuredAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                            <ng-template #placeholder>\r\n                                <div class=\"placeholder\">\r\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            [placeholder]=\"'common.name' | translate\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"text\"\r\n                            formControlName=\"sku\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            [placeholder]=\"'catalog.sku' | translate\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\r\n                    <td\r\n                        class=\"left align-middle\"\r\n                        [class.disabled]=\"!formGroup.get('enabled')!.value\"\r\n                        [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\r\n                    >\r\n                        {{ option.name }}\r\n                    </td>\r\n                </ng-container>\r\n                <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <vdr-currency-input\r\n                            *ngIf=\"!channelPriceIncludesTax\"\r\n                            clrInput\r\n                            [currencyCode]=\"variant.currencyCode\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"price\"\r\n                        ></vdr-currency-input>\r\n                        <vdr-currency-input\r\n                            *ngIf=\"channelPriceIncludesTax\"\r\n                            clrInput\r\n                            [currencyCode]=\"variant.currencyCode\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"priceWithTax\"\r\n                        ></vdr-currency-input>\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            step=\"1\"\r\n                            formControlName=\"stockOnHand\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-toggle-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            name=\"enabled\"\r\n                            formControlName=\"enabled\"\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </clr-toggle-wrapper>\r\n                </td>\r\n            </ng-container>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n} from '@angular/core';\r\nimport { FormArray, FormGroup } from '@angular/forms';\r\nimport { Permission, ProductDetail, ProductVariant } from '@vendure/admin-ui/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\nimport { PaginationConfig, SelectedAssets } from '../product-detail/product-detail.component';\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-table',\r\n    templateUrl: './product-variants-table.component.html',\r\n    styleUrls: ['./product-variants-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\r\n    @Input('productVariantsFormArray') formArray: FormArray;\r\n    @Input() variants: ProductVariant.Fragment[];\r\n    @Input() paginationConfig: PaginationConfig;\r\n    @Input() channelPriceIncludesTax: boolean;\r\n    @Input() optionGroups: ProductDetail.OptionGroups[];\r\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\r\n    formGroupMap = new Map<string, FormGroup>();\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n    private subscription: Subscription;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        this.subscription = this.formArray.valueChanges\r\n            .pipe(\r\n                map(value => value.length),\r\n                debounceTime(1),\r\n                distinctUntilChanged(),\r\n            )\r\n            .subscribe(() => {\r\n                this.buildFormGroupMap();\r\n            });\r\n\r\n        this.buildFormGroupMap();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    trackByFn(index: number, item: any) {\r\n        if ((item as any).id != null) {\r\n            return (item as any).id;\r\n        } else {\r\n            return index;\r\n        }\r\n    }\r\n\r\n    getFeaturedAsset(variant: ProductVariant.Fragment) {\r\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\r\n    }\r\n\r\n    optionGroupName(optionGroupId: string): string | undefined {\r\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\r\n        return group && group.name;\r\n    }\r\n\r\n    private buildFormGroupMap() {\r\n        this.formGroupMap.clear();\r\n        for (const controlGroup of this.formArray.controls) {\r\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { catalogRoutes } from './catalog.routes';\r\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { AssetsComponent } from './components/assets/assets.component';\r\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\r\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\r\nimport { ConfirmVariantDeletionDialogComponent } from './components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\r\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\r\nimport { ProductSearchInputComponent } from './components/product-search-input/product-search-input.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { ProductVariantsListComponent } from './components/product-variants-list/product-variants-list.component';\r\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\r\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\r\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\r\n\r\nconst CATALOG_COMPONENTS = [\r\n    ProductListComponent,\r\n    ProductDetailComponent,\r\n    FacetListComponent,\r\n    FacetDetailComponent,\r\n    GenerateProductVariantsComponent,\r\n    ProductVariantsListComponent,\r\n    ApplyFacetDialogComponent,\r\n    AssetListComponent,\r\n    AssetsComponent,\r\n    VariantPriceDetailComponent,\r\n    CollectionListComponent,\r\n    CollectionDetailComponent,\r\n    CollectionTreeComponent,\r\n    CollectionTreeNodeComponent,\r\n    CollectionContentsComponent,\r\n    ProductVariantsTableComponent,\r\n    ProductSearchInputComponent,\r\n    OptionValueInputComponent,\r\n    UpdateProductOptionDialogComponent,\r\n    ProductVariantsEditorComponent,\r\n    AssignProductsToChannelDialogComponent,\r\n    AssetDetailComponent,\r\n    ConfirmVariantDeletionDialogComponent,\r\n    ProductOptionsEditorComponent,\r\n];\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(catalogRoutes)],\r\n    exports: [...CATALOG_COMPONENTS],\r\n    declarations: [...CATALOG_COMPONENTS],\r\n})\r\nexport class CatalogModule {}\r\n"]}