{"version":3,"mappings":"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","names":["t","s","constructor","n","e","o","a","r","c","super","this","l","customFields","getCustomFieldConfig","ngOnInit","detailForm","name","tags","formBuilder","group","reduce","Object","init","ngOnDestroy","destroy","onAssetChange","get","setValue","markAsDirty","save","dataService","product","updateAsset","id","value","subscribe","notificationService","success","entity","error","setFormValues","length","setCustomFieldFormValues","tt","selectors","B","setQueryFn","getAssetList","assets","d","h","searchTerm$","g","p","filterByTags$","map","f","options","skip","take","filter","contains","sort","createdAt","tagsOperator","paginationConfig$","itemsPerPage$","currentPage$","totalItems$","pipe","C","itemsPerPage","currentPage","totalItems","destroy$","refresh","allTags$","getTagList","mapStream","items","filesSelected","uploading","createAssets","ke","__typename","message","count","deleteAssets","showModalAndDelete","result","modalService","dialog","title","m","translationVars","body","buttons","type","label","returnValue","y","U","nt","slice","selectAssets","fromComponent","size","kt","concat","featuredAsset","emitChangeEvent","changeDetector","markForCheck","setAsFeatured","isFeatured","previewAsset","closable","locals","asset","removeAsset","change","emit","dropListDropped","previousContainer","data","container","$","se","contentsCurrentPage$","route","paramMap","contentsItemsPerPage$","Lt","filterTermControl","valueChanges","et","setContentsPageNumber","collectionIdChange$","refresh$","collection","getCollectionContents","mapSingle","M","contents$","productVariants","contentsTotalItems$","ngOnChanges","next","collectionId","currentValue","complete","setParam","setContentsItemsPerPage","router","navigate","snapshot","params","relativeTo","queryParamsHandling","z","slug","description","visible","filters","array","getCollectionFilters","single$","allFilters","collectionFilters","getFilterDefinition","find","code","assetsChanged","values","assetChanges","updateSlug","entity$","languageCode$","w","pristine","addFilter","findIndex","args","push","control","removeFilter","removeAt","splice","create","dirty","O","getUpdatedCollection","parentId","createCollection","markAsPristine","updateCollection","contentsComponent","canDeactivate","patchValue","isPrivate","forEach","translatable","updatedFields","customFieldConfig","languageCode","defaultTranslation","assetIds","featuredAssetId","mapOperationsToInputs","arguments","st","i","Map","set","children","hasOwnProperty","expanded","parent","collections","collectionTree","le","allMoveListItems","onDrop","item","Error","rearrange","index","currentIndex","onMove","onDelete","deleteCollection","getMoveListItems","calculateAllMoveListItems","ancestorIdPath","has","path","join","Set","isRootNode","Q","queryResult","getCollections","refetchOnChannelChange","items$","activeCollectionId$","activeCollectionTitle$","availableLanguages$","serverConfigService","getAvailableLanguages","contentLanguage$","client","uiState","contentLanguage","Jt","D","completed$","onRearrange","moveCollection","closeContents","contents","setLanguage","setContentLanguage","ref","refetch","lt","customValueFields","facet","updateCode","updateValueCode","customValueFieldIsSet","getValuesFormArray","addFacetValue","addControl","insert","getUpdatedFacet","createFacet","getAllFacets","updateFacet","getCreatedFacetValues","createFacetValues","getFacet","getUpdatedFacetValues","updateFacetValues","N","deleteFacetValue","deleteFacetValues","x","Z","at","A","I","J","Ot","Et","controls","translations","facetId","toString","q","dt","getFacets","facets","Gn","de","toggleDisplayLimit","displayLimit","initialLimit","deleteFacet","ut","call","Wt","_next","notifyNext","notifyComplete","ngAfterViewInit","setTimeout","selector","focus","selectValues","resolveWith","selectedValues","cancel","mt","productVariantIds","userStatus","activeChannelId","settings","getChannels","channels","currentChannel","availableChannels","selectedChannelIdControl","selectChannel","variantsPreview$","mo","getTopVariants","priceFactorControl","price","pricePreview","selectedChannel","assign","isProductVariantMode","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","getProduct","variantList","includes","toPromise","K","lastIndexOf","substr","replace","getTaxCategories","taxCategories","Mt","createProductWithVariants","createProduct","groups","createProductOptionGroups","P","addOptionGroupToProduct","productId","optionGroupId","optionGroups","variants","optionValues","optionIds","createProductVariants","createProductOptionGroup","sku","stockOnHand","stock","updateProduct","autoUpdate","productInput","variantsInput","getProductVariants","jt","Le","oe","Dt","ee","updateProductVariants","updateProductOption","deleteProductVariant","Y","factory","oxw","filterInput","customVariantFields","customOptionGroupFields","customOptionFields","enabled","autoUpdateVariantNames","facetValueIds","product$","Vt","co","filterOperator","bufferSize","refCount","variants$","ue","productVariantMap","taxCategories$","productDetailService","activeTab$","buildVariantFormArray","facets$","facetValues","getProductFormGroup","facetValues$","productChannels$","channelPriceIncludesTax$","getActiveChannel","activeChannel","pricesIncludeTax","navigateToTab","location","replaceState","createUrlTree","tab","isDefaultChannel","pe","setPage","setItemsPerPage","assignToChannel","currentChannelIds","removeFromChannel","removeProductsFromChannel","assignVariantToChannel","removeVariantFromChannel","variant","removeVariantsFromChannel","variantAssetsChanged","keys","variantAssetChanges","variantAssetChange","variantId","selectProductFacetValue","displayFacetValueModal","removeProductFacetValue","selectVariantFacetValue","me","variantFacetValueChanges","variantsToCreateAreValid","createVariantsConfig","every","getUpdatedProduct","console","getUpdatedProductVariants","updateSlugAfterSave","priceWithTax","taxCategoryId","taxCategory","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","emitEvent","W","selectTag","isFacetValueItem","indexOf","toLowerCase","facetValue","toLocaleLowerCase","setSearchTerm","selectComponent","select","selectedItems","unselect","setFacetValues","onSelectChange","Array","isArray","lastTerm","searchTermChange","lastFacetValueIds","facetValueChange","addTagFn","isSearchHeaderSelected","itemsList","markedIndex","gt","provide","Nt","useValue","decls","queryParamMap","searchTerm","productSearchInput","selectedFacetValueIds$","getAll","searchProducts","search","input","term","facetValueOperator","groupByProduct","result$","getPendingSearchIndexUpdates","pendingSearchIndexUpdates","setQueryParam","page","setFacetValueIds","fvids","rebuildSearchIndex","reindex","info","jobQueueService","addJob","state","Intl","NumberFormat","format","duration","indexedItemCount","time","runPendingSearchIndexUpdates","deleteProduct","_t","optionGroupCustomFields","optionCustomFields","optionGroups$","getOptionGroups","getOptions","invalid","getUpdatedOptionGroup","updateProductOptionGroup","getUpdatedOption","updatedAt","setControl","ht","confirm","ft","fe","useExisting","E","multi","registerOnChange","onChangeFn","registerOnTouched","onTouchFn","setDisabledState","disabled","writeValue","textArea","nativeElement","removeOption","locked","handleKey","key","addOptionValue","preventDefault","lastSelected","removeLastOption","handleBlur","isFocussed","parseInputIntoOptions","split","trim","initOptionsAndVariants","currencyCode","onFormChanged","formValueChanged","getVariantsToAdd","generatedVariants","existing","getVariantName","addOption","isNew","generateVariants","getVariantPrototype","ve","productVariantId","isDefault","optionsAreEqual","optionsAreSubset","Fi","deleteVariant","reFetchProduct","checkUniqueSkus","confirmDeletionOfObsoleteVariants","addOptionGroupsToProduct","addNewOptionsToGroups","fetchOptionGroups","createNewProductVariants","deleteObsoleteVariants","getObsoleteVariants","hasOnlyDefaultVariant","productOptionGroupId","addOptionToGroup","getProductOptionGroup","productOptionGroup","getProductVariantsOptions","toOptionString","vt","fileSize","mimeType","width","height","source","preview","focalPoint","getAsset","Ct","getCollection","xt","Zt","bt","X","Ce","component","breadcrumb","resolve","xe","Ze","be","Ae","Te","Pe","breadcrumbKey","getName","link","depth","parentName","permissions","hasUpdatePermission$","hasDeletePermission$","expandAll","previousValue","trackByFn","moveListItems","root","move","moveUp","moveDown","drop","previousIndex","delete","j","pipes","ne","variantFormValues","copyFromDefault","onFormChange","handleEnter","stopPropagation","variantsChange","At","productOption","activeLanguage","customFieldsForm","update","updateVariantName","codeInputTouched","Tt","getTaxRatesSimple","taxRates","taxRate$","taxCategoryIdChange$","defaultTaxZone","zone","category","grossPrice$","priceChange$","Math","round","Pt","selectFacetValueClick","getGlobalSettings","globalSettings","globalTrackInventory","globalOutOfStockThreshold","subscription","formArray","add","buildFormGroupMap","unsubscribe","trackById","inventoryIsNotTracked","getTaxCategoryName","getSaleableStockLevel","stockAllocated","areAllSelected","selectedVariantIds","assetChange","toggleSelectAll","selectionChange","toggleSelectVariant","optionGroupName","optionName","pendingFacetValues","getFacetValueIds","existingFacetValues","removeFacetValue","formGroupMap","isVariantSelected","editOption","clear","yt","getFeaturedAsset","pendingAssetChanges","Ft","qt","b","$t","S"],"sources":["webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.html","webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.html","webpack:///src/lib/catalog/src/components/assets/assets.component.html","webpack:///src/lib/catalog/src/components/assets/assets.component.ts","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.html","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.html","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","webpack:///src/lib/catalog/src/components/collection-tree/array-to-tree.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.html","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.ts","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.html","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.html","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/skipUntil.js","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.html","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.html","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","webpack:///src/lib/catalog/src/providers/product-detail/replace-last.ts","webpack:///src/lib/catalog/src/providers/product-detail/product-detail.service.ts","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.html","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.ts","webpack:///src/lib/catalog/src/components/product-search-input/product-search-input.component.html","webpack:///src/lib/catalog/src/components/product-search-input/product-search-input.component.ts","webpack:///src/lib/catalog/src/components/product-list/product-list.component.html","webpack:///src/lib/catalog/src/components/product-list/product-list.component.ts","webpack:///src/lib/catalog/src/components/product-options-editor/product-options-editor.component.html","webpack:///src/lib/catalog/src/components/product-options-editor/product-options-editor.component.ts","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.html","webpack:///src/lib/catalog/src/components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component.ts","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.html","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.html","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","webpack:///src/lib/catalog/src/providers/routing/asset-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/collection-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/facet-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-variants-resolver.ts","webpack:///src/lib/catalog/src/catalog.routes.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.html","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.html","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.html","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.html","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.ts","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.html","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","webpack:///src/lib/catalog/src/catalog.module.ts"],"sourcesContent":["<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"asset-detail\"></vdr-action-bar-items>\r\n        <button\r\n            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<vdr-asset-preview\r\n    [asset]=\"entity$ | async\"\r\n    [editable]=\"true\"\r\n    [customFields]=\"customFields\"\r\n    [customFieldsForm]=\"detailForm.get('customFields')\"\r\n    (assetChange)=\"onAssetChange($event)\"\r\n></vdr-asset-preview>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    GetAsset,\r\n    LanguageCode,\r\n} from '@vendure/admin-ui/core';\r\nimport { DataService, NotificationService, ServerConfigService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-detail',\r\n    templateUrl: './asset-detail.component.html',\r\n    styleUrls: ['./asset-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssetDetailComponent extends BaseDetailComponent<GetAsset.Asset> implements OnInit, OnDestroy {\r\n    detailForm = new FormGroup({});\r\n    customFields: CustomFieldConfig[];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Asset');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.detailForm = new FormGroup({\r\n            name: new FormControl(''),\r\n            tags: new FormControl([]),\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\r\n        this.detailForm.get('name')?.setValue(event.name);\r\n        this.detailForm.get('tags')?.setValue(event.tags);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    save() {\r\n        this.dataService.product\r\n            .updateAsset({\r\n                id: this.id,\r\n                name: this.detailForm.value.name,\r\n                tags: this.detailForm.value.tags,\r\n                customFields: this.detailForm.value.customFields,\r\n            })\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Asset',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    protected setFormValues(entity: GetAsset.Asset, languageCode: LanguageCode): void {\r\n        this.detailForm.get('name')?.setValue(entity.name);\r\n        this.detailForm.get('tags')?.setValue(entity.tags);\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetAssetList,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SortOrder,\r\n    TagFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\r\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-asset-list',\r\n    templateUrl: './asset-list.component.html',\r\n    styleUrls: ['./asset-list.component.scss'],\r\n})\r\nexport class AssetListComponent\r\n    extends BaseListComponent<GetAssetList.Query, GetAssetList.Items, GetAssetList.Variables>\r\n    implements OnInit {\r\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\r\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\r\n    uploading = false;\r\n    allTags$: Observable<TagFragment[]>;\r\n    paginationConfig$: Observable<PaginationInstance>;\r\n\r\n    constructor(\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.product.getAssetList(...args),\r\n            data => data.assets,\r\n            (skip, take) => {\r\n                const searchTerm = this.searchTerm$.value;\r\n                const tags = this.filterByTags$.value?.map(t => t.value);\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        ...(searchTerm\r\n                            ? {\r\n                                  filter: {\r\n                                      name: { contains: searchTerm },\r\n                                  },\r\n                              }\r\n                            : {}),\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                        tags,\r\n                        tagsOperator: LogicalOperator.AND,\r\n                    },\r\n                };\r\n            },\r\n            { take: 25, skip: 0 },\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\r\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\r\n        );\r\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n\r\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\r\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\r\n    }\r\n\r\n    filesSelected(files: File[]) {\r\n        if (files.length) {\r\n            this.uploading = true;\r\n            this.dataService.product\r\n                .createAssets(files)\r\n                .pipe(finalize(() => (this.uploading = false)))\r\n                .subscribe(({ createAssets }) => {\r\n                    let successCount = 0;\r\n                    for (const result of createAssets) {\r\n                        switch (result.__typename) {\r\n                            case 'Asset':\r\n                                successCount++;\r\n                                break;\r\n                            case 'MimeTypeError':\r\n                                this.notificationService.error(result.message);\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (0 < successCount) {\r\n                        super.refresh();\r\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\r\n                            count: successCount,\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAssets(assets: Asset[]) {\r\n        this.showModalAndDelete(assets.map(a => a.id))\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(\r\n                            assets.map(a => a.id),\r\n                            response.message || '',\r\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Assets',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(assetIds: string[], message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-assets'),\r\n                translationVars: {\r\n                    count: assetIds.length,\r\n                },\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\r\n                map(res => res.deleteAssets),\r\n            );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left [grow]=\"true\">\r\n        <vdr-asset-search-input\r\n            class=\"pr4 mt1\"\r\n            [tags]=\"allTags$ | async\"\r\n            (searchTermChange)=\"searchTerm$.next($event)\"\r\n            (tagsChange)=\"filterByTags$.next($event)\"\r\n        ></vdr-asset-search-input>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"asset-list\"></vdr-action-bar-items>\r\n        <vdr-asset-file-input\r\n            (selectFiles)=\"filesSelected($event)\"\r\n            [uploading]=\"uploading\"\r\n            dropZoneTarget=\".content-area\"\r\n        ></vdr-asset-file-input>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-asset-gallery\r\n    [assets]=\"(items$ | async)! | paginate: (paginationConfig$ | async) || {}\"\r\n    [multiSelect]=\"true\"\r\n    [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\r\n    (deleteAssets)=\"deleteAssets($event)\"\r\n></vdr-asset-gallery>\r\n\r\n<div class=\"paging-controls\">\r\n    <vdr-items-per-page-controls\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    ></vdr-items-per-page-controls>\r\n\r\n    <vdr-pagination-controls\r\n        [currentPage]=\"currentPage$ | async\"\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        [totalItems]=\"totalItems$ | async\"\r\n        (pageChange)=\"setPageNumber($event)\"\r\n    ></vdr-pagination-controls>\r\n</div>\r\n","<div class=\"card\" *ngIf=\"!compact; else compactView\">\r\n    <div class=\"card-img\">\r\n        <div class=\"featured-asset\">\r\n            <img\r\n                *ngIf=\"featuredAsset\"\r\n                [src]=\"featuredAsset | assetPreview:'small'\"\r\n                (click)=\"previewAsset(featuredAsset)\"\r\n            />\r\n            <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\">\r\n                <clr-icon shape=\"image\" size=\"128\"></clr-icon>\r\n                <div>{{ 'catalog.no-featured-asset' | translate }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\"><ng-container *ngTemplateOutlet=\"assetList\"></ng-container></div>\r\n    <div class=\"card-footer\" *vdrIfPermissions=\"updatePermissions\">\r\n        <button class=\"btn\" (click)=\"selectAssets()\">\r\n            <clr-icon shape=\"attachment\"></clr-icon>\r\n            {{ 'asset.add-asset' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #compactView>\r\n    <div class=\"featured-asset compact\">\r\n        <img\r\n            *ngIf=\"featuredAsset\"\r\n            [src]=\"featuredAsset | assetPreview:'thumb'\"\r\n            (click)=\"previewAsset(featuredAsset)\"\r\n        />\r\n\r\n        <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\"><clr-icon shape=\"image\" size=\"150\"></clr-icon></div>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"assetList\"></ng-container>\r\n    <button\r\n        *vdrIfPermissions=\"updatePermissions\"\r\n        class=\"compact-select btn btn-icon btn-sm btn-block\"\r\n        [title]=\"'asset.add-asset' | translate\"\r\n        (click)=\"selectAssets()\"\r\n    >\r\n        <clr-icon shape=\"attachment\"></clr-icon>\r\n        {{ 'asset.add-asset' | translate }}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #assetList>\r\n    <div class=\"all-assets\" [class.compact]=\"compact\" cdkDropListGroup>\r\n        <div\r\n            *ngFor=\"let asset of assets; let index = index\"\r\n            class=\"drop-list\"\r\n            cdkDropList\r\n            cdkDropListOrientation=\"horizontal\"\r\n            [cdkDropListData]=\"index\"\r\n            [cdkDropListDisabled]=\"!(updatePermissions | hasPermission)\"\r\n            (cdkDropListDropped)=\"dropListDropped($event)\"\r\n        >\r\n            <vdr-dropdown cdkDrag>\r\n                <div\r\n                    class=\"asset-thumb\"\r\n                    vdrDropdownTrigger\r\n                    [class.featured]=\"isFeatured(asset)\"\r\n                    [title]=\"\"\r\n                    tabindex=\"0\"\r\n                >\r\n                    <img [src]=\"asset | assetPreview:'tiny'\" />\r\n                </div>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button type=\"button\" vdrDropdownItem (click)=\"previewAsset(asset)\">\r\n                        {{ 'asset.preview' | translate }}\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        [disabled]=\"isFeatured(asset) || !(updatePermissions | hasPermission)\"\r\n                        vdrDropdownItem\r\n                        (click)=\"setAsFeatured(asset)\"\r\n                    >\r\n                        {{ 'asset.set-as-featured-asset' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"remove-asset\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"!(updatePermissions | hasPermission)\"\r\n                        (click)=\"removeAsset(asset)\"\r\n                    >\r\n                        {{ 'asset.remove-asset' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    HostBinding,\r\n    Input,\r\n    Output,\r\n} from '@angular/core';\r\nimport {\r\n    Asset,\r\n    AssetPickerDialogComponent,\r\n    AssetPreviewDialogComponent,\r\n    ModalService,\r\n    Permission,\r\n} from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport interface AssetChange {\r\n    assets: Asset[];\r\n    featuredAsset: Asset | undefined;\r\n}\r\n\r\n/**\r\n * A component which displays the Assets, and allows assets to be removed and\r\n * added, and for the featured asset to be set.\r\n *\r\n * Note: rather complex code for drag drop is due to a limitation of the default CDK implementation\r\n * which is addressed by a work-around from here: https://github.com/angular/components/issues/13372#issuecomment-483998378\r\n */\r\n@Component({\r\n    selector: 'vdr-assets',\r\n    templateUrl: './assets.component.html',\r\n    styleUrls: ['./assets.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssetsComponent {\r\n    @Input('assets') set assetsSetter(val: Asset[]) {\r\n        // create a new non-readonly array of assets\r\n        this.assets = (val || []).slice();\r\n    }\r\n\r\n    @Input() featuredAsset: Asset | undefined;\r\n    @HostBinding('class.compact')\r\n    @Input()\r\n    compact = false;\r\n    @Output() change = new EventEmitter<AssetChange>();\r\n\r\n    public assets: Asset[] = [];\r\n\r\n    @Input()\r\n    updatePermissions: string | string[] | Permission | Permission[];\r\n\r\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    selectAssets() {\r\n        this.modalService\r\n            .fromComponent(AssetPickerDialogComponent, {\r\n                size: 'xl',\r\n            })\r\n            .subscribe(result => {\r\n                if (result && result.length) {\r\n                    this.assets = unique(this.assets.concat(result), 'id');\r\n                    if (!this.featuredAsset) {\r\n                        this.featuredAsset = result[0];\r\n                    }\r\n                    this.emitChangeEvent(this.assets, this.featuredAsset);\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    setAsFeatured(asset: Asset) {\r\n        this.featuredAsset = asset;\r\n        this.emitChangeEvent(this.assets, asset);\r\n    }\r\n\r\n    isFeatured(asset: Asset): boolean {\r\n        return !!this.featuredAsset && this.featuredAsset.id === asset.id;\r\n    }\r\n\r\n    previewAsset(asset: Asset) {\r\n        this.modalService\r\n            .fromComponent(AssetPreviewDialogComponent, {\r\n                size: 'xl',\r\n                closable: true,\r\n                locals: { asset },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeAsset(asset: Asset) {\r\n        this.assets = this.assets.filter(a => a.id !== asset.id);\r\n        if (this.featuredAsset && this.featuredAsset.id === asset.id) {\r\n            this.featuredAsset = this.assets.length > 0 ? this.assets[0] : undefined;\r\n        }\r\n        this.emitChangeEvent(this.assets, this.featuredAsset);\r\n    }\r\n\r\n    private emitChangeEvent(assets: Asset[], featuredAsset: Asset | undefined) {\r\n        this.change.emit({\r\n            assets,\r\n            featuredAsset,\r\n        });\r\n    }\r\n\r\n    dropListDropped(event: CdkDragDrop<number>) {\r\n        moveItemInArray(this.assets, event.previousContainer.data, event.container.data);\r\n        this.emitChangeEvent(this.assets, this.featuredAsset);\r\n    }\r\n}\r\n","<div class=\"contents-header\">\r\n    <div class=\"header-title-row\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\r\n        ></ng-container>\r\n    </div>\r\n    <input\r\n        type=\"text\"\r\n        [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n        [formControl]=\"filterTermControl\"\r\n    />\r\n</div>\r\n<vdr-data-table\r\n    [items]=\"contents$ | async\"\r\n    [itemsPerPage]=\"contentsItemsPerPage$ | async\"\r\n    [totalItems]=\"contentsTotalItems$ | async\"\r\n    [currentPage]=\"contentsCurrentPage$ | async\"\r\n    (pageChange)=\"setContentsPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\r\n>\r\n    <ng-template let-variant=\"item\">\r\n        <td class=\"left align-middle\">{{ variant.name }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['/catalog/products', variant.productId, { tab: 'variants' }]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ContentChild,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    startWith,\r\n    switchMap,\r\n    takeUntil,\r\n    tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { GetCollectionContents } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-contents',\r\n    templateUrl: './collection-contents.component.html',\r\n    styleUrls: ['./collection-contents.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Input() collectionId: string;\r\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\r\n\r\n    contents$: Observable<GetCollectionContents.Items[]>;\r\n    contentsTotalItems$: Observable<number>;\r\n    contentsItemsPerPage$: Observable<number>;\r\n    contentsCurrentPage$: Observable<number>;\r\n    filterTermControl = new FormControl('');\r\n    private collectionIdChange$ = new BehaviorSubject<string>('');\r\n    private refresh$ = new BehaviorSubject<boolean>(true);\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.contentsCurrentPage$ = this.route.paramMap.pipe(\r\n            map(qpm => qpm.get('contentsPage')),\r\n            map(page => (!page ? 1 : +page)),\r\n            startWith(1),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.contentsItemsPerPage$ = this.route.paramMap.pipe(\r\n            map(qpm => qpm.get('contentsPerPage')),\r\n            map(perPage => (!perPage ? 10 : +perPage)),\r\n            startWith(10),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\r\n            debounceTime(250),\r\n            tap(() => this.setContentsPageNumber(1)),\r\n            startWith(''),\r\n        );\r\n\r\n        const collection$ = combineLatest(\r\n            this.collectionIdChange$,\r\n            this.contentsCurrentPage$,\r\n            this.contentsItemsPerPage$,\r\n            filterTerm$,\r\n            this.refresh$,\r\n        ).pipe(\r\n            takeUntil(this.destroy$),\r\n            switchMap(([id, currentPage, itemsPerPage, filterTerm]) => {\r\n                const take = itemsPerPage;\r\n                const skip = (currentPage - 1) * itemsPerPage;\r\n                if (id) {\r\n                    return this.dataService.collection\r\n                        .getCollectionContents(id, take, skip, filterTerm)\r\n                        .mapSingle(data => data.collection);\r\n                } else {\r\n                    return of(null);\r\n                }\r\n            }),\r\n        );\r\n\r\n        this.contents$ = collection$.pipe(map(result => (result ? result.productVariants.items : [])));\r\n        this.contentsTotalItems$ = collection$.pipe(\r\n            map(result => (result ? result.productVariants.totalItems : 0)),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('collectionId' in changes) {\r\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    setContentsPageNumber(page: number) {\r\n        this.setParam('contentsPage', page);\r\n    }\r\n\r\n    setContentsItemsPerPage(perPage: number) {\r\n        this.setParam('contentsPerPage', perPage);\r\n    }\r\n\r\n    refresh() {\r\n        this.refresh$.next(true);\r\n    }\r\n\r\n    private setParam(key: string, value: any) {\r\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\r\n            relativeTo: this.route,\r\n            queryParamsHandling: 'merge',\r\n        });\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"collection-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as category\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col\">\r\n            <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                <clr-toggle-wrapper>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        clrToggle\r\n                        formControlName=\"visible\"\r\n                        id=\"visibility\"\r\n                        [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                    />\r\n                    <label class=\"visible-toggle\">\r\n                        <ng-container *ngIf=\"detailForm.value.visible; else private\">{{ 'catalog.public' | translate }}</ng-container>\r\n                        <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                    </label>\r\n                </clr-toggle-wrapper>\r\n            </vdr-form-field>\r\n            <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                <input\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    formControlName=\"name\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    (input)=\"updateSlug($event.target.value)\"\r\n                />\r\n            </vdr-form-field>\r\n            <vdr-form-field\r\n                [label]=\"'catalog.slug' | translate\"\r\n                for=\"slug\"\r\n                [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\r\n            >\r\n                <input\r\n                    id=\"slug\"\r\n                    type=\"text\"\r\n                    formControlName=\"slug\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                />\r\n            </vdr-form-field>\r\n            <vdr-rich-text-editor\r\n                formControlName=\"description\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                [label]=\"'common.description' | translate\"\r\n            ></vdr-rich-text-editor>\r\n\r\n            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                <label>{{ 'common.custom-fields' | translate }}</label>\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Collection\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get(['customFields'])\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </section>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"collection-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n        </div>\r\n        <div class=\"clr-col-md-auto\">\r\n            <vdr-assets\r\n                [assets]=\"category.assets\"\r\n                [featuredAsset]=\"category.featuredAsset\"\r\n                [updatePermissions]=\"updatePermission\"\r\n                (change)=\"assetChanges = $event\"\r\n            ></vdr-assets>\r\n        </div>\r\n    </div>\r\n    <div class=\"clr-row\" formArrayName=\"filters\">\r\n        <div class=\"clr-col\">\r\n            <label>{{ 'catalog.filters' | translate }}</label>\r\n            <ng-container *ngFor=\"let filter of filters; index as i\">\r\n                <vdr-configurable-input\r\n                    (remove)=\"removeFilter($event)\"\r\n                    [operation]=\"filter\"\r\n                    [operationDefinition]=\"getFilterDefinition(filter)\"\r\n                    [formControlName]=\"i\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                ></vdr-configurable-input>\r\n            </ng-container>\r\n\r\n            <div *vdrIfPermissions=\"updatePermission\">\r\n                <vdr-dropdown>\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'marketing.add-condition' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let filter of allFilters\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"addFilter(filter)\"\r\n                        >\r\n                            {{ filter.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\">\r\n            <vdr-collection-contents [collectionId]=\"id\" #collectionContents>\r\n                <ng-template let-count>\r\n                    <div class=\"contents-title\">\r\n                        {{ 'catalog.collection-contents' | translate }} ({{\r\n                            'common.results-count' | translate: { count: count }\r\n                        }})\r\n                    </div>\r\n                </ng-template>\r\n            </vdr-collection-contents>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    Collection,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    ConfigurableOperationInput,\r\n    CreateCollectionInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    findTranslation,\r\n    getConfigArgValue,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    unicodePatternValidator,\r\n    UpdateCollectionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { combineLatest } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-detail',\r\n    templateUrl: './collection-detail.component.html',\r\n    styleUrls: ['./collection-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionDetailComponent\r\n    extends BaseDetailComponent<Collection.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\r\n    filters: ConfigurableOperation[] = [];\r\n    allFilters: ConfigurableOperationDefinition[] = [];\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\r\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Collection');\r\n        this.detailForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9_-]+$/)],\r\n            description: '',\r\n            visible: false,\r\n            filters: this.formBuilder.array([]),\r\n            customFields: this.formBuilder.group(\r\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n            ),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\r\n            this.allFilters = res.collectionFilters;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    getFilterDefinition(filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\r\n        return this.allFilters.find(f => f.code === filter.code);\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    /**\r\n     * If creating a new Collection, automatically generate the slug based on the collection name.\r\n     */\r\n    updateSlug(nameValue: string) {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(take(1))\r\n            .subscribe(([entity, languageCode]) => {\r\n                const slugControl = this.detailForm.get(['slug']);\r\n                const currentTranslation = findTranslation(entity, languageCode);\r\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\r\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\r\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\r\n                }\r\n            });\r\n    }\r\n\r\n    addFilter(collectionFilter: ConfigurableOperation) {\r\n        const filtersArray = this.detailForm.get('filters') as FormArray;\r\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\r\n        if (index === -1) {\r\n            const argsHash = collectionFilter.args.reduce(\r\n                (output, arg) => ({\r\n                    ...output,\r\n                    [arg.name]: getConfigArgValue(arg.value),\r\n                }),\r\n                {},\r\n            );\r\n            filtersArray.push(\r\n                this.formBuilder.control({\r\n                    code: collectionFilter.code,\r\n                    args: argsHash,\r\n                }),\r\n            );\r\n            this.filters.push({\r\n                code: collectionFilter.code,\r\n                args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\r\n            });\r\n        }\r\n    }\r\n\r\n    removeFilter(collectionFilter: ConfigurableOperation) {\r\n        const filtersArray = this.detailForm.get('filters') as FormArray;\r\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\r\n        if (index !== -1) {\r\n            filtersArray.removeAt(index);\r\n            this.filters.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([category, languageCode]) => {\r\n                    const input = this.getUpdatedCollection(\r\n                        category,\r\n                        this.detailForm,\r\n                        languageCode,\r\n                    ) as CreateCollectionInput;\r\n                    const parentId = this.route.snapshot.paramMap.get('parentId');\r\n                    if (parentId) {\r\n                        input.parentId = parentId;\r\n                    }\r\n                    return this.dataService.collection.createCollection(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.assetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([category, languageCode]) => {\r\n                    const input = this.getUpdatedCollection(\r\n                        category,\r\n                        this.detailForm,\r\n                        languageCode,\r\n                    ) as UpdateCollectionInput;\r\n                    return this.dataService.collection.updateCollection(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.assetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.contentsComponent.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the category or current language.\r\n     */\r\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(entity, languageCode);\r\n\r\n        this.detailForm.patchValue({\r\n            name: currentTranslation ? currentTranslation.name : '',\r\n            slug: currentTranslation ? currentTranslation.slug : '',\r\n            description: currentTranslation ? currentTranslation.description : '',\r\n            visible: !entity.isPrivate,\r\n        });\r\n\r\n        entity.filters.forEach(f => this.addFilter(f));\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['customFields']),\r\n                entity,\r\n                currentTranslation,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a category and the value of the form, this method creates an updated copy of the category which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedCollection(\r\n        category: Collection.Fragment,\r\n        form: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): CreateCollectionInput | UpdateCollectionInput {\r\n        const updatedCategory = createUpdatedTranslatable({\r\n            translatable: category,\r\n            updatedFields: form.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: category.name || '',\r\n                slug: category.slug || '',\r\n                description: category.description || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedCategory,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            isPrivate: !form.value.visible,\r\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\r\n     */\r\n    private mapOperationsToInputs(\r\n        operations: ConfigurableOperation[],\r\n        formValueOperations: any,\r\n    ): ConfigurableOperationInput[] {\r\n        return operations.map((o, i) => {\r\n            return {\r\n                code: o.code,\r\n                arguments: Object.values(formValueOperations[i].args).map((value: any, j) => ({\r\n                    name: o.args[j].name,\r\n                    value: encodeConfigArgValue(value),\r\n                })),\r\n            };\r\n        });\r\n    }\r\n}\r\n","export type HasParent = { id: string; parent?: { id: string } | null };\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\n\n/**\n * Builds a tree from an array of nodes which have a parent.\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\n */\nexport function arrayToTree<T extends HasParent>(nodes: T[], currentState?: RootNode<T>): RootNode<T> {\n    const topLevelNodes: Array<TreeNode<T>> = [];\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\n    const currentStateMap = treeToMap(currentState);\n\n    // First map the nodes of the array to an object -> create a hash table.\n    for (const node of nodes) {\n        mappedArr[node.id] = { ...(node as any), children: [] };\n    }\n\n    for (const id of nodes.map(n => n.id)) {\n        if (mappedArr.hasOwnProperty(id)) {\n            const mappedElem = mappedArr[id];\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? false;\n            const parent = mappedElem.parent;\n            if (!parent) {\n                continue;\n            }\n            // If the element is not at the root level, add it to its parent array of children.\n            const parentIsRoot = !mappedArr[parent.id];\n            if (!parentIsRoot) {\n                if (mappedArr[parent.id]) {\n                    mappedArr[parent.id].children.push(mappedElem);\n                } else {\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\n                }\n            } else {\n                topLevelNodes.push(mappedElem);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\n    return { id: rootId, children: topLevelNodes };\n}\n\n/**\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n */\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\n    const nodeMap = new Map<string, TreeNode<T>>();\n    function visit(node: TreeNode<T>) {\n        nodeMap.set(node.id, node);\n        node.children.forEach(visit);\n    }\n    if (tree) {\n        visit(tree as TreeNode<T>);\n    }\n    return nodeMap;\n}\n","<vdr-collection-tree-node\r\n    *ngIf=\"collectionTree\"\r\n    cdkDropListGroup\r\n    [expandAll]=\"expandAll\"\r\n    [collectionTree]=\"collectionTree\"\r\n    [activeCollectionId]=\"activeCollectionId\"\r\n></vdr-collection-tree-node>\r\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { Collection } from '@vendure/admin-ui/core';\r\n\r\nimport { arrayToTree, HasParent, RootNode, TreeNode } from './array-to-tree';\r\n\r\nexport type RearrangeEvent = { collectionId: string; parentId: string; index: number };\r\nexport type CollectionPartial = Pick<Collection.Fragment, 'id' | 'parent' | 'name'>;\r\n\r\n@Component({\r\n    selector: 'vdr-collection-tree',\r\n    templateUrl: 'collection-tree.component.html',\r\n    styleUrls: ['./collection-tree.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionTreeComponent implements OnChanges {\r\n    @Input() collections: CollectionPartial[];\r\n    @Input() activeCollectionId: string;\r\n    @Input() expandAll = false;\r\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\r\n    @Output() deleteCollection = new EventEmitter<string>();\r\n    collectionTree: RootNode<CollectionPartial>;\r\n    private allMoveListItems: Array<{ path: string; id: string; ancestorIdPath: Set<string> }> = [];\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ('collections' in changes && this.collections) {\r\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree);\r\n            this.allMoveListItems = [];\r\n        }\r\n    }\r\n\r\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\r\n        const item = event.item.data as CollectionPartial;\r\n        const newParent = event.container.data;\r\n        const newParentId = newParent.id;\r\n        if (newParentId == null) {\r\n            throw new Error(`Could not determine the ID of the root Collection`);\r\n        }\r\n        this.rearrange.emit({\r\n            collectionId: item.id,\r\n            parentId: newParentId,\r\n            index: event.currentIndex,\r\n        });\r\n    }\r\n\r\n    onMove(event: RearrangeEvent) {\r\n        this.rearrange.emit(event);\r\n    }\r\n\r\n    onDelete(id: string) {\r\n        this.deleteCollection.emit(id);\r\n    }\r\n\r\n    getMoveListItems(collection: CollectionPartial) {\r\n        if (this.allMoveListItems.length === 0) {\r\n            this.allMoveListItems = this.calculateAllMoveListItems();\r\n        }\r\n        return this.allMoveListItems.filter(\r\n            item =>\r\n                item.id !== collection.id &&\r\n                !item.ancestorIdPath.has(collection.id) &&\r\n                item.id !== collection.parent?.id,\r\n        );\r\n    }\r\n\r\n    calculateAllMoveListItems() {\r\n        const visit = (\r\n            node: TreeNode<any>,\r\n            parentPath: string[],\r\n            ancestorIdPath: Set<string>,\r\n            output: Array<{ path: string; id: string; ancestorIdPath: Set<string> }>,\r\n        ) => {\r\n            const path = parentPath.concat(node.name);\r\n            output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id, ancestorIdPath });\r\n            node.children.forEach(child =>\r\n                visit(child, path, new Set<string>([...ancestorIdPath, node.id]), output),\r\n            );\r\n            return output;\r\n        };\r\n        return visit(this.collectionTree, [], new Set<string>(), []);\r\n    }\r\n\r\n    private isRootNode<T extends HasParent>(node: T | RootNode<T>): node is RootNode<T> {\r\n        return !node.hasOwnProperty('parent');\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex center wrap\">\r\n            <vdr-language-selector\r\n                class=\"mt2\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n            <clr-checkbox-wrapper\r\n                class=\"expand-all-toggle ml3\"\r\n                [ngClass]=\"(availableLanguages$ | async)?.length === 1 ? 'mt3' : 'mt1'\"\r\n            >\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"expandAll\" />\r\n                <label>{{ 'catalog.expand-all-collections' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <input\r\n                type='text'\r\n                name='searchTerm'\r\n                [formControl]='filterTermControl'\r\n                [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n                class='clr-input search-input ml4'\r\n            />\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"collection-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\r\n            [routerLink]=\"['./create']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'catalog.create-new-collection' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<div class=\"collection-wrapper\">\r\n    <vdr-collection-tree\r\n        [collections]=\"items$ | async\"\r\n        [activeCollectionId]=\"activeCollectionId$ | async\"\r\n        [expandAll]=\"expandAll\"\r\n        (rearrange)=\"onRearrange($event)\"\r\n        (deleteCollection)=\"deleteCollection($event)\"\r\n    ></vdr-collection-tree>\r\n\r\n    <div class=\"collection-contents\" [class.expanded]=\"activeCollectionId$ | async\">\r\n        <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\">\r\n            <ng-template let-count>\r\n                <div class=\"collection-title\">\r\n                    {{ activeCollectionTitle$ | async }} ({{\r\n                        'common.results-count' | translate: { count: count }\r\n                    }})\r\n                </div>\r\n                <button type=\"button\" class=\"close-button\" (click)=\"closeContents()\">\r\n                    <clr-icon shape=\"close\"></clr-icon>\r\n                </button>\r\n            </ng-template>\r\n        </vdr-collection-contents>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    GetCollectionList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    QueryResult,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    shareReplay,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    tap,\r\n} from 'rxjs/operators';\r\n\r\nimport { RearrangeEvent } from '../collection-tree/collection-tree.component';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-list',\r\n    templateUrl: './collection-list.component.html',\r\n    styleUrls: ['./collection-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionListComponent implements OnInit, OnDestroy {\r\n    filterTermControl = new FormControl('');\r\n    activeCollectionId$: Observable<string | null>;\r\n    activeCollectionTitle$: Observable<string>;\r\n    items$: Observable<GetCollectionList.Items[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    expandAll = false;\r\n    private queryResult: QueryResult<any>;\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private serverConfigService: ServerConfigService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.queryResult = this.dataService.collection.getCollections(1000, 0).refetchOnChannelChange();\r\n        this.items$ = this.queryResult.mapStream(data => data.collections.items).pipe(shareReplay(1));\r\n        this.activeCollectionId$ = this.route.paramMap.pipe(\r\n            map(pm => pm.get('contents')),\r\n            distinctUntilChanged(),\r\n        );\r\n\r\n        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$).pipe(\r\n            map(([id, collections]) => {\r\n                if (id) {\r\n                    const match = collections.find(c => c.id === id);\r\n                    return match ? match.name : '';\r\n                }\r\n                return '';\r\n            }),\r\n        );\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n\r\n        this.filterTermControl.valueChanges\r\n            .pipe(debounceTime(250), takeUntil(this.destroy$))\r\n            .subscribe(() => this.refresh());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.queryResult.completed$.next();\r\n        this.destroy$.next(undefined);\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    onRearrange(event: RearrangeEvent) {\r\n        this.dataService.collection.moveCollection([event]).subscribe({\r\n            next: () => {\r\n                this.notificationService.success(_('common.notify-saved-changes'));\r\n                this.refresh();\r\n            },\r\n            error: err => {\r\n                this.notificationService.error(_('common.notify-save-changes-error'));\r\n            },\r\n        });\r\n    }\r\n\r\n    deleteCollection(id: string) {\r\n        this.items$\r\n            .pipe(\r\n                take(1),\r\n                map(items => -1 < items.findIndex(i => i.parent && i.parent.id === id)),\r\n                switchMap(hasChildren => {\r\n                    return this.modalService.dialog({\r\n                        title: _('catalog.confirm-delete-collection'),\r\n                        body: hasChildren\r\n                            ? _('catalog.confirm-delete-collection-and-children-body')\r\n                            : undefined,\r\n                        buttons: [\r\n                            { type: 'secondary', label: _('common.cancel') },\r\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                        ],\r\n                    });\r\n                }),\r\n                switchMap(response => (response ? this.dataService.collection.deleteCollection(id) : EMPTY)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Collection',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    closeContents() {\r\n        const params = { ...this.route.snapshot.params };\r\n        delete params.contents;\r\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    private refresh() {\r\n        this.queryResult.ref.refetch({\r\n            options: {\r\n                skip: 0,\r\n                take: 1000,\r\n                ...(this.filterTermControl.value\r\n                    ? {\r\n                          filter: {\r\n                              name: {\r\n                                  contains: this.filterTermControl.value,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {}),\r\n            },\r\n        });\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"facet-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as facet\">\r\n    <section class=\"form-block\" formGroupName=\"facet\">\r\n        <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n            <clr-toggle-wrapper>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrToggle\r\n                    [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                    formControlName=\"visible\"\r\n                    id=\"visibility\"\r\n                />\r\n                <label class=\"visible-toggle\">\r\n                    <ng-container *ngIf=\"detailForm.value.facet.visible; else private\">{{\r\n                        'catalog.public' | translate\r\n                    }}</ng-container>\r\n                    <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                </label>\r\n            </clr-toggle-wrapper>\r\n        </vdr-form-field>\r\n        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n            <input\r\n                id=\"name\"\r\n                type=\"text\"\r\n                formControlName=\"name\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                (input)=\"updateCode(facet.code, $event.target.value)\"\r\n            />\r\n        </vdr-form-field>\r\n        <vdr-form-field\r\n            [label]=\"'common.code' | translate\"\r\n            for=\"code\"\r\n            [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n        >\r\n            <input\r\n                id=\"code\"\r\n                type=\"text\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                formControlName=\"code\"\r\n            />\r\n        </vdr-form-field>\r\n\r\n        <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n            <label>{{ 'common.custom-fields' | translate }}</label>\r\n            <vdr-tabbed-custom-fields\r\n                entityName=\"Facet\"\r\n                [customFields]=\"customFields\"\r\n                [customFieldsFormGroup]=\"detailForm.get(['facet', 'customFields'])\"\r\n                [readonly]=\"!(updatePermission | hasPermission)\"\r\n            ></vdr-tabbed-custom-fields>\r\n        </section>\r\n        <vdr-custom-detail-component-host\r\n            locationId=\"facet-detail\"\r\n            [entity$]=\"entity$\"\r\n            [detailForm]=\"detailForm\"\r\n        ></vdr-custom-detail-component-host>\r\n    </section>\r\n\r\n    <section class=\"form-block\" *ngIf=\"!(isNew$ | async)\">\r\n        <label>{{ 'catalog.facet-values' | translate }}</label>\r\n\r\n        <table class=\"facet-values-list table\" formArrayName=\"values\" *ngIf=\"0 < getValuesFormArray().length\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'common.name' | translate }}</th>\r\n                    <th>{{ 'common.code' | translate }}</th>\r\n                    <ng-container *ngIf=\"customValueFields.length\">\r\n                        <th>{{ 'common.custom-fields' | translate }}</th>\r\n                    </ng-container>\r\n                    <th></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr class=\"facet-value\" *ngFor=\"let value of values; let i = index\" [formGroupName]=\"i\">\r\n                    <td class=\"align-middle\">\r\n                        <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <input\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateValueCode(facet.values[i]?.code, $event.target.value, i)\"\r\n                        />\r\n                    </td>\r\n                    <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" readonly /></td>\r\n                    <td class=\"\" *ngIf=\"customValueFields.length\">\r\n                        <vdr-tabbed-custom-fields\r\n                            entityName=\"FacetValue\"\r\n                            [customFields]=\"customValueFields\"\r\n                            [compact]=\"true\"\r\n                            [customFieldsFormGroup]=\"detailForm.get(['values', i, 'customFields'])\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        ></vdr-tabbed-custom-fields>\r\n                    </td>\r\n                    <td class=\"align-middle\">\r\n                        <vdr-dropdown>\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                                {{ 'common.actions' | translate }}\r\n                                <clr-icon shape=\"caret down\"></clr-icon>\r\n                            </button>\r\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"delete-button\"\r\n                                    (click)=\"deleteFacetValue(facet.values[i]?.id, i)\"\r\n                                    [disabled]=\"!(updatePermission | hasPermission)\"\r\n                                    vdrDropdownItem\r\n                                >\r\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                    {{ 'common.delete' | translate }}\r\n                                </button>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n\r\n        <div>\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary\"\r\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n                (click)=\"addFacetValue()\"\r\n            >\r\n                <clr-icon shape=\"add\"></clr-icon>\r\n                {{ 'catalog.add-facet-value' | translate }}\r\n            </button>\r\n        </div>\r\n    </section>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateFacetInput,\r\n    CreateFacetValueInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    DeletionResult,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    ServerConfigService,\r\n    UpdateFacetInput,\r\n    UpdateFacetValueInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\r\nimport { map, mapTo, mergeMap, switchMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-facet-detail',\r\n    templateUrl: './facet-detail.component.html',\r\n    styleUrls: ['./facet-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FacetDetailComponent\r\n    extends BaseDetailComponent<FacetWithValues.Fragment>\r\n    implements OnInit, OnDestroy\r\n{\r\n    customFields: CustomFieldConfig[];\r\n    customValueFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    values: Array<FacetWithValues.Values | { name: string; code: string }>;\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Facet');\r\n        this.customValueFields = this.getCustomFieldConfig('FacetValue');\r\n        this.detailForm = this.formBuilder.group({\r\n            facet: this.formBuilder.group({\r\n                code: ['', Validators.required],\r\n                name: '',\r\n                visible: true,\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            values: this.formBuilder.array([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    updateCode(currentCode: string, nameValue: string) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['facet', 'code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    updateValueCode(currentCode: string, nameValue: string, index: number) {\r\n        if (!currentCode) {\r\n            const codeControl = this.detailForm.get(['values', index, 'code']);\r\n            if (codeControl && codeControl.pristine) {\r\n                codeControl.setValue(normalizeString(nameValue, '-'));\r\n            }\r\n        }\r\n    }\r\n\r\n    customValueFieldIsSet(index: number, name: string): boolean {\r\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\r\n    }\r\n\r\n    getValuesFormArray(): FormArray {\r\n        return this.detailForm.get('values') as FormArray;\r\n    }\r\n\r\n    addFacetValue() {\r\n        const valuesFormArray = this.detailForm.get('values') as FormArray | null;\r\n        if (valuesFormArray) {\r\n            const valueGroup = this.formBuilder.group({\r\n                id: '',\r\n                name: ['', Validators.required],\r\n                code: '',\r\n            });\r\n            const newValue: any = { name: '', code: '' };\r\n            if (this.customValueFields.length) {\r\n                const customValueFieldsGroup = new FormGroup({});\r\n                newValue.customFields = {};\r\n\r\n                for (const fieldDef of this.customValueFields) {\r\n                    const key = fieldDef.name;\r\n                    customValueFieldsGroup.addControl(key, new FormControl());\r\n                }\r\n\r\n                valueGroup.addControl('customFields', customValueFieldsGroup);\r\n            }\r\n            valuesFormArray.insert(valuesFormArray.length, valueGroup);\r\n            this.values.push(newValue);\r\n        }\r\n    }\r\n\r\n    create() {\r\n        const facetForm = this.detailForm.get('facet');\r\n        if (!facetForm || !facetForm.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([facet, languageCode]) => {\r\n                    const newFacet = this.getUpdatedFacet(\r\n                        facet,\r\n                        facetForm as FormGroup,\r\n                        languageCode,\r\n                    ) as CreateFacetInput;\r\n                    return this.dataService.facet.createFacet(newFacet);\r\n                }),\r\n                switchMap(data => this.dataService.facet.getAllFacets().single$.pipe(mapTo(data))),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Facet',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([facet, languageCode]) => {\r\n                    const facetGroup = this.detailForm.get('facet');\r\n                    const updateOperations: Array<Observable<any>> = [];\r\n\r\n                    if (facetGroup && facetGroup.dirty) {\r\n                        const newFacet = this.getUpdatedFacet(\r\n                            facet,\r\n                            facetGroup as FormGroup,\r\n                            languageCode,\r\n                        ) as UpdateFacetInput;\r\n                        if (newFacet) {\r\n                            updateOperations.push(this.dataService.facet.updateFacet(newFacet));\r\n                        }\r\n                    }\r\n                    const valuesArray = this.detailForm.get('values');\r\n                    if (valuesArray && valuesArray.dirty) {\r\n                        const createdValues = this.getCreatedFacetValues(\r\n                            facet,\r\n                            valuesArray as FormArray,\r\n                            languageCode,\r\n                        );\r\n                        if (createdValues.length) {\r\n                            updateOperations.push(\r\n                                this.dataService.facet\r\n                                    .createFacetValues(createdValues)\r\n                                    .pipe(switchMap(() => this.dataService.facet.getFacet(this.id).single$)),\r\n                            );\r\n                        }\r\n                        const updatedValues = this.getUpdatedFacetValues(\r\n                            facet,\r\n                            valuesArray as FormArray,\r\n                            languageCode,\r\n                        );\r\n                        if (updatedValues.length) {\r\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\r\n                        }\r\n                    }\r\n\r\n                    return forkJoin(updateOperations);\r\n                }),\r\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Facet',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    deleteFacetValue(facetValueId: string | undefined, index: number) {\r\n        if (!facetValueId) {\r\n            // deleting a newly-added (not persisted) FacetValue\r\n            const valuesFormArray = this.detailForm.get('values') as FormArray | null;\r\n            if (valuesFormArray) {\r\n                valuesFormArray.removeAt(index);\r\n            }\r\n            this.values.splice(index, 1);\r\n            return;\r\n        }\r\n        this.showModalAndDelete(facetValueId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                switchMap(deleted => (deleted ? this.dataService.facet.getFacet(this.id).single$ : [])),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private showModalAndDelete(facetValueId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-facet-value'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(result =>\r\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\r\n                ),\r\n                map(result => result.deleteFacetValues[0]),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the facet or current language.\r\n     */\r\n    protected setFormValues(facet: FacetWithValues.Fragment, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(facet, languageCode);\r\n\r\n        this.detailForm.patchValue({\r\n            facet: {\r\n                code: facet.code,\r\n                visible: !facet.isPrivate,\r\n                name: currentTranslation?.name ?? '',\r\n            },\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            const customFieldsGroup = this.detailForm.get(['facet', 'customFields']) as FormGroup;\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['facet', 'customFields']),\r\n                facet,\r\n                currentTranslation,\r\n            );\r\n        }\r\n\r\n        const currentValuesFormArray = this.detailForm.get('values') as FormArray;\r\n        this.values = [...facet.values];\r\n        facet.values.forEach((value, i) => {\r\n            const valueTranslation = findTranslation(value, languageCode);\r\n            const group = {\r\n                id: value.id,\r\n                code: value.code,\r\n                name: valueTranslation ? valueTranslation.name : '',\r\n            };\r\n            const valueControl = currentValuesFormArray.at(i);\r\n            if (valueControl) {\r\n                valueControl.get('id')?.setValue(group.id);\r\n                valueControl.get('code')?.setValue(group.code);\r\n                valueControl.get('name')?.setValue(group.name);\r\n            } else {\r\n                currentValuesFormArray.insert(i, this.formBuilder.group(group));\r\n            }\r\n            if (this.customValueFields.length) {\r\n                let customValueFieldsGroup = this.detailForm.get(['values', i, 'customFields']) as FormGroup;\r\n                if (!customValueFieldsGroup) {\r\n                    customValueFieldsGroup = new FormGroup({});\r\n                    (this.detailForm.get(['values', i]) as FormGroup).addControl(\r\n                        'customFields',\r\n                        customValueFieldsGroup,\r\n                    );\r\n                }\r\n\r\n                if (customValueFieldsGroup) {\r\n                    for (const fieldDef of this.customValueFields) {\r\n                        const key = fieldDef.name;\r\n                        const fieldValue =\r\n                            fieldDef.type === 'localeString'\r\n                                ? (valueTranslation as any).customFields[key]\r\n                                : (value as any).customFields[key];\r\n                        const control = customValueFieldsGroup.get(key);\r\n                        if (control) {\r\n                            control.setValue(fieldValue);\r\n                        } else {\r\n                            customValueFieldsGroup.addControl(key, new FormControl(fieldValue));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedFacet(\r\n        facet: FacetWithValues.Fragment,\r\n        facetFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): CreateFacetInput | UpdateFacetInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: facet,\r\n            updatedFields: facetFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: facet.name || '',\r\n            },\r\n        });\r\n        input.isPrivate = !facetFormGroup.value.visible;\r\n        return input;\r\n    }\r\n\r\n    /**\r\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\r\n     * which can be persisted to the API via a createFacetValues mutation.\r\n     */\r\n    private getCreatedFacetValues(\r\n        facet: FacetWithValues.Fragment,\r\n        valuesFormArray: FormArray,\r\n        languageCode: LanguageCode,\r\n    ): CreateFacetValueInput[] {\r\n        return valuesFormArray.controls\r\n            .filter(c => !c.value.id)\r\n            .map(c => c.value)\r\n            .map(value =>\r\n                createUpdatedTranslatable({\r\n                    translatable: { ...value, translations: [] as any },\r\n                    updatedFields: value,\r\n                    customFieldConfig: this.customValueFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                }),\r\n            )\r\n            .map(input => ({\r\n                facetId: facet.id,\r\n                ...input,\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Given an array of facet values and the values from the detailForm, this method creates a new array\r\n     * which can be persisted to the API via an updateFacetValues mutation.\r\n     */\r\n    private getUpdatedFacetValues(\r\n        facet: FacetWithValues.Fragment,\r\n        valuesFormArray: FormArray,\r\n        languageCode: LanguageCode,\r\n    ): UpdateFacetValueInput[] {\r\n        const dirtyValues = facet.values.filter((v, i) => {\r\n            const formRow = valuesFormArray.get(i.toString());\r\n            return formRow && formRow.dirty && formRow.value.id;\r\n        });\r\n        const dirtyValueValues = valuesFormArray.controls\r\n            .filter(c => c.dirty && c.value.id)\r\n            .map(c => c.value);\r\n\r\n        if (dirtyValues.length !== dirtyValueValues.length) {\r\n            throw new Error(_(`error.facet-value-form-values-do-not-match`));\r\n        }\r\n        return dirtyValues\r\n            .map((value, i) => {\r\n                return createUpdatedTranslatable({\r\n                    translatable: value,\r\n                    updatedFields: dirtyValueValues[i],\r\n                    customFieldConfig: this.customValueFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                });\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex center wrap\">\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"filterTermControl\"\r\n                [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n                class=\"clr-input search-input ml4\"\r\n            />\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"facet-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n            [routerLink]=\"['./create']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'catalog.create-new-facet' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column [expand]=\"true\">{{ 'catalog.values' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'catalog.visibility' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-facet=\"item\">\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.code }}</td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.name }}</td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-facet-value-chip\r\n                *ngFor=\"let value of facet.values | slice: 0:displayLimit[facet.id] || 3\"\r\n                [facetValue]=\"value\"\r\n                [removable]=\"false\"\r\n                [displayFacetName]=\"false\"\r\n            ></vdr-facet-value-chip>\r\n            <button\r\n                class=\"btn btn-sm btn-secondary btn-icon\"\r\n                *ngIf=\"facet.values.length > initialLimit\"\r\n                (click)=\"toggleDisplayLimit(facet)\"\r\n            >\r\n                <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.values.length; else collapse\">\r\n                    <clr-icon shape=\"plus\"></clr-icon>\r\n                    {{ facet.values.length - initialLimit }}\r\n                </ng-container>\r\n                <ng-template #collapse>\r\n                    <clr-icon shape=\"minus\"></clr-icon>\r\n                </ng-template>\r\n            </button>\r\n        </td>\r\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-chip>\r\n                <ng-container *ngIf=\"!facet.isPrivate; else private\">{{\r\n                    'catalog.public' | translate\r\n                }}</ng-container>\r\n                <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n            </vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', facet.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteFacet(facet.id)\"\r\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteFacet'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    DeletionResult,\r\n    GetFacetList,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { debounceTime, filter, map, switchMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-facet-list',\r\n    templateUrl: './facet-list.component.html',\r\n    styleUrls: ['./facet-list.component.scss'],\r\n})\r\nexport class FacetListComponent\r\n    extends BaseListComponent<GetFacetList.Query, GetFacetList.Items>\r\n    implements OnInit\r\n{\r\n    filterTermControl = new FormControl('');\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    readonly initialLimit = 3;\r\n    displayLimit: { [id: string]: number } = {};\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.facet.getFacets(...args).refetchOnChannelChange(),\r\n            data => data.facets,\r\n            (skip, take) => ({\r\n                options: {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        name: {\r\n                            contains: this.filterTermControl.value,\r\n                        },\r\n                    },\r\n                    sort: {\r\n                        createdAt: SortOrder.DESC,\r\n                    },\r\n                },\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n        this.filterTermControl.valueChanges\r\n            .pipe(\r\n                filter(value => 2 <= value.length || value.length === 0),\r\n                debounceTime(250),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(() => this.refresh());\r\n    }\r\n\r\n    toggleDisplayLimit(facet: GetFacetList.Items) {\r\n        if (this.displayLimit[facet.id] === facet.values.length) {\r\n            this.displayLimit[facet.id] = this.initialLimit;\r\n        } else {\r\n            this.displayLimit[facet.id] = facet.values.length;\r\n        }\r\n    }\r\n\r\n    deleteFacet(facetValueId: string) {\r\n        this.showModalAndDelete(facetValueId)\r\n            .pipe(\r\n                switchMap(response => {\r\n                    if (response.result === DeletionResult.DELETED) {\r\n                        return [true];\r\n                    } else {\r\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\r\n                            map(r => r.result === DeletionResult.DELETED),\r\n                        );\r\n                    }\r\n                }),\r\n                // Refresh the cached facets to reflect the changes\r\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'FacetValue',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n\r\n    private showModalAndDelete(facetId: string, message?: string) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-facet'),\r\n                body: message,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(res => (res ? this.dataService.facet.deleteFacet(facetId, !!message) : EMPTY)),\r\n                map(res => res.deleteFacet),\r\n            );\r\n    }\r\n}\r\n","import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function skipUntil(notifier) {\n    return (source) => source.lift(new SkipUntilOperator(notifier));\n}\nclass SkipUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    }\n}\nclass SkipUntilSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier) {\n        super(destination);\n        this.hasValue = false;\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        this.add(innerSubscriber);\n        this.innerSubscription = innerSubscriber;\n        const innerSubscription = innerSubscribe(notifier, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            this.add(innerSubscription);\n            this.innerSubscription = innerSubscription;\n        }\n    }\n    _next(value) {\n        if (this.hasValue) {\n            super._next(value);\n        }\n    }\n    notifyNext() {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    }\n    notifyComplete() {\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\r\n\r\n<vdr-facet-value-selector\r\n    [facets]=\"facets\"\r\n    (selectedValuesChange)=\"selectedValues = $event\"\r\n></vdr-facet-value-selector>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"selectValues()\"\r\n        [disabled]=\"selectedValues.length === 0\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'catalog.add-facets' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Dialog, FacetValue, FacetValueSelectorComponent, FacetWithValues } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-apply-facet-dialog',\r\n    templateUrl: './apply-facet-dialog.component.html',\r\n    styleUrls: ['./apply-facet-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\r\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\r\n    resolveWith: (result?: FacetValue[]) => void;\r\n    selectedValues: FacetValue[] = [];\r\n    // Provided by caller\r\n    facets: FacetWithValues.Fragment[];\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.selector.focus(), 0);\r\n    }\r\n\r\n    selectValues() {\r\n        this.resolveWith(this.selectedValues);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\r\n        'catalog.assign-variants-to-channel' | translate\r\n    }}</ng-container>\r\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\r\n</ng-template>\r\n\r\n<div class=\"flex\">\r\n    <clr-input-container>\r\n        <label>{{ 'common.channel' | translate }}</label>\r\n        <vdr-channel-assignment-control\r\n            clrInput\r\n            [multiple]=\"false\"\r\n            [includeDefaultChannel]=\"false\"\r\n            [disableChannelIds]=\"currentChannelIds\"\r\n            [formControl]=\"selectedChannelIdControl\"\r\n        ></vdr-channel-assignment-control>\r\n    </clr-input-container>\r\n    <div class=\"flex-spacer\"></div>\r\n    <clr-input-container>\r\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\r\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\r\n    </clr-input-container>\r\n</div>\r\n\r\n<div class=\"channel-price-preview\">\r\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>{{ 'common.name' | translate }}</th>\r\n                <th>\r\n                    {{\r\n                        'catalog.price-in-channel'\r\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\r\n                    }}\r\n                </th>\r\n                <th>\r\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\r\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\r\n                    </ng-template>\r\n                    <ng-template #noSelection>\r\n                        {{ 'catalog.no-channel-selected' | translate }}\r\n                    </ng-template>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\r\n                <td>{{ row.name }}</td>\r\n                <td>{{ row.price | localeCurrency: currentChannel?.currencyCode }}</td>\r\n                <td>\r\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\r\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.currencyCode }}\r\n                    </ng-template>\r\n                    <ng-template #noChannelSelected> - </ng-template>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\r\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\r\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\r\n        </ng-template>\r\n        <ng-template #noSelection>\r\n            {{ 'catalog.no-channel-selected' | translate }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { GetChannels, ProductVariantFragment } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\nimport { combineLatest, from, Observable } from 'rxjs';\r\nimport { map, startWith, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-assign-products-to-channel-dialog',\r\n    templateUrl: './assign-products-to-channel-dialog.component.html',\r\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\r\n    selectedChannel: GetChannels.Channels | null | undefined;\r\n    currentChannel: GetChannels.Channels;\r\n    availableChannels: GetChannels.Channels[];\r\n    resolveWith: (result?: any) => void;\r\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\r\n    priceFactorControl = new FormControl(1);\r\n    selectedChannelIdControl = new FormControl();\r\n\r\n    // assigned by ModalService.fromComponent() call\r\n    productIds: string[];\r\n    productVariantIds: string[] | undefined;\r\n    currentChannelIds: string[];\r\n\r\n    get isProductVariantMode(): boolean {\r\n        return this.productVariantIds != null;\r\n    }\r\n\r\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\r\n\r\n    ngOnInit() {\r\n        const activeChannelId$ = this.dataService.client\r\n            .userStatus()\r\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\r\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\r\n\r\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\r\n            this.availableChannels = channels;\r\n        });\r\n\r\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\r\n            this.selectChannel(ids);\r\n        });\r\n\r\n        this.variantsPreview$ = combineLatest(\r\n            from(this.getTopVariants(10)),\r\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\r\n        ).pipe(\r\n            map(([variants, factor]) => {\r\n                return variants.map(v => ({\r\n                    id: v.id,\r\n                    name: v.name,\r\n                    price: v.price,\r\n                    pricePreview: v.price * +factor,\r\n                }));\r\n            }),\r\n        );\r\n    }\r\n\r\n    selectChannel(channelIds: string[]) {\r\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\r\n    }\r\n\r\n    assign() {\r\n        const selectedChannel = this.selectedChannel;\r\n        if (selectedChannel) {\r\n            if (!this.isProductVariantMode) {\r\n                this.dataService.product\r\n                    .assignProductsToChannel({\r\n                        channelId: selectedChannel.id,\r\n                        productIds: this.productIds,\r\n                        priceFactor: +this.priceFactorControl.value,\r\n                    })\r\n                    .subscribe(() => {\r\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\r\n                            channel: selectedChannel.code,\r\n                        });\r\n                        this.resolveWith(true);\r\n                    });\r\n            } else if (this.productVariantIds) {\r\n                this.dataService.product\r\n                    .assignVariantsToChannel({\r\n                        channelId: selectedChannel.id,\r\n                        productVariantIds: this.productVariantIds,\r\n                        priceFactor: +this.priceFactorControl.value,\r\n                    })\r\n                    .subscribe(() => {\r\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\r\n                            channel: selectedChannel.code,\r\n                        });\r\n                        this.resolveWith(true);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private async getTopVariants(take: number): Promise<ProductVariantFragment[]> {\r\n        const variants: ProductVariantFragment[] = [];\r\n\r\n        for (let i = 0; i < this.productIds.length && variants.length < take; i++) {\r\n            const productVariants = await this.dataService.product\r\n                .getProduct(this.productIds[i], { take: this.isProductVariantMode ? undefined : take })\r\n                .mapSingle(({ product }) => {\r\n                    const _variants = product ? product.variantList.items : [];\r\n                    return _variants.filter(v =>\r\n                        this.isProductVariantMode ? this.productVariantIds?.includes(v.id) : true,\r\n                    );\r\n                })\r\n                .toPromise();\r\n            variants.push(...(productVariants || []));\r\n        }\r\n        return variants.slice(0, take);\r\n    }\r\n}\r\n","/**\r\n * @description\r\n * Like String.prototype.replace(), but replaces the last instance\r\n * rather than the first.\r\n */\r\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\r\n    if (!target) {\r\n        return '';\r\n    }\r\n    const lastIndex = target.lastIndexOf(search);\r\n    if (lastIndex === -1) {\r\n        return target;\r\n    }\r\n    const head = target.substr(0, lastIndex);\r\n    const tail = target.substr(lastIndex).replace(search, replace);\r\n    return head + tail;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    CreateProductInput,\r\n    CreateProductVariantInput,\r\n    DataService,\r\n    DeletionResult,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    GetProductWithVariants,\r\n    LanguageCode,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\r\n\r\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\r\n\r\nimport { replaceLast } from './replace-last';\r\n\r\n/**\r\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\r\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductDetailService {\r\n    constructor(private dataService: DataService) {}\r\n\r\n    getFacets(): Observable<FacetWithValues.Fragment[]> {\r\n        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);\r\n    }\r\n\r\n    getTaxCategories() {\r\n        return this.dataService.settings\r\n            .getTaxCategories()\r\n            .mapSingle(data => data.taxCategories)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    createProductWithVariants(\r\n        input: CreateProductInput,\r\n        createVariantsConfig: CreateProductVariantsConfig,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const createProduct$ = this.dataService.product.createProduct(input);\r\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\r\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\r\n\r\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\r\n            mergeMap(([{ createProduct }, optionGroups]) => {\r\n                const addOptionsToProduct$ = optionGroups.length\r\n                    ? forkJoin(\r\n                          optionGroups.map(optionGroup => {\r\n                              return this.dataService.product.addOptionGroupToProduct({\r\n                                  productId: createProduct.id,\r\n                                  optionGroupId: optionGroup.id,\r\n                              });\r\n                          }),\r\n                      )\r\n                    : of([]);\r\n                return addOptionsToProduct$.pipe(\r\n                    map(() => {\r\n                        return { createProduct, optionGroups };\r\n                    }),\r\n                );\r\n            }),\r\n            mergeMap(({ createProduct, optionGroups }) => {\r\n                const variants = createVariantsConfig.variants.map(v => {\r\n                    const optionIds = optionGroups.length\r\n                        ? v.optionValues.map((optionName, index) => {\r\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\r\n                              if (!option) {\r\n                                  throw new Error(\r\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\r\n                                  );\r\n                              }\r\n                              return option.id;\r\n                          })\r\n                        : [];\r\n                    return {\r\n                        ...v,\r\n                        optionIds,\r\n                    };\r\n                });\r\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\r\n                return this.createProductVariants(createProduct, variants, options, languageCode);\r\n            }),\r\n        );\r\n    }\r\n\r\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\r\n        return groups.length\r\n            ? forkJoin(\r\n                  groups.map(c => {\r\n                      return this.dataService.product\r\n                          .createProductOptionGroups({\r\n                              code: normalizeString(c.name, '-'),\r\n                              translations: [{ languageCode, name: c.name }],\r\n                              options: c.values.map(v => ({\r\n                                  code: normalizeString(v, '-'),\r\n                                  translations: [{ languageCode, name: v }],\r\n                              })),\r\n                          })\r\n                          .pipe(map(data => data.createProductOptionGroup));\r\n                  }),\r\n              )\r\n            : of([]);\r\n    }\r\n\r\n    createProductVariants(\r\n        product: { name: string; id: string },\r\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\r\n        options: Array<{ id: string; name: string }>,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\r\n            const name = options.length\r\n                ? `${product.name} ${v.optionIds\r\n                      .map(id => options.find(o => o.id === id))\r\n                      .filter(notNullOrUndefined)\r\n                      .map(o => o.name)\r\n                      .join(' ')}`\r\n                : product.name;\r\n            return {\r\n                productId: product.id,\r\n                price: v.price,\r\n                sku: v.sku,\r\n                stockOnHand: v.stock,\r\n                translations: [\r\n                    {\r\n                        languageCode,\r\n                        name,\r\n                    },\r\n                ],\r\n                optionIds: v.optionIds,\r\n            };\r\n        });\r\n        return this.dataService.product.createProductVariants(variants).pipe(\r\n            map(({ createProductVariants }) => ({\r\n                createProductVariants,\r\n                productId: product.id,\r\n            })),\r\n        );\r\n    }\r\n\r\n    updateProduct(updateOptions: {\r\n        product: GetProductWithVariants.Product;\r\n        languageCode: LanguageCode;\r\n        autoUpdate: boolean;\r\n        productInput?: UpdateProductInput;\r\n        variantsInput?: UpdateProductVariantInput[];\r\n    }) {\r\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\r\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\r\n        const updateVariantsInput = variantsInput || [];\r\n\r\n        const variants$ = autoUpdate\r\n            ? this.dataService.product\r\n                  .getProductVariants({}, product.id)\r\n                  .mapSingle(({ productVariants }) => productVariants.items)\r\n            : of([]);\r\n\r\n        return variants$.pipe(\r\n            mergeMap(variants => {\r\n                if (productInput) {\r\n                    updateOperations.push(this.dataService.product.updateProduct(productInput));\r\n                    const productOldName = findTranslation(product, languageCode)?.name ?? '';\r\n                    const productNewName = findTranslation(productInput, languageCode)?.name;\r\n                    if (productNewName && productOldName !== productNewName && autoUpdate) {\r\n                        for (const variant of variants) {\r\n                            const currentVariantName = findTranslation(variant, languageCode)?.name || '';\r\n                            let variantInput: UpdateProductVariantInput;\r\n                            const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\r\n                            if (existingVariantInput) {\r\n                                variantInput = existingVariantInput;\r\n                            } else {\r\n                                variantInput = {\r\n                                    id: variant.id,\r\n                                    translations: [{ languageCode, name: currentVariantName }],\r\n                                };\r\n                                updateVariantsInput.push(variantInput);\r\n                            }\r\n                            const variantTranslation = findTranslation(variantInput, languageCode);\r\n                            if (variantTranslation) {\r\n                                if (variantTranslation.name) {\r\n                                    variantTranslation.name = replaceLast(\r\n                                        variantTranslation.name,\r\n                                        productOldName,\r\n                                        productNewName,\r\n                                    );\r\n                                } else {\r\n                                    // The variant translation was falsy, which occurs\r\n                                    // when defining the product name for a new translation\r\n                                    // language that had not yet been defined.\r\n                                    variantTranslation.name = [\r\n                                        productNewName,\r\n                                        ...variant.options.map(o => o.name),\r\n                                    ].join(' ');\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (updateVariantsInput.length) {\r\n                    updateOperations.push(\r\n                        this.dataService.product.updateProductVariants(updateVariantsInput),\r\n                    );\r\n                }\r\n                return forkJoin(updateOperations);\r\n            }),\r\n        );\r\n    }\r\n\r\n    updateProductOption(\r\n        input: UpdateProductOptionInput & { autoUpdate: boolean },\r\n        product: GetProductWithVariants.Product,\r\n        languageCode: LanguageCode,\r\n    ) {\r\n        const variants$ = input.autoUpdate\r\n            ? this.dataService.product\r\n                  .getProductVariants({}, product.id)\r\n                  .mapSingle(({ productVariants }) => productVariants.items)\r\n            : of([]);\r\n\r\n        return variants$.pipe(\r\n            mergeMap(variants => {\r\n                let updateProductVariantNames$: Observable<any> = of([]);\r\n                if (input.autoUpdate) {\r\n                    // Update any ProductVariants' names which include the option name\r\n                    let oldOptionName: string | undefined;\r\n                    const newOptionName = findTranslation(input, languageCode)?.name;\r\n                    if (!newOptionName) {\r\n                        updateProductVariantNames$ = of([]);\r\n                    }\r\n                    const variantsToUpdate: UpdateProductVariantInput[] = [];\r\n                    for (const variant of variants) {\r\n                        if (variant.options.map(o => o.id).includes(input.id)) {\r\n                            if (!oldOptionName) {\r\n                                oldOptionName = findTranslation(\r\n                                    variant.options.find(o => o.id === input.id),\r\n                                    languageCode,\r\n                                )?.name;\r\n                            }\r\n                            const variantName = findTranslation(variant, languageCode)?.name || '';\r\n                            if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {\r\n                                variantsToUpdate.push({\r\n                                    id: variant.id,\r\n                                    translations: [\r\n                                        {\r\n                                            languageCode,\r\n                                            name: replaceLast(variantName, oldOptionName, newOptionName),\r\n                                        },\r\n                                    ],\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (variantsToUpdate.length) {\r\n                        updateProductVariantNames$ =\r\n                            this.dataService.product.updateProductVariants(variantsToUpdate);\r\n                    }\r\n                }\r\n                return this.dataService.product\r\n                    .updateProductOption(input)\r\n                    .pipe(mergeMap(() => updateProductVariantNames$));\r\n            }),\r\n        );\r\n    }\r\n\r\n    deleteProductVariant(id: string, productId: string) {\r\n        return this.dataService.product.deleteProductVariant(id).pipe(\r\n            switchMap(result => {\r\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\r\n                    return this.dataService.product.getProduct(productId).single$;\r\n                } else {\r\n                    return throwError(result.deleteProductVariant.message);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-flex-row\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    clrToggle\r\n                    name=\"enabled\"\r\n                    [formControl]=\"detailForm.get(['product', 'enabled'])\"\r\n                />\r\n                <label>{{ 'common.enabled' | translate }}</label>\r\n            </clr-toggle-wrapper>\r\n        </div>\r\n        <vdr-language-selector\r\n            [disabled]=\"isNew$ | async\"\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"detailForm.invalid || detailForm.pristine || !variantsToCreateAreValid()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"\r\n                    (detailForm.invalid || detailForm.pristine) && !assetsChanged() && !variantAssetsChanged()\r\n                \"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"product$ | async as product\">\r\n    <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\r\n    <clr-tabs>\r\n        <clr-tab>\r\n            <button clrTabLink (click)=\"navigateToTab('details')\">\r\n                {{ 'catalog.product-details' | translate }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'details'\">\r\n                <div class=\"clr-row\">\r\n                    <div class=\"clr-col\">\r\n                        <section class=\"form-block\" formGroupName=\"product\">\r\n                            <ng-container *ngIf=\"!(isNew$ | async)\">\r\n                                <ng-container *vdrIfMultichannel>\r\n                                    <vdr-form-item\r\n                                        [label]=\"'common.channels' | translate\"\r\n                                        *vdrIfDefaultChannelActive\r\n                                    >\r\n                                        <div class=\"flex channel-assignment\">\r\n                                            <ng-container *ngFor=\"let channel of productChannels$ | async\">\r\n                                                <vdr-chip\r\n                                                    *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                                    icon=\"times-circle\"\r\n                                                    (iconClick)=\"removeFromChannel(channel.id)\"\r\n                                                >\r\n                                                    <vdr-channel-badge\r\n                                                        [channelCode]=\"channel.code\"\r\n                                                    ></vdr-channel-badge>\r\n                                                    {{ channel.code | channelCodeToLabel }}\r\n                                                </vdr-chip>\r\n                                            </ng-container>\r\n                                            <button class=\"btn btn-sm\" (click)=\"assignToChannel()\">\r\n                                                <clr-icon shape=\"layers\"></clr-icon>\r\n                                                {{ 'catalog.assign-to-channel' | translate }}\r\n                                            </button>\r\n                                        </div>\r\n                                    </vdr-form-item>\r\n                                </ng-container>\r\n                            </ng-container>\r\n                            <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\r\n                                <input\r\n                                    id=\"name\"\r\n                                    type=\"text\"\r\n                                    formControlName=\"name\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                    (input)=\"updateSlug($event.target.value)\"\r\n                                />\r\n                            </vdr-form-field>\r\n                            <div\r\n                                class=\"auto-rename-wrapper\"\r\n                                [class.visible]=\"\r\n                                    (isNew$ | async) === false && detailForm.get(['product', 'name'])?.dirty\r\n                                \"\r\n                            >\r\n                                <clr-checkbox-wrapper>\r\n                                    <input\r\n                                        clrCheckbox\r\n                                        type=\"checkbox\"\r\n                                        id=\"auto-update\"\r\n                                        formControlName=\"autoUpdateVariantNames\"\r\n                                    />\r\n                                    <label>{{\r\n                                        'catalog.auto-update-product-variant-name' | translate\r\n                                    }}</label>\r\n                                </clr-checkbox-wrapper>\r\n                            </div>\r\n                            <vdr-form-field\r\n                                [label]=\"'catalog.slug' | translate\"\r\n                                for=\"slug\"\r\n                                [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                            >\r\n                                <input\r\n                                    id=\"slug\"\r\n                                    type=\"text\"\r\n                                    formControlName=\"slug\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                />\r\n                            </vdr-form-field>\r\n                            <vdr-rich-text-editor\r\n                                formControlName=\"description\"\r\n                                [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                [label]=\"'common.description' | translate\"\r\n                            ></vdr-rich-text-editor>\r\n\r\n                            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                                <label>{{ 'common.custom-fields' | translate }}</label>\r\n                                <vdr-tabbed-custom-fields\r\n                                    entityName=\"Product\"\r\n                                    [customFields]=\"customFields\"\r\n                                    [customFieldsFormGroup]=\"detailForm.get(['product', 'customFields'])\"\r\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                                ></vdr-tabbed-custom-fields>\r\n                            </section>\r\n                            <vdr-custom-detail-component-host\r\n                                locationId=\"product-detail\"\r\n                                [entity$]=\"entity$\"\r\n                                [detailForm]=\"detailForm\"\r\n                            ></vdr-custom-detail-component-host>\r\n                        </section>\r\n                    </div>\r\n                    <div class=\"clr-col-md-auto\">\r\n                        <vdr-assets\r\n                            [assets]=\"assetChanges.assets || product.assets\"\r\n                            [featuredAsset]=\"assetChanges.featuredAsset || product.featuredAsset\"\r\n                            [updatePermissions]=\"updatePermissions\"\r\n                            (change)=\"assetChanges = $event\"\r\n                        ></vdr-assets>\r\n                        <div class=\"facets\">\r\n                            <vdr-facet-value-chip\r\n                                *ngFor=\"let facetValue of facetValues$ | async\"\r\n                                [facetValue]=\"facetValue\"\r\n                                [removable]=\"['UpdateCatalog', 'UpdateProduct'] | hasPermission\"\r\n                                (remove)=\"removeProductFacetValue(facetValue.id)\"\r\n                            ></vdr-facet-value-chip>\r\n                            <button\r\n                                class=\"btn btn-sm btn-secondary\"\r\n                                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                                (click)=\"selectProductFacetValue()\"\r\n                            >\r\n                                <clr-icon shape=\"plus\"></clr-icon>\r\n                                {{ 'catalog.add-facets' | translate }}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div *ngIf=\"isNew$ | async\">\r\n                    <h4>{{ 'catalog.product-variants' | translate }}</h4>\r\n                    <vdr-generate-product-variants\r\n                        (variantsChange)=\"createVariantsConfig = $event\"\r\n                    ></vdr-generate-product-variants>\r\n                </div>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n        <clr-tab *ngIf=\"!(isNew$ | async)\">\r\n            <button clrTabLink (click)=\"navigateToTab('variants')\">\r\n                {{ 'catalog.product-variants' | translate }}\r\n            </button>\r\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'variants'\">\r\n                <section class=\"form-block\">\r\n                    <div class=\"view-mode\">\r\n                        <div class=\"btn-group\">\r\n                            <button\r\n                                class=\"btn btn-secondary-outline\"\r\n                                (click)=\"variantDisplayMode = 'card'\"\r\n                                [class.btn-primary]=\"variantDisplayMode === 'card'\"\r\n                            >\r\n                                <clr-icon shape=\"list\"></clr-icon>\r\n                                {{ 'catalog.display-variant-cards' | translate }}\r\n                            </button>\r\n                            <button\r\n                                class=\"btn\"\r\n                                (click)=\"variantDisplayMode = 'table'\"\r\n                                [class.btn-primary]=\"variantDisplayMode === 'table'\"\r\n                            >\r\n                                <clr-icon shape=\"table\"></clr-icon>\r\n                                {{ 'catalog.display-variant-table' | translate }}\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"variant-filter\">\r\n                            <input\r\n                                [formControl]=\"filterInput\"\r\n                                [placeholder]=\"'catalog.filter-by-name-or-sku' | translate\"\r\n                            />\r\n                            <button class=\"icon-button\" (click)=\"filterInput.setValue('')\">\r\n                                <clr-icon shape=\"times\"></clr-icon>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"flex-spacer\"></div>\r\n                        <a\r\n                            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\r\n                            [routerLink]=\"['./', 'manage-variants']\"\r\n                            class=\"btn btn-secondary edit-variants-btn\"\r\n                        >\r\n                            <clr-icon shape=\"add-text\"></clr-icon>\r\n                            {{ 'catalog.manage-variants' | translate }}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <div class=\"pagination-row mt4\" *ngIf=\"10 < (paginationConfig$ | async)?.totalItems\">\r\n                        <vdr-items-per-page-controls\r\n                            [itemsPerPage]=\"itemsPerPage$ | async\"\r\n                            (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n                        ></vdr-items-per-page-controls>\r\n\r\n                        <vdr-pagination-controls\r\n                            [id]=\"(paginationConfig$ | async)?.id\"\r\n                            [currentPage]=\"currentPage$ | async\"\r\n                            [itemsPerPage]=\"itemsPerPage$ | async\"\r\n                            (pageChange)=\"setPage($event)\"\r\n                        ></vdr-pagination-controls>\r\n                    </div>\r\n\r\n                    <vdr-product-variants-table\r\n                        *ngIf=\"variantDisplayMode === 'table'\"\r\n                        [variants]=\"variants$ | async\"\r\n                        [paginationConfig]=\"paginationConfig$ | async\"\r\n                        [optionGroups]=\"product.optionGroups\"\r\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\r\n                        [pendingAssetChanges]=\"variantAssetChanges\"\r\n                    ></vdr-product-variants-table>\r\n                    <vdr-product-variants-list\r\n                        *ngIf=\"variantDisplayMode === 'card'\"\r\n                        [variants]=\"variants$ | async\"\r\n                        [paginationConfig]=\"paginationConfig$ | async\"\r\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\r\n                        [facets]=\"facets$ | async\"\r\n                        [optionGroups]=\"product.optionGroups\"\r\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\r\n                        [taxCategories]=\"taxCategories$ | async\"\r\n                        [customFields]=\"customVariantFields\"\r\n                        [customOptionFields]=\"customOptionFields\"\r\n                        [activeLanguage]=\"languageCode$ | async\"\r\n                        [pendingAssetChanges]=\"variantAssetChanges\"\r\n                        (assignToChannel)=\"assignVariantToChannel($event)\"\r\n                        (removeFromChannel)=\"removeVariantFromChannel($event)\"\r\n                        (assetChange)=\"variantAssetChange($event)\"\r\n                        (updateProductOption)=\"updateProductOption($event)\"\r\n                        (selectionChange)=\"selectedVariantIds = $event\"\r\n                        (selectFacetValueClick)=\"selectVariantFacetValue($event)\"\r\n                    ></vdr-product-variants-list>\r\n                </section>\r\n                <div class=\"pagination-row mt4\" *ngIf=\"10 < (paginationConfig$ | async)?.totalItems\">\r\n                    <vdr-items-per-page-controls\r\n                        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n                        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n                    ></vdr-items-per-page-controls>\r\n\r\n                    <vdr-pagination-controls\r\n                        [id]=\"(paginationConfig$ | async)?.id\"\r\n                        [currentPage]=\"currentPage$ | async\"\r\n                        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n                        (pageChange)=\"setPage($event)\"\r\n                    ></vdr-pagination-controls>\r\n                </div>\r\n            </clr-tab-content>\r\n        </clr-tab>\r\n    </clr-tabs>\r\n</form>\r\n","import { Location } from '@angular/common';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    BaseDetailComponent,\r\n    CreateProductInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    flattenFacetValues,\r\n    GetProductWithVariants,\r\n    GlobalFlag,\r\n    LanguageCode,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    Permission,\r\n    ProductDetail,\r\n    ProductVariant,\r\n    ServerConfigService,\r\n    TaxCategory,\r\n    unicodePatternValidator,\r\n    UpdateProductInput,\r\n    UpdateProductMutation,\r\n    UpdateProductOptionInput,\r\n    UpdateProductVariantInput,\r\n    UpdateProductVariantsMutation,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { BehaviorSubject, combineLatest, EMPTY, merge, Observable } from 'rxjs';\r\nimport {\r\n    debounceTime,\r\n    distinctUntilChanged,\r\n    map,\r\n    mergeMap,\r\n    shareReplay,\r\n    skip,\r\n    skipUntil,\r\n    startWith,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    tap,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\r\nimport { VariantAssetChange } from '../product-variants-list/product-variants-list.component';\r\n\r\nexport type TabName = 'details' | 'variants';\r\n\r\nexport interface VariantFormValue {\r\n    id: string;\r\n    enabled: boolean;\r\n    sku: string;\r\n    name: string;\r\n    price: number;\r\n    priceWithTax: number;\r\n    taxCategoryId: string;\r\n    stockOnHand: number;\r\n    useGlobalOutOfStockThreshold: boolean;\r\n    outOfStockThreshold: number;\r\n    trackInventory: GlobalFlag;\r\n    facetValueIds: string[];\r\n    customFields?: any;\r\n}\r\n\r\nexport interface SelectedAssets {\r\n    assets?: Asset[];\r\n    featuredAsset?: Asset;\r\n}\r\n\r\nexport interface PaginationConfig {\r\n    totalItems: number;\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-detail',\r\n    templateUrl: './product-detail.component.html',\r\n    styleUrls: ['./product-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductDetailComponent\r\n    extends BaseDetailComponent<GetProductWithVariants.Product>\r\n    implements OnInit, OnDestroy\r\n{\r\n    activeTab$: Observable<TabName>;\r\n    product$: Observable<GetProductWithVariants.Product>;\r\n    variants$: Observable<ProductVariant.Fragment[]>;\r\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\r\n    customFields: CustomFieldConfig[];\r\n    customVariantFields: CustomFieldConfig[];\r\n    customOptionGroupFields: CustomFieldConfig[];\r\n    customOptionFields: CustomFieldConfig[];\r\n    detailForm: FormGroup;\r\n    filterInput = new FormControl('');\r\n    assetChanges: SelectedAssets = {};\r\n    variantAssetChanges: { [variantId: string]: SelectedAssets } = {};\r\n    variantFacetValueChanges: { [variantId: string]: string[] } = {};\r\n    productChannels$: Observable<ProductDetail.Channels[]>;\r\n    facetValues$: Observable<ProductDetail.FacetValues[]>;\r\n    facets$: Observable<FacetWithValues.Fragment[]>;\r\n    totalItems$: Observable<number>;\r\n    currentPage$ = new BehaviorSubject(1);\r\n    itemsPerPage$ = new BehaviorSubject(10);\r\n    paginationConfig$: Observable<PaginationConfig>;\r\n    selectedVariantIds: string[] = [];\r\n    variantDisplayMode: 'card' | 'table' = 'card';\r\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [] };\r\n    channelPriceIncludesTax$: Observable<boolean>;\r\n    // Used to store all ProductVariants which have been loaded.\r\n    // It is needed when saving changes to variants.\r\n    private productVariantMap = new Map<string, ProductVariant.Fragment>();\r\n    public readonly updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n\r\n    constructor(\r\n        route: ActivatedRoute,\r\n        router: Router,\r\n        serverConfigService: ServerConfigService,\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: FormBuilder,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        protected dataService: DataService,\r\n        private location: Location,\r\n        private changeDetector: ChangeDetectorRef,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.customFields = this.getCustomFieldConfig('Product');\r\n        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');\r\n        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');\r\n        this.customOptionFields = this.getCustomFieldConfig('ProductOption');\r\n        this.detailForm = this.formBuilder.group({\r\n            product: this.formBuilder.group({\r\n                enabled: true,\r\n                name: ['', Validators.required],\r\n                autoUpdateVariantNames: true,\r\n                slug: ['', unicodePatternValidator(/^[\\p{Letter}0-9_-]+$/)],\r\n                description: '',\r\n                facetValueIds: [[]],\r\n                customFields: this.formBuilder.group(\r\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                ),\r\n            }),\r\n            variants: this.formBuilder.array([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.product$ = this.entity$;\r\n        this.totalItems$ = this.product$.pipe(map(product => product.variantList.totalItems));\r\n        this.paginationConfig$ = combineLatest(this.totalItems$, this.itemsPerPage$, this.currentPage$).pipe(\r\n            map(([totalItems, itemsPerPage, currentPage]) => ({\r\n                totalItems,\r\n                itemsPerPage,\r\n                currentPage,\r\n            })),\r\n        );\r\n        const variants$ = this.product$.pipe(map(product => product.variantList.items));\r\n        const filterTerm$ = this.filterInput.valueChanges.pipe(\r\n            startWith(''),\r\n            debounceTime(200),\r\n            shareReplay(),\r\n        );\r\n        const initialVariants$ = this.product$.pipe(map(p => p.variantList.items));\r\n        const updatedVariants$ = combineLatest(filterTerm$, this.currentPage$, this.itemsPerPage$).pipe(\r\n            skipUntil(initialVariants$),\r\n            skip(1),\r\n            switchMap(([term, currentPage, itemsPerPage]) => {\r\n                return this.dataService.product\r\n                    .getProductVariants(\r\n                        {\r\n                            skip: (currentPage - 1) * itemsPerPage,\r\n                            take: itemsPerPage,\r\n                            ...(term\r\n                                ? { filter: { name: { contains: term }, sku: { contains: term } } }\r\n                                : {}),\r\n                            filterOperator: LogicalOperator.OR,\r\n                        },\r\n                        this.id,\r\n                    )\r\n                    .mapStream(({ productVariants }) => productVariants.items);\r\n            }),\r\n            shareReplay({ bufferSize: 1, refCount: true }),\r\n        );\r\n        this.variants$ = merge(initialVariants$, updatedVariants$).pipe(\r\n            tap(variants => {\r\n                for (const variant of variants) {\r\n                    this.productVariantMap.set(variant.id, variant);\r\n                }\r\n            }),\r\n        );\r\n        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));\r\n        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab') as any));\r\n\r\n        combineLatest(updatedVariants$, this.languageCode$)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(([variants, languageCode]) => {\r\n                this.buildVariantFormArray(variants, languageCode);\r\n            });\r\n\r\n        // FacetValues are provided initially by the nested array of the\r\n        // Product entity, but once a fetch to get all Facets is made (as when\r\n        // opening the FacetValue selector modal), then these additional values\r\n        // are concatenated onto the initial array.\r\n        this.facets$ = this.productDetailService.getFacets();\r\n        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));\r\n        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));\r\n        const productGroup = this.getProductFormGroup();\r\n\r\n        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(\r\n            map(val => val.facetValueIds as string[]),\r\n            distinctUntilChanged(),\r\n        );\r\n        const formChangeFacetValues$ = combineLatest(\r\n            formFacetValueIdChanges$,\r\n            productFacetValues$,\r\n            allFacetValues$,\r\n        ).pipe(\r\n            map(([ids, productFacetValues, allFacetValues]) => {\r\n                const combined = [...productFacetValues, ...allFacetValues];\r\n                return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);\r\n            }),\r\n        );\r\n\r\n        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);\r\n        this.productChannels$ = this.product$.pipe(map(p => p.channels));\r\n        this.channelPriceIncludesTax$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\r\n            .pipe(shareReplay(1));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    navigateToTab(tabName: TabName) {\r\n        this.location.replaceState(\r\n            this.router\r\n                .createUrlTree(['./', { ...this.route.snapshot.params, tab: tabName }], {\r\n                    queryParamsHandling: 'merge',\r\n                    relativeTo: this.route,\r\n                })\r\n                .toString(),\r\n        );\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    setPage(page: number) {\r\n        this.currentPage$.next(page);\r\n    }\r\n\r\n    setItemsPerPage(value: string) {\r\n        this.itemsPerPage$.next(+value);\r\n        this.currentPage$.next(1);\r\n    }\r\n\r\n    assignToChannel() {\r\n        this.productChannels$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(channels => {\r\n                    return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\r\n                        size: 'lg',\r\n                        locals: {\r\n                            productIds: [this.id],\r\n                            currentChannelIds: channels.map(c => c.id),\r\n                        },\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    removeFromChannel(channelId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.remove-product-from-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeProductsFromChannel({\r\n                              channelId,\r\n                              productIds: [this.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    assignVariantToChannel(variant: ProductVariant.Fragment) {\r\n        return this.modalService\r\n            .fromComponent(AssignProductsToChannelDialogComponent, {\r\n                size: 'lg',\r\n                locals: {\r\n                    productIds: [this.id],\r\n                    productVariantIds: [variant.id],\r\n                    currentChannelIds: variant.channels.map(c => c.id),\r\n                },\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    removeVariantFromChannel({\r\n        channelId,\r\n        variant,\r\n    }: {\r\n        channelId: string;\r\n        variant: ProductVariant.Fragment;\r\n    }) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.remove-product-variant-from-channel'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response\r\n                        ? this.dataService.product.removeVariantsFromChannel({\r\n                              channelId,\r\n                              productVariantIds: [variant.id],\r\n                          })\r\n                        : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\r\n                },\r\n            );\r\n    }\r\n\r\n    assetsChanged(): boolean {\r\n        return !!Object.values(this.assetChanges).length;\r\n    }\r\n\r\n    variantAssetsChanged(): boolean {\r\n        return !!Object.keys(this.variantAssetChanges).length;\r\n    }\r\n\r\n    variantAssetChange(event: VariantAssetChange) {\r\n        this.variantAssetChanges[event.variantId] = event;\r\n    }\r\n\r\n    /**\r\n     * If creating a new product, automatically generate the slug based on the product name.\r\n     */\r\n    updateSlug(nameValue: string) {\r\n        combineLatest(this.entity$, this.languageCode$)\r\n            .pipe(take(1))\r\n            .subscribe(([entity, languageCode]) => {\r\n                const slugControl = this.detailForm.get(['product', 'slug']);\r\n                const currentTranslation = findTranslation(entity, languageCode);\r\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\r\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\r\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\r\n                }\r\n            });\r\n    }\r\n\r\n    selectProductFacetValue() {\r\n        this.displayFacetValueModal().subscribe(facetValueIds => {\r\n            if (facetValueIds) {\r\n                const productGroup = this.getProductFormGroup();\r\n                const currentFacetValueIds = productGroup.value.facetValueIds;\r\n                productGroup.patchValue({\r\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\r\n                });\r\n                productGroup.markAsDirty();\r\n            }\r\n        });\r\n    }\r\n\r\n    updateProductOption(input: UpdateProductOptionInput & { autoUpdate: boolean }) {\r\n        combineLatest(this.product$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) =>\r\n                    this.productDetailService.updateProductOption(input, product, languageCode),\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ProductOption',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    removeProductFacetValue(facetValueId: string) {\r\n        const productGroup = this.getProductFormGroup();\r\n        const currentFacetValueIds = productGroup.value.facetValueIds;\r\n        productGroup.patchValue({\r\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\r\n        });\r\n        productGroup.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Opens a dialog to select FacetValues to apply to the select ProductVariants.\r\n     */\r\n    selectVariantFacetValue(selectedVariantIds: string[]) {\r\n        this.displayFacetValueModal()\r\n            .pipe(withLatestFrom(this.variants$))\r\n            .subscribe(([facetValueIds, variants]) => {\r\n                if (facetValueIds) {\r\n                    for (const variantId of selectedVariantIds) {\r\n                        const index = variants.findIndex(v => v.id === variantId);\r\n                        const variant = variants[index];\r\n                        const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];\r\n                        const variantFormGroup = (this.detailForm.get('variants') as FormArray).controls.find(\r\n                            c => c.value.id === variantId,\r\n                        );\r\n                        if (variantFormGroup) {\r\n                            const uniqueFacetValueIds = unique([...existingFacetValueIds, ...facetValueIds]);\r\n                            variantFormGroup.patchValue({\r\n                                facetValueIds: uniqueFacetValueIds,\r\n                            });\r\n                            variantFormGroup.markAsDirty();\r\n                            this.variantFacetValueChanges[variantId] = uniqueFacetValueIds;\r\n                        }\r\n                    }\r\n                    this.changeDetector.markForCheck();\r\n                }\r\n            });\r\n    }\r\n\r\n    variantsToCreateAreValid(): boolean {\r\n        return (\r\n            0 < this.createVariantsConfig.variants.length &&\r\n            this.createVariantsConfig.variants.every(v => {\r\n                return v.sku !== '';\r\n            })\r\n        );\r\n    }\r\n\r\n    private displayFacetValueModal(): Observable<string[] | undefined> {\r\n        return this.productDetailService.getFacets().pipe(\r\n            mergeMap(facets =>\r\n                this.modalService.fromComponent(ApplyFacetDialogComponent, {\r\n                    size: 'md',\r\n                    closable: true,\r\n                    locals: { facets },\r\n                }),\r\n            ),\r\n            map(facetValues => facetValues && facetValues.map(v => v.id)),\r\n        );\r\n    }\r\n\r\n    create() {\r\n        const productGroup = this.getProductFormGroup();\r\n        if (!productGroup.dirty) {\r\n            return;\r\n        }\r\n        combineLatest(this.product$, this.languageCode$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode]) => {\r\n                    const newProduct = this.getUpdatedProduct(\r\n                        product,\r\n                        productGroup as FormGroup,\r\n                        languageCode,\r\n                    ) as CreateProductInput;\r\n                    return this.productDetailService.createProductWithVariants(\r\n                        newProduct,\r\n                        this.createVariantsConfig,\r\n                        languageCode,\r\n                    );\r\n                }),\r\n            )\r\n            .subscribe(\r\n                ({ createProductVariants, productId }) => {\r\n                    this.notificationService.success(_('common.notify-create-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.assetChanges = {};\r\n                    this.variantAssetChanges = {};\r\n                    this.detailForm.markAsPristine();\r\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\r\n                },\r\n                err => {\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(err);\r\n                    this.notificationService.error(_('common.notify-create-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([product, languageCode, priceIncludesTax]) => {\r\n                    const productGroup = this.getProductFormGroup();\r\n                    let productInput: UpdateProductInput | undefined;\r\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\r\n\r\n                    if (productGroup.dirty || this.assetsChanged()) {\r\n                        productInput = this.getUpdatedProduct(\r\n                            product,\r\n                            productGroup as FormGroup,\r\n                            languageCode,\r\n                        ) as UpdateProductInput;\r\n                    }\r\n                    const variantsArray = this.detailForm.get('variants');\r\n                    if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {\r\n                        variantsInput = this.getUpdatedProductVariants(\r\n                            product,\r\n                            variantsArray as FormArray,\r\n                            languageCode,\r\n                            priceIncludesTax,\r\n                        );\r\n                    }\r\n\r\n                    return this.productDetailService.updateProduct({\r\n                        product,\r\n                        languageCode,\r\n                        autoUpdate:\r\n                            this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,\r\n                        productInput,\r\n                        variantsInput,\r\n                    });\r\n                }),\r\n            )\r\n            .subscribe(\r\n                result => {\r\n                    this.updateSlugAfterSave(result);\r\n                    this.detailForm.markAsPristine();\r\n                    this.assetChanges = {};\r\n                    this.variantAssetChanges = {};\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the form on changes to the product or current language.\r\n     */\r\n    protected setFormValues(product: GetProductWithVariants.Product, languageCode: LanguageCode) {\r\n        const currentTranslation = findTranslation(product, languageCode);\r\n        this.detailForm.patchValue({\r\n            product: {\r\n                enabled: product.enabled,\r\n                name: currentTranslation ? currentTranslation.name : '',\r\n                slug: currentTranslation ? currentTranslation.slug : '',\r\n                description: currentTranslation ? currentTranslation.description : '',\r\n                facetValueIds: product.facetValues.map(fv => fv.id),\r\n            },\r\n        });\r\n\r\n        if (this.customFields.length) {\r\n            this.setCustomFieldFormValues(\r\n                this.customFields,\r\n                this.detailForm.get(['product', 'customFields']),\r\n                product,\r\n                currentTranslation,\r\n            );\r\n        }\r\n        this.buildVariantFormArray(product.variantList.items, languageCode);\r\n    }\r\n\r\n    private buildVariantFormArray(variants: ProductVariant.Fragment[], languageCode: LanguageCode) {\r\n        const variantsFormArray = this.detailForm.get('variants') as FormArray;\r\n        variants.forEach((variant, i) => {\r\n            const variantTranslation = findTranslation(variant, languageCode);\r\n            const pendingFacetValueChanges = this.variantFacetValueChanges[variant.id];\r\n            const facetValueIds = pendingFacetValueChanges\r\n                ? pendingFacetValueChanges\r\n                : variant.facetValues.map(fv => fv.id);\r\n            const group: VariantFormValue = {\r\n                id: variant.id,\r\n                enabled: variant.enabled,\r\n                sku: variant.sku,\r\n                name: variantTranslation ? variantTranslation.name : '',\r\n                price: variant.price,\r\n                priceWithTax: variant.priceWithTax,\r\n                taxCategoryId: variant.taxCategory.id,\r\n                stockOnHand: variant.stockOnHand,\r\n                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\r\n                outOfStockThreshold: variant.outOfStockThreshold,\r\n                trackInventory: variant.trackInventory,\r\n                facetValueIds,\r\n            };\r\n\r\n            let variantFormGroup = variantsFormArray.controls.find(c => c.value.id === variant.id) as\r\n                | FormGroup\r\n                | undefined;\r\n            if (variantFormGroup) {\r\n                if (variantFormGroup.pristine) {\r\n                    variantFormGroup.patchValue(group);\r\n                }\r\n            } else {\r\n                variantFormGroup = this.formBuilder.group({\r\n                    ...group,\r\n                    facetValueIds: this.formBuilder.control(facetValueIds),\r\n                });\r\n                variantsFormArray.insert(i, variantFormGroup);\r\n            }\r\n            if (this.customVariantFields.length) {\r\n                let customFieldsGroup = variantFormGroup.get(['customFields']) as FormGroup | undefined;\r\n\r\n                if (!customFieldsGroup) {\r\n                    customFieldsGroup = this.formBuilder.group(\r\n                        this.customVariantFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\r\n                    );\r\n                    variantFormGroup.addControl('customFields', customFieldsGroup);\r\n                }\r\n                this.setCustomFieldFormValues(\r\n                    this.customVariantFields,\r\n                    customFieldsGroup,\r\n                    variant,\r\n                    variantTranslation,\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\r\n     * can then be persisted to the API.\r\n     */\r\n    private getUpdatedProduct(\r\n        product: GetProductWithVariants.Product,\r\n        productFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductInput | CreateProductInput {\r\n        const updatedProduct = createUpdatedTranslatable({\r\n            translatable: product,\r\n            updatedFields: productFormGroup.value,\r\n            customFieldConfig: this.customFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: product.name || '',\r\n                slug: product.slug || '',\r\n                description: product.description || '',\r\n            },\r\n        });\r\n        return {\r\n            ...updatedProduct,\r\n            assetIds: this.assetChanges.assets?.map(a => a.id),\r\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\r\n            facetValueIds: productFormGroup.value.facetValueIds,\r\n        } as UpdateProductInput | CreateProductInput;\r\n    }\r\n\r\n    /**\r\n     * Given an array of product variants and the values from the detailForm, this method creates an new array\r\n     * which can be persisted to the API.\r\n     */\r\n    private getUpdatedProductVariants(\r\n        product: GetProductWithVariants.Product,\r\n        variantsFormArray: FormArray,\r\n        languageCode: LanguageCode,\r\n        priceIncludesTax: boolean,\r\n    ): UpdateProductVariantInput[] {\r\n        const dirtyFormControls = variantsFormArray.controls.filter(c => c.dirty);\r\n        const dirtyVariants = dirtyFormControls\r\n            .map(c => this.productVariantMap.get(c.value.id))\r\n            .filter(notNullOrUndefined);\r\n        const dirtyVariantValues = dirtyFormControls.map(c => c.value);\r\n\r\n        if (dirtyVariants.length !== dirtyVariantValues.length) {\r\n            throw new Error(_(`error.product-variant-form-values-do-not-match`));\r\n        }\r\n        return dirtyVariants\r\n            .map((variant, i) => {\r\n                const formValue: VariantFormValue = dirtyVariantValues.find(value => value.id === variant.id);\r\n                const result: UpdateProductVariantInput = createUpdatedTranslatable({\r\n                    translatable: variant,\r\n                    updatedFields: formValue,\r\n                    customFieldConfig: this.customVariantFields,\r\n                    languageCode,\r\n                    defaultTranslation: {\r\n                        languageCode,\r\n                        name: '',\r\n                    },\r\n                });\r\n                result.taxCategoryId = formValue.taxCategoryId;\r\n                result.facetValueIds = formValue.facetValueIds;\r\n                result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;\r\n                const assetChanges = this.variantAssetChanges[variant.id];\r\n                if (assetChanges) {\r\n                    result.featuredAssetId = assetChanges.featuredAsset?.id;\r\n                    result.assetIds = assetChanges.assets?.map(a => a.id);\r\n                }\r\n                return result;\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    private getProductFormGroup(): FormGroup {\r\n        return this.detailForm.get('product') as FormGroup;\r\n    }\r\n\r\n    /**\r\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\r\n     */\r\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\r\n        const firstResult = results[0];\r\n        const slugControl = this.detailForm.get(['product', 'slug']);\r\n\r\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\r\n            return input.hasOwnProperty('updateProduct');\r\n        }\r\n\r\n        if (slugControl && isUpdateMutation(firstResult)) {\r\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\r\n        }\r\n    }\r\n}\r\n","<ng-select\r\n    [addTag]=\"addTagFn\"\r\n    [placeholder]=\"'catalog.search-product-name-or-code' | translate\"\r\n    [items]=\"facetValueResults\"\r\n    [searchFn]=\"filterFacetResults\"\r\n    [hideSelected]=\"true\"\r\n    [multiple]=\"true\"\r\n    [markFirst]=\"false\"\r\n    (change)=\"onSelectChange($event)\"\r\n    #selectComponent\r\n>\r\n    <ng-template ng-header-tmp>\r\n        <div\r\n            class=\"search-header\"\r\n            *ngIf=\"selectComponent.searchTerm\"\r\n            [class.selected]=\"isSearchHeaderSelected()\"\r\n            (click)=\"selectComponent.selectTag()\"\r\n        >\r\n            {{ 'catalog.search-for-term' | translate }}: {{ selectComponent.searchTerm }}\r\n        </div>\r\n    </ng-template>\r\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n        <ng-container *ngIf=\"item.facetValue\">\r\n            <vdr-facet-value-chip\r\n                [facetValue]=\"item.facetValue\"\r\n                [removable]=\"true\"\r\n                (remove)=\"clear(item)\"\r\n            ></vdr-facet-value-chip>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!item.facetValue\">\r\n            <vdr-chip [icon]=\"'times'\" (iconClick)=\"clear(item)\">\"{{ item.label }}\"</vdr-chip>\r\n        </ng-container>\r\n    </ng-template>\r\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\r\n        <ng-container *ngIf=\"item.facetValue\">\r\n            <vdr-facet-value-chip [facetValue]=\"item.facetValue\" [removable]=\"false\"></vdr-facet-value-chip>\r\n        </ng-container>\r\n    </ng-template>\r\n</ng-select>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { NgSelectComponent, SELECTION_MODEL_FACTORY } from '@ng-select/ng-select';\r\nimport { SearchProducts, SingleSearchSelectionModelFactory } from '@vendure/admin-ui/core';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-product-search-input',\r\n    templateUrl: './product-search-input.component.html',\r\n    styleUrls: ['./product-search-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{ provide: SELECTION_MODEL_FACTORY, useValue: SingleSearchSelectionModelFactory }],\r\n})\r\nexport class ProductSearchInputComponent {\r\n    @Input() facetValueResults: SearchProducts.FacetValues[];\r\n    @Output() searchTermChange = new EventEmitter<string>();\r\n    @Output() facetValueChange = new EventEmitter<string[]>();\r\n    @ViewChild('selectComponent', { static: true }) private selectComponent: NgSelectComponent;\r\n    private lastTerm = '';\r\n    private lastFacetValueIds: string[] = [];\r\n\r\n    setSearchTerm(term: string | null) {\r\n        if (term) {\r\n            this.selectComponent.select({ label: term, value: { label: term } });\r\n        } else {\r\n            const currentTerm = this.selectComponent.selectedItems.find(i => !this.isFacetValueItem(i.value));\r\n            if (currentTerm) {\r\n                this.selectComponent.unselect(currentTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    setFacetValues(ids: string[]) {\r\n        const items = this.selectComponent.items;\r\n\r\n        this.selectComponent.selectedItems.forEach(item => {\r\n            if (this.isFacetValueItem(item.value) && !ids.includes(item.value.facetValue.id)) {\r\n                this.selectComponent.unselect(item);\r\n            }\r\n        });\r\n\r\n        ids.map(id => {\r\n            return items?.find(item => this.isFacetValueItem(item) && item.facetValue.id === id);\r\n        })\r\n            .filter(notNullOrUndefined)\r\n            .forEach(item => {\r\n                const isSelected = this.selectComponent.selectedItems.find(i => {\r\n                    const val = i.value;\r\n                    if (this.isFacetValueItem(val)) {\r\n                        return val.facetValue.id === item.facetValue.id;\r\n                    }\r\n                    return false;\r\n                });\r\n                if (!isSelected) {\r\n                    this.selectComponent.select({ label: '', value: item });\r\n                }\r\n            });\r\n    }\r\n\r\n    filterFacetResults = (term: string, item: SearchProducts.FacetValues | { label: string }) => {\r\n        if (!this.isFacetValueItem(item)) {\r\n            return false;\r\n        }\r\n\r\n        const cix = term.indexOf(':');\r\n        const facetName = cix > -1 ? term.toLowerCase().slice(0, cix) : null;\r\n        const facetVal = cix > -1 ? term.toLowerCase().slice(cix + 1) : term.toLowerCase();\r\n\r\n        if (facetName) {\r\n            return (\r\n                item.facetValue.facet.name.toLowerCase().includes(facetName) &&\r\n                item.facetValue.name.toLocaleLowerCase().includes(facetVal)\r\n            );\r\n        }\r\n\r\n        return (\r\n            item.facetValue.name.toLowerCase().includes(term.toLowerCase()) ||\r\n            item.facetValue.facet.name.toLowerCase().includes(term.toLowerCase())\r\n        );\r\n    };\r\n\r\n    onSelectChange(selectedItems: Array<SearchProducts.FacetValues | { label: string }>) {\r\n        if (!Array.isArray(selectedItems)) {\r\n            selectedItems = [selectedItems];\r\n        }\r\n        const searchTermItem = selectedItems.find(item => !this.isFacetValueItem(item)) as\r\n            | { label: string }\r\n            | undefined;\r\n        const searchTerm = searchTermItem ? searchTermItem.label : '';\r\n\r\n        const facetValueIds = selectedItems.filter(this.isFacetValueItem).map(i => i.facetValue.id);\r\n\r\n        if (searchTerm !== this.lastTerm) {\r\n            this.searchTermChange.emit(searchTerm);\r\n            this.lastTerm = searchTerm;\r\n        }\r\n        if (this.lastFacetValueIds.join(',') !== facetValueIds.join(',')) {\r\n            this.facetValueChange.emit(facetValueIds);\r\n            this.lastFacetValueIds = facetValueIds;\r\n        }\r\n    }\r\n\r\n    addTagFn(item: any) {\r\n        return { label: item };\r\n    }\r\n\r\n    isSearchHeaderSelected(): boolean {\r\n        return this.selectComponent.itemsList.markedIndex === -1;\r\n    }\r\n\r\n    private isFacetValueItem = (input: unknown): input is SearchProducts.FacetValues => {\r\n        return typeof input === 'object' && !!input && input.hasOwnProperty('facetValue');\r\n    };\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left [grow]=\"true\">\r\n        <div class=\"search-form\">\r\n            <vdr-product-search-input\r\n                #productSearchInputComponent\r\n                [facetValueResults]=\"facetValues$ | async\"\r\n                (searchTermChange)=\"setSearchTerm($event)\"\r\n                (facetValueChange)=\"setFacetValueIds($event)\"\r\n            ></vdr-product-search-input>\r\n            <vdr-dropdown class=\"search-settings-menu mr3\">\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"icon-button search-index-button\"\r\n                    [title]=\"\r\n                        (pendingSearchIndexUpdates\r\n                            ? 'catalog.pending-search-index-updates'\r\n                            : 'catalog.search-index-controls'\r\n                        ) | translate\r\n                    \"\r\n                    vdrDropdownTrigger\r\n                >\r\n                    <clr-icon shape=\"cog\"></clr-icon>\r\n                    <vdr-status-badge *ngIf=\"pendingSearchIndexUpdates\" type=\"warning\"> </vdr-status-badge>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <h4 class=\"dropdown-header\">{{ 'catalog.search-index-controls' | translate }}</h4>\r\n                    <ng-container *ngIf=\"pendingSearchIndexUpdates\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"run-updates-button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"runPendingSearchIndexUpdates()\"\r\n                            [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                        >\r\n                            <vdr-status-badge type=\"warning\"> </vdr-status-badge>\r\n                            {{\r\n                                'catalog.run-pending-search-index-updates'\r\n                                    | translate: { count: pendingSearchIndexUpdates }\r\n                            }}\r\n                        </button>\r\n                        <div class=\"dropdown-divider\"></div>\r\n                    </ng-container>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"rebuildSearchIndex()\"\r\n                        [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n                    >\r\n                        {{ 'catalog.rebuild-search-index' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n        <div class=\"flex wrap\">\r\n            <clr-checkbox-wrapper class=\"mt2\">\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"groupByProduct\" (ngModelChange)=\"refresh()\" />\r\n                <label>{{ 'catalog.group-by-product' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <vdr-language-selector\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"contentLanguage$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"product-list\"></vdr-action-bar-items>\r\n        <a\r\n            class=\"btn btn-primary\"\r\n            [routerLink]=\"['./create']\"\r\n            *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\"\r\n        >\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            <span class=\"full-label\">{{ 'catalog.create-new-product' | translate }}</span>\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <ng-template let-result=\"item\">\r\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <div class=\"image-placeholder\">\r\n                <img\r\n                    *ngIf=\"\r\n                        groupByProduct\r\n                            ? result.productAsset\r\n                            : result.productVariantAsset || result.productAsset as asset;\r\n                        else imagePlaceholder\r\n                    \"\r\n                    [src]=\"asset | assetPreview: 'tiny'\"\r\n                />\r\n                <ng-template #imagePlaceholder>\r\n                    <div class=\"placeholder\">\r\n                        <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                    </div>\r\n                </ng-template>\r\n            </div>\r\n        </td>\r\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\r\n            {{ groupByProduct ? result.productName : result.productVariantName }}\r\n        </td>\r\n        <td class=\"align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-chip *ngIf=\"!result.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', result.productId]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteProduct(result.productId)\"\r\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteProduct'] | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    JobQueueService,\r\n    JobState,\r\n    LanguageCode,\r\n    LogicalOperator,\r\n    ModalService,\r\n    NotificationService,\r\n    SearchInput,\r\n    SearchProducts,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport {\r\n    delay,\r\n    distinctUntilChanged,\r\n    map,\r\n    shareReplay,\r\n    switchMap,\r\n    take,\r\n    takeUntil,\r\n    tap,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\n\r\nimport { ProductSearchInputComponent } from '../product-search-input/product-search-input.component';\r\n\r\n@Component({\r\n    selector: 'vdr-products-list',\r\n    templateUrl: './product-list.component.html',\r\n    styleUrls: ['./product-list.component.scss'],\r\n})\r\nexport class ProductListComponent\r\n    extends BaseListComponent<SearchProducts.Query, SearchProducts.Items, SearchProducts.Variables>\r\n    implements OnInit, AfterViewInit\r\n{\r\n    searchTerm = '';\r\n    facetValueIds: string[] = [];\r\n    groupByProduct = true;\r\n    selectedFacetValueIds$: Observable<string[]>;\r\n    facetValues$: Observable<SearchProducts.FacetValues[]>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    contentLanguage$: Observable<LanguageCode>;\r\n    pendingSearchIndexUpdates = 0;\r\n\r\n    @ViewChild('productSearchInputComponent', { static: true })\r\n    private productSearchInput: ProductSearchInputComponent;\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private jobQueueService: JobQueueService,\r\n        private serverConfigService: ServerConfigService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        this.route.queryParamMap\r\n            .pipe(\r\n                map(qpm => qpm.get('q')),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(term => {\r\n                this.searchTerm = term || '';\r\n                if (this.productSearchInput) {\r\n                    this.productSearchInput.setSearchTerm(term);\r\n                }\r\n            });\r\n        this.selectedFacetValueIds$ = this.route.queryParamMap.pipe(map(qpm => qpm.getAll('fvids')));\r\n\r\n        this.selectedFacetValueIds$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\r\n            this.facetValueIds = ids;\r\n            if (this.productSearchInput) {\r\n                this.productSearchInput.setFacetValues(ids);\r\n            }\r\n        });\r\n        super.setQueryFn(\r\n            (...args: any[]) =>\r\n                this.dataService.product.searchProducts(this.searchTerm, ...args).refetchOnChannelChange(),\r\n            data => data.search,\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (skip, take) => ({\r\n                input: {\r\n                    skip,\r\n                    take,\r\n                    term: this.searchTerm,\r\n                    facetValueIds: this.facetValueIds,\r\n                    facetValueOperator: LogicalOperator.AND,\r\n                    groupByProduct: this.groupByProduct,\r\n                } as SearchInput,\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n\r\n        this.facetValues$ = this.result$.pipe(map(data => data.search.facetValues));\r\n\r\n        this.facetValues$\r\n            .pipe(take(1), delay(100), withLatestFrom(this.selectedFacetValueIds$))\r\n            .subscribe(([__, ids]) => {\r\n                this.productSearchInput.setFacetValues(ids);\r\n            });\r\n        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();\r\n        this.contentLanguage$ = this.dataService.client\r\n            .uiState()\r\n            .mapStream(({ uiState }) => uiState.contentLanguage)\r\n            .pipe(tap(() => this.refresh()));\r\n\r\n        this.dataService.product\r\n            .getPendingSearchIndexUpdates()\r\n            .mapSingle(({ pendingSearchIndexUpdates }) => pendingSearchIndexUpdates)\r\n            .subscribe(value => (this.pendingSearchIndexUpdates = value));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.productSearchInput && this.searchTerm) {\r\n            setTimeout(() => this.productSearchInput.setSearchTerm(this.searchTerm));\r\n        }\r\n    }\r\n\r\n    setSearchTerm(term: string) {\r\n        this.searchTerm = term;\r\n        this.setQueryParam({ q: term || null, page: 1 });\r\n        this.refresh();\r\n    }\r\n\r\n    setFacetValueIds(ids: string[]) {\r\n        this.facetValueIds = ids;\r\n        this.setQueryParam({ fvids: ids, page: 1 });\r\n        this.refresh();\r\n    }\r\n\r\n    rebuildSearchIndex() {\r\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\r\n            this.notificationService.info(_('catalog.reindexing'));\r\n            this.jobQueueService.addJob(reindex.id, job => {\r\n                if (job.state === JobState.COMPLETED) {\r\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\r\n                    this.notificationService.success(_('catalog.reindex-successful'), {\r\n                        count: job.result.indexedItemCount,\r\n                        time,\r\n                    });\r\n                    this.refresh();\r\n                } else {\r\n                    this.notificationService.error(_('catalog.reindex-error'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    runPendingSearchIndexUpdates() {\r\n        this.dataService.product.runPendingSearchIndexUpdates().subscribe(value => {\r\n            this.notificationService.info(_('catalog.running-search-index-updates'), {\r\n                count: this.pendingSearchIndexUpdates,\r\n            });\r\n            this.pendingSearchIndexUpdates = 0;\r\n        });\r\n    }\r\n\r\n    deleteProduct(productId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\r\n                // Short delay to allow the product to be removed from the search index before\r\n                // refreshing.\r\n                delay(500),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Product',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Product',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    setLanguage(code: LanguageCode) {\r\n        this.dataService.client.setContentLanguage(code).subscribe();\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <vdr-language-selector\r\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n            [currentLanguageCode]=\"languageCode$ | async\"\r\n            (languageCodeChange)=\"setLanguage($event)\"\r\n        ></vdr-language-selector>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <div class=\"flex center\">\r\n            <div class=\"mr2\">\r\n                <clr-checkbox-wrapper>\r\n                    <input\r\n                        clrCheckbox\r\n                        type=\"checkbox\"\r\n                        id=\"auto-update\"\r\n                        [(ngModel)]=\"autoUpdateVariantNames\"\r\n                    />\r\n                    <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\r\n                </clr-checkbox-wrapper>\r\n            </div>\r\n            <button\r\n                *vdrIfPermissions=\"updatePermission\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"detailForm.pristine || detailForm.invalid\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </div>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"optionGroups$ | async as optionGroups\">\r\n    <div formGroupName=\"optionGroups\" class=\"clr-row\">\r\n        <div class=\"clr-col-12 clr-col-xl-6\" *ngFor=\"let optionGroup of getOptionGroups(); index as i\">\r\n            <section class=\"card\" [formArrayName]=\"i\">\r\n                <div class=\"card-header option-group-header\">\r\n                    <vdr-entity-info [entity]=\"optionGroup.value\"></vdr-entity-info>\r\n                    <div class=\"ml2\">{{ optionGroup.value.code }}</div>\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            [id]=\"'name-' + i\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n                        <input\r\n                            [id]=\"'code-' + i\"\r\n                            type=\"text\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"code\"\r\n                        />\r\n                    </vdr-form-field>\r\n                </div>\r\n                <section class=\"card-block\">\r\n                    <table class=\"facet-values-list table mt2 mb4\" formGroupName=\"options\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>{{ 'common.name' | translate }}</th>\r\n                                <th>{{ 'common.code' | translate }}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr\r\n                                class=\"facet-value\"\r\n                                *ngFor=\"let option of getOptions(optionGroup); let i = index\"\r\n                                [formGroupName]=\"i\"\r\n                            >\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-entity-info [entity]=\"option.value\"></vdr-entity-info>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        formControlName=\"name\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                    />\r\n                                </td>\r\n                                <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" /></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </section>\r\n            </section>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CreateFacetInput,\r\n    createUpdatedTranslatable,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    FacetWithValues,\r\n    findTranslation,\r\n    GetProductVariantOptions,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Permission,\r\n    ProductOption,\r\n    ProductOptionGroup,\r\n    ServerConfigService,\r\n    UpdateFacetInput,\r\n    UpdateProductOptionGroupInput,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { combineLatest, forkJoin, Observable } from 'rxjs';\r\nimport { map, mergeMap, take } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\n\r\n@Component({\r\n    selector: 'vdr-product-options-editor',\r\n    templateUrl: './product-options-editor.component.html',\r\n    styleUrls: ['./product-options-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductOptionsEditorComponent\r\n    extends BaseDetailComponent<GetProductVariantOptions.Product>\r\n    implements OnInit\r\n{\r\n    detailForm: FormGroup;\r\n    optionGroups$: Observable<GetProductVariantOptions.OptionGroups[]>;\r\n    languageCode$: Observable<LanguageCode>;\r\n    availableLanguages$: Observable<LanguageCode[]>;\r\n    optionGroupCustomFields: CustomFieldConfig[];\r\n    optionCustomFields: CustomFieldConfig[];\r\n    autoUpdateVariantNames = true;\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        protected serverConfigService: ServerConfigService,\r\n        protected dataService: DataService,\r\n        private productDetailService: ProductDetailService,\r\n        private formBuilder: FormBuilder,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.optionGroupCustomFields = this.getCustomFieldConfig('ProductOptionGroup');\r\n        this.optionCustomFields = this.getCustomFieldConfig('ProductOption');\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.optionGroups$ = this.route.snapshot.data.entity.pipe(\r\n            map((product: GetProductVariantOptions.Product) => product.optionGroups),\r\n        );\r\n        this.detailForm = new FormGroup({\r\n            optionGroups: new FormArray([]),\r\n        });\r\n        super.init();\r\n    }\r\n\r\n    getOptionGroups(): FormGroup[] {\r\n        const optionGroups = this.detailForm.get('optionGroups');\r\n        return (optionGroups as FormArray).controls as FormGroup[];\r\n    }\r\n\r\n    getOptions(optionGroup: FormGroup): FormGroup[] {\r\n        const options = optionGroup.get('options');\r\n        return (options as FormArray).controls as FormGroup[];\r\n    }\r\n\r\n    save() {\r\n        if (this.detailForm.invalid || this.detailForm.pristine) {\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-non-null-assertion\r\n        const $product = this.dataService.product.getProduct(this.id).mapSingle(data => data.product!);\r\n        combineLatest(this.entity$, this.languageCode$, $product)\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(([{ optionGroups }, languageCode, product]) => {\r\n                    const updateOperations: Array<Observable<any>> = [];\r\n                    for (const optionGroupForm of this.getOptionGroups()) {\r\n                        if (optionGroupForm.get('name')?.dirty || optionGroupForm.get('code')?.dirty) {\r\n                            const optionGroupEntity = optionGroups.find(\r\n                                og => og.id === optionGroupForm.value.id,\r\n                            );\r\n                            if (optionGroupEntity) {\r\n                                const input = this.getUpdatedOptionGroup(\r\n                                    optionGroupEntity,\r\n                                    optionGroupForm,\r\n                                    languageCode,\r\n                                );\r\n                                updateOperations.push(\r\n                                    this.dataService.product.updateProductOptionGroup(input),\r\n                                );\r\n                            }\r\n                        }\r\n\r\n                        for (const optionForm of this.getOptions(optionGroupForm)) {\r\n                            if (optionForm.get('name')?.dirty || optionForm.get('code')?.dirty) {\r\n                                const optionGroup = optionGroups\r\n                                    .find(og => og.id === optionGroupForm.value.id)\r\n                                    ?.options.find(o => o.id === optionForm.value.id);\r\n                                if (optionGroup) {\r\n                                    const input = this.getUpdatedOption(\r\n                                        optionGroup,\r\n                                        optionForm,\r\n                                        languageCode,\r\n                                    );\r\n                                    updateOperations.push(\r\n                                        this.productDetailService.updateProductOption(\r\n                                            { ...input, autoUpdate: this.autoUpdateVariantNames },\r\n                                            product,\r\n                                            languageCode,\r\n                                        ),\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return forkJoin(updateOperations);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'ProductOptionGroup',\r\n                    });\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'ProductOptionGroup',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private getUpdatedOptionGroup(\r\n        optionGroup: ProductOptionGroup.Fragment,\r\n        optionGroupFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductOptionGroupInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: optionGroup,\r\n            updatedFields: optionGroupFormGroup.value,\r\n            customFieldConfig: this.optionGroupCustomFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: optionGroup.name || '',\r\n            },\r\n        });\r\n        return input;\r\n    }\r\n\r\n    private getUpdatedOption(\r\n        option: ProductOption.Fragment,\r\n        optionFormGroup: FormGroup,\r\n        languageCode: LanguageCode,\r\n    ): UpdateProductOptionInput {\r\n        const input = createUpdatedTranslatable({\r\n            translatable: option,\r\n            updatedFields: optionFormGroup.value,\r\n            customFieldConfig: this.optionGroupCustomFields,\r\n            languageCode,\r\n            defaultTranslation: {\r\n                languageCode,\r\n                name: option.name || '',\r\n            },\r\n        });\r\n        return input;\r\n    }\r\n\r\n    protected setFormValues(entity: GetProductVariantOptions.Product, languageCode: LanguageCode): void {\r\n        const groupsFormArray = new FormArray([]);\r\n        for (const optionGroup of entity.optionGroups) {\r\n            const groupTranslation = findTranslation(optionGroup, languageCode);\r\n            const group = {\r\n                id: optionGroup.id,\r\n                createdAt: optionGroup.createdAt,\r\n                updatedAt: optionGroup.updatedAt,\r\n                code: optionGroup.code,\r\n                name: groupTranslation ? groupTranslation.name : '',\r\n            };\r\n            const optionsFormArray = new FormArray([]);\r\n\r\n            for (const option of optionGroup.options) {\r\n                const optionTranslation = findTranslation(option, languageCode);\r\n                const optionControl = this.formBuilder.group({\r\n                    id: option.id,\r\n                    createdAt: option.createdAt,\r\n                    updatedAt: option.updatedAt,\r\n                    code: option.code,\r\n                    name: optionTranslation ? optionTranslation.name : '',\r\n                });\r\n                optionsFormArray.push(optionControl);\r\n            }\r\n\r\n            const groupControl = this.formBuilder.group(group);\r\n            groupControl.addControl('options', optionsFormArray);\r\n            groupsFormArray.push(groupControl);\r\n        }\r\n        this.detailForm.setControl('optionGroups', groupsFormArray);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>\r\n    {{ 'catalog.confirm-deletion-of-unused-variants-title' | translate }}\r\n</ng-template>\r\n{{ 'catalog.confirm-deletion-of-unused-variants-body' | translate }}\r\n<ul>\r\n    <li *ngFor=\"let variant of variants\">{{ variant.name }} ({{ variant.sku }})</li>\r\n</ul>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"confirm()\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog, GetProductVariantOptions } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-confirm-variant-deletion-dialog',\r\n    templateUrl: './confirm-variant-deletion-dialog.component.html',\r\n    styleUrls: ['./confirm-variant-deletion-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ConfirmVariantDeletionDialogComponent implements Dialog<boolean> {\r\n    resolveWith: (result?: boolean) => void;\r\n    variants: GetProductVariantOptions.Variants[] = [];\r\n\r\n    confirm() {\r\n        this.resolveWith(true);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\r\n    <div class=\"chips\" *ngIf=\"0 < options.length\">\r\n        <vdr-chip\r\n            *ngFor=\"let option of options; last as isLast\"\r\n            [icon]=\"option.locked ? 'lock' : 'times'\"\r\n            [class.selected]=\"isLast && lastSelected\"\r\n            [class.locked]=\"option.locked\"\r\n            [colorFrom]=\"groupName\"\r\n            (iconClick)=\"removeOption(option)\"\r\n        >\r\n            {{ option.name }}\r\n        </vdr-chip>\r\n    </div>\r\n    <textarea\r\n        #textArea\r\n        (keyup)=\"handleKey($event)\"\r\n        (focus)=\"isFocussed = true\"\r\n        (blur)=\"handleBlur()\"\r\n        [(ngModel)]=\"input\"\r\n        [disabled]=\"disabled\"\r\n    ></textarea>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    forwardRef,\r\n    Input,\r\n    Provider,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => OptionValueInputComponent),\r\n    multi: true,\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-option-value-input',\r\n    templateUrl: './option-value-input.component.html',\r\n    styleUrls: ['./option-value-input.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\r\n})\r\nexport class OptionValueInputComponent implements ControlValueAccessor {\r\n    @Input() groupName = '';\r\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\r\n    options: Array<{ name: string; locked: boolean }>;\r\n    disabled = false;\r\n    input = '';\r\n    isFocussed = false;\r\n    lastSelected = false;\r\n    onChangeFn: (value: any) => void;\r\n    onTouchFn: (value: any) => void;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeFn = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchFn = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.options = obj || [];\r\n    }\r\n\r\n    focus() {\r\n        this.textArea.nativeElement.focus();\r\n    }\r\n\r\n    removeOption(option: { name: string; locked: boolean }) {\r\n        if (!option.locked) {\r\n            this.options = this.options.filter(o => o.name !== option.name);\r\n            this.onChangeFn(this.options);\r\n        }\r\n    }\r\n\r\n    handleKey(event: KeyboardEvent) {\r\n        switch (event.key) {\r\n            case ',':\r\n            case 'Enter':\r\n                this.addOptionValue();\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (this.lastSelected) {\r\n                    this.removeLastOption();\r\n                    this.lastSelected = false;\r\n                } else if (this.input === '') {\r\n                    this.lastSelected = true;\r\n                }\r\n                break;\r\n            default:\r\n                this.lastSelected = false;\r\n        }\r\n    }\r\n\r\n    handleBlur() {\r\n        this.isFocussed = false;\r\n        this.addOptionValue();\r\n    }\r\n\r\n    private addOptionValue() {\r\n        this.options = unique([...this.options, ...this.parseInputIntoOptions(this.input)]);\r\n        this.input = '';\r\n        this.onChangeFn(this.options);\r\n    }\r\n\r\n    private parseInputIntoOptions(input: string): Array<{ name: string; locked: boolean }> {\r\n        return input\r\n            .split(/[,\\n]/)\r\n            .map(s => s.trim())\r\n            .filter(s => s !== '')\r\n            .map(s => ({ name: s, locked: false }));\r\n    }\r\n\r\n    private removeLastOption() {\r\n        if (!this.options[this.options.length - 1].locked) {\r\n            this.options = this.options.slice(0, this.options.length - 1);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            (click)=\"save()\"\r\n            [disabled]=\"!formValueChanged || getVariantsToAdd().length === 0\"\r\n        >\r\n            {{ 'common.add-new-variants' | translate: { count: getVariantsToAdd().length } }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\r\n    <div class=\"name\">\r\n        <label>{{ 'catalog.option' | translate }}</label>\r\n        <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\r\n    </div>\r\n    <div class=\"values\">\r\n        <label>{{ 'catalog.option-values' | translate }}</label>\r\n        <vdr-option-value-input\r\n            #optionValueInputComponent\r\n            [(ngModel)]=\"group.values\"\r\n            (ngModelChange)=\"generateVariants()\"\r\n            [groupName]=\"group.name\"\r\n            [disabled]=\"group.name === ''\"\r\n        ></vdr-option-value-input>\r\n    </div>\r\n</div>\r\n<button\r\n    class=\"btn btn-primary-outline btn-sm\"\r\n    (click)=\"addOption()\"\r\n>\r\n    <clr-icon shape=\"plus\"></clr-icon>\r\n    {{ 'catalog.add-option' | translate }}\r\n</button>\r\n\r\n<div class=\"variants-preview\">\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>{{ 'common.create' | translate }}</th>\r\n                <th>{{ 'catalog.variant' | translate }}</th>\r\n                <th>{{ 'catalog.sku' | translate }}</th>\r\n                <th>{{ 'catalog.price' | translate }}</th>\r\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tr *ngFor=\"let variant of generatedVariants\" [class.disabled]=\"!variant.enabled || variant.existing\">\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    *ngIf=\"!variant.existing\"\r\n                    [(ngModel)]=\"variant.enabled\"\r\n                    name=\"enabled\"\r\n                    clrCheckbox\r\n                    (ngModelChange)=\"formValueChanged = true\"\r\n                />\r\n            </td>\r\n            <td>\r\n                {{ getVariantName(variant) | translate }}\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        [(ngModel)]=\"variant.sku\"\r\n                        [placeholder]=\"'catalog.sku' | translate\"\r\n                        name=\"sku\"\r\n                        required\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    />\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.sku }}</span>\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <vdr-currency-input\r\n                        clrInput\r\n                        [(ngModel)]=\"variant.price\"\r\n                        name=\"price\"\r\n                        [currencyCode]=\"currencyCode\"\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    ></vdr-currency-input>\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.price | localeCurrency: currencyCode }}</span>\r\n            </td>\r\n            <td>\r\n                <clr-input-container *ngIf=\"!variant.existing\">\r\n                    <input\r\n                        clrInput\r\n                        type=\"number\"\r\n                        [(ngModel)]=\"variant.stock\"\r\n                        name=\"stock\"\r\n                        min=\"0\"\r\n                        step=\"1\"\r\n                        (ngModelChange)=\"onFormChanged(variant)\"\r\n                    />\r\n                </clr-input-container>\r\n                <span *ngIf=\"variant.existing\">{{ variant.stock }}</span>\r\n            </td>\r\n            <td>\r\n                <vdr-dropdown *ngIf=\"variant.productVariantId as productVariantId\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"deleteVariant(productVariantId)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.delete' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CreateProductOptionGroup,\r\n    CreateProductOptionInput,\r\n    CurrencyCode,\r\n    DataService,\r\n    DeactivateAware,\r\n    getDefaultUiLanguage,\r\n    GetProductVariantOptions,\r\n    LanguageCode,\r\n    ModalService,\r\n    NotificationService,\r\n    ProductOptionGroupWithOptionsFragment,\r\n} from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { unique } from '@vendure/common/lib/unique';\r\nimport { EMPTY, forkJoin, Observable, of } from 'rxjs';\r\nimport { filter, map, mergeMap, switchMap } from 'rxjs/operators';\r\n\r\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\r\nimport { ConfirmVariantDeletionDialogComponent } from '../confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\n\r\nexport class GeneratedVariant {\r\n    isDefault: boolean;\r\n    options: Array<{ name: string; id?: string }>;\r\n    productVariantId?: string;\r\n    enabled: boolean;\r\n    existing: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n\r\n    constructor(config: Partial<GeneratedVariant>) {\r\n        for (const key of Object.keys(config)) {\r\n            this[key] = config[key];\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-editor',\r\n    templateUrl: './product-variants-editor.component.html',\r\n    styleUrls: ['./product-variants-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\r\n    formValueChanged = false;\r\n    generatedVariants: GeneratedVariant[] = [];\r\n    optionGroups: Array<{\r\n        id?: string;\r\n        isNew: boolean;\r\n        name: string;\r\n        values: Array<{\r\n            id?: string;\r\n            name: string;\r\n            locked: boolean;\r\n        }>;\r\n    }>;\r\n    product: GetProductVariantOptions.Product;\r\n    currencyCode: CurrencyCode;\r\n    private languageCode: LanguageCode;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private dataService: DataService,\r\n        private productDetailService: ProductDetailService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.initOptionsAndVariants();\r\n        this.languageCode =\r\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.currencyCode;\r\n        });\r\n    }\r\n\r\n    onFormChanged(variantInfo: GeneratedVariant) {\r\n        this.formValueChanged = true;\r\n        variantInfo.enabled = true;\r\n    }\r\n\r\n    canDeactivate(): boolean {\r\n        return !this.formValueChanged;\r\n    }\r\n\r\n    getVariantsToAdd() {\r\n        return this.generatedVariants.filter(v => !v.existing && v.enabled);\r\n    }\r\n\r\n    getVariantName(variant: GeneratedVariant) {\r\n        return variant.options.length === 0\r\n            ? _('catalog.default-variant')\r\n            : variant.options.map(o => o.name).join(' ');\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({\r\n            isNew: true,\r\n            name: '',\r\n            values: [],\r\n        });\r\n    }\r\n\r\n    generateVariants() {\r\n        const groups = this.optionGroups.map(g => g.values);\r\n        const previousVariants = this.generatedVariants;\r\n        const generatedVariantFactory = (\r\n            isDefault: boolean,\r\n            options: GeneratedVariant['options'],\r\n            existingVariant?: GetProductVariantOptions.Variants,\r\n            prototypeVariant?: GetProductVariantOptions.Variants,\r\n        ): GeneratedVariant => {\r\n            const prototype = this.getVariantPrototype(options, previousVariants);\r\n            return new GeneratedVariant({\r\n                enabled: true,\r\n                existing: !!existingVariant,\r\n                productVariantId: existingVariant?.id,\r\n                isDefault,\r\n                options,\r\n                price: existingVariant?.price ?? prototypeVariant?.price ?? prototype.price,\r\n                sku: existingVariant?.sku ?? prototypeVariant?.sku ?? prototype.sku,\r\n                stock: existingVariant?.stockOnHand ?? prototypeVariant?.stockOnHand ?? prototype.stock,\r\n            });\r\n        };\r\n        this.generatedVariants = groups.length\r\n            ? generateAllCombinations(groups).map(options => {\r\n                  const existingVariant = this.product.variants.find(v =>\r\n                      this.optionsAreEqual(v.options, options),\r\n                  );\r\n                  const prototypeVariant = this.product.variants.find(v =>\r\n                      this.optionsAreSubset(v.options, options),\r\n                  );\r\n                  return generatedVariantFactory(false, options, existingVariant, prototypeVariant);\r\n              })\r\n            : [generatedVariantFactory(true, [], this.product.variants[0])];\r\n    }\r\n\r\n    /**\r\n     * Returns one of the existing variants to base the newly-generated variant's\r\n     * details off.\r\n     */\r\n    private getVariantPrototype(\r\n        options: GeneratedVariant['options'],\r\n        previousVariants: GeneratedVariant[],\r\n    ): Pick<GeneratedVariant, 'sku' | 'price' | 'stock'> {\r\n        const variantsWithSimilarOptions = previousVariants.filter(v =>\r\n            options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)),\r\n        );\r\n        if (variantsWithSimilarOptions.length) {\r\n            return pick(previousVariants[0], ['sku', 'price', 'stock']);\r\n        }\r\n        return {\r\n            sku: '',\r\n            price: 0,\r\n            stock: 0,\r\n        };\r\n    }\r\n\r\n    deleteVariant(id: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-product-variant'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY,\r\n                ),\r\n                switchMap(() => this.reFetchProduct(null)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                    this.initOptionsAndVariants();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'ProductVariant',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    save() {\r\n        const newOptionGroups = this.optionGroups\r\n            .filter(og => og.isNew)\r\n            .map(og => ({\r\n                name: og.name,\r\n                values: [],\r\n            }));\r\n\r\n        this.checkUniqueSkus()\r\n            .pipe(\r\n                mergeMap(() => this.confirmDeletionOfObsoleteVariants()),\r\n                mergeMap(() =>\r\n                    this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode),\r\n                ),\r\n                mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)),\r\n                mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)),\r\n                mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)),\r\n                mergeMap(groups => this.createNewProductVariants(groups)),\r\n                mergeMap(res => this.deleteObsoleteVariants(res.createProductVariants)),\r\n                mergeMap(variants => this.reFetchProduct(variants)),\r\n            )\r\n            .subscribe({\r\n                next: variants => {\r\n                    this.formValueChanged = false;\r\n                    this.notificationService.success(_('catalog.created-new-variants-success'), {\r\n                        count: variants.length,\r\n                    });\r\n                    this.initOptionsAndVariants();\r\n                },\r\n            });\r\n    }\r\n\r\n    private checkUniqueSkus() {\r\n        const withDuplicateSkus = this.generatedVariants.filter((variant, index) => {\r\n            return this.generatedVariants.find(gv => gv.sku.trim() === variant.sku.trim() && gv !== variant);\r\n        });\r\n        if (withDuplicateSkus.length) {\r\n            return this.modalService\r\n                .dialog({\r\n                    title: _('catalog.duplicate-sku-warning'),\r\n                    body: unique(withDuplicateSkus.map(v => `${v.sku}`)).join(', '),\r\n                    buttons: [{ label: _('common.close'), returnValue: false, type: 'primary' }],\r\n                })\r\n                .pipe(mergeMap(res => EMPTY));\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private confirmDeletionOfObsoleteVariants(): Observable<boolean> {\r\n        const obsoleteVariants = this.getObsoleteVariants();\r\n        if (obsoleteVariants.length) {\r\n            return this.modalService\r\n                .fromComponent(ConfirmVariantDeletionDialogComponent, {\r\n                    locals: {\r\n                        variants: obsoleteVariants,\r\n                    },\r\n                })\r\n                .pipe(\r\n                    mergeMap(res => {\r\n                        return res === true ? of(true) : EMPTY;\r\n                    }),\r\n                );\r\n        } else {\r\n            return of(true);\r\n        }\r\n    }\r\n\r\n    private getObsoleteVariants() {\r\n        return this.product.variants.filter(\r\n            variant => !this.generatedVariants.find(gv => gv.productVariantId === variant.id),\r\n        );\r\n    }\r\n\r\n    private hasOnlyDefaultVariant(product: GetProductVariantOptions.Product): boolean {\r\n        return product.variants.length === 1 && product.optionGroups.length === 0;\r\n    }\r\n\r\n    private addOptionGroupsToProduct(\r\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\r\n    ): Observable<CreateProductOptionGroup.CreateProductOptionGroup[]> {\r\n        if (createdOptionGroups.length) {\r\n            return forkJoin(\r\n                createdOptionGroups.map(optionGroup => {\r\n                    return this.dataService.product.addOptionGroupToProduct({\r\n                        productId: this.product.id,\r\n                        optionGroupId: optionGroup.id,\r\n                    });\r\n                }),\r\n            ).pipe(map(() => createdOptionGroups));\r\n        } else {\r\n            return of([]);\r\n        }\r\n    }\r\n\r\n    private addNewOptionsToGroups(\r\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\r\n    ): Observable<string[]> {\r\n        const newOptions: CreateProductOptionInput[] = this.optionGroups\r\n            .map(og => {\r\n                const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);\r\n                const productOptionGroupId = createdGroup ? createdGroup.id : og.id;\r\n                if (!productOptionGroupId) {\r\n                    throw new Error('Could not get a productOptionGroupId');\r\n                }\r\n                return og.values\r\n                    .filter(v => !v.locked)\r\n                    .map(v => ({\r\n                        productOptionGroupId,\r\n                        code: normalizeString(v.name, '-'),\r\n                        translations: [{ name: v.name, languageCode: this.languageCode }],\r\n                    }));\r\n            })\r\n            .reduce((flat, options) => [...flat, ...options], []);\r\n\r\n        const allGroupIds = [\r\n            ...createdOptionGroups.map(g => g.id),\r\n            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),\r\n        ];\r\n\r\n        if (newOptions.length) {\r\n            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(\r\n                map(() => allGroupIds),\r\n            );\r\n        } else {\r\n            return of(allGroupIds);\r\n        }\r\n    }\r\n\r\n    private fetchOptionGroups(groupsIds: string[]): Observable<ProductOptionGroupWithOptionsFragment[]> {\r\n        return forkJoin(\r\n            groupsIds.map(id =>\r\n                this.dataService.product\r\n                    .getProductOptionGroup(id)\r\n                    .mapSingle(data => data.productOptionGroup)\r\n                    .pipe(filter(notNullOrUndefined)),\r\n            ),\r\n        );\r\n    }\r\n\r\n    private createNewProductVariants(groups: ProductOptionGroupWithOptionsFragment[]) {\r\n        const options = groups\r\n            .filter(notNullOrUndefined)\r\n            .map(og => og.options)\r\n            .reduce((flat, o) => [...flat, ...o], []);\r\n        const variants = this.generatedVariants\r\n            .filter(v => v.enabled && !v.existing)\r\n            .map(v => ({\r\n                price: v.price,\r\n                sku: v.sku,\r\n                stock: v.stock,\r\n                optionIds: v.options\r\n                    .map(name => options.find(o => o.name === name.name))\r\n                    .filter(notNullOrUndefined)\r\n                    .map(o => o.id),\r\n            }));\r\n        return this.productDetailService.createProductVariants(\r\n            this.product,\r\n            variants,\r\n            options,\r\n            this.languageCode,\r\n        );\r\n    }\r\n\r\n    private deleteObsoleteVariants<T>(input: T): Observable<T> {\r\n        const obsoleteVariants = this.getObsoleteVariants();\r\n        if (obsoleteVariants.length) {\r\n            const deleteOperations = obsoleteVariants.map(v =>\r\n                this.dataService.product.deleteProductVariant(v.id).pipe(map(() => input)),\r\n            );\r\n            return forkJoin(...deleteOperations);\r\n        } else {\r\n            return of(input);\r\n        }\r\n    }\r\n\r\n    private reFetchProduct<T>(input: T): Observable<T> {\r\n        // Re-fetch the Product to force an update to the view.\r\n        const id = this.route.snapshot.paramMap.get('id');\r\n        if (id) {\r\n            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));\r\n        } else {\r\n            return of(input);\r\n        }\r\n    }\r\n\r\n    initOptionsAndVariants() {\r\n        this.dataService.product\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id')!)\r\n            // tslint:disable-next-line:no-non-null-assertion\r\n            .mapSingle(({ product }) => product!)\r\n            .subscribe(p => {\r\n                this.product = p;\r\n                this.optionGroups = p.optionGroups.map(og => {\r\n                    return {\r\n                        id: og.id,\r\n                        isNew: false,\r\n                        name: og.name,\r\n                        values: og.options.map(o => ({\r\n                            id: o.id,\r\n                            name: o.name,\r\n                            locked: true,\r\n                        })),\r\n                    };\r\n                });\r\n                this.generateVariants();\r\n            });\r\n    }\r\n\r\n    private optionsAreEqual(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\r\n        return this.toOptionString(a) === this.toOptionString(b);\r\n    }\r\n\r\n    private optionsAreSubset(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\r\n        return this.toOptionString(b).includes(this.toOptionString(a));\r\n    }\r\n\r\n    private toOptionString(o: Array<{ name: string }>): string {\r\n        return o\r\n            .map(x => x.name)\r\n            .sort()\r\n            .join('|');\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Asset, AssetType, BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AssetResolver extends BaseEntityResolver<Asset.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Asset' as const,\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                type: AssetType.IMAGE,\r\n                fileSize: 0,\r\n                mimeType: '',\r\n                width: 0,\r\n                height: 0,\r\n                source: '',\r\n                preview: '',\r\n                focalPoint: null,\r\n            },\r\n            id => dataService.product.getAsset(id).mapStream(data => data.asset),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, Collection, DataService, getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CollectionResolver extends BaseEntityResolver<Collection.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Collection' as 'Collection',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                slug: '',\r\n                isPrivate: false,\r\n                description: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                translations: [],\r\n                filters: [],\r\n                parent: {} as any,\r\n                children: null,\r\n            },\r\n            id => dataService.collection.getCollection(id).mapStream(data => data.collection),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { FacetWithValues } from '@vendure/admin-ui/core';\r\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FacetResolver extends BaseEntityResolver<FacetWithValues.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Facet' as 'Facet',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                isPrivate: false,\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                code: '',\r\n                translations: [],\r\n                values: [],\r\n            },\r\n            (id) => dataService.facet.getFacet(id).mapStream((data) => data.facet),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n    BaseEntityResolver,\r\n    DataService,\r\n    getDefaultUiLanguage,\r\n    GetProductWithVariants,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductResolver extends BaseEntityResolver<GetProductWithVariants.Product> {\r\n    constructor(dataService: DataService, router: Router) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as 'Product',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                enabled: true,\r\n                languageCode: getDefaultUiLanguage(),\r\n                name: '',\r\n                slug: '',\r\n                featuredAsset: null,\r\n                assets: [],\r\n                description: '',\r\n                translations: [],\r\n                optionGroups: [],\r\n                facetValues: [],\r\n                variantList: { items: [], totalItems: 0 },\r\n                channels: [],\r\n            },\r\n            id =>\r\n                dataService.product\r\n                    .getProduct(id, { take: 10 })\r\n                    .refetchOnChannelChange()\r\n                    .mapStream(data => data.product),\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { GetProductVariantOptions } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptions.Product> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Product' as 'Product',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                optionGroups: [],\r\n                variants: [],\r\n            },\r\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    Asset,\r\n    CanDeactivateDetailGuard,\r\n    Collection,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    FacetWithValues,\r\n    GetProductWithVariants,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { AssetResolver } from './providers/routing/asset-resolver';\r\nimport { CollectionResolver } from './providers/routing/collection-resolver';\r\nimport { FacetResolver } from './providers/routing/facet-resolver';\r\nimport { ProductResolver } from './providers/routing/product-resolver';\r\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\r\n\r\nexport const catalogRoutes: Route[] = [\r\n    {\r\n        path: 'products',\r\n        component: ProductListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.products'),\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id',\r\n        component: ProductDetailComponent,\r\n        resolve: createResolveData(ProductResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id/manage-variants',\r\n        component: ProductVariantsEditorComponent,\r\n        resolve: createResolveData(ProductVariantsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productVariantEditorBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'products/:id/options',\r\n        component: ProductOptionsEditorComponent,\r\n        resolve: createResolveData(ProductVariantsResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: productOptionsEditorBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'facets',\r\n        component: FacetListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.facets'),\r\n        },\r\n    },\r\n    {\r\n        path: 'facets/:id',\r\n        component: FacetDetailComponent,\r\n        resolve: createResolveData(FacetResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: facetBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'collections',\r\n        component: CollectionListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.collections'),\r\n        },\r\n    },\r\n    {\r\n        path: 'collections/:id',\r\n        component: CollectionDetailComponent,\r\n        resolve: createResolveData(CollectionResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: collectionBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: 'assets',\r\n        component: AssetListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.assets'),\r\n        },\r\n    },\r\n    {\r\n        path: 'assets/:id',\r\n        component: AssetDetailComponent,\r\n        resolve: createResolveData(AssetResolver),\r\n        data: {\r\n            breadcrumb: assetBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function productBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<GetProductWithVariants.Product>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.products',\r\n        getName: product => product.name,\r\n        route: 'products',\r\n    });\r\n}\r\n\r\nexport function productVariantEditorBreadcrumb(data: any, params: any) {\r\n    return data.entity.pipe(\r\n        map((entity: any) => {\r\n            return [\r\n                {\r\n                    label: _('breadcrumb.products'),\r\n                    link: ['../', 'products'],\r\n                },\r\n                {\r\n                    label: `${entity.name}`,\r\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\r\n                },\r\n                {\r\n                    label: _('breadcrumb.manage-variants'),\r\n                    link: ['manage-variants'],\r\n                },\r\n            ];\r\n        }),\r\n    );\r\n}\r\n\r\nexport function productOptionsEditorBreadcrumb(data: any, params: any) {\r\n    return data.entity.pipe(\r\n        map((entity: any) => {\r\n            return [\r\n                {\r\n                    label: _('breadcrumb.products'),\r\n                    link: ['../', 'products'],\r\n                },\r\n                {\r\n                    label: `${entity.name}`,\r\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\r\n                },\r\n                {\r\n                    label: _('breadcrumb.product-options'),\r\n                    link: ['options'],\r\n                },\r\n            ];\r\n        }),\r\n    );\r\n}\r\n\r\nexport function facetBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<FacetWithValues.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.facets',\r\n        getName: facet => facet.name,\r\n        route: 'facets',\r\n    });\r\n}\r\n\r\nexport function collectionBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Collection.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.collections',\r\n        getName: collection => collection.name,\r\n        route: 'collections',\r\n    });\r\n}\r\n\r\nexport function assetBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Asset.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.assets',\r\n        getName: asset => asset.name,\r\n        route: 'assets',\r\n    });\r\n}\r\n","<div\r\n    cdkDropList\r\n    class=\"tree-node\"\r\n    #dropList\r\n    [cdkDropListData]=\"collectionTree\"\r\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\r\n    (cdkDropListDropped)=\"drop($event)\"\r\n>\r\n    <div\r\n        class=\"collection\"\r\n        [class.private]=\"collection.isPrivate\"\r\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\r\n        cdkDrag\r\n        [cdkDragData]=\"collection\"\r\n    >\r\n        <div\r\n            class=\"collection-detail\"\r\n            [ngClass]=\"'depth-' + depth\"\r\n            [class.active]=\"collection.id === activeCollectionId\"\r\n        >\r\n            <div class=\"name\">\r\n                <button\r\n                    class=\"icon-button folder-button\"\r\n                    [disabled]=\"expandAll\"\r\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\r\n                    (click)=\"collection.expanded = !collection.expanded\"\r\n                >\r\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\r\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\r\n                </button>\r\n                <ng-template #folderSpacer>\r\n                    <div class=\"folder-button-spacer\"></div>\r\n                </ng-template>\r\n                {{ collection.name }}\r\n            </div>\r\n            <div class=\"flex-spacer\"></div>\r\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\r\n            <a\r\n                class=\"btn btn-link btn-sm\"\r\n                [routerLink]=\"['./', { contents: collection.id }]\"\r\n                queryParamsHandling=\"preserve\"\r\n            >\r\n                <clr-icon shape=\"view-list\"></clr-icon>\r\n                {{ 'catalog.view-contents' | translate }}\r\n            </a>\r\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\r\n                <clr-icon shape=\"edit\"></clr-icon>\r\n                {{ 'common.edit' | translate }}\r\n            </a>\r\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\r\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\r\n            </div>\r\n            <vdr-dropdown>\r\n                <button class=\"icon-button\" vdrDropdownTrigger (click)=\"getMoveListItems(collection)\">\r\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <a\r\n                        class=\"dropdown-item\"\r\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\r\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\r\n                    >\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'catalog.create-new-collection' | translate }}\r\n                    </a>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\r\n                        (click)=\"moveUp(collection, i)\"\r\n                    >\r\n                        <clr-icon shape=\"caret up\"></clr-icon>\r\n                        {{ 'catalog.move-up' | translate }}\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        [disabled]=\"\r\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\r\n                        \"\r\n                        (click)=\"moveDown(collection, i)\"\r\n                    >\r\n                        <clr-icon shape=\"caret down\"></clr-icon>\r\n                        {{ 'catalog.move-down' | translate }}\r\n                    </button>\r\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\r\n                    <button\r\n                        type=\"button\"\r\n                        vdrDropdownItem\r\n                        *ngFor=\"let item of moveListItems\"\r\n                        (click)=\"move(collection, item.id)\"\r\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\r\n                    >\r\n                        <div class=\"move-to-item\">\r\n                            <div class=\"move-icon\">\r\n                                <clr-icon shape=\"child-arrow\"></clr-icon>\r\n                            </div>\r\n                            <div class=\"path\">\r\n                                {{ item.path }}\r\n                            </div>\r\n                        </div>\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        class=\"button\"\r\n                        vdrDropdownItem\r\n                        (click)=\"delete(collection.id)\"\r\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </div>\r\n        <vdr-collection-tree-node\r\n            *ngIf=\"collection.expanded || expandAll\"\r\n            [expandAll]=\"expandAll\"\r\n            [collectionTree]=\"collection\"\r\n            [activeCollectionId]=\"activeCollectionId\"\r\n        ></vdr-collection-tree-node>\r\n    </div>\r\n</div>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Optional,\r\n    SimpleChanges,\r\n    SkipSelf,\r\n} from '@angular/core';\r\nimport { DataService, Permission } from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\n\r\nimport { RootNode, TreeNode } from './array-to-tree';\r\nimport { CollectionPartial, CollectionTreeComponent } from './collection-tree.component';\r\n\r\n@Component({\r\n    selector: 'vdr-collection-tree-node',\r\n    templateUrl: './collection-tree-node.component.html',\r\n    styleUrls: ['./collection-tree-node.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges {\r\n    depth = 0;\r\n    parentName: string;\r\n    @Input() collectionTree: TreeNode<CollectionPartial>;\r\n    @Input() activeCollectionId: string;\r\n    @Input() expandAll = false;\r\n    hasUpdatePermission$: Observable<boolean>;\r\n    hasDeletePermission$: Observable<boolean>;\r\n    moveListItems: Array<{ path: string; id: string }> = [];\r\n\r\n    constructor(\r\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\r\n        private root: CollectionTreeComponent,\r\n        private dataService: DataService,\r\n    ) {\r\n        if (parent) {\r\n            this.depth = parent.depth + 1;\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.parentName = this.collectionTree.name || '<root>';\r\n        const permissions$ = this.dataService.client\r\n            .userStatus()\r\n            .mapStream(data => data.userStatus.permissions)\r\n            .pipe(shareReplay(1));\r\n        this.hasUpdatePermission$ = permissions$.pipe(\r\n            map(\r\n                perms =>\r\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\r\n            ),\r\n        );\r\n        this.hasDeletePermission$ = permissions$.pipe(\r\n            map(\r\n                perms =>\r\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\r\n            ),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const expandAllChange = changes['expandAll'];\r\n        if (expandAllChange) {\r\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\r\n                this.collectionTree.children.forEach(c => (c.expanded = false));\r\n            }\r\n        }\r\n    }\r\n\r\n    trackByFn(index: number, item: CollectionPartial) {\r\n        return item.id;\r\n    }\r\n\r\n    getMoveListItems(collection: CollectionPartial) {\r\n        this.moveListItems = this.root.getMoveListItems(collection);\r\n    }\r\n\r\n    move(collection: CollectionPartial, parentId: string) {\r\n        this.root.onMove({\r\n            index: 0,\r\n            parentId,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    moveUp(collection: CollectionPartial, currentIndex: number) {\r\n        if (!collection.parent) {\r\n            return;\r\n        }\r\n        this.root.onMove({\r\n            index: currentIndex - 1,\r\n            parentId: collection.parent.id,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    moveDown(collection: CollectionPartial, currentIndex: number) {\r\n        if (!collection.parent) {\r\n            return;\r\n        }\r\n        this.root.onMove({\r\n            index: currentIndex + 1,\r\n            parentId: collection.parent.id,\r\n            collectionId: collection.id,\r\n        });\r\n    }\r\n\r\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\r\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\r\n        this.root.onDrop(event);\r\n    }\r\n\r\n    delete(id: string) {\r\n        this.root.onDelete(id);\r\n    }\r\n}\r\n","<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\r\n    <div class=\"name\">\r\n        <label>{{ 'catalog.option' | translate }}</label>\r\n        <input\r\n            placeholder=\"e.g. Size\"\r\n            clrInput\r\n            [(ngModel)]=\"group.name\"\r\n            name=\"name\"\r\n            required\r\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\r\n        />\r\n    </div>\r\n    <div class=\"values\">\r\n        <label>{{ 'catalog.option-values' | translate }}</label>\r\n        <vdr-option-value-input\r\n            #optionValueInputComponent\r\n            [(ngModel)]=\"group.values\"\r\n            (ngModelChange)=\"generateVariants()\"\r\n            [groupName]=\"group.name\"\r\n            [disabled]=\"group.name === ''\"\r\n        ></vdr-option-value-input>\r\n    </div>\r\n    <div class=\"remove-group\">\r\n        <button\r\n            class=\"btn btn-icon btn-warning-outline\"\r\n            [title]=\"'catalog.remove-option' | translate\"\r\n            (click)=\"removeOption(group.name)\"\r\n        >\r\n            <clr-icon shape=\"trash\"></clr-icon>\r\n        </button>\r\n    </div>\r\n</div>\r\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOption()\">\r\n    <clr-icon shape=\"plus\"></clr-icon>\r\n    {{ 'catalog.add-option' | translate }}\r\n</button>\r\n\r\n<div class=\"variants-preview\">\r\n    <table class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\r\n                <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\r\n                <th>{{ 'catalog.sku' | translate }}</th>\r\n                <th>{{ 'catalog.price' | translate }}</th>\r\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n            </tr>\r\n        </thead>\r\n        <tr\r\n            *ngFor=\"let variant of variants; trackBy: trackByFn\"\r\n            [class.disabled]=\"!variantFormValues[variant.id].enabled\"\r\n        >\r\n            <td *ngIf=\"1 < variants.length\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    (change)=\"onFormChange()\"\r\n                    [(ngModel)]=\"variantFormValues[variant.id].enabled\"\r\n                    clrCheckbox\r\n                />\r\n            </td>\r\n            <td *ngIf=\"1 < variants.length\">\r\n                {{ variant.values.join(' ') }}\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"text\"\r\n                        (change)=\"onFormChange()\"\r\n                        [(ngModel)]=\"variantFormValues[variant.id].sku\"\r\n                        [placeholder]=\"'catalog.sku' | translate\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <vdr-currency-input\r\n                        clrInput\r\n                        [(ngModel)]=\"variantFormValues[variant.id].price\"\r\n                        (ngModelChange)=\"onFormChange()\"\r\n                        [currencyCode]=\"currencyCode\"\r\n                    ></vdr-currency-input>\r\n                </clr-input-container>\r\n            </td>\r\n            <td>\r\n                <clr-input-container>\r\n                    <input\r\n                        clrInput\r\n                        type=\"number\"\r\n                        [(ngModel)]=\"variantFormValues[variant.id].stock\"\r\n                        (change)=\"onFormChange()\"\r\n                        min=\"0\"\r\n                        step=\"1\"\r\n                    />\r\n                </clr-input-container>\r\n            </td>\r\n        </tr>\r\n    </table>\r\n</div>\r\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\r\n\r\nimport { CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\r\n\r\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\r\nexport type CreateVariantValues = {\r\n    optionValues: string[];\r\n    enabled: boolean;\r\n    sku: string;\r\n    price: number;\r\n    stock: number;\r\n};\r\nexport type CreateProductVariantsConfig = {\r\n    groups: Array<{ name: string; values: string[] }>;\r\n    variants: CreateVariantValues[];\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-generate-product-variants',\r\n    templateUrl: './generate-product-variants.component.html',\r\n    styleUrls: ['./generate-product-variants.component.scss'],\r\n})\r\nexport class GenerateProductVariantsComponent implements OnInit {\r\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\r\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\r\n    currencyCode: CurrencyCode;\r\n    variants: Array<{ id: string; values: string[] }>;\r\n    variantFormValues: { [id: string]: CreateVariantValues } = {};\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\r\n            this.currencyCode = data.activeChannel.currencyCode;\r\n        });\r\n\r\n        this.generateVariants();\r\n    }\r\n\r\n    addOption() {\r\n        this.optionGroups.push({ name: '', values: [] });\r\n    }\r\n\r\n    removeOption(name: string) {\r\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\r\n        this.generateVariants();\r\n    }\r\n\r\n    generateVariants() {\r\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\r\n        const groups = totalValuesCount\r\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\r\n            : [[DEFAULT_VARIANT_CODE]];\r\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\r\n\r\n        this.variants.forEach(variant => {\r\n            if (!this.variantFormValues[variant.id]) {\r\n                this.variantFormValues[variant.id] = {\r\n                    optionValues: variant.values,\r\n                    enabled: true,\r\n                    price: this.copyFromDefault(variant.id, 'price', 0),\r\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\r\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\r\n                };\r\n            }\r\n        });\r\n        this.onFormChange();\r\n    }\r\n\r\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\r\n        return variant.values.join('|');\r\n    }\r\n\r\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        optionValueInputComponent.focus();\r\n    }\r\n\r\n    onFormChange() {\r\n        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);\r\n        this.variantsChange.emit({\r\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\r\n            variants: variantsToCreate,\r\n        });\r\n    }\r\n\r\n    private copyFromDefault<T extends keyof CreateVariantValues>(\r\n        variantId: string,\r\n        prop: T,\r\n        value: CreateVariantValues[T],\r\n    ): CreateVariantValues[T] {\r\n        return variantId !== DEFAULT_VARIANT_CODE\r\n            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]\r\n            : value;\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\r\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\r\n    <input\r\n        id=\"name\"\r\n        type=\"text\"\r\n        #nameInput=\"ngModel\"\r\n        [(ngModel)]=\"name\"\r\n        required\r\n        (input)=\"updateCode($event.target.value)\"\r\n    />\r\n</vdr-form-field>\r\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\r\n</vdr-form-field>\r\n<clr-checkbox-wrapper>\r\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\r\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\r\n</clr-checkbox-wrapper>\r\n<section *ngIf=\"customFields.length\">\r\n    <label>{{ 'common.custom-fields' | translate }}</label>\r\n    <vdr-tabbed-custom-fields\r\n        entityName=\"ProductOption\"\r\n        [customFields]=\"customFields\"\r\n        [customFieldsFormGroup]=\"customFieldsForm\"\r\n        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\r\n    ></vdr-tabbed-custom-fields>\r\n</section>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"update()\"\r\n        [disabled]=\"\r\n            nameInput.invalid ||\r\n            codeInput.invalid ||\r\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\r\n        \"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'catalog.update-product-option' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n    CustomFieldConfig,\r\n    LanguageCode,\r\n    ProductVariant,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { createUpdatedTranslatable } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\r\n\r\n@Component({\r\n    selector: 'vdr-update-product-option-dialog',\r\n    templateUrl: './update-product-option-dialog.component.html',\r\n    styleUrls: ['./update-product-option-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UpdateProductOptionDialogComponent\r\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit {\r\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\r\n    updateVariantName = true;\r\n    // Provided by caller\r\n    productOption: ProductVariant.Options;\r\n    activeLanguage: LanguageCode;\r\n    name: string;\r\n    code: string;\r\n    customFields: CustomFieldConfig[];\r\n    codeInputTouched = false;\r\n    customFieldsForm: FormGroup;\r\n\r\n    ngOnInit(): void {\r\n        const currentTranslation = this.productOption.translations.find(\r\n            t => t.languageCode === this.activeLanguage,\r\n        );\r\n        this.name = currentTranslation?.name ?? '';\r\n        this.code = this.productOption.code;\r\n        this.customFieldsForm = new FormGroup({});\r\n        if (this.customFields) {\r\n            const cfCurrentTranslation =\r\n                (currentTranslation && (currentTranslation as any).customFields) || {};\r\n\r\n            for (const fieldDef of this.customFields) {\r\n                const key = fieldDef.name;\r\n                const value =\r\n                    fieldDef.type === 'localeString'\r\n                        ? cfCurrentTranslation[key]\r\n                        : (this.productOption as any).customFields[key];\r\n                this.customFieldsForm.addControl(fieldDef.name, new FormControl(value));\r\n            }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        const result = createUpdatedTranslatable({\r\n            translatable: this.productOption,\r\n            languageCode: this.activeLanguage,\r\n            updatedFields: {\r\n                code: this.code,\r\n                name: this.name,\r\n                customFields: this.customFieldsForm.value,\r\n            },\r\n            customFieldConfig: this.customFields,\r\n            defaultTranslation: {\r\n                languageCode: this.activeLanguage,\r\n                name: '',\r\n            },\r\n        });\r\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    updateCode(nameValue: string) {\r\n        if (!this.codeInputTouched && !this.productOption.code) {\r\n            this.code = normalizeString(nameValue, '-');\r\n        }\r\n    }\r\n}\r\n","<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\r\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\r\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\r\n</div>\r\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\r\n    {{\r\n        'catalog.price-with-tax-in-default-zone'\r\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\r\n    }}\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-variant-price-detail',\r\n    templateUrl: './variant-price-detail.component.html',\r\n    styleUrls: ['./variant-price-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\r\n    @Input() priceIncludesTax: boolean;\r\n    @Input() price: number;\r\n    @Input() currencyCode: string;\r\n    @Input() taxCategoryId: string;\r\n\r\n    grossPrice$: Observable<number>;\r\n    taxRate$: Observable<number>;\r\n\r\n    private priceChange$ = new BehaviorSubject<number>(0);\r\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\r\n\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit() {\r\n        const taxRates$ = this.dataService.settings\r\n            .getTaxRatesSimple(999, 0, 'cache-first')\r\n            .mapStream(data => data.taxRates.items);\r\n        const activeChannel$ = this.dataService.settings\r\n            .getActiveChannel('cache-first')\r\n            .refetchOnChannelChange()\r\n            .mapStream(data => data.activeChannel);\r\n\r\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\r\n            map(([channel, taxRates, taxCategoryId]) => {\r\n                const defaultTaxZone = channel.defaultTaxZone;\r\n                if (!defaultTaxZone) {\r\n                    return 0;\r\n                }\r\n                const applicableRate = taxRates.find(\r\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\r\n                );\r\n\r\n                if (!applicableRate) {\r\n                    return 0;\r\n                }\r\n                return applicableRate.value;\r\n            }),\r\n        );\r\n\r\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\r\n            map(([taxRate, price]) => {\r\n                return Math.round(price * ((100 + taxRate) / 100));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if ('price' in changes) {\r\n            this.priceChange$.next(changes.price.currentValue);\r\n        }\r\n        if ('taxCategoryId' in changes) {\r\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\r\n        }\r\n    }\r\n}\r\n","<div class=\"variants-list\">\r\n    <div\r\n        class=\"variant-container card\"\r\n        *ngFor=\"\r\n            let variant of variants | paginate: paginationConfig || { itemsPerPage: 10, currentPage: 1 };\r\n            trackBy: trackById;\r\n            let i = index\r\n        \"\r\n        [class.disabled]=\"!formGroupMap.get(variant.id)?.get('enabled')?.value\"\r\n    >\r\n        <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\r\n            <div class=\"card-block header-row\">\r\n                <div class=\"details\">\r\n                    <vdr-title-input class=\"sku\" [readonly]=\"!(updatePermission | hasPermission)\">\r\n                        <clr-input-container>\r\n                            <input\r\n                                clrInput\r\n                                type=\"text\"\r\n                                formControlName=\"sku\"\r\n                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                [placeholder]=\"'catalog.sku' | translate\"\r\n                            />\r\n                        </clr-input-container>\r\n                    </vdr-title-input>\r\n                    <vdr-title-input class=\"name\" [readonly]=\"!(updatePermission | hasPermission)\">\r\n                        <clr-input-container>\r\n                            <input\r\n                                clrInput\r\n                                type=\"text\"\r\n                                formControlName=\"name\"\r\n                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                [placeholder]=\"'common.name' | translate\"\r\n                            />\r\n                        </clr-input-container>\r\n                    </vdr-title-input>\r\n                </div>\r\n                <div class=\"right-controls\">\r\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermission\">\r\n                        <input type=\"checkbox\" clrToggle name=\"enabled\" formControlName=\"enabled\" />\r\n                        <label>{{ 'common.enabled' | translate }}</label>\r\n                    </clr-toggle-wrapper>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <div class=\"variant-body\">\r\n                    <div class=\"assets\">\r\n                        <vdr-assets\r\n                            [compact]=\"true\"\r\n                            [assets]=\"pendingAssetChanges[variant.id]?.assets || variant.assets\"\r\n                            [featuredAsset]=\"\r\n                                pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset\r\n                            \"\r\n                            [updatePermissions]=\"updatePermission\"\r\n                            (change)=\"onAssetChange(variant.id, $event)\"\r\n                        ></vdr-assets>\r\n                    </div>\r\n                    <div class=\"variant-form-inputs\">\r\n                        <div class=\"standard-fields\">\r\n                            <div class=\"variant-form-input-row\">\r\n                                <div class=\"tax-category\">\r\n                                    <clr-select-container\r\n                                        *vdrIfPermissions=\"updatePermission; else taxCategoryLabel\"\r\n                                    >\r\n                                        <label>{{ 'catalog.tax-category' | translate }}</label>\r\n                                        <select clrSelect name=\"options\" formControlName=\"taxCategoryId\">\r\n                                            <option\r\n                                                *ngFor=\"let taxCategory of taxCategories\"\r\n                                                [value]=\"taxCategory.id\"\r\n                                            >\r\n                                                {{ taxCategory.name }}\r\n                                            </option>\r\n                                        </select>\r\n                                    </clr-select-container>\r\n                                    <ng-template #taxCategoryLabel>\r\n                                        <label class=\"clr-control-label\">{{\r\n                                            'catalog.tax-category' | translate\r\n                                        }}</label>\r\n                                        <div class=\"tax-category-label\">\r\n                                            {{ getTaxCategoryName(formGroup) }}\r\n                                        </div>\r\n                                    </ng-template>\r\n                                </div>\r\n                                <div class=\"price\">\r\n                                    <clr-input-container>\r\n                                        <label>{{ 'catalog.price' | translate }}</label>\r\n                                        <vdr-currency-input\r\n                                            *ngIf=\"!channelPriceIncludesTax\"\r\n                                            clrInput\r\n                                            [currencyCode]=\"variant.currencyCode\"\r\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                            formControlName=\"price\"\r\n                                        ></vdr-currency-input>\r\n                                        <vdr-currency-input\r\n                                            *ngIf=\"channelPriceIncludesTax\"\r\n                                            clrInput\r\n                                            [currencyCode]=\"variant.currencyCode\"\r\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                            formControlName=\"priceWithTax\"\r\n                                        ></vdr-currency-input>\r\n                                    </clr-input-container>\r\n                                </div>\r\n                                <vdr-variant-price-detail\r\n                                    [price]=\"formGroup.get('price')!.value\"\r\n                                    [currencyCode]=\"variant.currencyCode\"\r\n                                    [priceIncludesTax]=\"channelPriceIncludesTax\"\r\n                                    [taxCategoryId]=\"formGroup.get('taxCategoryId')!.value\"\r\n                                ></vdr-variant-price-detail>\r\n                            </div>\r\n                            <div class=\"variant-form-input-row\">\r\n                                <clr-select-container *vdrIfPermissions=\"updatePermission\">\r\n                                    <label\r\n                                        >{{ 'catalog.track-inventory' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.track-inventory-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip>\r\n                                    </label>\r\n                                    <select clrSelect name=\"options\" formControlName=\"trackInventory\">\r\n                                        <option [value]=\"GlobalFlag.TRUE\">\r\n                                            {{ 'catalog.track-inventory-true' | translate }}\r\n                                        </option>\r\n                                        <option [value]=\"GlobalFlag.FALSE\">\r\n                                            {{ 'catalog.track-inventory-false' | translate }}\r\n                                        </option>\r\n                                        <option [value]=\"GlobalFlag.INHERIT\">\r\n                                            {{ 'catalog.track-inventory-inherit' | translate }}\r\n                                        </option>\r\n                                    </select>\r\n                                </clr-select-container>\r\n                                <clr-input-container>\r\n                                    <label\r\n                                        >{{ 'catalog.stock-on-hand' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-on-hand-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <input\r\n                                        [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\r\n                                        clrInput\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        step=\"1\"\r\n                                        formControlName=\"stockOnHand\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                        [vdrDisabled]=\"inventoryIsNotTracked(formGroup)\"\r\n                                    />\r\n                                </clr-input-container>\r\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.stock-allocated' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-allocated-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"value\">\r\n                                        {{ variant.stockAllocated }}\r\n                                    </div>\r\n                                </div>\r\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.stock-saleable' | translate }}\r\n                                        <vdr-help-tooltip\r\n                                            [content]=\"'catalog.stock-saleable-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"value\">\r\n                                        {{ getSaleableStockLevel(variant) }}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"variant-form-input-row\">\r\n                                <div\r\n                                    class=\"out-of-stock-threshold-wrapper\"\r\n                                    [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\r\n                                >\r\n                                    <label class=\"clr-control-label\"\r\n                                        >{{ 'catalog.out-of-stock-threshold' | translate\r\n                                        }}<vdr-help-tooltip\r\n                                            [content]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\r\n                                        ></vdr-help-tooltip\r\n                                    ></label>\r\n                                    <div class=\"flex\">\r\n                                        <clr-input-container>\r\n                                            <input\r\n                                                clrInput\r\n                                                type=\"number\"\r\n                                                [formControl]=\"formGroup.get('outOfStockThreshold')\"\r\n                                                [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                                [vdrDisabled]=\"\r\n                                                    formGroup.get('useGlobalOutOfStockThreshold')?.value !==\r\n                                                        false || inventoryIsNotTracked(formGroup)\r\n                                                \"\r\n                                            />\r\n                                        </clr-input-container>\r\n                                        <clr-toggle-wrapper>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                clrToggle\r\n                                                name=\"useGlobalOutOfStockThreshold\"\r\n                                                formControlName=\"useGlobalOutOfStockThreshold\"\r\n                                                [vdrDisabled]=\"\r\n                                                    !(updatePermission | hasPermission) ||\r\n                                                    inventoryIsNotTracked(formGroup)\r\n                                                \"\r\n                                            />\r\n                                            <label\r\n                                                >{{ 'catalog.use-global-value' | translate }} ({{\r\n                                                    globalOutOfStockThreshold\r\n                                                }})</label\r\n                                            >\r\n                                        </clr-toggle-wrapper>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"custom-fields\">\r\n                            <div class=\"variant-form-input-row\">\r\n                                <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\r\n                                    <vdr-tabbed-custom-fields\r\n                                        entityName=\"ProductVariant\"\r\n                                        [customFields]=\"customFields\"\r\n                                        [compact]=\"true\"\r\n                                        [customFieldsFormGroup]=\"formGroup.get('customFields')\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                    ></vdr-tabbed-custom-fields>\r\n                                </section>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-block\">\r\n                <div class=\"options-facets\">\r\n                    <vdr-entity-info [entity]=\"variant\"></vdr-entity-info>\r\n                    <div *ngIf=\"variant.options.length\">\r\n                        <div class=\"options\">\r\n                            <vdr-chip\r\n                                *ngFor=\"let option of variant.options | sort: 'groupId'\"\r\n                                [colorFrom]=\"optionGroupName(option.groupId)\"\r\n                                [invert]=\"true\"\r\n                                (iconClick)=\"editOption(option)\"\r\n                                [icon]=\"(updatePermission | hasPermission) && 'pencil'\"\r\n                            >\r\n                                <span class=\"option-group-name\">{{ optionGroupName(option.groupId) }}</span>\r\n                                {{ optionName(option) }}\r\n                            </vdr-chip>\r\n                            <a [routerLink]=\"['./', 'options']\" class=\"btn btn-link btn-sm\"\r\n                                >{{ 'catalog.edit-options' | translate }}...</a\r\n                            >\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <div class=\"facets\">\r\n                        <vdr-facet-value-chip\r\n                            *ngFor=\"let facetValue of existingFacetValues(variant)\"\r\n                            [facetValue]=\"facetValue\"\r\n                            [removable]=\"updatePermission | hasPermission\"\r\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\r\n                        ></vdr-facet-value-chip>\r\n                        <vdr-facet-value-chip\r\n                            *ngFor=\"let facetValue of pendingFacetValues(variant)\"\r\n                            [facetValue]=\"facetValue\"\r\n                            [removable]=\"updatePermission | hasPermission\"\r\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\r\n                        ></vdr-facet-value-chip>\r\n                        <button\r\n                            *vdrIfPermissions=\"updatePermission\"\r\n                            class=\"btn btn-sm btn-secondary\"\r\n                            (click)=\"selectFacetValueClick.emit([variant.id])\"\r\n                        >\r\n                            <clr-icon shape=\"plus\"></clr-icon>\r\n                            {{ 'catalog.add-facets' | translate }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ng-container *vdrIfMultichannel>\r\n                <div class=\"card-block\" *vdrIfDefaultChannelActive>\r\n                    <div class=\"flex channel-assignment\">\r\n                        <ng-container *ngFor=\"let channel of variant.channels\">\r\n                            <vdr-chip\r\n                                *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                icon=\"times-circle\"\r\n                                [title]=\"'catalog.remove-from-channel' | translate\"\r\n                                (iconClick)=\"\r\n                                    removeFromChannel.emit({ channelId: channel.id, variant: variant })\r\n                                \"\r\n                            >\r\n                                <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                                {{ channel.code | channelCodeToLabel }}\r\n                            </vdr-chip>\r\n                        </ng-container>\r\n                        <button class=\"btn btn-sm\" (click)=\"assignToChannel.emit(variant)\">\r\n                            <clr-icon shape=\"layers\"></clr-icon>\r\n                            {{ 'catalog.assign-to-channel' | translate }}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { FormArray, FormGroup } from '@angular/forms';\r\nimport {\r\n    CustomFieldConfig,\r\n    DataService,\r\n    FacetValue,\r\n    FacetWithValues,\r\n    flattenFacetValues,\r\n    GlobalFlag,\r\n    LanguageCode,\r\n    ModalService,\r\n    Permission,\r\n    ProductDetail,\r\n    ProductOptionFragment,\r\n    ProductVariant,\r\n    TaxCategory,\r\n    UpdateProductOptionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\r\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\nimport { AssetChange } from '../assets/assets.component';\r\nimport {\r\n    PaginationConfig,\r\n    SelectedAssets,\r\n    VariantFormValue,\r\n} from '../product-detail/product-detail.component';\r\nimport { UpdateProductOptionDialogComponent } from '../update-product-option-dialog/update-product-option-dialog.component';\r\n\r\nexport interface VariantAssetChange extends AssetChange {\r\n    variantId: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-list',\r\n    templateUrl: './product-variants-list.component.html',\r\n    styleUrls: ['./product-variants-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductVariantsListComponent implements OnChanges, OnInit, OnDestroy {\r\n    @Input('productVariantsFormArray') formArray: FormArray;\r\n    @Input() variants: ProductVariant.Fragment[];\r\n    @Input() paginationConfig: PaginationConfig;\r\n    @Input() channelPriceIncludesTax: boolean;\r\n    @Input() taxCategories: TaxCategory[];\r\n    @Input() facets: FacetWithValues.Fragment[];\r\n    @Input() optionGroups: ProductDetail.OptionGroups[];\r\n    @Input() customFields: CustomFieldConfig[];\r\n    @Input() customOptionFields: CustomFieldConfig[];\r\n    @Input() activeLanguage: LanguageCode;\r\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\r\n    @Output() assignToChannel = new EventEmitter<ProductVariant.Fragment>();\r\n    @Output() removeFromChannel = new EventEmitter<{\r\n        channelId: string;\r\n        variant: ProductVariant.Fragment;\r\n    }>();\r\n    @Output() assetChange = new EventEmitter<VariantAssetChange>();\r\n    @Output() selectionChange = new EventEmitter<string[]>();\r\n    @Output() selectFacetValueClick = new EventEmitter<string[]>();\r\n    @Output() updateProductOption = new EventEmitter<UpdateProductOptionInput & { autoUpdate: boolean }>();\r\n    selectedVariantIds: string[] = [];\r\n    formGroupMap = new Map<string, FormGroup>();\r\n    GlobalFlag = GlobalFlag;\r\n    globalTrackInventory: boolean;\r\n    globalOutOfStockThreshold: number;\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n    private facetValues: FacetValue.Fragment[];\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        private changeDetector: ChangeDetectorRef,\r\n        private modalService: ModalService,\r\n        private dataService: DataService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\r\n            this.globalTrackInventory = globalSettings.trackInventory;\r\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\r\n            this.changeDetector.markForCheck();\r\n        });\r\n        this.subscription = this.formArray.valueChanges.subscribe(() => this.changeDetector.markForCheck());\r\n\r\n        this.subscription.add(\r\n            this.formArray.valueChanges\r\n                .pipe(\r\n                    map(value => value.length),\r\n                    debounceTime(1),\r\n                    distinctUntilChanged(),\r\n                )\r\n                .subscribe(() => {\r\n                    this.buildFormGroupMap();\r\n                }),\r\n        );\r\n\r\n        this.buildFormGroupMap();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ('facets' in changes && !!changes['facets'].currentValue) {\r\n            this.facetValues = flattenFacetValues(this.facets);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    isDefaultChannel(channelCode: string): boolean {\r\n        return channelCode === DEFAULT_CHANNEL_CODE;\r\n    }\r\n\r\n    trackById(index: number, item: ProductVariant.Fragment) {\r\n        return item.id;\r\n    }\r\n\r\n    inventoryIsNotTracked(formGroup: FormGroup): boolean {\r\n        const trackInventory = formGroup.get('trackInventory')?.value;\r\n        return (\r\n            trackInventory === GlobalFlag.FALSE ||\r\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\r\n        );\r\n    }\r\n\r\n    getTaxCategoryName(group: FormGroup): string {\r\n        const control = group.get(['taxCategoryId']);\r\n        if (control && this.taxCategories) {\r\n            const match = this.taxCategories.find(t => t.id === control.value);\r\n            return match ? match.name : '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    getSaleableStockLevel(variant: ProductVariant.Fragment) {\r\n        const effectiveOutOfStockThreshold = variant.useGlobalOutOfStockThreshold\r\n            ? this.globalOutOfStockThreshold\r\n            : variant.outOfStockThreshold;\r\n        return variant.stockOnHand - variant.stockAllocated - effectiveOutOfStockThreshold;\r\n    }\r\n\r\n    areAllSelected(): boolean {\r\n        return !!this.variants && this.selectedVariantIds.length === this.variants.length;\r\n    }\r\n\r\n    onAssetChange(variantId: string, event: AssetChange) {\r\n        this.assetChange.emit({\r\n            variantId,\r\n            ...event,\r\n        });\r\n        const index = this.variants.findIndex(v => v.id === variantId);\r\n        this.formArray.at(index).markAsDirty();\r\n    }\r\n\r\n    toggleSelectAll() {\r\n        if (this.areAllSelected()) {\r\n            this.selectedVariantIds = [];\r\n        } else {\r\n            this.selectedVariantIds = this.variants.map(v => v.id);\r\n        }\r\n        this.selectionChange.emit(this.selectedVariantIds);\r\n    }\r\n\r\n    toggleSelectVariant(variantId: string) {\r\n        const index = this.selectedVariantIds.indexOf(variantId);\r\n        if (-1 < index) {\r\n            this.selectedVariantIds.splice(index, 1);\r\n        } else {\r\n            this.selectedVariantIds.push(variantId);\r\n        }\r\n        this.selectionChange.emit(this.selectedVariantIds);\r\n    }\r\n\r\n    optionGroupName(optionGroupId: string): string | undefined {\r\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\r\n        if (group) {\r\n            const translation =\r\n                group?.translations.find(t => t.languageCode === this.activeLanguage) ??\r\n                group.translations[0];\r\n            return translation.name;\r\n        }\r\n    }\r\n\r\n    optionName(option: ProductOptionFragment) {\r\n        const translation =\r\n            option.translations.find(t => t.languageCode === this.activeLanguage) ?? option.translations[0];\r\n        return translation.name;\r\n    }\r\n\r\n    pendingFacetValues(variant: ProductVariant.Fragment) {\r\n        if (this.facets) {\r\n            const formFacetValueIds = this.getFacetValueIds(variant.id);\r\n            const variantFacetValueIds = variant.facetValues.map(fv => fv.id);\r\n            return formFacetValueIds\r\n                .filter(x => !variantFacetValueIds.includes(x))\r\n                .map(id => this.facetValues.find(fv => fv.id === id))\r\n                .filter(notNullOrUndefined);\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    existingFacetValues(variant: ProductVariant.Fragment) {\r\n        const formFacetValueIds = this.getFacetValueIds(variant.id);\r\n        const intersection = [...formFacetValueIds].filter(x =>\r\n            variant.facetValues.map(fv => fv.id).includes(x),\r\n        );\r\n        return intersection\r\n            .map(id => variant.facetValues.find(fv => fv.id === id))\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    removeFacetValue(variant: ProductVariant.Fragment, facetValueId: string) {\r\n        const formGroup = this.formGroupMap.get(variant.id);\r\n        if (formGroup) {\r\n            const newValue = (formGroup.value as VariantFormValue).facetValueIds.filter(\r\n                id => id !== facetValueId,\r\n            );\r\n            formGroup.patchValue({\r\n                facetValueIds: newValue,\r\n            });\r\n            formGroup.markAsDirty();\r\n        }\r\n    }\r\n\r\n    isVariantSelected(variantId: string): boolean {\r\n        return -1 < this.selectedVariantIds.indexOf(variantId);\r\n    }\r\n\r\n    editOption(option: ProductVariant.Options) {\r\n        this.modalService\r\n            .fromComponent(UpdateProductOptionDialogComponent, {\r\n                size: 'md',\r\n                locals: {\r\n                    productOption: option,\r\n                    activeLanguage: this.activeLanguage,\r\n                    customFields: this.customOptionFields,\r\n                },\r\n            })\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.updateProductOption.emit(result);\r\n                }\r\n            });\r\n    }\r\n\r\n    private buildFormGroupMap() {\r\n        this.formGroupMap.clear();\r\n        for (const controlGroup of this.formArray.controls) {\r\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n\r\n    private getFacetValueIds(id: string): string[] {\r\n        const formValue: VariantFormValue = this.formGroupMap.get(id)?.value;\r\n        return formValue.facetValueIds;\r\n    }\r\n}\r\n","<table class=\"table\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'common.name' | translate }}</th>\r\n            <th>{{ 'catalog.sku' | translate }}</th>\r\n            <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\r\n                <th>{{ optionGroup.name }}</th>\r\n            </ng-container>\r\n            <th>{{ 'catalog.price' | translate }}</th>\r\n            <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n            <th>{{ 'common.enabled' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let variant of variants | paginate: paginationConfig; index as i; trackBy: trackByFn\">\r\n            <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <div class=\"card-img\">\r\n                        <div class=\"featured-asset\">\r\n                            <img\r\n                                *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\r\n                                [src]=\"featuredAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                            <ng-template #placeholder>\r\n                                <div class=\"placeholder\">\r\n                                    <clr-icon shape=\"image\" size=\"48\"></clr-icon>\r\n                                </div>\r\n                            </ng-template>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            [placeholder]=\"'common.name' | translate\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"text\"\r\n                            formControlName=\"sku\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            [placeholder]=\"'catalog.sku' | translate\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\r\n                    <td\r\n                        class=\"left align-middle\"\r\n                        [class.disabled]=\"!formGroup.get('enabled')!.value\"\r\n                        [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\r\n                    >\r\n                        {{ option.name }}\r\n                    </td>\r\n                </ng-container>\r\n                <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <vdr-currency-input\r\n                            *ngIf=\"!channelPriceIncludesTax\"\r\n                            clrInput\r\n                            [currencyCode]=\"variant.currencyCode\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"price\"\r\n                        ></vdr-currency-input>\r\n                        <vdr-currency-input\r\n                            *ngIf=\"channelPriceIncludesTax\"\r\n                            clrInput\r\n                            [currencyCode]=\"variant.currencyCode\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"priceWithTax\"\r\n                        ></vdr-currency-input>\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-input-container>\r\n                        <input\r\n                            clrInput\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            step=\"1\"\r\n                            formControlName=\"stockOnHand\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </clr-input-container>\r\n                </td>\r\n                <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\r\n                    <clr-toggle-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            name=\"enabled\"\r\n                            formControlName=\"enabled\"\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </clr-toggle-wrapper>\r\n                </td>\r\n            </ng-container>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n} from '@angular/core';\r\nimport { FormArray, FormGroup } from '@angular/forms';\r\nimport { Permission, ProductDetail, ProductVariant } from '@vendure/admin-ui/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\n\r\nimport { PaginationConfig, SelectedAssets } from '../product-detail/product-detail.component';\r\n\r\n@Component({\r\n    selector: 'vdr-product-variants-table',\r\n    templateUrl: './product-variants-table.component.html',\r\n    styleUrls: ['./product-variants-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\r\n    @Input('productVariantsFormArray') formArray: FormArray;\r\n    @Input() variants: ProductVariant.Fragment[];\r\n    @Input() paginationConfig: PaginationConfig;\r\n    @Input() channelPriceIncludesTax: boolean;\r\n    @Input() optionGroups: ProductDetail.OptionGroups[];\r\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\r\n    formGroupMap = new Map<string, FormGroup>();\r\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\r\n    private subscription: Subscription;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        this.subscription = this.formArray.valueChanges\r\n            .pipe(\r\n                map(value => value.length),\r\n                debounceTime(1),\r\n                distinctUntilChanged(),\r\n            )\r\n            .subscribe(() => {\r\n                this.buildFormGroupMap();\r\n            });\r\n\r\n        this.buildFormGroupMap();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    trackByFn(index: number, item: any) {\r\n        if ((item as any).id != null) {\r\n            return (item as any).id;\r\n        } else {\r\n            return index;\r\n        }\r\n    }\r\n\r\n    getFeaturedAsset(variant: ProductVariant.Fragment) {\r\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\r\n    }\r\n\r\n    optionGroupName(optionGroupId: string): string | undefined {\r\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\r\n        return group && group.name;\r\n    }\r\n\r\n    private buildFormGroupMap() {\r\n        this.formGroupMap.clear();\r\n        for (const controlGroup of this.formArray.controls) {\r\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\r\n        }\r\n        this.changeDetector.markForCheck();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { catalogRoutes } from './catalog.routes';\r\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\r\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\r\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\r\nimport { AssetsComponent } from './components/assets/assets.component';\r\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\r\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\r\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\r\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\r\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\r\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\r\nimport { ConfirmVariantDeletionDialogComponent } from './components/confirm-variant-deletion-dialog/confirm-variant-deletion-dialog.component';\r\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\r\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\r\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\r\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\r\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\r\nimport { ProductListComponent } from './components/product-list/product-list.component';\r\nimport { ProductOptionsEditorComponent } from './components/product-options-editor/product-options-editor.component';\r\nimport { ProductSearchInputComponent } from './components/product-search-input/product-search-input.component';\r\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\r\nimport { ProductVariantsListComponent } from './components/product-variants-list/product-variants-list.component';\r\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\r\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\r\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\r\n\r\nconst CATALOG_COMPONENTS = [\r\n    ProductListComponent,\r\n    ProductDetailComponent,\r\n    FacetListComponent,\r\n    FacetDetailComponent,\r\n    GenerateProductVariantsComponent,\r\n    ProductVariantsListComponent,\r\n    ApplyFacetDialogComponent,\r\n    AssetListComponent,\r\n    AssetsComponent,\r\n    VariantPriceDetailComponent,\r\n    CollectionListComponent,\r\n    CollectionDetailComponent,\r\n    CollectionTreeComponent,\r\n    CollectionTreeNodeComponent,\r\n    CollectionContentsComponent,\r\n    ProductVariantsTableComponent,\r\n    ProductSearchInputComponent,\r\n    OptionValueInputComponent,\r\n    UpdateProductOptionDialogComponent,\r\n    ProductVariantsEditorComponent,\r\n    AssignProductsToChannelDialogComponent,\r\n    AssetDetailComponent,\r\n    ConfirmVariantDeletionDialogComponent,\r\n    ProductOptionsEditorComponent,\r\n];\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(catalogRoutes)],\r\n    exports: [...CATALOG_COMPONENTS],\r\n    declarations: [...CATALOG_COMPONENTS],\r\n})\r\nexport class CatalogModule {}\r\n"]}